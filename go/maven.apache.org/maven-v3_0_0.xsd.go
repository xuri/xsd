// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Project is The <code>&lt;project&gt;</code> element specifies various attributes
//          about a project. This is the root element of the project descriptor.
//          The following table lists all of the possible child elements. Child
//          elements with children are then documented further in subsequent
//          sections.
type Project *Model

// MailingLists is Contains information about a project's mailing lists.  This
//             is used to generate the <a href="/plugins/site/index.html">front
//             page</a> of the site's web site.
type MailingLists struct {
	XMLName     xml.Name       `xml:"mailingLists"`
	MailingList []*MailingList `xml:"mailingList"`
}

// Developers is Describes the committers to a project.  This is used to
//             generate the <a href="/plugins/site/index.html">Project Team</a>
//             page of the project's web site.
type Developers struct {
	XMLName   xml.Name     `xml:"developers"`
	Developer []*Developer `xml:"developer"`
}

// Contributors is Describes the contributors to a project.  This is used to generate
//             the <a href="/plugins/site/index.html">Project Team</a> page of
//             the project's web site.
type Contributors struct {
	XMLName     xml.Name       `xml:"contributors"`
	Contributor []*Contributor `xml:"contributor"`
}

// Licenses is This element describes all of the licenses for this project.
//             Each license is described by a <code>license</code> element, which
//             is then described by additional elements (described below).  The
//             auto-generated site documentation references this information.
//             Projects should only list the license(s) that applies to the project
//             and not the licenses that apply to dependencies.
type Licenses struct {
	XMLName xml.Name   `xml:"licenses"`
	License []*License `xml:"license"`
}

// Versions is Optional. Contains information on previous versions of the
//             project. This information is used when invoking the
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
type Versions struct {
	XMLName xml.Name   `xml:"versions"`
	Version []*Version `xml:"version"`
}

// Branches is Optional. Contains information on branches of the
//             project. This information is used when invoking the
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
type Branches struct {
	XMLName xml.Name  `xml:"branches"`
	Branch  []*Branch `xml:"branch"`
}

// PackageGroups is Package groups required for complete javadocs.
type PackageGroups struct {
	XMLName      xml.Name        `xml:"packageGroups"`
	PackageGroup []*PackageGroup `xml:"packageGroup"`
}

// Reports is This element includes the specification of reports to be
//             included in a Maven-generated site.  These reports will be run
//             when a user executes <code>maven site</code>.  All of the
//             reports will be included in the navigation bar for browsing in
//             the order they are specified.
type Reports struct {
	XMLName xml.Name `xml:"reports"`
	Report  []string `xml:"report"`
}

// Properties is Project properties that will be used by various plugins
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Dependencies is <p>
//               This element describes all of the dependencies associated with a
//               project.  Each dependency is described by a
//               <code>dependency</code> element, which is then described by
//               additional elements (described below).
//             </p>
//             <p>
//               These dependencies are used to construct a classpath for your
//               project during the build process.
//             </p>
//             <p>
//               Maven can automatically download these dependencies from a
//               <a href="/user-guide.html#Remote%20Repository%20Layout">remote repository</a>.
//             </p>
//             <p>
//               The filename that Maven downloads from the repository is
//               <code>artifactId-version.jar</code> where <code>artifactId</code>
//               corresponds to the <code>artifactId</code> element and
//               <code>version</code> corresponds to the <code>version</code> element.
//             </p>
//             <p>
//               When Maven goes looking for a dependency in the remote repository,
//               it uses the dependency element to construct the URL to download
//               from. This URL is defined as:
//             </p>
//             <div class="source">
//               <pre>${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}</pre>
//             </div>
//             <p>
//               Where
//             </p>
//             <dl>
//               <dt>repo</dt>
//               <dd>
//                 is the remote repository URL specified by
//                 <code>${maven.repo.remote}</code>
//               </dd>
//
//               <dt>groupId</dt>
//               <dd>is taken from the dependency element</dd>
//
//               <dt>type</dt>
//               <dd>is taken from the dependency element</dd>
//
//               <dt>artifactId</dt>
//               <dd>is taken from the dependency element</dd>
//
//               <dt>version</dt>
//               <dd>is taken from the dependency element</dd>
//             </dl>
type Dependencies struct {
	XMLName    xml.Name      `xml:"dependencies"`
	Dependency []*Dependency `xml:"dependency"`
}

// Model is Optional. The directory on the web server where the final
//             distributions will be published.  This is used when the
//             distributions are
//             <a href="/plugins/dist/index.html">deployed</a>.
type Model struct {
	Extend                *string        `xml:"extend"`
	PomVersion            *string        `xml:"pomVersion"`
	Id                    *string        `xml:"id"`
	GroupId               *string        `xml:"groupId"`
	ArtifactId            *string        `xml:"artifactId"`
	Name                  *string        `xml:"name"`
	CurrentVersion        *string        `xml:"currentVersion"`
	ShortDescription      *string        `xml:"shortDescription"`
	Description           *string        `xml:"description"`
	Url                   *string        `xml:"url"`
	Logo                  *string        `xml:"logo"`
	IssueTrackingUrl      *string        `xml:"issueTrackingUrl"`
	InceptionYear         *string        `xml:"inceptionYear"`
	GumpRepositoryId      *string        `xml:"gumpRepositoryId"`
	SiteAddress           *string        `xml:"siteAddress"`
	SiteDirectory         *string        `xml:"siteDirectory"`
	DistributionSite      *string        `xml:"distributionSite"`
	DistributionDirectory *string        `xml:"distributionDirectory"`
	MailingLists          *MailingLists  `xml:"mailingLists"`
	Developers            *Developers    `xml:"developers"`
	Contributors          *Contributors  `xml:"contributors"`
	Licenses              *Licenses      `xml:"licenses"`
	Versions              *Versions      `xml:"versions"`
	Branches              *Branches      `xml:"branches"`
	PackageGroups         *PackageGroups `xml:"packageGroups"`
	Reports               *Reports       `xml:"reports"`
	Repository            *Repository    `xml:"repository"`
	Organization          *Organization  `xml:"organization"`
	Properties            *Properties    `xml:"properties"`
	Package               *string        `xml:"package"`
	Build                 *Build         `xml:"build"`
	Dependencies          *Dependencies  `xml:"dependencies"`
}

// SourceModifications is This element describes all of the sourceModifications associated
//             with a project.  Each source modification is described by a
//             <code>sourceModification</code> element, which is then described by
//              additional elements (described below).  These modifications are used
//             to exclude or include various source depending on the environment
//              the build is running in.
type SourceModifications struct {
	XMLName            xml.Name              `xml:"sourceModifications"`
	SourceModification []*SourceModification `xml:"sourceModification"`
}

// Resources is This element describes all of the resources associated with a
//             project or unit tests. Each resource is described by a resource
//             element, which is then described by additional elements (described
//             <a href="#resource">below</a>). These resources are used to complete
//             the jar file or to run unit test.
type Resources struct {
	XMLName  xml.Name    `xml:"resources"`
	Resource []*Resource `xml:"resource"`
}

// Build is This element specifies a directory containing integration test
//              sources of the project.
type Build struct {
	NagEmailAddress                    *string              `xml:"nagEmailAddress"`
	SourceDirectory                    *string              `xml:"sourceDirectory"`
	UnitTestSourceDirectory            *string              `xml:"unitTestSourceDirectory"`
	AspectSourceDirectory              *string              `xml:"aspectSourceDirectory"`
	IntegrationUnitTestSourceDirectory *string              `xml:"integrationUnitTestSourceDirectory"`
	SourceModifications                *SourceModifications `xml:"sourceModifications"`
	UnitTest                           *UnitTest            `xml:"unitTest"`
	DefaultGoal                        *string              `xml:"defaultGoal"`
	Resources                          *Resources           `xml:"resources"`
}

// Includes is the description
type Includes struct {
	XMLName xml.Name `xml:"includes"`
	Include []string `xml:"include"`
}

// Excludes is the description
type Excludes struct {
	XMLName xml.Name `xml:"excludes"`
	Exclude []string `xml:"exclude"`
}

// UnitTest is 3.0.0
type UnitTest struct {
	Resources *Resources `xml:"resources"`
	Includes  *Includes  `xml:"includes"`
	Excludes  *Excludes  `xml:"excludes"`
}

// Resource is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
type Resource struct {
	TargetPath *string   `xml:"targetPath"`
	Filtering  *bool     `xml:"filtering"`
	Directory  *string   `xml:"directory"`
	Includes   *Includes `xml:"includes"`
	Excludes   *Excludes `xml:"excludes"`
}

// SourceModification is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
type SourceModification struct {
	ClassName *string   `xml:"className"`
	Property  *string   `xml:"property"`
	Directory *string   `xml:"directory"`
	Includes  *Includes `xml:"includes"`
	Excludes  *Excludes `xml:"excludes"`
}

// Organization is The URL to the organization's logo image.  This can be an URL relative
//             to the base directory of the generated web site,
//             (e.g., <code>/images/org-logo.png</code>) or an absolute URL
//             (e.g., <code>http://my.corp/logo.png</code>).  This value is used
//             when generating the project documentation.
type Organization struct {
	Name *string `xml:"name"`
	Url  *string `xml:"url"`
	Logo *string `xml:"logo"`
}

// Roles is The roles the contributor plays in the project.  Each role is
//             described by a <code>role</code> element, the body of which is a
//             role name.
type Roles struct {
	XMLName xml.Name `xml:"roles"`
	Role    []string `xml:"role"`
}

// Developer is The URL of the organization.
type Developer struct {
	Id              *string     `xml:"id"`
	Name            *string     `xml:"name"`
	Email           *string     `xml:"email"`
	Url             *string     `xml:"url"`
	Organization    *string     `xml:"organization"`
	OrganizationUrl *string     `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        *string     `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// Dependency is The type of dependency. This defaults to <code>jar</code>.
//             Known recognised dependency types are:
//             <ul>
//             <li><code>jar</code></li>
//             <li><code>ejb</code></li>
//             <li><code>plugin</code></li>
//             </ul>
type Dependency struct {
	Id         *string     `xml:"id"`
	GroupId    *string     `xml:"groupId"`
	ArtifactId *string     `xml:"artifactId"`
	Version    *string     `xml:"version"`
	Url        *string     `xml:"url"`
	Jar        *string     `xml:"jar"`
	Type       *string     `xml:"type"`
	Properties *Properties `xml:"properties"`
}

// Repository is The URL to the project's browsable CVS repository.
type Repository struct {
	Connection          *string `xml:"connection"`
	DeveloperConnection *string `xml:"developerConnection"`
	Url                 *string `xml:"url"`
}

// PackageGroup is the description
type PackageGroup struct {
	Title    *string `xml:"title"`
	Packages *string `xml:"packages"`
}

// Version is A unique identifier for a version.  This ID is
//             used to specify the version that
//             <a href="/plugins/dist/index.html">
//               <code>maven:dist</code>
//             </a> builds.
type Version struct {
	Name *string `xml:"name"`
	Tag  *string `xml:"tag"`
	Id   *string `xml:"id"`
}

// License is Addendum information pertaining to this license.
type License struct {
	Name         *string `xml:"name"`
	Url          *string `xml:"url"`
	Distribution *string `xml:"distribution"`
	Comments     *string `xml:"comments"`
}

// Contributor is The URL of the organization.
type Contributor struct {
	Name            *string     `xml:"name"`
	Email           *string     `xml:"email"`
	Url             *string     `xml:"url"`
	Organization    *string     `xml:"organization"`
	OrganizationUrl *string     `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        *string     `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// Branch is The branch tag in the version control system (e.g. cvs) used by the
//             project for the source code associated with this branch of the
//             project.
type Branch struct {
	Tag *string `xml:"tag"`
}

// OtherArchives is The link to other URLs where you can browse the list archive.
type OtherArchives struct {
	XMLName      xml.Name `xml:"otherArchives"`
	OtherArchive []string `xml:"otherArchive"`
}

// MailingList is The link to a URL where you can browse the mailing list archive.
type MailingList struct {
	Name          *string        `xml:"name"`
	Subscribe     *string        `xml:"subscribe"`
	Unsubscribe   *string        `xml:"unsubscribe"`
	Post          *string        `xml:"post"`
	Archive       *string        `xml:"archive"`
	OtherArchives *OtherArchives `xml:"otherArchives"`
}
