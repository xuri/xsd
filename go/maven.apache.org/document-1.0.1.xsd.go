// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Document is Describes the overall document model.
type Document *DocumentModel

// DocumentModel is The meta data to construct a cover page for the document.
type DocumentModel struct {
	OutputNameAttr string         `xml:"outputName,attr,omitempty"`
	Meta           *DocumentMeta  `xml:"meta,omitempty"`
	Toc            *DocumentTOC   `xml:"toc,omitempty"`
	Cover          *DocumentCover `xml:"cover,omitempty"`
}

// DocumentTOC is TOC item.
type DocumentTOC struct {
	NameAttr  string             `xml:"name,attr,omitempty"`
	DepthAttr int                `xml:"depth,attr,omitempty"`
	Item      []*DocumentTOCItem `xml:"item,omitempty"`
}

// DocumentTOCItem is A table of content item containing sub-items.
type DocumentTOCItem struct {
	NameAttr     string             `xml:"name,attr,omitempty"`
	RefAttr      string             `xml:"ref,attr,omitempty"`
	CollapseAttr bool               `xml:"collapse,attr,omitempty"`
	Item         []*DocumentTOCItem `xml:"item,omitempty"`
}

// Authors is The authors that appear on the cover page.
//             Only used if author is not given.
type Authors struct {
	XMLName xml.Name          `xml:"authors"`
	Author  []*DocumentAuthor `xml:"author,omitempty"`
}

// DocumentCover is The date as String (recommended format is ISO 8601) to appear on the cover.
//             Only used if <code>coverDate</code> is not set.
//             @since 1.1.1
type DocumentCover struct {
	CoverTitle    string   `xml:"coverTitle,omitempty"`
	CoverSubTitle string   `xml:"coverSubTitle,omitempty"`
	CoverVersion  string   `xml:"coverVersion,omitempty"`
	CoverType     string   `xml:"coverType,omitempty"`
	CoverDate     string   `xml:"coverDate,omitempty"`
	Coverdate     string   `xml:"coverdate,omitempty"`
	Authors       *Authors `xml:"authors,omitempty"`
	Author        string   `xml:"author,omitempty"`
	ProjectName   string   `xml:"projectName,omitempty"`
	ProjectLogo   string   `xml:"projectLogo,omitempty"`
	CompanyName   string   `xml:"companyName,omitempty"`
	CompanyLogo   string   `xml:"companyLogo,omitempty"`
}

// DocumentAuthor is The state or province of the address of the author, if applicable.
type DocumentAuthor struct {
	FirstName   string `xml:"firstName,omitempty"`
	LastName    string `xml:"lastName,omitempty"`
	Name        string `xml:"name,omitempty"`
	Initials    string `xml:"initials,omitempty"`
	Title       string `xml:"title,omitempty"`
	Position    string `xml:"position,omitempty"`
	Email       string `xml:"email,omitempty"`
	PhoneNumber string `xml:"phoneNumber,omitempty"`
	FaxNumber   string `xml:"faxNumber,omitempty"`
	CompanyName string `xml:"companyName,omitempty"`
	Street      string `xml:"street,omitempty"`
	City        string `xml:"city,omitempty"`
	PostalCode  string `xml:"postalCode,omitempty"`
	Country     string `xml:"country,omitempty"`
	State       string `xml:"state,omitempty"`
}

// KeyWords is A keyword pertaining to the document. The metadata can contain any
//             number of keyword elements, each element specifying one keyword.
type KeyWords struct {
	XMLName xml.Name `xml:"keyWords"`
	KeyWord []string `xml:"keyWord,omitempty"`
}

// DocumentMeta is The unique author of the document, usually as a String of "firstName lastName". For
//             more authors, you could use the &lt;authors/&gt; tag.
type DocumentMeta struct {
	Title              string                      `xml:"title,omitempty"`
	Author             string                      `xml:"author,omitempty"`
	Authors            *Authors                    `xml:"authors,omitempty"`
	Subject            string                      `xml:"subject,omitempty"`
	Keywords           string                      `xml:"keywords,omitempty"`
	KeyWords           *KeyWords                   `xml:"keyWords,omitempty"`
	PageSize           string                      `xml:"pageSize,omitempty"`
	Generator          string                      `xml:"generator,omitempty"`
	Description        string                      `xml:"description,omitempty"`
	InitialCreator     string                      `xml:"initialCreator,omitempty"`
	Creator            string                      `xml:"creator,omitempty"`
	PrintedBy          string                      `xml:"printedBy,omitempty"`
	CreationDate       string                      `xml:"creationDate,omitempty"`
	Creationdate       string                      `xml:"creationdate,omitempty"`
	Date               string                      `xml:"date,omitempty"`
	Modifydate         string                      `xml:"modifydate,omitempty"`
	PrintDate          string                      `xml:"printDate,omitempty"`
	Printdate          string                      `xml:"printdate,omitempty"`
	Template           *DocumentTemplate           `xml:"template,omitempty"`
	HyperlinkBehaviour *DocumentHyperlinkBehaviour `xml:"hyperlinkBehaviour,omitempty"`
	Language           string                      `xml:"language,omitempty"`
	EditingCycles      int64                       `xml:"editingCycles,omitempty"`
	EditingDuration    int64                       `xml:"editingDuration,omitempty"`
	DocumentStatistic  *DocumentStatistic          `xml:"documentStatistic,omitempty"`
	Confidential       bool                        `xml:"confidential,omitempty"`
	Draft              bool                        `xml:"draft,omitempty"`
}

// DocumentTemplate is A template that was used to create the document.
type DocumentTemplate struct {
	HrefAttr       string `xml:"href,attr,omitempty"`
	TitleAttr      string `xml:"title,attr,omitempty"`
	DateAttr       string `xml:"date,attr,omitempty"`
	ModifydateAttr string `xml:"modifydate,attr,omitempty"`
}

// DocumentStatistic is Statistical attributes of the document.
type DocumentStatistic struct {
	PageCountAttr                   int64 `xml:"pageCount,attr,omitempty"`
	TableCountAttr                  int64 `xml:"tableCount,attr,omitempty"`
	DrawCountAttr                   int64 `xml:"drawCount,attr,omitempty"`
	ImageCountAttr                  int64 `xml:"imageCount,attr,omitempty"`
	ObjectCountAttr                 int64 `xml:"objectCount,attr,omitempty"`
	OleObjectCountAttr              int64 `xml:"oleObjectCount,attr,omitempty"`
	ParagraphCountAttr              int64 `xml:"paragraphCount,attr,omitempty"`
	WordCountAttr                   int64 `xml:"wordCount,attr,omitempty"`
	CharacterCountAttr              int64 `xml:"characterCount,attr,omitempty"`
	RowCountAttr                    int64 `xml:"rowCount,attr,omitempty"`
	FrameCountAttr                  int64 `xml:"frameCount,attr,omitempty"`
	SentenceCountAttr               int64 `xml:"sentenceCount,attr,omitempty"`
	SyllableCountAttr               int64 `xml:"syllableCount,attr,omitempty"`
	NonWhitespaceCharacterCountAttr int64 `xml:"nonWhitespaceCharacterCount,attr,omitempty"`
}

// DocumentHyperlinkBehaviour is Specifies the default behavior for hyperlinks in the document.
type DocumentHyperlinkBehaviour struct {
	TargetFrameAttr string `xml:"targetFrame,attr,omitempty"`
}
