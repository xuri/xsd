// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Project ...
type Project struct {
	XMLName               xml.Name      `xml:"project"`
	Extend                string        `xml:"extend,omitempty"`
	PomVersion            string        `xml:"pomVersion"`
	Id                    string        `xml:"id"`
	Name                  string        `xml:"name"`
	GroupId               string        `xml:"groupId,omitempty"`
	CurrentVersion        string        `xml:"currentVersion"`
	Organization          *Organization `xml:"organization"`
	InceptionYear         string        `xml:"inceptionYear"`
	Package               string        `xml:"package,omitempty"`
	Logo                  string        `xml:"logo,omitempty"`
	GumpRepositoryId      string        `xml:"gumpRepositoryId,omitempty"`
	Description           string        `xml:"description,omitempty"`
	ShortDescription      string        `xml:"shortDescription"`
	Url                   string        `xml:"url,omitempty"`
	IssueTrackingUrl      string        `xml:"issueTrackingUrl,omitempty"`
	SiteAddress           string        `xml:"siteAddress,omitempty"`
	SiteDirectory         string        `xml:"siteDirectory,omitempty"`
	DistributionSite      string        `xml:"distributionSite,omitempty"`
	DistributionDirectory string        `xml:"distributionDirectory,omitempty"`
	Repository            *Repository   `xml:"repository,omitempty"`
	Versions              *Versions     `xml:"versions,omitempty"`
	Branches              *Branches     `xml:"branches,omitempty"`
	MailingLists          *MailingLists `xml:"mailingLists,omitempty"`
	Developers            *Developers   `xml:"developers"`
	Contributors          *Contributors `xml:"contributors,omitempty"`
	Licenses              *Licenses     `xml:"licenses,omitempty"`
	Dependencies          *Dependencies `xml:"dependencies,omitempty"`
	Build                 *Build        `xml:"build"`
	Reports               *Reports      `xml:"reports,omitempty"`
	Properties            *Properties   `xml:"properties,omitempty"`
}

// Extend ...
type Extend string

// Connection ...
type Connection string

// DeveloperConnection ...
type DeveloperConnection string

// CurrentVersion ...
type CurrentVersion string

// Description ...
type Description string

// DistributionSite ...
type DistributionSite string

// DistributionDirectory ...
type DistributionDirectory string

// Name ...
type Name string

// GroupId ...
type GroupId string

// ArtifactId ...
type ArtifactId string

// GumpRepositoryId ...
type GumpRepositoryId string

// Id ...
type Id string

// InceptionYear ...
type InceptionYear string

// IssueTrackingUrl ...
type IssueTrackingUrl string

// Logo ...
type Logo string

// Package ...
type Package string

// PomVersion ...
type PomVersion string

// ShortDescription ...
type ShortDescription string

// SiteAddress ...
type SiteAddress string

// SiteDirectory ...
type SiteDirectory string

// Url ...
type Url string

// Repository ...
type Repository struct {
	XMLName             xml.Name `xml:"repository"`
	Connection          string   `xml:"connection"`
	DeveloperConnection string   `xml:"developerConnection,omitempty"`
	Url                 string   `xml:"url,omitempty"`
}

// Organization ...
type Organization struct {
	XMLName xml.Name `xml:"organization"`
	Name    string   `xml:"name"`
	Url     string   `xml:"url,omitempty"`
	Logo    string   `xml:"logo,omitempty"`
}

// Versions ...
type Versions struct {
	XMLName xml.Name   `xml:"versions"`
	Version []*Version `xml:"version,omitempty"`
}

// Version ...
type Version struct {
	XMLName xml.Name `xml:"version"`
	Id      string   `xml:"id"`
	Name    string   `xml:"name"`
	Tag     string   `xml:"tag"`
}

// Tag ...
type Tag string

// Branches ...
type Branches struct {
	XMLName xml.Name  `xml:"branches"`
	Branch  []*Branch `xml:"branch,omitempty"`
}

// Branch ...
type Branch struct {
	XMLName xml.Name `xml:"branch"`
	Tag     string   `xml:"tag"`
}

// MailingLists ...
type MailingLists struct {
	XMLName     xml.Name       `xml:"mailingLists"`
	MailingList []*MailingList `xml:"mailingList,omitempty"`
}

// MailingList ...
type MailingList struct {
	XMLName     xml.Name `xml:"mailingList"`
	Name        string   `xml:"name"`
	Subscribe   string   `xml:"subscribe"`
	Unsubscribe string   `xml:"unsubscribe"`
	Archive     string   `xml:"archive,omitempty"`
}

// Subscribe ...
type Subscribe string

// Unsubscribe ...
type Unsubscribe string

// Archive ...
type Archive string

// Developers ...
type Developers struct {
	XMLName   xml.Name     `xml:"developers"`
	Developer []*Developer `xml:"developer,omitempty"`
}

// Developer ...
type Developer struct {
	XMLName        xml.Name `xml:"developer"`
	ContactDetails *ContactDetails
	Name           string `xml:"name"`
	Id             string `xml:"id"`
}

// ContactDetails ...
type ContactDetails struct {
	XMLName      xml.Name `xml:"contactDetails"`
	Email        string
	Organization string
	Roles        *Roles
	Url          string
	Timezone     float64
}

// Email ...
type Email string

// Roles ...
type Roles struct {
	XMLName xml.Name `xml:"roles"`
	Role    []string `xml:"role,omitempty"`
}

// Role ...
type Role string

// TimezoneType ...
type TimezoneType float64

// Timezone ...
type Timezone float64

// Contributors ...
type Contributors struct {
	XMLName     xml.Name       `xml:"contributors"`
	Contributor []*Contributor `xml:"contributor,omitempty"`
}

// Contributor ...
type Contributor struct {
	XMLName        xml.Name `xml:"contributor"`
	ContactDetails *ContactDetails
	Name           string `xml:"name"`
}

// Licenses ...
type Licenses struct {
	XMLName xml.Name   `xml:"licenses"`
	License []*License `xml:"license,omitempty"`
}

// License ...
type License struct {
	XMLName      xml.Name    `xml:"license"`
	Name         string      `xml:"name,omitempty"`
	Url          string      `xml:"url,omitempty"`
	Distribution interface{} `xml:"distribution,omitempty"`
}

// Distribution ...
type Distribution interface{}

// Dependencies ...
type Dependencies struct {
	XMLName    xml.Name      `xml:"dependencies"`
	Dependency []*Dependency `xml:"dependency,omitempty"`
}

// Dependency ...
type Dependency struct {
	XMLName    xml.Name    `xml:"dependency"`
	Id         string      `xml:"id,omitempty"`
	GroupId    string      `xml:"groupId,omitempty"`
	ArtifactId string      `xml:"artifactId,omitempty"`
	Version    string      `xml:"version"`
	Jar        string      `xml:"jar,omitempty"`
	Type       string      `xml:"type,omitempty"`
	Url        string      `xml:"url,omitempty"`
	Properties *Properties `xml:"properties,omitempty"`
}

// Type ...
type Type string

// Jar ...
type Jar string

// Build ...
type Build struct {
	XMLName                            xml.Name             `xml:"build"`
	NagEmailAddress                    string               `xml:"nagEmailAddress,omitempty"`
	SourceDirectory                    string               `xml:"sourceDirectory,omitempty"`
	SourceModifications                *SourceModifications `xml:"sourceModifications,omitempty"`
	UnitTestSourceDirectory            string               `xml:"unitTestSourceDirectory,omitempty"`
	IntegrationUnitTestSourceDirectory string               `xml:"integrationUnitTestSourceDirectory,omitempty"`
	AspectSourceDirectory              string               `xml:"aspectSourceDirectory,omitempty"`
	UnitTest                           *UnitTest            `xml:"unitTest,omitempty"`
	Resources                          *Resources           `xml:"resources,omitempty"`
}

// NagEmailAddress ...
type NagEmailAddress string

// SourceDirectory ...
type SourceDirectory string

// SourceModifications ...
type SourceModifications struct {
	XMLName            xml.Name              `xml:"sourceModifications"`
	SourceModification []*SourceModification `xml:"sourceModification,omitempty"`
}

// SourceModification ...
type SourceModification struct {
	XMLName   xml.Name    `xml:"sourceModification"`
	ClassName string      `xml:"className"`
	Includes  []*Includes `xml:"includes,omitempty"`
	Excludes  []*Excludes `xml:"excludes,omitempty"`
}

// UnitTestSourceDirectory ...
type UnitTestSourceDirectory string

// IntegrationUnitTestSourceDirectory ...
type IntegrationUnitTestSourceDirectory string

// AspectSourceDirectory ...
type AspectSourceDirectory string

// UnitTest ...
type UnitTest struct {
	XMLName   xml.Name    `xml:"unitTest"`
	Includes  []*Includes `xml:"includes,omitempty"`
	Excludes  []*Excludes `xml:"excludes,omitempty"`
	Resources *Resources  `xml:"resources,omitempty"`
}

// Includes ...
type Includes struct {
	XMLName xml.Name `xml:"includes"`
	Include []string `xml:"include,omitempty"`
}

// Excludes ...
type Excludes struct {
	XMLName xml.Name `xml:"excludes"`
	Exclude []string `xml:"exclude,omitempty"`
}

// Include ...
type Include string

// Exclude ...
type Exclude string

// Resources ...
type Resources struct {
	XMLName  xml.Name    `xml:"resources"`
	Resource []*Resource `xml:"resource,omitempty"`
}

// Directory ...
type Directory string

// TargetPath ...
type TargetPath string

// Filtering ...
type Filtering bool

// Resource ...
type Resource struct {
	XMLName    xml.Name    `xml:"resource"`
	Directory  string      `xml:"directory,omitempty"`
	TargetPath string      `xml:"targetPath,omitempty"`
	Includes   []*Includes `xml:"includes,omitempty"`
	Excludes   []*Excludes `xml:"excludes,omitempty"`
	Filtering  bool        `xml:"filtering,omitempty"`
}

// Reports ...
type Reports struct {
	XMLName xml.Name `xml:"reports"`
	Report  []string `xml:"report,omitempty"`
}

// Properties ...
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Classloader ...
type Classloader interface{}
