// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Project is The <code>&lt;project&gt;</code> element is the root of the descriptor.
//         The following table lists all of the possible child elements.
type Project *Model

// Licenses is This element describes all of the licenses for this project.
//             Each license is described by a <code>license</code> element, which
//             is then described by additional elements.
//             Projects should only list the license(s) that applies to the project
//             and not the licenses that apply to dependencies.
//             If multiple licenses are listed, it is assumed that the user can select
//             any of them, not that they must accept all.
type Licenses struct {
	XMLName xml.Name   `xml:"licenses"`
	License []*License `xml:"license"`
}

// Developers is Describes the committers of a project.
type Developers struct {
	XMLName   xml.Name     `xml:"developers"`
	Developer []*Developer `xml:"developer"`
}

// Contributors is Describes the contributors to a project that are not yet committers.
type Contributors struct {
	XMLName     xml.Name       `xml:"contributors"`
	Contributor []*Contributor `xml:"contributor"`
}

// MailingLists is Contains information about a project's mailing lists.
type MailingLists struct {
	XMLName     xml.Name       `xml:"mailingLists"`
	MailingList []*MailingList `xml:"mailingList"`
}

// Modules is The modules (sometimes called subprojects) to build as a part of this
//             project. Each module listed is a relative path to the directory containing the module.
//             To be consistent with the way default urls are calculated from parent, it is recommended
//             to have module names match artifact ids.
type Modules struct {
	XMLName xml.Name `xml:"modules"`
	Module  []string `xml:"module"`
}

// Properties is Properties that can be used throughout the POM as a substitution, and
//             are used as filters in resources if enabled.
//             The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Dependencies is This element describes all of the dependencies associated with a
//             project.
//             These dependencies are used to construct a classpath for your
//             project during the build process. They are automatically downloaded from the
//             repositories defined in this project.
//             See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
//             dependency mechanism</a> for more information.
type Dependencies struct {
	XMLName    xml.Name      `xml:"dependencies"`
	Dependency []*Dependency `xml:"dependency"`
}

// Repositories is The lists of the remote repositories for discovering dependencies and
//             extensions.
type Repositories struct {
	XMLName    xml.Name      `xml:"repositories"`
	Repository []*Repository `xml:"repository"`
}

// PluginRepositories is The lists of the remote repositories for discovering plugins for builds and
//             reports.
type PluginRepositories struct {
	XMLName          xml.Name      `xml:"pluginRepositories"`
	PluginRepository []*Repository `xml:"pluginRepository"`
}

// Reports is <b>Deprecated</b>. Now ignored by Maven.
type Reports struct {
	XMLName xml.Name `xml:"reports"`
}

// Profiles is A listing of project-local build profiles which will modify the build process
//             when activated.
type Profiles struct {
	XMLName xml.Name   `xml:"profiles"`
	Profile []*Profile `xml:"profile"`
}

// Model is This element describes various attributes of the organization to which the
//             project belongs. These attributes are utilized when documentation is created (for
//             copyright notices and links).
type Model struct {
	ChildProjectUrlInheritAppendPathAttr string                  `xml:"child.project.url.inherit.append.path,attr,omitempty"`
	ModelVersion                         string                  `xml:"modelVersion"`
	Parent                               *Parent                 `xml:"parent"`
	GroupId                              string                  `xml:"groupId"`
	ArtifactId                           string                  `xml:"artifactId"`
	Version                              string                  `xml:"version"`
	Packaging                            string                  `xml:"packaging"`
	Name                                 string                  `xml:"name"`
	Description                          string                  `xml:"description"`
	Url                                  string                  `xml:"url"`
	InceptionYear                        string                  `xml:"inceptionYear"`
	Organization                         *Organization           `xml:"organization"`
	Licenses                             *Licenses               `xml:"licenses"`
	Developers                           *Developers             `xml:"developers"`
	Contributors                         *Contributors           `xml:"contributors"`
	MailingLists                         *MailingLists           `xml:"mailingLists"`
	Prerequisites                        *Prerequisites          `xml:"prerequisites"`
	Modules                              *Modules                `xml:"modules"`
	Scm                                  *Scm                    `xml:"scm"`
	IssueManagement                      *IssueManagement        `xml:"issueManagement"`
	CiManagement                         *CiManagement           `xml:"ciManagement"`
	DistributionManagement               *DistributionManagement `xml:"distributionManagement"`
	Properties                           *Properties             `xml:"properties"`
	DependencyManagement                 *DependencyManagement   `xml:"dependencyManagement"`
	Dependencies                         *Dependencies           `xml:"dependencies"`
	Repositories                         *Repositories           `xml:"repositories"`
	PluginRepositories                   *PluginRepositories     `xml:"pluginRepositories"`
	Build                                *Build                  `xml:"build"`
	Reports                              *Reports                `xml:"reports"`
	Reporting                            *Reporting              `xml:"reporting"`
	Profiles                             *Profiles               `xml:"profiles"`
}

// License is Addendum information pertaining to this license.
type License struct {
	Name         string `xml:"name"`
	Url          string `xml:"url"`
	Distribution string `xml:"distribution"`
	Comments     string `xml:"comments"`
}

// Notifiers is Configuration for notifying developers/users when a build is unsuccessful,
//             including user information and notification mode.
type Notifiers struct {
	XMLName  xml.Name    `xml:"notifiers"`
	Notifier []*Notifier `xml:"notifier"`
}

// CiManagement is URL for the continuous integration system used by the project if it has a web
//             interface.
type CiManagement struct {
	System    string     `xml:"system"`
	Url       string     `xml:"url"`
	Notifiers *Notifiers `xml:"notifiers"`
}

// Configuration is Extended configuration specific to this notifier goes here.
type Configuration struct {
	XMLName xml.Name `xml:"configuration"`
}

// Notifier is <b>Deprecated</b>. Where to send the notification to - eg email address.
type Notifier struct {
	Type          string         `xml:"type"`
	SendOnError   bool           `xml:"sendOnError"`
	SendOnFailure bool           `xml:"sendOnFailure"`
	SendOnSuccess bool           `xml:"sendOnSuccess"`
	SendOnWarning bool           `xml:"sendOnWarning"`
	Address       string         `xml:"address"`
	Configuration *Configuration `xml:"configuration"`
}

// Scm is The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             scm's <code>child.scm.url.inherit.append.path="false"</code>
type Scm struct {
	ChildScmConnectionInheritAppendPathAttr          string `xml:"child.scm.connection.inherit.append.path,attr,omitempty"`
	ChildScmDeveloperConnectionInheritAppendPathAttr string `xml:"child.scm.developerConnection.inherit.append.path,attr,omitempty"`
	ChildScmUrlInheritAppendPathAttr                 string `xml:"child.scm.url.inherit.append.path,attr,omitempty"`
	Connection                                       string `xml:"connection"`
	DeveloperConnection                              string `xml:"developerConnection"`
	Tag                                              string `xml:"tag"`
	Url                                              string `xml:"url"`
}

// IssueManagement is URL for the issue management system used by the project.
type IssueManagement struct {
	System string `xml:"system"`
	Url    string `xml:"url"`
}

// DependencyManagement is Section for management of default dependency information for use in a group of
//         POMs.
type DependencyManagement struct {
	Dependencies *Dependencies `xml:"dependencies"`
}

// Exclusions is Lists a set of artifacts that should be excluded from this dependency's
//             artifact list when it comes to calculating transitive dependencies.
type Exclusions struct {
	XMLName   xml.Name     `xml:"exclusions"`
	Exclusion []*Exclusion `xml:"exclusion"`
}

// Dependency is FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
//             and may be replaced in later versions. This specifies the path on the filesystem
//             for this dependency.
//             Requires an absolute path for the value, not relative.
//             Use a property that gives the machine specific absolute path,
//             e.g. <code>${java.home}</code>.
type Dependency struct {
	GroupId    string      `xml:"groupId"`
	ArtifactId string      `xml:"artifactId"`
	Version    string      `xml:"version"`
	Type       string      `xml:"type"`
	Classifier string      `xml:"classifier"`
	Scope      string      `xml:"scope"`
	SystemPath string      `xml:"systemPath"`
	Exclusions *Exclusions `xml:"exclusions"`
	Optional   string      `xml:"optional"`
}

// Exclusion is The group ID of the project to exclude.
type Exclusion struct {
	ArtifactId string `xml:"artifactId"`
	GroupId    string `xml:"groupId"`
}

// Parent is The relative path of the parent <code>pom.xml</code> file within the check out.
//             If not specified, it defaults to <code>../pom.xml</code>.
//             Maven looks for the parent POM first in this location on
//             the filesystem, then the local repository, and lastly in the remote repo.
//             <code>relativePath</code> allows you to select a different location,
//             for example when your structure is flat, or deeper without an intermediate parent POM.
//             However, the group ID, artifact ID and version are still required,
//             and must match the file in the location given or it will revert to the repository for the POM.
//             This feature is only for enhancing the development in a local checkout of that project.
//             Set the value to an empty string in case you want to disable the feature and always resolve
//             the parent POM from the repositories.
type Parent struct {
	GroupId      string `xml:"groupId"`
	ArtifactId   string `xml:"artifactId"`
	Version      string `xml:"version"`
	RelativePath string `xml:"relativePath"`
}

// Roles is The roles the contributor plays in the project. Each role is described by a
//             <code>role</code> element, the body of which is a role name. This can also be used to
//             describe the contribution.
type Roles struct {
	XMLName xml.Name `xml:"roles"`
	Role    []string `xml:"role"`
}

// Developer is The URL of the organization.
type Developer struct {
	Id              string      `xml:"id"`
	Name            string      `xml:"name"`
	Email           string      `xml:"email"`
	Url             string      `xml:"url"`
	Organization    string      `xml:"organization"`
	OrganizationUrl string      `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        string      `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// OtherArchives is The link to alternate URLs where you can browse the list archive.
type OtherArchives struct {
	XMLName      xml.Name `xml:"otherArchives"`
	OtherArchive []string `xml:"otherArchive"`
}

// MailingList is The link to a URL where you can browse the mailing list archive.
type MailingList struct {
	Name          string         `xml:"name"`
	Subscribe     string         `xml:"subscribe"`
	Unsubscribe   string         `xml:"unsubscribe"`
	Post          string         `xml:"post"`
	Archive       string         `xml:"archive"`
	OtherArchives *OtherArchives `xml:"otherArchives"`
}

// Contributor is The URL of the organization.
type Contributor struct {
	Name            string      `xml:"name"`
	Email           string      `xml:"email"`
	Url             string      `xml:"url"`
	Organization    string      `xml:"organization"`
	OrganizationUrl string      `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        string      `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// Organization is The URL to the organization's home page.
type Organization struct {
	Name string `xml:"name"`
	Url  string `xml:"url"`
}

// DistributionManagement is Gives the status of this artifact in the remote repository.
//             This must not be set in your local project, as it is updated by
//             tools placing it in the reposiory. Valid values are: <code>none</code> (default),
//             <code>converted</code> (repository manager converted this from an Maven 1 POM),
//             <code>partner</code>
//             (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
//             instance), <code>verified</code> (has been hand verified as correct and final).
type DistributionManagement struct {
	Repository         *DeploymentRepository `xml:"repository"`
	SnapshotRepository *DeploymentRepository `xml:"snapshotRepository"`
	Site               *Site                 `xml:"site"`
	DownloadUrl        string                `xml:"downloadUrl"`
	Relocation         *Relocation           `xml:"relocation"`
	Status             string                `xml:"status"`
}

// DeploymentRepository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
type DeploymentRepository struct {
	UniqueVersion bool              `xml:"uniqueVersion"`
	Releases      *RepositoryPolicy `xml:"releases"`
	Snapshots     *RepositoryPolicy `xml:"snapshots"`
	Id            string            `xml:"id"`
	Name          string            `xml:"name"`
	Url           string            `xml:"url"`
	Layout        string            `xml:"layout"`
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails. Valid values are
//             <code>ignore</code>
//             ,
//             <code>fail</code>
//             or
//             <code>warn</code>
//             (the default).
type RepositoryPolicy struct {
	Enabled        string `xml:"enabled"`
	UpdatePolicy   string `xml:"updatePolicy"`
	ChecksumPolicy string `xml:"checksumPolicy"`
}

// Relocation is An additional message to show the user about the move, such as the reason.
type Relocation struct {
	GroupId    string `xml:"groupId"`
	ArtifactId string `xml:"artifactId"`
	Version    string `xml:"version"`
	Message    string `xml:"message"`
}

// Site is The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             site's <code>child.site.url.inherit.append.path="false"</code>
type Site struct {
	ChildSiteUrlInheritAppendPathAttr string `xml:"child.site.url.inherit.append.path,attr,omitempty"`
	Id                                string `xml:"id"`
	Name                              string `xml:"name"`
	Url                               string `xml:"url"`
}

// Plugins is The reporting plugins to use and their configuration.
type Plugins struct {
	XMLName xml.Name        `xml:"plugins"`
	Plugin  []*ReportPlugin `xml:"plugin"`
}

// Reporting is Where to store all of the generated reports. The default is
//             <code>${project.build.directory}/site</code>.
type Reporting struct {
	ExcludeDefaults string   `xml:"excludeDefaults"`
	OutputDirectory string   `xml:"outputDirectory"`
	Plugins         *Plugins `xml:"plugins"`
}

// ReportSets is Multiple specifications of a set of reports, each having (possibly) different
//             configuration. This is the reporting parallel to an <code>execution</code> in the build.
type ReportSets struct {
	XMLName   xml.Name     `xml:"reportSets"`
	ReportSet []*ReportSet `xml:"reportSet"`
}

// ReportPlugin is The version of the reporting plugin to be used.
type ReportPlugin struct {
	GroupId       string         `xml:"groupId"`
	ArtifactId    string         `xml:"artifactId"`
	Version       string         `xml:"version"`
	ReportSets    *ReportSets    `xml:"reportSets"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// ReportSet is The unique id for this report set, to be used during POM inheritance and profile injection
//             for merging of report sets.
type ReportSet struct {
	Id            string         `xml:"id"`
	Reports       *Reports       `xml:"reports"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// Profile is Information required to build the project.
type Profile struct {
	Id                     string                  `xml:"id"`
	Activation             *Activation             `xml:"activation"`
	Build                  *BuildBase              `xml:"build"`
	Modules                *Modules                `xml:"modules"`
	DistributionManagement *DistributionManagement `xml:"distributionManagement"`
	Properties             *Properties             `xml:"properties"`
	DependencyManagement   *DependencyManagement   `xml:"dependencyManagement"`
	Dependencies           *Dependencies           `xml:"dependencies"`
	Repositories           *Repositories           `xml:"repositories"`
	PluginRepositories     *PluginRepositories     `xml:"pluginRepositories"`
	Reports                *Reports                `xml:"reports"`
	Reporting              *Reporting              `xml:"reporting"`
}

// Activation is Specifies that this profile will be activated based on existence of a file.
type Activation struct {
	ActiveByDefault bool                `xml:"activeByDefault"`
	Jdk             string              `xml:"jdk"`
	Os              *ActivationOS       `xml:"os"`
	Property        *ActivationProperty `xml:"property"`
	File            *ActivationFile     `xml:"file"`
}

// ActivationProperty is The value of the property required to activate a profile.
type ActivationProperty struct {
	Name  string `xml:"name"`
	Value string `xml:"value"`
}

// ActivationFile is The name of the file that must exist to activate the profile.
type ActivationFile struct {
	Missing string `xml:"missing"`
	Exists  string `xml:"exists"`
}

// ActivationOS is The version of the operating system to be used to activate the
//           profile.
type ActivationOS struct {
	Name    string `xml:"name"`
	Family  string `xml:"family"`
	Arch    string `xml:"arch"`
	Version string `xml:"version"`
}

// Repository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
type Repository struct {
	Releases  *RepositoryPolicy `xml:"releases"`
	Snapshots *RepositoryPolicy `xml:"snapshots"`
	Id        string            `xml:"id"`
	Name      string            `xml:"name"`
	Url       string            `xml:"url"`
	Layout    string            `xml:"layout"`
}

// Resources is This element describes all of the classpath resources such as properties
//             files associated with a project. These resources are often included in the final
//             package.
//             The default value is <code>src/main/resources</code>.
type Resources struct {
	XMLName  xml.Name    `xml:"resources"`
	Resource []*Resource `xml:"resource"`
}

// TestResources is This element describes all of the classpath resources such as properties
//             files associated with a project's unit tests.
//             The default value is <code>src/test/resources</code>.
type TestResources struct {
	XMLName      xml.Name    `xml:"testResources"`
	TestResource []*Resource `xml:"testResource"`
}

// Filters is The list of filter properties files that are used when filtering is enabled.
type Filters struct {
	XMLName xml.Name `xml:"filters"`
	Filter  []string `xml:"filter"`
}

// BuildBase is The default goal (or phase in Maven 2) to execute when none is specified for
//             the project. Note that in case of a multi-module build, only the default goal of the top-level
//             project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
//             multiple goals/phases can be separated by whitespace.
type BuildBase struct {
	DefaultGoal      string            `xml:"defaultGoal"`
	Resources        *Resources        `xml:"resources"`
	TestResources    *TestResources    `xml:"testResources"`
	Directory        string            `xml:"directory"`
	FinalName        string            `xml:"finalName"`
	Filters          *Filters          `xml:"filters"`
	PluginManagement *PluginManagement `xml:"pluginManagement"`
	Plugins          *Plugins          `xml:"plugins"`
}

// Executions is Multiple specifications of a set of goals to execute during the build
//             lifecycle, each having (possibly) a different configuration.
type Executions struct {
	XMLName   xml.Name           `xml:"executions"`
	Execution []*PluginExecution `xml:"execution"`
}

// Goals is <b>Deprecated</b>. Unused by Maven.
type Goals struct {
	XMLName xml.Name `xml:"goals"`
}

// Plugin is Whether to load Maven extensions (such as packaging and type handlers) from
//             this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
//             of this field is <code>String</code> for technical reasons, the semantic type is actually
//             <code>Boolean</code>. Default value is <code>false</code>.
type Plugin struct {
	GroupId       string         `xml:"groupId"`
	ArtifactId    string         `xml:"artifactId"`
	Version       string         `xml:"version"`
	Extensions    string         `xml:"extensions"`
	Executions    *Executions    `xml:"executions"`
	Dependencies  *Dependencies  `xml:"dependencies"`
	Goals         *Goals         `xml:"goals"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// PluginExecution is The build lifecycle phase to bind the goals in this execution to. If omitted,
//             the goals will be bound to the default phase specified by the plugin.
type PluginExecution struct {
	Id            string         `xml:"id"`
	Phase         string         `xml:"phase"`
	Goals         *Goals         `xml:"goals"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// Includes is A list of patterns to include, e.g. <code>**&#47;*.xml</code>.
type Includes struct {
	XMLName xml.Name `xml:"includes"`
	Include []string `xml:"include"`
}

// Excludes is A list of patterns to exclude, e.g. <code>**&#47;*.xml</code>
type Excludes struct {
	XMLName xml.Name `xml:"excludes"`
	Exclude []string `xml:"exclude"`
}

// Resource is Describe the directory where the resources are stored. The path is relative
//             to the POM.
type Resource struct {
	TargetPath string    `xml:"targetPath"`
	Filtering  string    `xml:"filtering"`
	Directory  string    `xml:"directory"`
	Includes   *Includes `xml:"includes"`
	Excludes   *Excludes `xml:"excludes"`
}

// PluginManagement is Section for management of default plugin information for use in a group of POMs.
type PluginManagement struct {
	Plugins *Plugins `xml:"plugins"`
}

// Prerequisites is For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
//             Maven required to use the resulting plugin.<br>
type Prerequisites struct {
	Maven string `xml:"maven"`
}

// Extensions is A set of build extensions to use from this project.
type Extensions struct {
	XMLName   xml.Name     `xml:"extensions"`
	Extension []*Extension `xml:"extension"`
}

// Build is The directory where compiled test classes are placed.
//             The default value is <code>target/test-classes</code>.
type Build struct {
	SourceDirectory       string            `xml:"sourceDirectory"`
	ScriptSourceDirectory string            `xml:"scriptSourceDirectory"`
	TestSourceDirectory   string            `xml:"testSourceDirectory"`
	OutputDirectory       string            `xml:"outputDirectory"`
	TestOutputDirectory   string            `xml:"testOutputDirectory"`
	Extensions            *Extensions       `xml:"extensions"`
	DefaultGoal           string            `xml:"defaultGoal"`
	Resources             *Resources        `xml:"resources"`
	TestResources         *TestResources    `xml:"testResources"`
	Directory             string            `xml:"directory"`
	FinalName             string            `xml:"finalName"`
	Filters               *Filters          `xml:"filters"`
	PluginManagement      *PluginManagement `xml:"pluginManagement"`
	Plugins               *Plugins          `xml:"plugins"`
}

// Extension is The version of the extension.
type Extension struct {
	GroupId    string `xml:"groupId"`
	ArtifactId string `xml:"artifactId"`
	Version    string `xml:"version"`
}
