// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// ContentType is media type, as per [RFC2045]
type ContentType string

// ContentTypes is comma-separated list of media types, as per [RFC2045]
type ContentTypes string

// Charset is a character encoding, as per [RFC2045]
type Charset string

// Charsets is a space separated list of character encodings, as per [RFC2045]
type Charsets string

// LanguageCode is a language code, as per [RFC3066]
type LanguageCode string

// Character is a single character, as per section 2.2 of [XML]
type Character string

// Number is one or more digits
type Number int

// TabindexNumber is tabindex attribute specifies the position of the current element
//       in the tabbing order for the current document. This value must be
//       a number between 0 and 32767. User agents should ignore leading zeros.
type TabindexNumber int

// LinkTypes is space-separated list of link types
type LinkTypes []string

// MediaDesc is single or comma-separated list of media descriptors
type MediaDesc string

// URI is a Uniform Resource Identifier, see [RFC2396]
type URI string

// UriList is a space separated list of Uniform Resource Identifiers
type UriList string

// Datetime is date and time information. ISO date format
type Datetime string

// Script is script expression
type Script string

// StyleSheet is style sheet data
type StyleSheet string

// Text is used for titles etc.
type Text string

// FrameTarget is render in this frame
type FrameTarget string

// Length is nn for pixels or nn% for percentage length
type Length string

// MultiLength is pixel, percentage, or relative
type MultiLength string

// Pixels is integer representing length in pixels
type Pixels int

// Shape ...
type Shape string

// Coords is comma separated list of lengths
type Coords string

// ImgAlign is used for object, applet, img, input and iframe
type ImgAlign string

// Color is a color using sRGB: #RRGGBB as Hex values
//
//       There are also 16 widely known color names with their sRGB values:
//
//       Black  = #000000    Green  = #008000
//       Silver = #C0C0C0    Lime   = #00FF00
//       Gray   = #808080    Olive  = #808000
//       White  = #FFFFFF    Yellow = #FFFF00
//       Maroon = #800000    Navy   = #000080
//       Red    = #FF0000    Blue   = #0000FF
//       Purple = #800080    Teal   = #008080
//       Fuchsia= #FF00FF    Aqua   = #00FFFF
type Color string

// Coreattrs is core attributes common to most elements
//       id       document-wide unique id
//       class    space separated list of classes
//       style    associated style info
//       title    advisory title/amplification
type Coreattrs struct {
	XMLName   xml.Name `xml:"coreattrs"`
	IdAttr    string   `xml:"id,attr,omitempty"`
	ClassAttr []string `xml:"class,attr,omitempty"`
	StyleAttr string   `xml:"style,attr,omitempty"`
	TitleAttr string   `xml:"title,attr,omitempty"`
}

// I18n is internationalization attributes
//       lang        language code (backwards compatible)
//       xml:lang    language code (as per XML 1.0 spec)
//       dir         direction for weak/neutral text
type I18n struct {
	XMLName     xml.Name `xml:"i18n"`
	LangAttr    string   `xml:"lang,attr,omitempty"`
	XmlLangAttr *Lang    `xml:"xml:lang,attr,omitempty"`
	DirAttr     string   `xml:"dir,attr,omitempty"`
}

// Events is attributes for common UI events
//       onclick     a pointer button was clicked
//       ondblclick  a pointer button was double clicked
//       onmousedown a pointer button was pressed down
//       onmouseup   a pointer button was released
//       onmousemove a pointer was moved onto the element
//       onmouseout  a pointer was moved away from the element
//       onkeypress  a key was pressed and released
//       onkeydown   a key was pressed down
//       onkeyup     a key was released
type Events struct {
	XMLName         xml.Name `xml:"events"`
	OnclickAttr     string   `xml:"onclick,attr,omitempty"`
	OndblclickAttr  string   `xml:"ondblclick,attr,omitempty"`
	OnmousedownAttr string   `xml:"onmousedown,attr,omitempty"`
	OnmouseupAttr   string   `xml:"onmouseup,attr,omitempty"`
	OnmouseoverAttr string   `xml:"onmouseover,attr,omitempty"`
	OnmousemoveAttr string   `xml:"onmousemove,attr,omitempty"`
	OnmouseoutAttr  string   `xml:"onmouseout,attr,omitempty"`
	OnkeypressAttr  string   `xml:"onkeypress,attr,omitempty"`
	OnkeydownAttr   string   `xml:"onkeydown,attr,omitempty"`
	OnkeyupAttr     string   `xml:"onkeyup,attr,omitempty"`
}

// Focus is attributes for elements that can get the focus
//       accesskey   accessibility key character
//       tabindex    position in tabbing order
//       onfocus     the element got the focus
//       onblur      the element lost the focus
type Focus struct {
	XMLName       xml.Name `xml:"focus"`
	AccesskeyAttr string   `xml:"accesskey,attr,omitempty"`
	TabindexAttr  int      `xml:"tabindex,attr,omitempty"`
	OnfocusAttr   string   `xml:"onfocus,attr,omitempty"`
	OnblurAttr    string   `xml:"onblur,attr,omitempty"`
}

// Attrs ...
type Attrs struct {
	XMLName xml.Name `xml:"attrs"`
}

// TextAlign is text alignment for p, div, h1-h6. The default is
//       align="left" for ltr headings, "right" for rtl
type TextAlign struct {
	AlignAttr string `xml:"align,attr,omitempty"`
}

// SpecialExtra ...
type SpecialExtra struct {
	XMLName xml.Name `xml:"special.extra"`
	Object  *Object
	Applet  *Applet
	Img     *Img
	Map     *Map
	Iframe  *Iframe
	Source  *Source
}

// SpecialBasic ...
type SpecialBasic struct {
	XMLName xml.Name `xml:"special.basic"`
	Br      *Br
	Span    *Span
	Bdo     *Bdo
}

// Special ...
type Special struct {
	XMLName      xml.Name `xml:"special"`
	SpecialBasic *SpecialBasic
	SpecialExtra *SpecialExtra
}

// FontstyleExtra ...
type FontstyleExtra struct {
	XMLName  xml.Name `xml:"fontstyle.extra"`
	Big      *Big
	Small    *Small
	Font     *Font
	Basefont *Basefont
}

// FontstyleBasic ...
type FontstyleBasic struct {
	XMLName xml.Name `xml:"fontstyle.basic"`
	Tt      *Tt
	I       *I
	B       *B
	U       *U
	S       *S
	Strike  *Strike
}

// Fontstyle ...
type Fontstyle struct {
	XMLName        xml.Name `xml:"fontstyle"`
	FontstyleBasic *FontstyleBasic
	FontstyleExtra *FontstyleExtra
}

// PhraseExtra ...
type PhraseExtra struct {
	XMLName xml.Name `xml:"phrase.extra"`
	Sub     *Sub
	Sup     *Sup
}

// PhraseBasic ...
type PhraseBasic struct {
	XMLName xml.Name `xml:"phrase.basic"`
	Em      *Em
	Strong  *Strong
	Dfn     *Dfn
	Code    *Code
	Q       *Q
	Samp    *Samp
	Kbd     *Kbd
	Var     *Var
	Cite    *Cite
	Abbr    *Abbr
	Acronym *Acronym
}

// Phrase ...
type Phrase struct {
	XMLName     xml.Name `xml:"phrase"`
	PhraseBasic *PhraseBasic
	PhraseExtra *PhraseExtra
}

// InlineForms ...
type InlineForms struct {
	XMLName  xml.Name `xml:"inline.forms"`
	Input    *Input
	Select   *Select
	Textarea *Textarea
	Label    *Label
	Button   *Button
}

// MiscInline ...
type MiscInline struct {
	XMLName xml.Name `xml:"misc.inline"`
	Ins     *Ins
	Del     *Del
	Script  *Script
}

// Misc ...
type Misc struct {
	XMLName    xml.Name `xml:"misc"`
	Noscript   *Noscript
	MiscInline *MiscInline
}

// Inline ...
type Inline struct {
	XMLName     xml.Name `xml:"inline"`
	A           *A
	Special     *Special
	Fontstyle   *Fontstyle
	Phrase      *Phrase
	InlineForms *InlineForms
}

// Inline2 is "Inline" covers inline or "text-level" element
type Inline2 struct {
	XMLName    xml.Name `xml:"Inline"`
	Inline     []*Inline
	MiscInline []*MiscInline
}

// Heading ...
type Heading struct {
	XMLName xml.Name `xml:"heading"`
	H1      *H1
	H2      *H2
	H3      *H3
	H4      *H4
	H5      *H5
	H6      *H6
}

// Lists ...
type Lists struct {
	XMLName xml.Name `xml:"lists"`
	Ul      *Ul
	Ol      *Ol
	Dl      *Dl
	Menu    *Menu
	Dir     *Dir
}

// Blocktext ...
type Blocktext struct {
	XMLName    xml.Name `xml:"blocktext"`
	Pre        *Pre
	Hr         *Hr
	Blockquote *Blockquote
	Address    *Address
	Center     *Center
	Noframes   *Noframes
}

// Block ...
type Block struct {
	XMLName   xml.Name `xml:"block"`
	P         *P
	Div       *Div
	Isindex   *Isindex
	Fieldset  *Fieldset
	Table     *Table
	Heading   *Heading
	Lists     *Lists
	Blocktext *Blocktext
}

// Flow is "Flow" mixes block and inline and is used for list items etc.
type Flow struct {
	Block  []*Block
	Inline []*Inline
	Misc   []*Misc
	Form   []*Form `xml:"form"`
}

// AContent is a elements use "Inline" excluding a
type AContent struct {
	XMLName     xml.Name `xml:"a.content"`
	Special     []*Special
	Fontstyle   []*Fontstyle
	Phrase      []*Phrase
	InlineForms []*InlineForms
	MiscInline  []*MiscInline
}

// PreContent is pre uses "Inline" excluding img, object, applet, big, small,
//       font, or basefont
type PreContent struct {
	XMLName        xml.Name `xml:"pre.content"`
	SpecialBasic   []*SpecialBasic
	FontstyleBasic []*FontstyleBasic
	PhraseBasic    []*PhraseBasic
	InlineForms    []*InlineForms
	MiscInline     []*MiscInline
	A              []*A `xml:"a"`
}

// FormContent is form uses "Flow" excluding form
type FormContent struct {
	XMLName xml.Name `xml:"form.content"`
	Block   []*Block
	Inline  []*Inline
	Misc    []*Misc
}

// ButtonContent is button uses "Flow" but excludes a, form, form controls, iframe
type ButtonContent struct {
	XMLName   xml.Name `xml:"button.content"`
	Heading   []*Heading
	Lists     []*Lists
	Blocktext []*Blocktext
	Fontstyle []*Fontstyle
	Phrase    []*Phrase
	Misc      []*Misc
	P         []*P      `xml:"p"`
	Div       []*Div    `xml:"div"`
	Table     []*Table  `xml:"table"`
	Br        []*Br     `xml:"br"`
	Span      []*Span   `xml:"span"`
	Bdo       []*Bdo    `xml:"bdo"`
	Object    []*Object `xml:"object"`
	Applet    []*Applet `xml:"applet"`
	Img       []*Img    `xml:"img"`
	Map       []*Map    `xml:"map"`
}

// HeadMisc ...
type HeadMisc struct {
	XMLName xml.Name `xml:"head.misc"`
	Script  []*Script
	Style   []*Style
	Meta    []*Meta
	Link    []*Link
	Object  []*Object
	Isindex []*Isindex
}

// Head is content model is "head.misc" combined with a single
//       title and an optional base element in any order
type Head struct {
	XMLName     xml.Name `xml:"head"`
	I18n        *I18n
	IdAttr      string `xml:"id,attr,omitempty"`
	ProfileAttr string `xml:"profile,attr,omitempty"`
	HeadMisc    *HeadMisc
	Title       *Title `xml:"title"`
	Base        *Base  `xml:"base"`
}

// Title is The title element is not considered part of the flow of text.
//       It should be displayed, for example as the page header or
//       window title. Exactly one title is required per document.
type Title struct {
	XMLName xml.Name `xml:"title"`
	I18n    *I18n
	IdAttr  string `xml:"id,attr,omitempty"`
}

// Base is document base URI
type Base struct {
	XMLName    xml.Name `xml:"base"`
	IdAttr     string   `xml:"id,attr,omitempty"`
	HrefAttr   string   `xml:"href,attr,omitempty"`
	TargetAttr string   `xml:"target,attr,omitempty"`
}

// Meta is generic metainformation
type Meta struct {
	XMLName       xml.Name `xml:"meta"`
	I18n          *I18n
	IdAttr        string      `xml:"id,attr,omitempty"`
	HttpequivAttr interface{} `xml:"http-equiv,attr,omitempty"`
	NameAttr      interface{} `xml:"name,attr,omitempty"`
	ContentAttr   interface{} `xml:"content,attr"`
	SchemeAttr    interface{} `xml:"scheme,attr,omitempty"`
}

// Link is Relationship values can be used in principle:
//
//       a) for document specific toolbars/menus when used
//          with the link element in document head e.g.
//            start, contents, previous, next, index, end, help
//       b) to link to a separate style sheet (rel="stylesheet")
//       c) to make a link to a script (rel="script")
//       d) by stylesheets to control how collections of
//          html nodes are rendered into printed documents
//       e) to make a link to a printable version of this document
//          e.g. a PostScript or PDF version (rel="alternate" media="print")
type Link struct {
	XMLName      xml.Name `xml:"link"`
	Attrs        *Attrs
	CharsetAttr  string   `xml:"charset,attr,omitempty"`
	HrefAttr     string   `xml:"href,attr,omitempty"`
	HreflangAttr string   `xml:"hreflang,attr,omitempty"`
	TypeAttr     string   `xml:"type,attr,omitempty"`
	RelAttr      []string `xml:"rel,attr,omitempty"`
	RevAttr      []string `xml:"rev,attr,omitempty"`
	MediaAttr    string   `xml:"media,attr,omitempty"`
	TargetAttr   string   `xml:"target,attr,omitempty"`
}

// Style is style info, which may include CDATA sections
type Style struct {
	XMLName      xml.Name `xml:"style"`
	I18n         *I18n
	IdAttr       string `xml:"id,attr,omitempty"`
	TypeAttr     string `xml:"type,attr"`
	MediaAttr    string `xml:"media,attr,omitempty"`
	TitleAttr    string `xml:"title,attr,omitempty"`
	XmlSpaceAttr *Space `xml:"xml:space,attr,omitempty"`
}

// Script2 is script statements, which may include CDATA sections
type Script2 struct {
	XMLName      xml.Name    `xml:"script"`
	IdAttr       string      `xml:"id,attr,omitempty"`
	CharsetAttr  string      `xml:"charset,attr,omitempty"`
	TypeAttr     string      `xml:"type,attr"`
	LanguageAttr interface{} `xml:"language,attr,omitempty"`
	SrcAttr      string      `xml:"src,attr,omitempty"`
	DeferAttr    string      `xml:"defer,attr,omitempty"`
	XmlSpaceAttr *Space      `xml:"xml:space,attr,omitempty"`
}

// Noscript is alternate content container for non script-based rendering
type Noscript struct {
	XMLName xml.Name `xml:"noscript"`
	Attrs   *Attrs
	*Flow
}

// Iframe is inline subwindow
type Iframe struct {
	XMLName          xml.Name `xml:"iframe"`
	Coreattrs        *Coreattrs
	LongdescAttr     string `xml:"longdesc,attr,omitempty"`
	NameAttr         string `xml:"name,attr,omitempty"`
	SrcAttr          string `xml:"src,attr,omitempty"`
	FrameborderAttr  string `xml:"frameborder,attr,omitempty"`
	MarginwidthAttr  int    `xml:"marginwidth,attr,omitempty"`
	MarginheightAttr int    `xml:"marginheight,attr,omitempty"`
	ScrollingAttr    string `xml:"scrolling,attr,omitempty"`
	AlignAttr        string `xml:"align,attr,omitempty"`
	HeightAttr       string `xml:"height,attr,omitempty"`
	WidthAttr        string `xml:"width,attr,omitempty"`
	*Flow
}

// Noframes is alternate content container for non frame-based rendering
type Noframes struct {
	XMLName xml.Name `xml:"noframes"`
	Attrs   *Attrs
	*Flow
}

// Div is generic language/style container
type Div struct {
	XMLName   xml.Name `xml:"div"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Flow
}

// P ...
type P struct {
	XMLName   xml.Name `xml:"p"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H1 ...
type H1 struct {
	XMLName   xml.Name `xml:"h1"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H2 ...
type H2 struct {
	XMLName   xml.Name `xml:"h2"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H3 ...
type H3 struct {
	XMLName   xml.Name `xml:"h3"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H4 ...
type H4 struct {
	XMLName   xml.Name `xml:"h4"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H5 ...
type H5 struct {
	XMLName   xml.Name `xml:"h5"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// H6 ...
type H6 struct {
	XMLName   xml.Name `xml:"h6"`
	Attrs     *Attrs
	TextAlign *TextAlign
	*Inline
}

// ULStyle is Unordered list bullet styles
type ULStyle string

// Ul is Unordered list
type Ul struct {
	XMLName     xml.Name `xml:"ul"`
	Attrs       *Attrs
	TypeAttr    string `xml:"type,attr,omitempty"`
	CompactAttr string `xml:"compact,attr,omitempty"`
	Li          []*Li  `xml:"li"`
}

// OLStyle is Ordered list numbering style
//
//       1   arabic numbers      1, 2, 3, ...
//       a   lower alpha         a, b, c, ...
//       A   upper alpha         A, B, C, ...
//       i   lower roman         i, ii, iii, ...
//       I   upper roman         I, II, III, ...
//
//       The style is applied to the sequence number which by default
//       is reset to 1 for the first list item in an ordered list.
type OLStyle string

// Ol is Ordered (numbered) list
type Ol struct {
	XMLName     xml.Name `xml:"ol"`
	Attrs       *Attrs
	TypeAttr    string `xml:"type,attr,omitempty"`
	CompactAttr string `xml:"compact,attr,omitempty"`
	StartAttr   int    `xml:"start,attr,omitempty"`
	Li          []*Li  `xml:"li"`
}

// Menu is single column list (DEPRECATED)
type Menu struct {
	XMLName     xml.Name `xml:"menu"`
	Attrs       *Attrs
	CompactAttr string `xml:"compact,attr,omitempty"`
	Li          []*Li  `xml:"li"`
}

// Dir is multiple column list (DEPRECATED)
type Dir struct {
	XMLName     xml.Name `xml:"dir"`
	Attrs       *Attrs
	CompactAttr string `xml:"compact,attr,omitempty"`
	Li          []*Li  `xml:"li"`
}

// LIStyle is LIStyle is constrained to: "(ULStyle|OLStyle)"
type LIStyle string

// Li is list item
type Li struct {
	XMLName   xml.Name `xml:"li"`
	Attrs     *Attrs
	TypeAttr  string `xml:"type,attr,omitempty"`
	ValueAttr int    `xml:"value,attr,omitempty"`
	*Flow
}

// Dl ...
type Dl struct {
	XMLName     xml.Name `xml:"dl"`
	Attrs       *Attrs
	CompactAttr string `xml:"compact,attr,omitempty"`
	Dt          []*Dt  `xml:"dt"`
	Dd          []*Dd  `xml:"dd"`
}

// Dt ...
type Dt struct {
	XMLName xml.Name `xml:"dt"`
	Attrs   *Attrs
	*Inline
}

// Dd ...
type Dd struct {
	XMLName xml.Name `xml:"dd"`
	Attrs   *Attrs
	*Flow
}

// Address is information on author
type Address struct {
	XMLName    xml.Name `xml:"address"`
	Attrs      *Attrs
	Inline     []*Inline
	MiscInline []*MiscInline
	P          []*P `xml:"p"`
}

// Hr ...
type Hr struct {
	XMLName     xml.Name `xml:"hr"`
	Attrs       *Attrs
	AlignAttr   string `xml:"align,attr,omitempty"`
	NoshadeAttr string `xml:"noshade,attr,omitempty"`
	SizeAttr    int    `xml:"size,attr,omitempty"`
	WidthAttr   string `xml:"width,attr,omitempty"`
}

// Pre is content is "Inline" excluding
//          "img|object|applet|big|small|sub|sup|font|basefont"
type Pre struct {
	XMLName      xml.Name `xml:"pre"`
	Attrs        *Attrs
	WidthAttr    int    `xml:"width,attr,omitempty"`
	XmlSpaceAttr *Space `xml:"xml:space,attr,omitempty"`
	*PreContent
}

// Blockquote ...
type Blockquote struct {
	XMLName  xml.Name `xml:"blockquote"`
	Attrs    *Attrs
	CiteAttr string `xml:"cite,attr,omitempty"`
	*Flow
}

// Center is center content
type Center struct {
	XMLName xml.Name `xml:"center"`
	Attrs   *Attrs
	*Flow
}

// Ins ...
type Ins struct {
	XMLName      xml.Name `xml:"ins"`
	Attrs        *Attrs
	CiteAttr     string `xml:"cite,attr,omitempty"`
	DatetimeAttr string `xml:"datetime,attr,omitempty"`
	*Flow
}

// Del ...
type Del struct {
	XMLName      xml.Name `xml:"del"`
	Attrs        *Attrs
	CiteAttr     string `xml:"cite,attr,omitempty"`
	DatetimeAttr string `xml:"datetime,attr,omitempty"`
	*Flow
}

// A is content is "Inline" except that anchors shouldn't be nested
type A struct {
	XMLName      xml.Name `xml:"a"`
	Attrs        *Attrs
	Focus        *Focus
	CharsetAttr  string   `xml:"charset,attr,omitempty"`
	TypeAttr     string   `xml:"type,attr,omitempty"`
	NameAttr     string   `xml:"name,attr,omitempty"`
	HrefAttr     string   `xml:"href,attr,omitempty"`
	HreflangAttr string   `xml:"hreflang,attr,omitempty"`
	RelAttr      []string `xml:"rel,attr,omitempty"`
	RevAttr      []string `xml:"rev,attr,omitempty"`
	ShapeAttr    string   `xml:"shape,attr,omitempty"`
	CoordsAttr   string   `xml:"coords,attr,omitempty"`
	TargetAttr   string   `xml:"target,attr,omitempty"`
	*AContent
}

// Span is generic language/style container
type Span struct {
	XMLName xml.Name `xml:"span"`
	Attrs   *Attrs
	*Inline
}

// Bdo is I18N BiDi over-ride
type Bdo struct {
	XMLName     xml.Name `xml:"bdo"`
	Coreattrs   *Coreattrs
	Events      *Events
	LangAttr    string `xml:"lang,attr,omitempty"`
	XmlLangAttr *Lang  `xml:"xml:lang,attr,omitempty"`
	DirAttr     string `xml:"dir,attr"`
	*Inline
}

// Br is forced line break
type Br struct {
	XMLName   xml.Name `xml:"br"`
	Coreattrs *Coreattrs
	ClearAttr string `xml:"clear,attr,omitempty"`
}

// Em is emphasis
type Em struct {
	XMLName xml.Name `xml:"em"`
	Attrs   *Attrs
	*Inline
}

// Strong is strong emphasis
type Strong struct {
	XMLName xml.Name `xml:"strong"`
	Attrs   *Attrs
	*Inline
}

// Dfn is definitional
type Dfn struct {
	XMLName xml.Name `xml:"dfn"`
	Attrs   *Attrs
	*Inline
}

// Code is program code
type Code struct {
	XMLName xml.Name `xml:"code"`
	Attrs   *Attrs
	*Inline
}

// Samp is sample
type Samp struct {
	XMLName xml.Name `xml:"samp"`
	Attrs   *Attrs
	*Inline
}

// Kbd is something user would type
type Kbd struct {
	XMLName xml.Name `xml:"kbd"`
	Attrs   *Attrs
	*Inline
}

// Var is variable
type Var struct {
	XMLName xml.Name `xml:"var"`
	Attrs   *Attrs
	*Inline
}

// Cite is citation
type Cite struct {
	XMLName xml.Name `xml:"cite"`
	Attrs   *Attrs
	*Inline
}

// Abbr is abbreviation
type Abbr struct {
	XMLName xml.Name `xml:"abbr"`
	Attrs   *Attrs
	*Inline
}

// Acronym is acronym
type Acronym struct {
	XMLName xml.Name `xml:"acronym"`
	Attrs   *Attrs
	*Inline
}

// Q is inlined quote
type Q struct {
	XMLName  xml.Name `xml:"q"`
	Attrs    *Attrs
	CiteAttr string `xml:"cite,attr,omitempty"`
	*Inline
}

// Sub is subscript
type Sub struct {
	XMLName xml.Name `xml:"sub"`
	Attrs   *Attrs
	*Inline
}

// Sup is superscript
type Sup struct {
	XMLName xml.Name `xml:"sup"`
	Attrs   *Attrs
	*Inline
}

// Tt is fixed pitch font
type Tt struct {
	XMLName xml.Name `xml:"tt"`
	Attrs   *Attrs
	*Inline
}

// I is italic font
type I struct {
	XMLName xml.Name `xml:"i"`
	Attrs   *Attrs
	*Inline
}

// B is bold font
type B struct {
	XMLName xml.Name `xml:"b"`
	Attrs   *Attrs
	*Inline
}

// Big is bigger font
type Big struct {
	XMLName xml.Name `xml:"big"`
	Attrs   *Attrs
	*Inline
}

// Small is smaller font
type Small struct {
	XMLName xml.Name `xml:"small"`
	Attrs   *Attrs
	*Inline
}

// U is underline
type U struct {
	XMLName xml.Name `xml:"u"`
	Attrs   *Attrs
	*Inline
}

// S is strike-through
type S struct {
	XMLName xml.Name `xml:"s"`
	Attrs   *Attrs
	*Inline
}

// Strike is strike-through
type Strike struct {
	XMLName xml.Name `xml:"strike"`
	Attrs   *Attrs
	*Inline
}

// Basefont is base font size
type Basefont struct {
	XMLName   xml.Name    `xml:"basefont"`
	IdAttr    string      `xml:"id,attr,omitempty"`
	SizeAttr  interface{} `xml:"size,attr"`
	ColorAttr string      `xml:"color,attr,omitempty"`
	FaceAttr  interface{} `xml:"face,attr,omitempty"`
}

// Font is local change to font
type Font struct {
	XMLName   xml.Name `xml:"font"`
	Coreattrs *Coreattrs
	I18n      *I18n
	SizeAttr  interface{} `xml:"size,attr,omitempty"`
	ColorAttr string      `xml:"color,attr,omitempty"`
	FaceAttr  interface{} `xml:"face,attr,omitempty"`
	*Inline
}

// Object ...
type Object struct {
	XMLName      xml.Name `xml:"object"`
	Attrs        *Attrs
	DeclareAttr  string `xml:"declare,attr,omitempty"`
	ClassidAttr  string `xml:"classid,attr,omitempty"`
	CodebaseAttr string `xml:"codebase,attr,omitempty"`
	DataAttr     string `xml:"data,attr,omitempty"`
	TypeAttr     string `xml:"type,attr,omitempty"`
	CodetypeAttr string `xml:"codetype,attr,omitempty"`
	ArchiveAttr  string `xml:"archive,attr,omitempty"`
	StandbyAttr  string `xml:"standby,attr,omitempty"`
	HeightAttr   string `xml:"height,attr,omitempty"`
	WidthAttr    string `xml:"width,attr,omitempty"`
	UsemapAttr   string `xml:"usemap,attr,omitempty"`
	NameAttr     string `xml:"name,attr,omitempty"`
	TabindexAttr int    `xml:"tabindex,attr,omitempty"`
	AlignAttr    string `xml:"align,attr,omitempty"`
	BorderAttr   int    `xml:"border,attr,omitempty"`
	HspaceAttr   int    `xml:"hspace,attr,omitempty"`
	VspaceAttr   int    `xml:"vspace,attr,omitempty"`
	Block        []*Block
	Inline       []*Inline
	Misc         []*Misc
	Param        []*Param `xml:"param"`
	Form         []*Form  `xml:"form"`
}

// Param is param is used to supply a named property value.
//       In XML it would seem natural to follow RDF and support an
//       abbreviated syntax where the param elements are replaced
//       by attribute value pairs on the object start tag.
type Param struct {
	XMLName       xml.Name    `xml:"param"`
	IdAttr        string      `xml:"id,attr,omitempty"`
	NameAttr      interface{} `xml:"name,attr"`
	ValueAttr     interface{} `xml:"value,attr,omitempty"`
	ValuetypeAttr string      `xml:"valuetype,attr,omitempty"`
	TypeAttr      string      `xml:"type,attr,omitempty"`
}

// Applet ...
type Applet struct {
	XMLName      xml.Name `xml:"applet"`
	Coreattrs    *Coreattrs
	CodebaseAttr string      `xml:"codebase,attr,omitempty"`
	ArchiveAttr  interface{} `xml:"archive,attr,omitempty"`
	CodeAttr     interface{} `xml:"code,attr,omitempty"`
	ObjectAttr   interface{} `xml:"object,attr,omitempty"`
	AltAttr      string      `xml:"alt,attr,omitempty"`
	NameAttr     string      `xml:"name,attr,omitempty"`
	WidthAttr    string      `xml:"width,attr"`
	HeightAttr   string      `xml:"height,attr"`
	AlignAttr    string      `xml:"align,attr,omitempty"`
	HspaceAttr   int         `xml:"hspace,attr,omitempty"`
	VspaceAttr   int         `xml:"vspace,attr,omitempty"`
	Block        []*Block
	Inline       []*Inline
	Misc         []*Misc
	Param        []*Param `xml:"param"`
	Form         []*Form  `xml:"form"`
}

// Img ...
type Img struct {
	XMLName      xml.Name `xml:"img"`
	Attrs        *Attrs
	SrcAttr      string `xml:"src,attr"`
	AltAttr      string `xml:"alt,attr"`
	NameAttr     string `xml:"name,attr,omitempty"`
	LongdescAttr string `xml:"longdesc,attr,omitempty"`
	HeightAttr   string `xml:"height,attr,omitempty"`
	WidthAttr    string `xml:"width,attr,omitempty"`
	UsemapAttr   string `xml:"usemap,attr,omitempty"`
	IsmapAttr    string `xml:"ismap,attr,omitempty"`
	AlignAttr    string `xml:"align,attr,omitempty"`
	BorderAttr   string `xml:"border,attr,omitempty"`
	HspaceAttr   int    `xml:"hspace,attr,omitempty"`
	VspaceAttr   int    `xml:"vspace,attr,omitempty"`
}

// Map ...
type Map struct {
	XMLName   xml.Name `xml:"map"`
	I18n      *I18n
	Events    *Events
	IdAttr    string      `xml:"id,attr"`
	ClassAttr interface{} `xml:"class,attr,omitempty"`
	StyleAttr string      `xml:"style,attr,omitempty"`
	TitleAttr string      `xml:"title,attr,omitempty"`
	NameAttr  interface{} `xml:"name,attr,omitempty"`
	Block     []*Block
	Misc      []*Misc
	Form      []*Form `xml:"form"`
	Area      []*Area `xml:"area"`
}

// Area ...
type Area struct {
	XMLName    xml.Name `xml:"area"`
	Attrs      *Attrs
	Focus      *Focus
	ShapeAttr  string `xml:"shape,attr,omitempty"`
	CoordsAttr string `xml:"coords,attr,omitempty"`
	HrefAttr   string `xml:"href,attr,omitempty"`
	NohrefAttr string `xml:"nohref,attr,omitempty"`
	AltAttr    string `xml:"alt,attr"`
	TargetAttr string `xml:"target,attr,omitempty"`
}

// Form ...
type Form struct {
	XMLName           xml.Name `xml:"form"`
	Attrs             *Attrs
	ActionAttr        string `xml:"action,attr"`
	MethodAttr        string `xml:"method,attr,omitempty"`
	EnctypeAttr       string `xml:"enctype,attr,omitempty"`
	OnsubmitAttr      string `xml:"onsubmit,attr,omitempty"`
	OnresetAttr       string `xml:"onreset,attr,omitempty"`
	AcceptAttr        string `xml:"accept,attr,omitempty"`
	AcceptcharsetAttr string `xml:"accept-charset,attr,omitempty"`
	TargetAttr        string `xml:"target,attr,omitempty"`
	*FormContent
}

// Label is Each label must not contain more than ONE field
//       Label elements shouldn't be nested.
type Label struct {
	XMLName       xml.Name `xml:"label"`
	Attrs         *Attrs
	ForAttr       string `xml:"for,attr,omitempty"`
	AccesskeyAttr string `xml:"accesskey,attr,omitempty"`
	OnfocusAttr   string `xml:"onfocus,attr,omitempty"`
	OnblurAttr    string `xml:"onblur,attr,omitempty"`
	*Inline
}

// InputType ...
type InputType string

// Input is form control
type Input struct {
	XMLName       xml.Name `xml:"input"`
	Attrs         *Attrs
	Focus         *Focus
	TypeAttr      string      `xml:"type,attr,omitempty"`
	NameAttr      interface{} `xml:"name,attr,omitempty"`
	ValueAttr     interface{} `xml:"value,attr,omitempty"`
	CheckedAttr   string      `xml:"checked,attr,omitempty"`
	DisabledAttr  string      `xml:"disabled,attr,omitempty"`
	ReadonlyAttr  string      `xml:"readonly,attr,omitempty"`
	SizeAttr      interface{} `xml:"size,attr,omitempty"`
	MaxlengthAttr int         `xml:"maxlength,attr,omitempty"`
	SrcAttr       string      `xml:"src,attr,omitempty"`
	AltAttr       interface{} `xml:"alt,attr,omitempty"`
	UsemapAttr    string      `xml:"usemap,attr,omitempty"`
	OnselectAttr  string      `xml:"onselect,attr,omitempty"`
	OnchangeAttr  string      `xml:"onchange,attr,omitempty"`
	AcceptAttr    string      `xml:"accept,attr,omitempty"`
	AlignAttr     string      `xml:"align,attr,omitempty"`
}

// Select is option selector
type Select struct {
	XMLName      xml.Name `xml:"select"`
	Attrs        *Attrs
	NameAttr     interface{} `xml:"name,attr,omitempty"`
	SizeAttr     int         `xml:"size,attr,omitempty"`
	MultipleAttr string      `xml:"multiple,attr,omitempty"`
	DisabledAttr string      `xml:"disabled,attr,omitempty"`
	TabindexAttr int         `xml:"tabindex,attr,omitempty"`
	OnfocusAttr  string      `xml:"onfocus,attr,omitempty"`
	OnblurAttr   string      `xml:"onblur,attr,omitempty"`
	OnchangeAttr string      `xml:"onchange,attr,omitempty"`
	Optgroup     []*Optgroup `xml:"optgroup"`
	Option       []*Option   `xml:"option"`
}

// Optgroup is option group
type Optgroup struct {
	XMLName      xml.Name `xml:"optgroup"`
	Attrs        *Attrs
	DisabledAttr string    `xml:"disabled,attr,omitempty"`
	LabelAttr    string    `xml:"label,attr"`
	Option       []*Option `xml:"option"`
}

// Option is selectable choice
type Option struct {
	XMLName      xml.Name `xml:"option"`
	Attrs        *Attrs
	SelectedAttr string      `xml:"selected,attr,omitempty"`
	DisabledAttr string      `xml:"disabled,attr,omitempty"`
	LabelAttr    string      `xml:"label,attr,omitempty"`
	ValueAttr    interface{} `xml:"value,attr,omitempty"`
}

// Textarea is multi-line text field
type Textarea struct {
	XMLName      xml.Name `xml:"textarea"`
	Attrs        *Attrs
	Focus        *Focus
	NameAttr     interface{} `xml:"name,attr,omitempty"`
	RowsAttr     int         `xml:"rows,attr"`
	ColsAttr     int         `xml:"cols,attr"`
	DisabledAttr string      `xml:"disabled,attr,omitempty"`
	ReadonlyAttr string      `xml:"readonly,attr,omitempty"`
	OnselectAttr string      `xml:"onselect,attr,omitempty"`
	OnchangeAttr string      `xml:"onchange,attr,omitempty"`
}

// Fieldset is The fieldset element is used to group form fields.
//       Only one legend element should occur in the content
//       and if present should only be preceded by whitespace.
//
//       NOTE: this content model is different from the XHTML 1.0 DTD,
//       closer to the intended content model in HTML4 DTD
type Fieldset struct {
	XMLName xml.Name `xml:"fieldset"`
	Attrs   *Attrs
	Block   []*Block
	Inline  []*Inline
	Misc    []*Misc
	Legend  *Legend `xml:"legend"`
	Form    []*Form `xml:"form"`
}

// LAlign ...
type LAlign string

// Legend is fieldset label
type Legend struct {
	XMLName       xml.Name `xml:"legend"`
	Attrs         *Attrs
	AccesskeyAttr string `xml:"accesskey,attr,omitempty"`
	AlignAttr     string `xml:"align,attr,omitempty"`
	*Inline
}

// Button is Content is "Flow" excluding a, form and form controls
type Button struct {
	XMLName      xml.Name `xml:"button"`
	Attrs        *Attrs
	Focus        *Focus
	NameAttr     interface{} `xml:"name,attr,omitempty"`
	ValueAttr    interface{} `xml:"value,attr,omitempty"`
	TypeAttr     string      `xml:"type,attr,omitempty"`
	DisabledAttr string      `xml:"disabled,attr,omitempty"`
	*ButtonContent
}

// Isindex is single-line text input control (DEPRECATED)
type Isindex struct {
	XMLName    xml.Name `xml:"isindex"`
	Coreattrs  *Coreattrs
	I18n       *I18n
	PromptAttr string `xml:"prompt,attr,omitempty"`
}

// TFrame is The border attribute sets the thickness of the frame around the
//       table. The default units are screen pixels.
//
//       The frame attribute specifies which parts of the frame around
//       the table should be rendered. The values are not the same as
//       CALS to avoid a name clash with the valign attribute.
type TFrame string

// TRules is The rules attribute defines which rules to draw between cells:
//
//       If rules is absent then assume:
//           "none" if border is absent or border="0" otherwise "all"
type TRules string

// TAlign is horizontal placement of table relative to document
type TAlign string

// Cellhalign is horizontal alignment attributes for cell contents
//
//       char        alignment char, e.g. char=':'
//       charoff     offset for alignment char
type Cellhalign struct {
	XMLName     xml.Name `xml:"cellhalign"`
	AlignAttr   string   `xml:"align,attr,omitempty"`
	CharAttr    string   `xml:"char,attr,omitempty"`
	CharoffAttr string   `xml:"charoff,attr,omitempty"`
}

// Cellvalign is vertical alignment attributes for cell contents
type Cellvalign struct {
	XMLName    xml.Name `xml:"cellvalign"`
	ValignAttr string   `xml:"valign,attr,omitempty"`
}

// Table ...
type Table struct {
	XMLName         xml.Name `xml:"table"`
	Attrs           *Attrs
	SummaryAttr     string      `xml:"summary,attr,omitempty"`
	WidthAttr       string      `xml:"width,attr,omitempty"`
	BorderAttr      int         `xml:"border,attr,omitempty"`
	FrameAttr       string      `xml:"frame,attr,omitempty"`
	RulesAttr       string      `xml:"rules,attr,omitempty"`
	CellspacingAttr string      `xml:"cellspacing,attr,omitempty"`
	CellpaddingAttr string      `xml:"cellpadding,attr,omitempty"`
	AlignAttr       string      `xml:"align,attr,omitempty"`
	BgcolorAttr     string      `xml:"bgcolor,attr,omitempty"`
	Caption         *Caption    `xml:"caption"`
	Col             []*Col      `xml:"col"`
	Colgroup        []*Colgroup `xml:"colgroup"`
	Thead           *Thead      `xml:"thead"`
	Tfoot           *Tfoot      `xml:"tfoot"`
	Tbody           []*Tbody    `xml:"tbody"`
	Tr              []*Tr       `xml:"tr"`
}

// CAlign ...
type CAlign string

// Caption ...
type Caption struct {
	XMLName   xml.Name `xml:"caption"`
	Attrs     *Attrs
	AlignAttr string `xml:"align,attr,omitempty"`
	*Inline
}

// Thead ...
type Thead struct {
	XMLName    xml.Name `xml:"thead"`
	Attrs      *Attrs
	Cellhalign *Cellhalign
	Cellvalign *Cellvalign
	Tr         []*Tr `xml:"tr"`
}

// Tfoot ...
type Tfoot struct {
	XMLName    xml.Name `xml:"tfoot"`
	Attrs      *Attrs
	Cellhalign *Cellhalign
	Cellvalign *Cellvalign
	Tr         []*Tr `xml:"tr"`
}

// Tbody ...
type Tbody struct {
	XMLName    xml.Name `xml:"tbody"`
	Attrs      *Attrs
	Cellhalign *Cellhalign
	Cellvalign *Cellvalign
	Tr         []*Tr `xml:"tr"`
}

// Colgroup is colgroup groups a set of col elements. It allows you to group
//       several semantically related columns together.
type Colgroup struct {
	XMLName    xml.Name `xml:"colgroup"`
	Attrs      *Attrs
	Cellhalign *Cellhalign
	Cellvalign *Cellvalign
	SpanAttr   int    `xml:"span,attr,omitempty"`
	WidthAttr  string `xml:"width,attr,omitempty"`
	Col        []*Col `xml:"col"`
}

// Col is col elements define the alignment properties for cells in
//       one or more columns.
//
//       The width attribute specifies the width of the columns, e.g.
//
//           width=64        width in screen pixels
//           width=0.5*      relative width of 0.5
//
//       The span attribute causes the attributes of one
//       col element to apply to more than one column.
type Col struct {
	XMLName    xml.Name `xml:"col"`
	Attrs      *Attrs
	Cellhalign *Cellhalign
	Cellvalign *Cellvalign
	SpanAttr   int    `xml:"span,attr,omitempty"`
	WidthAttr  string `xml:"width,attr,omitempty"`
}

// Tr ...
type Tr struct {
	XMLName     xml.Name `xml:"tr"`
	Attrs       *Attrs
	Cellhalign  *Cellhalign
	Cellvalign  *Cellvalign
	BgcolorAttr string `xml:"bgcolor,attr,omitempty"`
	Th          []*Th  `xml:"th"`
	Td          []*Td  `xml:"td"`
}

// Scope is Scope is simpler than headers attribute for common tables
type Scope string

// Th ...
type Th struct {
	XMLName     xml.Name `xml:"th"`
	Attrs       *Attrs
	Cellhalign  *Cellhalign
	Cellvalign  *Cellvalign
	AbbrAttr    string      `xml:"abbr,attr,omitempty"`
	AxisAttr    interface{} `xml:"axis,attr,omitempty"`
	HeadersAttr []string    `xml:"headers,attr,omitempty"`
	ScopeAttr   string      `xml:"scope,attr,omitempty"`
	RowspanAttr int         `xml:"rowspan,attr,omitempty"`
	ColspanAttr int         `xml:"colspan,attr,omitempty"`
	NowrapAttr  string      `xml:"nowrap,attr,omitempty"`
	BgcolorAttr string      `xml:"bgcolor,attr,omitempty"`
	WidthAttr   string      `xml:"width,attr,omitempty"`
	HeightAttr  string      `xml:"height,attr,omitempty"`
	*Flow
}

// Td ...
type Td struct {
	XMLName     xml.Name `xml:"td"`
	Attrs       *Attrs
	Cellhalign  *Cellhalign
	Cellvalign  *Cellvalign
	AbbrAttr    string      `xml:"abbr,attr,omitempty"`
	AxisAttr    interface{} `xml:"axis,attr,omitempty"`
	HeadersAttr []string    `xml:"headers,attr,omitempty"`
	ScopeAttr   string      `xml:"scope,attr,omitempty"`
	RowspanAttr int         `xml:"rowspan,attr,omitempty"`
	ColspanAttr int         `xml:"colspan,attr,omitempty"`
	NowrapAttr  string      `xml:"nowrap,attr,omitempty"`
	BgcolorAttr string      `xml:"bgcolor,attr,omitempty"`
	WidthAttr   string      `xml:"width,attr,omitempty"`
	HeightAttr  string      `xml:"height,attr,omitempty"`
	*Flow
}

// Faqs is Required part element for this faqs element.
type Faqs struct {
	XMLName     xml.Name `xml:"faqs"`
	I18n        *I18n
	IdAttr      string  `xml:"id,attr,omitempty"`
	TitleAttr   string  `xml:"title,attr,omitempty"`
	ToplinkAttr bool    `xml:"toplink,attr,omitempty"`
	Part        []*Part `xml:"part"`
}

// Part is Required faq element for this part element.
type Part struct {
	XMLName xml.Name `xml:"part"`
	IdAttr  string   `xml:"id,attr,omitempty"`
	Title   *Title   `xml:"title"`
	Faq     []*Faq   `xml:"faq"`
}

// Faq is The answer of this faq element.
type Faq struct {
	XMLName  xml.Name  `xml:"faq"`
	IdAttr   string    `xml:"id,attr,omitempty"`
	Question *Question `xml:"question"`
	Answer   *Answer   `xml:"answer"`
}

// Question is A faq question element.
type Question struct {
	XMLName   xml.Name `xml:"question"`
	Fontstyle []*Fontstyle
	Phrase    []*Phrase
}

// Answer is A faq answer element.
type Answer struct {
	XMLName xml.Name `xml:"answer"`
	Block   []*Block
	Inline  []*Inline
	Misc    []*Misc
	Form    []*Form `xml:"form"`
}

// Source is A source element.
type Source struct {
	XMLName xml.Name `xml:"source"`
}
