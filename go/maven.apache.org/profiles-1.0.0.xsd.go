// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// ProfilesXml is Root element of the profiles.xml file.
type ProfilesXml *ProfilesRoot

// Profiles is Configuration of build profiles for adjusting the build
//             according to environmental parameters
type Profiles struct {
	XMLName xml.Name   `xml:"profiles"`
	Profile []*Profile `xml:"profile"`
}

// ActiveProfiles is List of manually-activated build profiles, specified in the order in which
//             they should be applied.
type ActiveProfiles struct {
	XMLName       xml.Name `xml:"activeProfiles"`
	ActiveProfile []string `xml:"activeProfile"`
}

// ProfilesRoot is Root element of the profiles.xml file.
type ProfilesRoot struct {
	Profiles       *Profiles       `xml:"profiles"`
	ActiveProfiles *ActiveProfiles `xml:"activeProfiles"`
}

// Properties is Extended configuration specific to this profile goes
//             here.
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Repositories is The lists of the remote repositories
type Repositories struct {
	XMLName    xml.Name      `xml:"repositories"`
	Repository []*Repository `xml:"repository"`
}

// PluginRepositories is The lists of the remote repositories for discovering plugins
type PluginRepositories struct {
	XMLName          xml.Name      `xml:"pluginRepositories"`
	PluginRepository []*Repository `xml:"pluginRepository"`
}

// Profile is The conditional logic which will automatically
//             trigger the inclusion of this profile.
type Profile struct {
	Id                 string              `xml:"id"`
	Activation         *Activation         `xml:"activation"`
	Properties         *Properties         `xml:"properties"`
	Repositories       *Repositories       `xml:"repositories"`
	PluginRepositories *PluginRepositories `xml:"pluginRepositories"`
}

// Activation is Specifies that this profile will be activated based on existence of a file.
type Activation struct {
	ActiveByDefault bool                `xml:"activeByDefault"`
	Jdk             string              `xml:"jdk"`
	Os              *ActivationOS       `xml:"os"`
	Property        *ActivationProperty `xml:"property"`
	File            *ActivationFile     `xml:"file"`
}

// ActivationOS is The version of the OS to be used to activate a profile
type ActivationOS struct {
	Name    string `xml:"name"`
	Family  string `xml:"family"`
	Arch    string `xml:"arch"`
	Version string `xml:"version"`
}

// ActivationProperty is The value of the property to be used to activate a profile
type ActivationProperty struct {
	Name  string `xml:"name"`
	Value string `xml:"value"`
}

// ActivationFile is The name of the file that should exist to activate a profile
type ActivationFile struct {
	Missing string `xml:"missing"`
	Exists  string `xml:"exists"`
}

// Repository is The type of layout this repository uses for locating and storing artifacts - can be "legacy" or
//             "default".
type Repository struct {
	Releases  *RepositoryPolicy `xml:"releases"`
	Snapshots *RepositoryPolicy `xml:"snapshots"`
	Id        string            `xml:"id"`
	Name      string            `xml:"name"`
	Url       string            `xml:"url"`
	Layout    string            `xml:"layout"`
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails - warn, fail, etc. Valid values are
//             "fail" or "warn"
type RepositoryPolicy struct {
	Enabled        bool   `xml:"enabled"`
	UpdatePolicy   string `xml:"updatePolicy"`
	ChecksumPolicy string `xml:"checksumPolicy"`
}
