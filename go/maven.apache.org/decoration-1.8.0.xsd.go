// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Project is The <code>&lt;project&gt;</code> element is the root of the site decoration descriptor.
type Project *DecorationModel

// PoweredBy is Powered by logos list.
type PoweredBy struct {
	XMLName xml.Name `xml:"poweredBy"`
	Logo    []*Logo  `xml:"logo,omitempty"`
}

// Custom is Custom configuration for use with customized Velocity templates. Data from this field are
//             accessible in Velocity template from <code>$decoration.custom</code> variable as DOM content.
//             Example: <code>$decoration.custom.getChild( 'customElement' ).getValue()</code>
type Custom struct {
	XMLName xml.Name `xml:"custom"`
}

// DecorationModel is The base url to edit Doxia document sources.
//             In general, <code>${project.scm.url}</code> value should do the job.
type DecorationModel struct {
	NameAttr                 string       `xml:"name,attr,omitempty"`
	CombineSelfAttr          string       `xml:"combine.self,attr,omitempty"`
	BannerLeft               *Banner      `xml:"bannerLeft,omitempty"`
	BannerRight              *Banner      `xml:"bannerRight,omitempty"`
	GoogleAdSenseClient      string       `xml:"googleAdSenseClient,omitempty"`
	GoogleAdSenseSlot        string       `xml:"googleAdSenseSlot,omitempty"`
	GoogleAnalyticsAccountId string       `xml:"googleAnalyticsAccountId,omitempty"`
	PublishDate              *PublishDate `xml:"publishDate,omitempty"`
	Version                  *Version     `xml:"version,omitempty"`
	Edit                     string       `xml:"edit,omitempty"`
	PoweredBy                *PoweredBy   `xml:"poweredBy,omitempty"`
	Skin                     *Skin        `xml:"skin,omitempty"`
	Body                     *Body        `xml:"body,omitempty"`
	Custom                   *Custom      `xml:"custom,omitempty"`
}

// Version is Modify display properties for version published.
type Version struct {
	PositionAttr string `xml:"position,attr,omitempty"`
}

// Banner is The title for the banner image.
type Banner struct {
	Name   string `xml:"name,omitempty"`
	Src    string `xml:"src,omitempty"`
	Alt    string `xml:"alt,omitempty"`
	Href   string `xml:"href,omitempty"`
	Border string `xml:"border,omitempty"`
	Width  string `xml:"width,omitempty"`
	Height string `xml:"height,omitempty"`
	Title  string `xml:"title,omitempty"`
}

// Links is A list of links to display in the navigation.
type Links struct {
	XMLName xml.Name    `xml:"links"`
	Item    []*LinkItem `xml:"item,omitempty"`
}

// Breadcrumbs is A list of breadcrumbs to display in the navigation.
type Breadcrumbs struct {
	XMLName xml.Name    `xml:"breadcrumbs"`
	Item    []*LinkItem `xml:"item,omitempty"`
}

// Body is Additional content (like JavaScript) to include in the HEAD block of the generated pages.
type Body struct {
	Head        string       `xml:"head,omitempty"`
	Links       *Links       `xml:"links,omitempty"`
	Breadcrumbs *Breadcrumbs `xml:"breadcrumbs,omitempty"`
	Menu        []*Menu      `xml:"menu,omitempty"`
	Footer      string       `xml:"footer,omitempty"`
}

// LinkItem is A link in the navigation.
type LinkItem struct {
	NameAttr     string `xml:"name,attr,omitempty"`
	HrefAttr     string `xml:"href,attr,omitempty"`
	ImgAttr      string `xml:"img,attr,omitempty"`
	PositionAttr string `xml:"position,attr,omitempty"`
	AltAttr      string `xml:"alt,attr,omitempty"`
	BorderAttr   string `xml:"border,attr,omitempty"`
	WidthAttr    string `xml:"width,attr,omitempty"`
	HeightAttr   string `xml:"height,attr,omitempty"`
	TargetAttr   string `xml:"target,attr,omitempty"`
	TitleAttr    string `xml:"title,attr,omitempty"`
}

// Menu is A list of menu item.
type Menu struct {
	NameAttr         string      `xml:"name,attr,omitempty"`
	InheritAttr      string      `xml:"inherit,attr,omitempty"`
	InheritAsRefAttr bool        `xml:"inheritAsRef,attr,omitempty"`
	RefAttr          string      `xml:"ref,attr,omitempty"`
	ImgAttr          string      `xml:"img,attr,omitempty"`
	AltAttr          string      `xml:"alt,attr,omitempty"`
	PositionAttr     string      `xml:"position,attr,omitempty"`
	BorderAttr       string      `xml:"border,attr,omitempty"`
	WidthAttr        string      `xml:"width,attr,omitempty"`
	HeightAttr       string      `xml:"height,attr,omitempty"`
	TitleAttr        string      `xml:"title,attr,omitempty"`
	Item             []*MenuItem `xml:"item,omitempty"`
}

// MenuItem is A list of menu item.
type MenuItem struct {
	CollapseAttr bool        `xml:"collapse,attr,omitempty"`
	RefAttr      string      `xml:"ref,attr,omitempty"`
	NameAttr     string      `xml:"name,attr,omitempty"`
	HrefAttr     string      `xml:"href,attr,omitempty"`
	ImgAttr      string      `xml:"img,attr,omitempty"`
	PositionAttr string      `xml:"position,attr,omitempty"`
	AltAttr      string      `xml:"alt,attr,omitempty"`
	BorderAttr   string      `xml:"border,attr,omitempty"`
	WidthAttr    string      `xml:"width,attr,omitempty"`
	HeightAttr   string      `xml:"height,attr,omitempty"`
	TargetAttr   string      `xml:"target,attr,omitempty"`
	TitleAttr    string      `xml:"title,attr,omitempty"`
	Description  string      `xml:"description,omitempty"`
	Item         []*MenuItem `xml:"item,omitempty"`
}

// Skin is The skin version.
type Skin struct {
	GroupId    string `xml:"groupId,omitempty"`
	ArtifactId string `xml:"artifactId,omitempty"`
	Version    string `xml:"version,omitempty"`
}

// Logo is Power by logo on the navigation.
type Logo struct {
	NameAttr     string `xml:"name,attr,omitempty"`
	HrefAttr     string `xml:"href,attr,omitempty"`
	ImgAttr      string `xml:"img,attr,omitempty"`
	PositionAttr string `xml:"position,attr,omitempty"`
	AltAttr      string `xml:"alt,attr,omitempty"`
	BorderAttr   string `xml:"border,attr,omitempty"`
	WidthAttr    string `xml:"width,attr,omitempty"`
	HeightAttr   string `xml:"height,attr,omitempty"`
	TargetAttr   string `xml:"target,attr,omitempty"`
	TitleAttr    string `xml:"title,attr,omitempty"`
}

// PublishDate is Modify display properties for date published.
type PublishDate struct {
	PositionAttr string `xml:"position,attr,omitempty"`
	FormatAttr   string `xml:"format,attr,omitempty"`
}
