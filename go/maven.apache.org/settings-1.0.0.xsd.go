// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Settings is Root element of the user configuration file.
type Settings *Settings

// Proxies is Configuration for different proxy profiles. Multiple proxy profiles
//             might come in handy for anyone working from a notebook or other
//             mobile platform, to enable easy switching of entire proxy
//             configurations by simply specifying the profile id, again either from
//             the command line or from the defaults section below.
type Proxies struct {
	XMLName xml.Name `xml:"proxies"`
	Proxy   []*Proxy `xml:"proxy,omitempty"`
}

// Servers is Configuration of server-specific settings, mainly authentication
//             method. This allows configuration of authentication on a per-server
//             basis.
type Servers struct {
	XMLName xml.Name  `xml:"servers"`
	Server  []*Server `xml:"server,omitempty"`
}

// Mirrors is Configuration of download mirrors for repositories.
type Mirrors struct {
	XMLName xml.Name  `xml:"mirrors"`
	Mirror  []*Mirror `xml:"mirror,omitempty"`
}

// Profiles is Configuration of build profiles for adjusting the build
//             according to environmental parameters.
type Profiles struct {
	XMLName xml.Name   `xml:"profiles"`
	Profile []*Profile `xml:"profile,omitempty"`
}

// ActiveProfiles is List of manually-activated build profiles, specified in the order in which
//             they should be applied.
type ActiveProfiles struct {
	XMLName       xml.Name `xml:"activeProfiles"`
	ActiveProfile []string `xml:"activeProfile,omitempty"`
}

// PluginGroups is List of groupIds to search for a plugin when that plugin
//             groupId is not explicitly provided.
type PluginGroups struct {
	XMLName     xml.Name `xml:"pluginGroups"`
	PluginGroup []string `xml:"pluginGroup,omitempty"`
}

// Settings is Indicate whether maven should operate in offline mode full-time.
type Settings struct {
	LocalRepository   string          `xml:"localRepository,omitempty"`
	InteractiveMode   bool            `xml:"interactiveMode,omitempty"`
	UsePluginRegistry bool            `xml:"usePluginRegistry,omitempty"`
	Offline           bool            `xml:"offline,omitempty"`
	Proxies           *Proxies        `xml:"proxies,omitempty"`
	Servers           *Servers        `xml:"servers,omitempty"`
	Mirrors           *Mirrors        `xml:"mirrors,omitempty"`
	Profiles          *Profiles       `xml:"profiles,omitempty"`
	ActiveProfiles    *ActiveProfiles `xml:"activeProfiles,omitempty"`
	PluginGroups      *PluginGroups   `xml:"pluginGroups,omitempty"`
}

// Mirror is 1.0.0
type Mirror struct {
	MirrorOf string `xml:"mirrorOf,omitempty"`
	Name     string `xml:"name,omitempty"`
	Url      string `xml:"url,omitempty"`
	Id       string `xml:"id,omitempty"`
}

// Proxy is 1.0.0
type Proxy struct {
	Active        bool   `xml:"active,omitempty"`
	Protocol      string `xml:"protocol,omitempty"`
	Username      string `xml:"username,omitempty"`
	Password      string `xml:"password,omitempty"`
	Port          int    `xml:"port,omitempty"`
	Host          string `xml:"host,omitempty"`
	NonProxyHosts string `xml:"nonProxyHosts,omitempty"`
	Id            string `xml:"id,omitempty"`
}

// Configuration is Extra configuration for the transport layer.
type Configuration struct {
	XMLName xml.Name `xml:"configuration"`
}

// Server is The permissions for directories when they are created.
type Server struct {
	Username             string         `xml:"username,omitempty"`
	Password             string         `xml:"password,omitempty"`
	PrivateKey           string         `xml:"privateKey,omitempty"`
	Passphrase           string         `xml:"passphrase,omitempty"`
	FilePermissions      string         `xml:"filePermissions,omitempty"`
	DirectoryPermissions string         `xml:"directoryPermissions,omitempty"`
	Configuration        *Configuration `xml:"configuration,omitempty"`
	Id                   string         `xml:"id,omitempty"`
}

// Properties is Extended configuration specific to this profile goes here.
//             Contents take the form of
//             <property.name>property.value</property.name>
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Repositories is The lists of the remote repositories.
type Repositories struct {
	XMLName    xml.Name      `xml:"repositories"`
	Repository []*Repository `xml:"repository,omitempty"`
}

// PluginRepositories is The lists of the remote repositories for discovering plugins.
type PluginRepositories struct {
	XMLName          xml.Name      `xml:"pluginRepositories"`
	PluginRepository []*Repository `xml:"pluginRepository,omitempty"`
}

// Profile is The conditional logic which will automatically
//             trigger the inclusion of this profile.
type Profile struct {
	Activation         *Activation         `xml:"activation,omitempty"`
	Properties         *Properties         `xml:"properties,omitempty"`
	Repositories       *Repositories       `xml:"repositories,omitempty"`
	PluginRepositories *PluginRepositories `xml:"pluginRepositories,omitempty"`
	Id                 string              `xml:"id,omitempty"`
}

// Repository is The type of layout this repository uses for locating and
//             storing artifacts - can be "legacy" or "default".
type Repository struct {
	Releases  *RepositoryPolicy `xml:"releases,omitempty"`
	Snapshots *RepositoryPolicy `xml:"snapshots,omitempty"`
	Id        string            `xml:"id,omitempty"`
	Name      string            `xml:"name,omitempty"`
	Url       string            `xml:"url,omitempty"`
	Layout    string            `xml:"layout,omitempty"`
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails -
//             warn, fail, etc. Valid values are "fail" or "warn".
type RepositoryPolicy struct {
	Enabled        bool   `xml:"enabled,omitempty"`
	UpdatePolicy   string `xml:"updatePolicy,omitempty"`
	ChecksumPolicy string `xml:"checksumPolicy,omitempty"`
}

// Activation is Specifies that this profile will be activated based on existence of a file.
type Activation struct {
	ActiveByDefault bool                `xml:"activeByDefault,omitempty"`
	Jdk             string              `xml:"jdk,omitempty"`
	Os              *ActivationOS       `xml:"os,omitempty"`
	Property        *ActivationProperty `xml:"property,omitempty"`
	File            *ActivationFile     `xml:"file,omitempty"`
}

// ActivationFile is The name of the file that should exist to activate a profile.
type ActivationFile struct {
	Missing string `xml:"missing,omitempty"`
	Exists  string `xml:"exists,omitempty"`
}

// ActivationOS is The version of the OS to be used to activate a profile.
type ActivationOS struct {
	Name    string `xml:"name,omitempty"`
	Family  string `xml:"family,omitempty"`
	Arch    string `xml:"arch,omitempty"`
	Version string `xml:"version,omitempty"`
}

// ActivationProperty is The value of the property to be used to activate a profile.
type ActivationProperty struct {
	Name  string `xml:"name,omitempty"`
	Value string `xml:"value,omitempty"`
}
