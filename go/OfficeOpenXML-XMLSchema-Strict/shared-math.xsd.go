// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// STInteger255 ...
type STInteger255 int

// CTInteger255 ...
type CTInteger255 struct {
	XMLName xml.Name `xml:"CT_Integer255"`
	ValAttr int      `xml:"val,attr"`
}

// STInteger2 ...
type STInteger2 int

// CTInteger2 ...
type CTInteger2 struct {
	XMLName xml.Name `xml:"CT_Integer2"`
	ValAttr int      `xml:"val,attr"`
}

// STSpacingRule ...
type STSpacingRule int

// CTSpacingRule ...
type CTSpacingRule struct {
	XMLName xml.Name `xml:"CT_SpacingRule"`
	ValAttr int      `xml:"val,attr"`
}

// STUnSignedInteger ...
type STUnSignedInteger uint32

// CTUnSignedInteger ...
type CTUnSignedInteger struct {
	XMLName xml.Name `xml:"CT_UnSignedInteger"`
	ValAttr uint32   `xml:"val,attr"`
}

// STChar ...
type STChar string

// CTChar ...
type CTChar struct {
	XMLName xml.Name `xml:"CT_Char"`
	ValAttr string   `xml:"val,attr"`
}

// CTOnOff ...
type CTOnOff struct {
	XMLName xml.Name `xml:"CT_OnOff"`
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// CTString ...
type CTString struct {
	XMLName xml.Name `xml:"CT_String"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTXAlign ...
type CTXAlign struct {
	XMLName xml.Name `xml:"CT_XAlign"`
	ValAttr string   `xml:"val,attr"`
}

// CTYAlign ...
type CTYAlign struct {
	XMLName xml.Name `xml:"CT_YAlign"`
	ValAttr string   `xml:"val,attr"`
}

// STShp ...
type STShp string

// CTShp ...
type CTShp struct {
	XMLName xml.Name `xml:"CT_Shp"`
	ValAttr string   `xml:"val,attr"`
}

// STFType ...
type STFType string

// CTFType ...
type CTFType struct {
	XMLName xml.Name `xml:"CT_FType"`
	ValAttr string   `xml:"val,attr"`
}

// STLimLoc ...
type STLimLoc string

// CTLimLoc ...
type CTLimLoc struct {
	XMLName xml.Name `xml:"CT_LimLoc"`
	ValAttr string   `xml:"val,attr"`
}

// STTopBot ...
type STTopBot string

// CTTopBot ...
type CTTopBot struct {
	XMLName xml.Name `xml:"CT_TopBot"`
	ValAttr string   `xml:"val,attr"`
}

// STScript ...
type STScript string

// CTScript ...
type CTScript struct {
	XMLName xml.Name `xml:"CT_Script"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// STStyle ...
type STStyle string

// CTStyle ...
type CTStyle struct {
	XMLName xml.Name `xml:"CT_Style"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTManualBreak ...
type CTManualBreak struct {
	XMLName   xml.Name `xml:"CT_ManualBreak"`
	AlnAtAttr int      `xml:"alnAt,attr,omitempty"`
}

// EGScriptStyle ...
type EGScriptStyle struct {
	XMLName xml.Name `xml:"EG_ScriptStyle"`
	Scr     *CTScript
	Sty     *CTStyle
}

// CTRPR ...
type CTRPR struct {
	XMLName       xml.Name `xml:"CT_RPR"`
	EGScriptStyle *EGScriptStyle
	Lit           *CTOnOff       `xml:"lit,omitempty"`
	Nor           *CTOnOff       `xml:"nor,omitempty"`
	Brk           *CTManualBreak `xml:"brk,omitempty"`
	Aln           *CTOnOff       `xml:"aln,omitempty"`
}

// CTText ...
type CTText struct {
	XMLName      xml.Name `xml:"CT_Text"`
	XmlSpaceAttr *Space   `xml:"xml:space,attr,omitempty"`
	Value        string   `xml:",chardata"`
}

// CTR ...
type CTR struct {
	XMLName            xml.Name `xml:"CT_R"`
	WEGRPr             *EGRPr
	WEGRunInnerContent []*EGRunInnerContent
	RPr                *CTRPR    `xml:"rPr,omitempty"`
	T                  []*CTText `xml:"t,omitempty"`
}

// CTCtrlPr ...
type CTCtrlPr struct {
	XMLName    xml.Name `xml:"CT_CtrlPr"`
	WEGRPrMath *EGRPrMath
}

// CTAccPr ...
type CTAccPr struct {
	XMLName xml.Name  `xml:"CT_AccPr"`
	Chr     *CTChar   `xml:"chr,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTAcc ...
type CTAcc struct {
	XMLName xml.Name    `xml:"CT_Acc"`
	AccPr   *CTAccPr    `xml:"accPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
}

// CTBarPr ...
type CTBarPr struct {
	XMLName xml.Name  `xml:"CT_BarPr"`
	Pos     *CTTopBot `xml:"pos,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTBar ...
type CTBar struct {
	XMLName xml.Name    `xml:"CT_Bar"`
	BarPr   *CTBarPr    `xml:"barPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
}

// CTBoxPr ...
type CTBoxPr struct {
	XMLName xml.Name       `xml:"CT_BoxPr"`
	OpEmu   *CTOnOff       `xml:"opEmu,omitempty"`
	NoBreak *CTOnOff       `xml:"noBreak,omitempty"`
	Diff    *CTOnOff       `xml:"diff,omitempty"`
	Brk     *CTManualBreak `xml:"brk,omitempty"`
	Aln     *CTOnOff       `xml:"aln,omitempty"`
	CtrlPr  *CTCtrlPr      `xml:"ctrlPr,omitempty"`
}

// CTBox ...
type CTBox struct {
	XMLName xml.Name    `xml:"CT_Box"`
	BoxPr   *CTBoxPr    `xml:"boxPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
}

// CTBorderBoxPr ...
type CTBorderBoxPr struct {
	XMLName    xml.Name  `xml:"CT_BorderBoxPr"`
	HideTop    *CTOnOff  `xml:"hideTop,omitempty"`
	HideBot    *CTOnOff  `xml:"hideBot,omitempty"`
	HideLeft   *CTOnOff  `xml:"hideLeft,omitempty"`
	HideRight  *CTOnOff  `xml:"hideRight,omitempty"`
	StrikeH    *CTOnOff  `xml:"strikeH,omitempty"`
	StrikeV    *CTOnOff  `xml:"strikeV,omitempty"`
	StrikeBLTR *CTOnOff  `xml:"strikeBLTR,omitempty"`
	StrikeTLBR *CTOnOff  `xml:"strikeTLBR,omitempty"`
	CtrlPr     *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTBorderBox ...
type CTBorderBox struct {
	XMLName     xml.Name       `xml:"CT_BorderBox"`
	BorderBoxPr *CTBorderBoxPr `xml:"borderBoxPr,omitempty"`
	E           *CTOMathArg    `xml:"e"`
}

// CTDPr ...
type CTDPr struct {
	XMLName xml.Name  `xml:"CT_DPr"`
	BegChr  *CTChar   `xml:"begChr,omitempty"`
	SepChr  *CTChar   `xml:"sepChr,omitempty"`
	EndChr  *CTChar   `xml:"endChr,omitempty"`
	Grow    *CTOnOff  `xml:"grow,omitempty"`
	Shp     *CTShp    `xml:"shp,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTD ...
type CTD struct {
	XMLName xml.Name      `xml:"CT_D"`
	DPr     *CTDPr        `xml:"dPr,omitempty"`
	E       []*CTOMathArg `xml:"e"`
}

// CTEqArrPr ...
type CTEqArrPr struct {
	XMLName xml.Name           `xml:"CT_EqArrPr"`
	BaseJc  *CTYAlign          `xml:"baseJc,omitempty"`
	MaxDist *CTOnOff           `xml:"maxDist,omitempty"`
	ObjDist *CTOnOff           `xml:"objDist,omitempty"`
	RSpRule *CTSpacingRule     `xml:"rSpRule,omitempty"`
	RSp     *CTUnSignedInteger `xml:"rSp,omitempty"`
	CtrlPr  *CTCtrlPr          `xml:"ctrlPr,omitempty"`
}

// CTEqArr ...
type CTEqArr struct {
	XMLName xml.Name      `xml:"CT_EqArr"`
	EqArrPr *CTEqArrPr    `xml:"eqArrPr,omitempty"`
	E       []*CTOMathArg `xml:"e"`
}

// CTFPr ...
type CTFPr struct {
	XMLName xml.Name  `xml:"CT_FPr"`
	Type    *CTFType  `xml:"type,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTF ...
type CTF struct {
	XMLName xml.Name    `xml:"CT_F"`
	FPr     *CTFPr      `xml:"fPr,omitempty"`
	Num     *CTOMathArg `xml:"num"`
	Den     *CTOMathArg `xml:"den"`
}

// CTFuncPr ...
type CTFuncPr struct {
	XMLName xml.Name  `xml:"CT_FuncPr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTFunc ...
type CTFunc struct {
	XMLName xml.Name    `xml:"CT_Func"`
	FuncPr  *CTFuncPr   `xml:"funcPr,omitempty"`
	FName   *CTOMathArg `xml:"fName"`
	E       *CTOMathArg `xml:"e"`
}

// CTGroupChrPr ...
type CTGroupChrPr struct {
	XMLName xml.Name  `xml:"CT_GroupChrPr"`
	Chr     *CTChar   `xml:"chr,omitempty"`
	Pos     *CTTopBot `xml:"pos,omitempty"`
	VertJc  *CTTopBot `xml:"vertJc,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTGroupChr ...
type CTGroupChr struct {
	XMLName    xml.Name      `xml:"CT_GroupChr"`
	GroupChrPr *CTGroupChrPr `xml:"groupChrPr,omitempty"`
	E          *CTOMathArg   `xml:"e"`
}

// CTLimLowPr ...
type CTLimLowPr struct {
	XMLName xml.Name  `xml:"CT_LimLowPr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTLimLow ...
type CTLimLow struct {
	XMLName  xml.Name    `xml:"CT_LimLow"`
	LimLowPr *CTLimLowPr `xml:"limLowPr,omitempty"`
	E        *CTOMathArg `xml:"e"`
	Lim      *CTOMathArg `xml:"lim"`
}

// CTLimUppPr ...
type CTLimUppPr struct {
	XMLName xml.Name  `xml:"CT_LimUppPr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTLimUpp ...
type CTLimUpp struct {
	XMLName  xml.Name    `xml:"CT_LimUpp"`
	LimUppPr *CTLimUppPr `xml:"limUppPr,omitempty"`
	E        *CTOMathArg `xml:"e"`
	Lim      *CTOMathArg `xml:"lim"`
}

// CTMCPr ...
type CTMCPr struct {
	XMLName xml.Name      `xml:"CT_MCPr"`
	Count   *CTInteger255 `xml:"count,omitempty"`
	McJc    *CTXAlign     `xml:"mcJc,omitempty"`
}

// CTMC ...
type CTMC struct {
	XMLName xml.Name `xml:"CT_MC"`
	McPr    *CTMCPr  `xml:"mcPr,omitempty"`
}

// CTMCS ...
type CTMCS struct {
	XMLName xml.Name `xml:"CT_MCS"`
	Mc      []*CTMC  `xml:"mc"`
}

// CTMPr ...
type CTMPr struct {
	XMLName xml.Name           `xml:"CT_MPr"`
	BaseJc  *CTYAlign          `xml:"baseJc,omitempty"`
	PlcHide *CTOnOff           `xml:"plcHide,omitempty"`
	RSpRule *CTSpacingRule     `xml:"rSpRule,omitempty"`
	CGpRule *CTSpacingRule     `xml:"cGpRule,omitempty"`
	RSp     *CTUnSignedInteger `xml:"rSp,omitempty"`
	CSp     *CTUnSignedInteger `xml:"cSp,omitempty"`
	CGp     *CTUnSignedInteger `xml:"cGp,omitempty"`
	Mcs     *CTMCS             `xml:"mcs,omitempty"`
	CtrlPr  *CTCtrlPr          `xml:"ctrlPr,omitempty"`
}

// CTMR ...
type CTMR struct {
	XMLName xml.Name      `xml:"CT_MR"`
	E       []*CTOMathArg `xml:"e"`
}

// CTM ...
type CTM struct {
	XMLName xml.Name `xml:"CT_M"`
	MPr     *CTMPr   `xml:"mPr,omitempty"`
	Mr      []*CTMR  `xml:"mr"`
}

// CTNaryPr ...
type CTNaryPr struct {
	XMLName xml.Name  `xml:"CT_NaryPr"`
	Chr     *CTChar   `xml:"chr,omitempty"`
	LimLoc  *CTLimLoc `xml:"limLoc,omitempty"`
	Grow    *CTOnOff  `xml:"grow,omitempty"`
	SubHide *CTOnOff  `xml:"subHide,omitempty"`
	SupHide *CTOnOff  `xml:"supHide,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTNary ...
type CTNary struct {
	XMLName xml.Name    `xml:"CT_Nary"`
	NaryPr  *CTNaryPr   `xml:"naryPr,omitempty"`
	Sub     *CTOMathArg `xml:"sub"`
	Sup     *CTOMathArg `xml:"sup"`
	E       *CTOMathArg `xml:"e"`
}

// CTPhantPr ...
type CTPhantPr struct {
	XMLName  xml.Name  `xml:"CT_PhantPr"`
	Show     *CTOnOff  `xml:"show,omitempty"`
	ZeroWid  *CTOnOff  `xml:"zeroWid,omitempty"`
	ZeroAsc  *CTOnOff  `xml:"zeroAsc,omitempty"`
	ZeroDesc *CTOnOff  `xml:"zeroDesc,omitempty"`
	Transp   *CTOnOff  `xml:"transp,omitempty"`
	CtrlPr   *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTPhant ...
type CTPhant struct {
	XMLName xml.Name    `xml:"CT_Phant"`
	PhantPr *CTPhantPr  `xml:"phantPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
}

// CTRadPr ...
type CTRadPr struct {
	XMLName xml.Name  `xml:"CT_RadPr"`
	DegHide *CTOnOff  `xml:"degHide,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTRad ...
type CTRad struct {
	XMLName xml.Name    `xml:"CT_Rad"`
	RadPr   *CTRadPr    `xml:"radPr,omitempty"`
	Deg     *CTOMathArg `xml:"deg"`
	E       *CTOMathArg `xml:"e"`
}

// CTSPrePr ...
type CTSPrePr struct {
	XMLName xml.Name  `xml:"CT_SPrePr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTSPre ...
type CTSPre struct {
	XMLName xml.Name    `xml:"CT_SPre"`
	SPrePr  *CTSPrePr   `xml:"sPrePr,omitempty"`
	Sub     *CTOMathArg `xml:"sub"`
	Sup     *CTOMathArg `xml:"sup"`
	E       *CTOMathArg `xml:"e"`
}

// CTSSubPr ...
type CTSSubPr struct {
	XMLName xml.Name  `xml:"CT_SSubPr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTSSub ...
type CTSSub struct {
	XMLName xml.Name    `xml:"CT_SSub"`
	SSubPr  *CTSSubPr   `xml:"sSubPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
	Sub     *CTOMathArg `xml:"sub"`
}

// CTSSubSupPr ...
type CTSSubSupPr struct {
	XMLName xml.Name  `xml:"CT_SSubSupPr"`
	AlnScr  *CTOnOff  `xml:"alnScr,omitempty"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTSSubSup ...
type CTSSubSup struct {
	XMLName   xml.Name     `xml:"CT_SSubSup"`
	SSubSupPr *CTSSubSupPr `xml:"sSubSupPr,omitempty"`
	E         *CTOMathArg  `xml:"e"`
	Sub       *CTOMathArg  `xml:"sub"`
	Sup       *CTOMathArg  `xml:"sup"`
}

// CTSSupPr ...
type CTSSupPr struct {
	XMLName xml.Name  `xml:"CT_SSupPr"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr,omitempty"`
}

// CTSSup ...
type CTSSup struct {
	XMLName xml.Name    `xml:"CT_SSup"`
	SSupPr  *CTSSupPr   `xml:"sSupPr,omitempty"`
	E       *CTOMathArg `xml:"e"`
	Sup     *CTOMathArg `xml:"sup"`
}

// EGOMathMathElements ...
type EGOMathMathElements struct {
	XMLName   xml.Name `xml:"EG_OMathMathElements"`
	Acc       *CTAcc
	Bar       *CTBar
	Box       *CTBox
	BorderBox *CTBorderBox
	D         *CTD
	EqArr     *CTEqArr
	F         *CTF
	Func      *CTFunc
	GroupChr  *CTGroupChr
	LimLow    *CTLimLow
	LimUpp    *CTLimUpp
	M         *CTM
	Nary      *CTNary
	Phant     *CTPhant
	Rad       *CTRad
	SPre      *CTSPre
	SSub      *CTSSub
	SSubSup   *CTSSubSup
	SSup      *CTSSup
	R         *CTR
}

// EGOMathElements ...
type EGOMathElements struct {
	XMLName             xml.Name `xml:"EG_OMathElements"`
	EGOMathMathElements *EGOMathMathElements
	WEGPContentMath     *EGPContentMath
}

// CTOMathArgPr ...
type CTOMathArgPr struct {
	XMLName xml.Name    `xml:"CT_OMathArgPr"`
	ArgSz   *CTInteger2 `xml:"argSz,omitempty"`
}

// CTOMathArg ...
type CTOMathArg struct {
	XMLName         xml.Name `xml:"CT_OMathArg"`
	EGOMathElements []*EGOMathElements
	ArgPr           *CTOMathArgPr `xml:"argPr,omitempty"`
	CtrlPr          *CTCtrlPr     `xml:"ctrlPr,omitempty"`
}

// STJc ...
type STJc string

// CTOMathJc ...
type CTOMathJc struct {
	XMLName xml.Name `xml:"CT_OMathJc"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTOMathParaPr ...
type CTOMathParaPr struct {
	XMLName xml.Name   `xml:"CT_OMathParaPr"`
	Jc      *CTOMathJc `xml:"jc,omitempty"`
}

// CTTwipsMeasure ...
type CTTwipsMeasure struct {
	XMLName xml.Name        `xml:"CT_TwipsMeasure"`
	ValAttr *STTwipsMeasure `xml:"val,attr"`
}

// STBreakBin ...
type STBreakBin string

// CTBreakBin ...
type CTBreakBin struct {
	XMLName xml.Name `xml:"CT_BreakBin"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// STBreakBinSub ...
type STBreakBinSub string

// CTBreakBinSub ...
type CTBreakBinSub struct {
	XMLName xml.Name `xml:"CT_BreakBinSub"`
	ValAttr string   `xml:"val,attr,omitempty"`
}

// CTMathPr ...
type CTMathPr struct {
	XMLName    xml.Name        `xml:"CT_MathPr"`
	MathFont   *CTString       `xml:"mathFont,omitempty"`
	BrkBin     *CTBreakBin     `xml:"brkBin,omitempty"`
	BrkBinSub  *CTBreakBinSub  `xml:"brkBinSub,omitempty"`
	SmallFrac  *CTOnOff        `xml:"smallFrac,omitempty"`
	DispDef    *CTOnOff        `xml:"dispDef,omitempty"`
	LMargin    *CTTwipsMeasure `xml:"lMargin,omitempty"`
	RMargin    *CTTwipsMeasure `xml:"rMargin,omitempty"`
	DefJc      *CTOMathJc      `xml:"defJc,omitempty"`
	PreSp      *CTTwipsMeasure `xml:"preSp,omitempty"`
	PostSp     *CTTwipsMeasure `xml:"postSp,omitempty"`
	InterSp    *CTTwipsMeasure `xml:"interSp,omitempty"`
	IntraSp    *CTTwipsMeasure `xml:"intraSp,omitempty"`
	WrapIndent *CTTwipsMeasure `xml:"wrapIndent"`
	WrapRight  *CTOnOff        `xml:"wrapRight"`
	IntLim     *CTLimLoc       `xml:"intLim,omitempty"`
	NaryLim    *CTLimLoc       `xml:"naryLim,omitempty"`
}

// MathPr ...
type MathPr *CTMathPr

// CTOMathPara ...
type CTOMathPara struct {
	XMLName     xml.Name       `xml:"CT_OMathPara"`
	OMathParaPr *CTOMathParaPr `xml:"oMathParaPr,omitempty"`
	OMath       []*CTOMath     `xml:"oMath"`
}

// CTOMath ...
type CTOMath struct {
	XMLName         xml.Name `xml:"CT_OMath"`
	EGOMathElements []*EGOMathElements
}

// OMathPara ...
type OMathPara *CTOMathPara

// OMath ...
type OMath *CTOMath
