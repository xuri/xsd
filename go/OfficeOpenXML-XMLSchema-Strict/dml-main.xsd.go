// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// CTAudioFile ...
type CTAudioFile struct {
	XMLName         xml.Name                  `xml:"CT_AudioFile"`
	RLinkAttr       string                    `xml:"r:link,attr"`
	ContentTypeAttr *string                   `xml:"contentType,attr"`
	ExtLst          *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTVideoFile ...
type CTVideoFile struct {
	XMLName         xml.Name                  `xml:"CT_VideoFile"`
	RLinkAttr       string                    `xml:"r:link,attr"`
	ContentTypeAttr *string                   `xml:"contentType,attr"`
	ExtLst          *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTQuickTimeFile ...
type CTQuickTimeFile struct {
	XMLName   xml.Name                  `xml:"CT_QuickTimeFile"`
	RLinkAttr string                    `xml:"r:link,attr"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTAudioCDTime ...
type CTAudioCDTime struct {
	XMLName   xml.Name `xml:"CT_AudioCDTime"`
	TrackAttr uint8    `xml:"track,attr"`
	TimeAttr  *uint32  `xml:"time,attr"`
}

// CTAudioCD ...
type CTAudioCD struct {
	XMLName xml.Name                  `xml:"CT_AudioCD"`
	St      *CTAudioCDTime            `xml:"st"`
	End     *CTAudioCDTime            `xml:"end"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// EGMedia ...
type EGMedia struct {
	XMLName       xml.Name `xml:"EG_Media"`
	AudioCd       *CTAudioCD
	WavAudioFile  *CTEmbeddedWAVAudioFile
	AudioFile     *CTAudioFile
	VideoFile     *CTVideoFile
	QuickTimeFile *CTQuickTimeFile
}

// VideoFile ...
type VideoFile *CTVideoFile

// STStyleMatrixColumnIndex ...
type STStyleMatrixColumnIndex uint32

// STFontCollectionIndex ...
type STFontCollectionIndex string

// STColorSchemeIndex ...
type STColorSchemeIndex string

// CTColorScheme ...
type CTColorScheme struct {
	XMLName  xml.Name                  `xml:"CT_ColorScheme"`
	NameAttr string                    `xml:"name,attr"`
	Dk1      *CTColor                  `xml:"dk1"`
	Lt1      *CTColor                  `xml:"lt1"`
	Dk2      *CTColor                  `xml:"dk2"`
	Lt2      *CTColor                  `xml:"lt2"`
	Accent1  *CTColor                  `xml:"accent1"`
	Accent2  *CTColor                  `xml:"accent2"`
	Accent3  *CTColor                  `xml:"accent3"`
	Accent4  *CTColor                  `xml:"accent4"`
	Accent5  *CTColor                  `xml:"accent5"`
	Accent6  *CTColor                  `xml:"accent6"`
	Hlink    *CTColor                  `xml:"hlink"`
	FolHlink *CTColor                  `xml:"folHlink"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTCustomColor ...
type CTCustomColor struct {
	XMLName       xml.Name `xml:"CT_CustomColor"`
	NameAttr      *string  `xml:"name,attr"`
	EGColorChoice []*EGColorChoice
}

// CTSupplementalFont ...
type CTSupplementalFont struct {
	XMLName      xml.Name `xml:"CT_SupplementalFont"`
	ScriptAttr   string   `xml:"script,attr"`
	TypefaceAttr string   `xml:"typeface,attr"`
}

// CTCustomColorList ...
type CTCustomColorList struct {
	XMLName xml.Name         `xml:"CT_CustomColorList"`
	CustClr []*CTCustomColor `xml:"custClr"`
}

// CTFontCollection ...
type CTFontCollection struct {
	XMLName xml.Name                  `xml:"CT_FontCollection"`
	Latin   *CTTextFont               `xml:"latin"`
	Ea      *CTTextFont               `xml:"ea"`
	Cs      *CTTextFont               `xml:"cs"`
	Font    []*CTSupplementalFont     `xml:"font"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEffectStyleItem ...
type CTEffectStyleItem struct {
	XMLName            xml.Name `xml:"CT_EffectStyleItem"`
	EGEffectProperties []*EGEffectProperties
	Scene3d            *CTScene3D `xml:"scene3d"`
	Sp3d               *CTShape3D `xml:"sp3d"`
}

// CTFontScheme ...
type CTFontScheme struct {
	XMLName   xml.Name                  `xml:"CT_FontScheme"`
	NameAttr  string                    `xml:"name,attr"`
	MajorFont *CTFontCollection         `xml:"majorFont"`
	MinorFont *CTFontCollection         `xml:"minorFont"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFillStyleList ...
type CTFillStyleList struct {
	XMLName          xml.Name `xml:"CT_FillStyleList"`
	EGFillProperties []*EGFillProperties
}

// CTLineStyleList ...
type CTLineStyleList struct {
	XMLName xml.Name            `xml:"CT_LineStyleList"`
	Ln      []*CTLineProperties `xml:"ln"`
}

// CTEffectStyleList ...
type CTEffectStyleList struct {
	XMLName     xml.Name             `xml:"CT_EffectStyleList"`
	EffectStyle []*CTEffectStyleItem `xml:"effectStyle"`
}

// CTBackgroundFillStyleList ...
type CTBackgroundFillStyleList struct {
	XMLName          xml.Name `xml:"CT_BackgroundFillStyleList"`
	EGFillProperties []*EGFillProperties
}

// CTStyleMatrix ...
type CTStyleMatrix struct {
	XMLName        xml.Name                   `xml:"CT_StyleMatrix"`
	NameAttr       *string                    `xml:"name,attr"`
	FillStyleLst   *CTFillStyleList           `xml:"fillStyleLst"`
	LnStyleLst     *CTLineStyleList           `xml:"lnStyleLst"`
	EffectStyleLst *CTEffectStyleList         `xml:"effectStyleLst"`
	BgFillStyleLst *CTBackgroundFillStyleList `xml:"bgFillStyleLst"`
}

// CTBaseStyles ...
type CTBaseStyles struct {
	XMLName    xml.Name                  `xml:"CT_BaseStyles"`
	ClrScheme  *CTColorScheme            `xml:"clrScheme"`
	FontScheme *CTFontScheme             `xml:"fontScheme"`
	FmtScheme  *CTStyleMatrix            `xml:"fmtScheme"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTOfficeArtExtension ...
type CTOfficeArtExtension struct {
	XMLName xml.Name `xml:"CT_OfficeArtExtension"`
	UriAttr string   `xml:"uri,attr"`
}

// STCoordinate ...
type STCoordinate struct {
	XMLName                 xml.Name `xml:"ST_Coordinate"`
	STCoordinateUnqualified *STCoordinateUnqualified
	STUniversalMeasure      string
}

// STCoordinateUnqualified ...
type STCoordinateUnqualified int64

// STCoordinate32 ...
type STCoordinate32 struct {
	XMLName                   xml.Name `xml:"ST_Coordinate32"`
	STCoordinate32Unqualified *STCoordinate32Unqualified
	STUniversalMeasure        string
}

// STCoordinate32Unqualified ...
type STCoordinate32Unqualified int

// STPositiveCoordinate ...
type STPositiveCoordinate int64

// STPositiveCoordinate32 ...
type STPositiveCoordinate32 int

// STAngle ...
type STAngle int

// CTAngle ...
type CTAngle struct {
	XMLName xml.Name `xml:"CT_Angle"`
	ValAttr int      `xml:"val,attr"`
}

// STFixedAngle ...
type STFixedAngle int

// STPositiveFixedAngle ...
type STPositiveFixedAngle int

// CTPositiveFixedAngle ...
type CTPositiveFixedAngle struct {
	XMLName xml.Name `xml:"CT_PositiveFixedAngle"`
	ValAttr int      `xml:"val,attr"`
}

// STPercentage ...
type STPercentage struct {
	XMLName      xml.Name `xml:"ST_Percentage"`
	STPercentage string
}

// CTPercentage ...
type CTPercentage struct {
	XMLName xml.Name      `xml:"CT_Percentage"`
	ValAttr *STPercentage `xml:"val,attr"`
}

// STPositivePercentage ...
type STPositivePercentage struct {
	XMLName              xml.Name `xml:"ST_PositivePercentage"`
	STPositivePercentage string
}

// CTPositivePercentage ...
type CTPositivePercentage struct {
	XMLName xml.Name              `xml:"CT_PositivePercentage"`
	ValAttr *STPositivePercentage `xml:"val,attr"`
}

// STFixedPercentage ...
type STFixedPercentage struct {
	XMLName           xml.Name `xml:"ST_FixedPercentage"`
	STFixedPercentage string
}

// CTFixedPercentage ...
type CTFixedPercentage struct {
	XMLName xml.Name           `xml:"CT_FixedPercentage"`
	ValAttr *STFixedPercentage `xml:"val,attr"`
}

// STPositiveFixedPercentage ...
type STPositiveFixedPercentage struct {
	XMLName                   xml.Name `xml:"ST_PositiveFixedPercentage"`
	STPositiveFixedPercentage string
}

// CTPositiveFixedPercentage ...
type CTPositiveFixedPercentage struct {
	XMLName xml.Name                   `xml:"CT_PositiveFixedPercentage"`
	ValAttr *STPositiveFixedPercentage `xml:"val,attr"`
}

// CTRatio ...
type CTRatio struct {
	XMLName xml.Name `xml:"CT_Ratio"`
	NAttr   int64    `xml:"n,attr"`
	DAttr   int64    `xml:"d,attr"`
}

// CTPoint2D ...
type CTPoint2D struct {
	XMLName xml.Name      `xml:"CT_Point2D"`
	XAttr   *STCoordinate `xml:"x,attr"`
	YAttr   *STCoordinate `xml:"y,attr"`
}

// CTPositiveSize2D ...
type CTPositiveSize2D struct {
	XMLName xml.Name `xml:"CT_PositiveSize2D"`
	CxAttr  int64    `xml:"cx,attr"`
	CyAttr  int64    `xml:"cy,attr"`
}

// CTComplementTransform ...
type CTComplementTransform struct {
	XMLName xml.Name `xml:"CT_ComplementTransform"`
}

// CTInverseTransform ...
type CTInverseTransform struct {
	XMLName xml.Name `xml:"CT_InverseTransform"`
}

// CTGrayscaleTransform ...
type CTGrayscaleTransform struct {
	XMLName xml.Name `xml:"CT_GrayscaleTransform"`
}

// CTGammaTransform ...
type CTGammaTransform struct {
	XMLName xml.Name `xml:"CT_GammaTransform"`
}

// CTInverseGammaTransform ...
type CTInverseGammaTransform struct {
	XMLName xml.Name `xml:"CT_InverseGammaTransform"`
}

// EGColorTransform ...
type EGColorTransform struct {
	XMLName  xml.Name `xml:"EG_ColorTransform"`
	Tint     *CTPositiveFixedPercentage
	Shade    *CTPositiveFixedPercentage
	Comp     *CTComplementTransform
	Inv      *CTInverseTransform
	Gray     *CTGrayscaleTransform
	Alpha    *CTPositiveFixedPercentage
	AlphaOff *CTFixedPercentage
	AlphaMod *CTPositivePercentage
	Hue      *CTPositiveFixedAngle
	HueOff   *CTAngle
	HueMod   *CTPositivePercentage
	Sat      *CTPercentage
	SatOff   *CTPercentage
	SatMod   *CTPercentage
	Lum      *CTPercentage
	LumOff   *CTPercentage
	LumMod   *CTPercentage
	Red      *CTPercentage
	RedOff   *CTPercentage
	RedMod   *CTPercentage
	Green    *CTPercentage
	GreenOff *CTPercentage
	GreenMod *CTPercentage
	Blue     *CTPercentage
	BlueOff  *CTPercentage
	BlueMod  *CTPercentage
	Gamma    *CTGammaTransform
	InvGamma *CTInverseGammaTransform
}

// CTScRgbColor ...
type CTScRgbColor struct {
	XMLName          xml.Name      `xml:"CT_ScRgbColor"`
	RAttr            *STPercentage `xml:"r,attr"`
	GAttr            *STPercentage `xml:"g,attr"`
	BAttr            *STPercentage `xml:"b,attr"`
	EGColorTransform []*EGColorTransform
}

// CTSRgbColor ...
type CTSRgbColor struct {
	XMLName          xml.Name `xml:"CT_SRgbColor"`
	ValAttr          string   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// CTHslColor ...
type CTHslColor struct {
	XMLName          xml.Name      `xml:"CT_HslColor"`
	HueAttr          int           `xml:"hue,attr"`
	SatAttr          *STPercentage `xml:"sat,attr"`
	LumAttr          *STPercentage `xml:"lum,attr"`
	EGColorTransform []*EGColorTransform
}

// STSystemColorVal ...
type STSystemColorVal string

// CTSystemColor ...
type CTSystemColor struct {
	XMLName          xml.Name `xml:"CT_SystemColor"`
	ValAttr          string   `xml:"val,attr"`
	LastClrAttr      *string  `xml:"lastClr,attr"`
	EGColorTransform []*EGColorTransform
}

// STSchemeColorVal ...
type STSchemeColorVal string

// CTSchemeColor ...
type CTSchemeColor struct {
	XMLName          xml.Name `xml:"CT_SchemeColor"`
	ValAttr          string   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// STPresetColorVal ...
type STPresetColorVal string

// CTPresetColor ...
type CTPresetColor struct {
	XMLName          xml.Name `xml:"CT_PresetColor"`
	ValAttr          string   `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// EGOfficeArtExtensionList ...
type EGOfficeArtExtensionList struct {
	XMLName xml.Name `xml:"EG_OfficeArtExtensionList"`
	Ext     []*CTOfficeArtExtension
}

// CTOfficeArtExtensionList ...
type CTOfficeArtExtensionList struct {
	XMLName                  xml.Name `xml:"CT_OfficeArtExtensionList"`
	EGOfficeArtExtensionList []*EGOfficeArtExtensionList
}

// CTScale2D ...
type CTScale2D struct {
	XMLName xml.Name `xml:"CT_Scale2D"`
	Sx      *CTRatio `xml:"sx"`
	Sy      *CTRatio `xml:"sy"`
}

// CTTransform2D ...
type CTTransform2D struct {
	XMLName   xml.Name          `xml:"CT_Transform2D"`
	RotAttr   *int              `xml:"rot,attr"`
	FlipHAttr *bool             `xml:"flipH,attr"`
	FlipVAttr *bool             `xml:"flipV,attr"`
	Off       *CTPoint2D        `xml:"off"`
	Ext       *CTPositiveSize2D `xml:"ext"`
}

// CTGroupTransform2D ...
type CTGroupTransform2D struct {
	XMLName   xml.Name          `xml:"CT_GroupTransform2D"`
	RotAttr   *int              `xml:"rot,attr"`
	FlipHAttr *bool             `xml:"flipH,attr"`
	FlipVAttr *bool             `xml:"flipV,attr"`
	Off       *CTPoint2D        `xml:"off"`
	Ext       *CTPositiveSize2D `xml:"ext"`
	ChOff     *CTPoint2D        `xml:"chOff"`
	ChExt     *CTPositiveSize2D `xml:"chExt"`
}

// CTPoint3D ...
type CTPoint3D struct {
	XMLName xml.Name      `xml:"CT_Point3D"`
	XAttr   *STCoordinate `xml:"x,attr"`
	YAttr   *STCoordinate `xml:"y,attr"`
	ZAttr   *STCoordinate `xml:"z,attr"`
}

// CTVector3D ...
type CTVector3D struct {
	XMLName xml.Name      `xml:"CT_Vector3D"`
	DxAttr  *STCoordinate `xml:"dx,attr"`
	DyAttr  *STCoordinate `xml:"dy,attr"`
	DzAttr  *STCoordinate `xml:"dz,attr"`
}

// CTSphereCoords ...
type CTSphereCoords struct {
	XMLName xml.Name `xml:"CT_SphereCoords"`
	LatAttr int      `xml:"lat,attr"`
	LonAttr int      `xml:"lon,attr"`
	RevAttr int      `xml:"rev,attr"`
}

// CTRelativeRect ...
type CTRelativeRect struct {
	XMLName xml.Name      `xml:"CT_RelativeRect"`
	LAttr   *STPercentage `xml:"l,attr,omitempty"`
	TAttr   *STPercentage `xml:"t,attr,omitempty"`
	RAttr   *STPercentage `xml:"r,attr,omitempty"`
	BAttr   *STPercentage `xml:"b,attr,omitempty"`
}

// STRectAlignment ...
type STRectAlignment string

// EGColorChoice ...
type EGColorChoice struct {
	XMLName   xml.Name `xml:"EG_ColorChoice"`
	ScrgbClr  *CTScRgbColor
	SrgbClr   *CTSRgbColor
	HslClr    *CTHslColor
	SysClr    *CTSystemColor
	SchemeClr *CTSchemeColor
	PrstClr   *CTPresetColor
}

// CTColor ...
type CTColor struct {
	XMLName       xml.Name `xml:"CT_Color"`
	EGColorChoice *EGColorChoice
}

// CTColorMRU ...
type CTColorMRU struct {
	XMLName       xml.Name `xml:"CT_ColorMRU"`
	EGColorChoice []*EGColorChoice
}

// STBlackWhiteMode ...
type STBlackWhiteMode string

// AGBlob ...
type AGBlob struct {
	XMLName    xml.Name `xml:"AG_Blob"`
	REmbedAttr string   `xml:"r:embed,attr,omitempty"`
	RLinkAttr  string   `xml:"r:link,attr,omitempty"`
}

// CTEmbeddedWAVAudioFile ...
type CTEmbeddedWAVAudioFile struct {
	XMLName    xml.Name `xml:"CT_EmbeddedWAVAudioFile"`
	REmbedAttr string   `xml:"r:embed,attr"`
	NameAttr   *string  `xml:"name,attr"`
}

// CTHyperlink ...
type CTHyperlink struct {
	XMLName            xml.Name                  `xml:"CT_Hyperlink"`
	RIdAttr            *string                   `xml:"r:id,attr"`
	InvalidUrlAttr     *string                   `xml:"invalidUrl,attr"`
	ActionAttr         *string                   `xml:"action,attr"`
	TgtFrameAttr       *string                   `xml:"tgtFrame,attr"`
	TooltipAttr        *string                   `xml:"tooltip,attr"`
	HistoryAttr        *bool                     `xml:"history,attr"`
	HighlightClickAttr *bool                     `xml:"highlightClick,attr"`
	EndSndAttr         *bool                     `xml:"endSnd,attr"`
	Snd                *CTEmbeddedWAVAudioFile   `xml:"snd"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// STDrawingElementId ...
type STDrawingElementId uint32

// AGLocking ...
type AGLocking struct {
	XMLName                xml.Name `xml:"AG_Locking"`
	NoGrpAttr              bool     `xml:"noGrp,attr,omitempty"`
	NoSelectAttr           bool     `xml:"noSelect,attr,omitempty"`
	NoRotAttr              bool     `xml:"noRot,attr,omitempty"`
	NoChangeAspectAttr     bool     `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr             bool     `xml:"noMove,attr,omitempty"`
	NoResizeAttr           bool     `xml:"noResize,attr,omitempty"`
	NoEditPointsAttr       bool     `xml:"noEditPoints,attr,omitempty"`
	NoAdjustHandlesAttr    bool     `xml:"noAdjustHandles,attr,omitempty"`
	NoChangeArrowheadsAttr bool     `xml:"noChangeArrowheads,attr,omitempty"`
	NoChangeShapeTypeAttr  bool     `xml:"noChangeShapeType,attr,omitempty"`
}

// CTConnectorLocking ...
type CTConnectorLocking struct {
	XMLName   xml.Name `xml:"CT_ConnectorLocking"`
	AGLocking *AGLocking
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTShapeLocking ...
type CTShapeLocking struct {
	XMLName        xml.Name `xml:"CT_ShapeLocking"`
	AGLocking      *AGLocking
	NoTextEditAttr *bool                     `xml:"noTextEdit,attr"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTPictureLocking ...
type CTPictureLocking struct {
	XMLName    xml.Name `xml:"CT_PictureLocking"`
	AGLocking  *AGLocking
	NoCropAttr *bool                     `xml:"noCrop,attr"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupLocking ...
type CTGroupLocking struct {
	XMLName            xml.Name                  `xml:"CT_GroupLocking"`
	NoGrpAttr          *bool                     `xml:"noGrp,attr"`
	NoUngrpAttr        *bool                     `xml:"noUngrp,attr"`
	NoSelectAttr       *bool                     `xml:"noSelect,attr"`
	NoRotAttr          *bool                     `xml:"noRot,attr"`
	NoChangeAspectAttr *bool                     `xml:"noChangeAspect,attr"`
	NoMoveAttr         *bool                     `xml:"noMove,attr"`
	NoResizeAttr       *bool                     `xml:"noResize,attr"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectFrameLocking ...
type CTGraphicalObjectFrameLocking struct {
	XMLName            xml.Name                  `xml:"CT_GraphicalObjectFrameLocking"`
	NoGrpAttr          *bool                     `xml:"noGrp,attr"`
	NoDrilldownAttr    *bool                     `xml:"noDrilldown,attr"`
	NoSelectAttr       *bool                     `xml:"noSelect,attr"`
	NoChangeAspectAttr *bool                     `xml:"noChangeAspect,attr"`
	NoMoveAttr         *bool                     `xml:"noMove,attr"`
	NoResizeAttr       *bool                     `xml:"noResize,attr"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTContentPartLocking ...
type CTContentPartLocking struct {
	XMLName   xml.Name `xml:"CT_ContentPartLocking"`
	AGLocking *AGLocking
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingProps ...
type CTNonVisualDrawingProps struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualDrawingProps"`
	IdAttr     uint32                    `xml:"id,attr"`
	NameAttr   string                    `xml:"name,attr"`
	DescrAttr  *string                   `xml:"descr,attr"`
	HiddenAttr *bool                     `xml:"hidden,attr"`
	TitleAttr  *string                   `xml:"title,attr"`
	HlinkClick *CTHyperlink              `xml:"hlinkClick"`
	HlinkHover *CTHyperlink              `xml:"hlinkHover"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingShapeProps ...
type CTNonVisualDrawingShapeProps struct {
	XMLName   xml.Name                  `xml:"CT_NonVisualDrawingShapeProps"`
	TxBoxAttr *bool                     `xml:"txBox,attr"`
	SpLocks   *CTShapeLocking           `xml:"spLocks"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualConnectorProperties ...
type CTNonVisualConnectorProperties struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualConnectorProperties"`
	CxnSpLocks *CTConnectorLocking       `xml:"cxnSpLocks"`
	StCxn      *CTConnection             `xml:"stCxn"`
	EndCxn     *CTConnection             `xml:"endCxn"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualPictureProperties ...
type CTNonVisualPictureProperties struct {
	XMLName                  xml.Name                  `xml:"CT_NonVisualPictureProperties"`
	PreferRelativeResizeAttr *bool                     `xml:"preferRelativeResize,attr"`
	PicLocks                 *CTPictureLocking         `xml:"picLocks"`
	ExtLst                   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGroupDrawingShapeProps ...
type CTNonVisualGroupDrawingShapeProps struct {
	XMLName    xml.Name                  `xml:"CT_NonVisualGroupDrawingShapeProps"`
	GrpSpLocks *CTGroupLocking           `xml:"grpSpLocks"`
	ExtLst     *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGraphicFrameProperties ...
type CTNonVisualGraphicFrameProperties struct {
	XMLName           xml.Name                       `xml:"CT_NonVisualGraphicFrameProperties"`
	GraphicFrameLocks *CTGraphicalObjectFrameLocking `xml:"graphicFrameLocks"`
	ExtLst            *CTOfficeArtExtensionList      `xml:"extLst"`
}

// CTNonVisualContentPartProperties ...
type CTNonVisualContentPartProperties struct {
	XMLName       xml.Name                  `xml:"CT_NonVisualContentPartProperties"`
	IsCommentAttr *bool                     `xml:"isComment,attr"`
	CpLocks       *CTContentPartLocking     `xml:"cpLocks"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectData ...
type CTGraphicalObjectData struct {
	XMLName xml.Name `xml:"CT_GraphicalObjectData"`
	UriAttr string   `xml:"uri,attr"`
}

// CTGraphicalObject ...
type CTGraphicalObject struct {
	XMLName     xml.Name               `xml:"CT_GraphicalObject"`
	GraphicData *CTGraphicalObjectData `xml:"graphicData"`
}

// Graphic ...
type Graphic *CTGraphicalObject

// STChartBuildStep ...
type STChartBuildStep string

// STDgmBuildStep ...
type STDgmBuildStep string

// CTAnimationDgmElement ...
type CTAnimationDgmElement struct {
	XMLName     xml.Name `xml:"CT_AnimationDgmElement"`
	IdAttr      *string  `xml:"id,attr"`
	BldStepAttr *string  `xml:"bldStep,attr"`
}

// CTAnimationChartElement ...
type CTAnimationChartElement struct {
	XMLName         xml.Name `xml:"CT_AnimationChartElement"`
	SeriesIdxAttr   *int     `xml:"seriesIdx,attr"`
	CategoryIdxAttr *int     `xml:"categoryIdx,attr"`
	BldStepAttr     string   `xml:"bldStep,attr"`
}

// CTAnimationElementChoice ...
type CTAnimationElementChoice struct {
	XMLName xml.Name                 `xml:"CT_AnimationElementChoice"`
	Dgm     *CTAnimationDgmElement   `xml:"dgm"`
	Chart   *CTAnimationChartElement `xml:"chart"`
}

// STAnimationBuildType ...
type STAnimationBuildType string

// STAnimationDgmOnlyBuildType ...
type STAnimationDgmOnlyBuildType string

// STAnimationDgmBuildType ...
type STAnimationDgmBuildType struct {
	XMLName                     xml.Name `xml:"ST_AnimationDgmBuildType"`
	STAnimationDgmOnlyBuildType string
	STAnimationBuildType        string
}

// CTAnimationDgmBuildProperties ...
type CTAnimationDgmBuildProperties struct {
	XMLName xml.Name                 `xml:"CT_AnimationDgmBuildProperties"`
	BldAttr *STAnimationDgmBuildType `xml:"bld,attr,omitempty"`
	RevAttr *bool                    `xml:"rev,attr"`
}

// STAnimationChartOnlyBuildType ...
type STAnimationChartOnlyBuildType string

// STAnimationChartBuildType ...
type STAnimationChartBuildType struct {
	XMLName                       xml.Name `xml:"ST_AnimationChartBuildType"`
	STAnimationChartOnlyBuildType string
	STAnimationBuildType          string
}

// CTAnimationChartBuildProperties ...
type CTAnimationChartBuildProperties struct {
	XMLName    xml.Name                   `xml:"CT_AnimationChartBuildProperties"`
	BldAttr    *STAnimationChartBuildType `xml:"bld,attr,omitempty"`
	AnimBgAttr *bool                      `xml:"animBg,attr"`
}

// CTAnimationGraphicalObjectBuildProperties ...
type CTAnimationGraphicalObjectBuildProperties struct {
	XMLName  xml.Name                         `xml:"CT_AnimationGraphicalObjectBuildProperties"`
	BldDgm   *CTAnimationDgmBuildProperties   `xml:"bldDgm"`
	BldChart *CTAnimationChartBuildProperties `xml:"bldChart"`
}

// CTBackgroundFormatting ...
type CTBackgroundFormatting struct {
	XMLName            xml.Name `xml:"CT_BackgroundFormatting"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
}

// CTWholeE2oFormatting ...
type CTWholeE2oFormatting struct {
	XMLName            xml.Name `xml:"CT_WholeE2oFormatting"`
	EGEffectProperties []*EGEffectProperties
	Ln                 *CTLineProperties `xml:"ln"`
}

// CTGvmlUseShapeRectangle ...
type CTGvmlUseShapeRectangle struct {
	XMLName xml.Name `xml:"CT_GvmlUseShapeRectangle"`
}

// CTGvmlTextShape ...
type CTGvmlTextShape struct {
	XMLName   xml.Name                  `xml:"CT_GvmlTextShape"`
	TxBody    *CTTextBody               `xml:"txBody"`
	UseSpRect *CTGvmlUseShapeRectangle  `xml:"useSpRect"`
	Xfrm      *CTTransform2D            `xml:"xfrm"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlShapeNonVisual ...
type CTGvmlShapeNonVisual struct {
	XMLName xml.Name                      `xml:"CT_GvmlShapeNonVisual"`
	CNvPr   *CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvSpPr *CTNonVisualDrawingShapeProps `xml:"cNvSpPr"`
}

// CTGvmlShape ...
type CTGvmlShape struct {
	XMLName xml.Name                  `xml:"CT_GvmlShape"`
	NvSpPr  *CTGvmlShapeNonVisual     `xml:"nvSpPr"`
	SpPr    *CTShapeProperties        `xml:"spPr"`
	TxSp    *CTGvmlTextShape          `xml:"txSp"`
	Style   *CTShapeStyle             `xml:"style"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlConnectorNonVisual ...
type CTGvmlConnectorNonVisual struct {
	XMLName    xml.Name                        `xml:"CT_GvmlConnectorNonVisual"`
	CNvPr      *CTNonVisualDrawingProps        `xml:"cNvPr"`
	CNvCxnSpPr *CTNonVisualConnectorProperties `xml:"cNvCxnSpPr"`
}

// CTGvmlConnector ...
type CTGvmlConnector struct {
	XMLName   xml.Name                  `xml:"CT_GvmlConnector"`
	NvCxnSpPr *CTGvmlConnectorNonVisual `xml:"nvCxnSpPr"`
	SpPr      *CTShapeProperties        `xml:"spPr"`
	Style     *CTShapeStyle             `xml:"style"`
	ExtLst    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlPictureNonVisual ...
type CTGvmlPictureNonVisual struct {
	XMLName  xml.Name                      `xml:"CT_GvmlPictureNonVisual"`
	CNvPr    *CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvPicPr *CTNonVisualPictureProperties `xml:"cNvPicPr"`
}

// CTGvmlPicture ...
type CTGvmlPicture struct {
	XMLName  xml.Name                  `xml:"CT_GvmlPicture"`
	NvPicPr  *CTGvmlPictureNonVisual   `xml:"nvPicPr"`
	BlipFill *CTBlipFillProperties     `xml:"blipFill"`
	SpPr     *CTShapeProperties        `xml:"spPr"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlGraphicFrameNonVisual ...
type CTGvmlGraphicFrameNonVisual struct {
	XMLName           xml.Name                           `xml:"CT_GvmlGraphicFrameNonVisual"`
	CNvPr             *CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGraphicFramePr *CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
}

// CTGvmlGraphicalObjectFrame ...
type CTGvmlGraphicalObjectFrame struct {
	XMLName          xml.Name                     `xml:"CT_GvmlGraphicalObjectFrame"`
	NvGraphicFramePr *CTGvmlGraphicFrameNonVisual `xml:"nvGraphicFramePr"`
	Graphic          *CTGraphicalObject           `xml:"graphic"`
	Xfrm             *CTTransform2D               `xml:"xfrm"`
	ExtLst           *CTOfficeArtExtensionList    `xml:"extLst"`
}

// CTGvmlGroupShapeNonVisual ...
type CTGvmlGroupShapeNonVisual struct {
	XMLName    xml.Name                           `xml:"CT_GvmlGroupShapeNonVisual"`
	CNvPr      *CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGrpSpPr *CTNonVisualGroupDrawingShapeProps `xml:"cNvGrpSpPr"`
}

// CTGvmlGroupShape ...
type CTGvmlGroupShape struct {
	XMLName      xml.Name                      `xml:"CT_GvmlGroupShape"`
	NvGrpSpPr    *CTGvmlGroupShapeNonVisual    `xml:"nvGrpSpPr"`
	GrpSpPr      *CTGroupShapeProperties       `xml:"grpSpPr"`
	TxSp         []*CTGvmlTextShape            `xml:"txSp"`
	Sp           []*CTGvmlShape                `xml:"sp"`
	CxnSp        []*CTGvmlConnector            `xml:"cxnSp"`
	Pic          []*CTGvmlPicture              `xml:"pic"`
	GraphicFrame []*CTGvmlGraphicalObjectFrame `xml:"graphicFrame"`
	GrpSp        []*CTGvmlGroupShape           `xml:"grpSp"`
	ExtLst       *CTOfficeArtExtensionList     `xml:"extLst"`
}

// STPresetCameraType ...
type STPresetCameraType string

// STFOVAngle ...
type STFOVAngle int

// CTCamera ...
type CTCamera struct {
	XMLName  xml.Name              `xml:"CT_Camera"`
	PrstAttr string                `xml:"prst,attr"`
	FovAttr  *int                  `xml:"fov,attr"`
	ZoomAttr *STPositivePercentage `xml:"zoom,attr,omitempty"`
	Rot      *CTSphereCoords       `xml:"rot"`
}

// STLightRigDirection ...
type STLightRigDirection string

// STLightRigType ...
type STLightRigType string

// CTLightRig ...
type CTLightRig struct {
	XMLName xml.Name        `xml:"CT_LightRig"`
	RigAttr string          `xml:"rig,attr"`
	DirAttr string          `xml:"dir,attr"`
	Rot     *CTSphereCoords `xml:"rot"`
}

// CTScene3D ...
type CTScene3D struct {
	XMLName  xml.Name                  `xml:"CT_Scene3D"`
	Camera   *CTCamera                 `xml:"camera"`
	LightRig *CTLightRig               `xml:"lightRig"`
	Backdrop *CTBackdrop               `xml:"backdrop"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBackdrop ...
type CTBackdrop struct {
	XMLName xml.Name                  `xml:"CT_Backdrop"`
	Anchor  *CTPoint3D                `xml:"anchor"`
	Norm    *CTVector3D               `xml:"norm"`
	Up      *CTVector3D               `xml:"up"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// STBevelPresetType ...
type STBevelPresetType string

// CTBevel ...
type CTBevel struct {
	XMLName  xml.Name `xml:"CT_Bevel"`
	WAttr    *int64   `xml:"w,attr"`
	HAttr    *int64   `xml:"h,attr"`
	PrstAttr *string  `xml:"prst,attr"`
}

// STPresetMaterialType ...
type STPresetMaterialType string

// CTShape3D ...
type CTShape3D struct {
	XMLName          xml.Name                  `xml:"CT_Shape3D"`
	ZAttr            *STCoordinate             `xml:"z,attr,omitempty"`
	ExtrusionHAttr   *int64                    `xml:"extrusionH,attr"`
	ContourWAttr     *int64                    `xml:"contourW,attr"`
	PrstMaterialAttr *string                   `xml:"prstMaterial,attr"`
	BevelT           *CTBevel                  `xml:"bevelT"`
	BevelB           *CTBevel                  `xml:"bevelB"`
	ExtrusionClr     *CTColor                  `xml:"extrusionClr"`
	ContourClr       *CTColor                  `xml:"contourClr"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFlatText ...
type CTFlatText struct {
	XMLName xml.Name      `xml:"CT_FlatText"`
	ZAttr   *STCoordinate `xml:"z,attr,omitempty"`
}

// EGText3D ...
type EGText3D struct {
	XMLName xml.Name `xml:"EG_Text3D"`
	Sp3d    *CTShape3D
	FlatTx  *CTFlatText
}

// CTAlphaBiLevelEffect ...
type CTAlphaBiLevelEffect struct {
	XMLName    xml.Name                   `xml:"CT_AlphaBiLevelEffect"`
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTAlphaCeilingEffect ...
type CTAlphaCeilingEffect struct {
	XMLName xml.Name `xml:"CT_AlphaCeilingEffect"`
}

// CTAlphaFloorEffect ...
type CTAlphaFloorEffect struct {
	XMLName xml.Name `xml:"CT_AlphaFloorEffect"`
}

// CTAlphaInverseEffect ...
type CTAlphaInverseEffect struct {
	XMLName       xml.Name `xml:"CT_AlphaInverseEffect"`
	EGColorChoice []*EGColorChoice
}

// CTAlphaModulateFixedEffect ...
type CTAlphaModulateFixedEffect struct {
	XMLName xml.Name              `xml:"CT_AlphaModulateFixedEffect"`
	AmtAttr *STPositivePercentage `xml:"amt,attr,omitempty"`
}

// CTAlphaOutsetEffect ...
type CTAlphaOutsetEffect struct {
	XMLName xml.Name      `xml:"CT_AlphaOutsetEffect"`
	RadAttr *STCoordinate `xml:"rad,attr,omitempty"`
}

// CTAlphaReplaceEffect ...
type CTAlphaReplaceEffect struct {
	XMLName xml.Name                   `xml:"CT_AlphaReplaceEffect"`
	AAttr   *STPositiveFixedPercentage `xml:"a,attr"`
}

// CTBiLevelEffect ...
type CTBiLevelEffect struct {
	XMLName    xml.Name                   `xml:"CT_BiLevelEffect"`
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTBlurEffect ...
type CTBlurEffect struct {
	XMLName  xml.Name `xml:"CT_BlurEffect"`
	RadAttr  *int64   `xml:"rad,attr"`
	GrowAttr *bool    `xml:"grow,attr"`
}

// CTColorChangeEffect ...
type CTColorChangeEffect struct {
	XMLName  xml.Name `xml:"CT_ColorChangeEffect"`
	UseAAttr *bool    `xml:"useA,attr"`
	ClrFrom  *CTColor `xml:"clrFrom"`
	ClrTo    *CTColor `xml:"clrTo"`
}

// CTColorReplaceEffect ...
type CTColorReplaceEffect struct {
	XMLName       xml.Name `xml:"CT_ColorReplaceEffect"`
	EGColorChoice []*EGColorChoice
}

// CTDuotoneEffect ...
type CTDuotoneEffect struct {
	XMLName       xml.Name `xml:"CT_DuotoneEffect"`
	EGColorChoice []*EGColorChoice
}

// CTGlowEffect ...
type CTGlowEffect struct {
	XMLName       xml.Name `xml:"CT_GlowEffect"`
	RadAttr       *int64   `xml:"rad,attr"`
	EGColorChoice []*EGColorChoice
}

// CTGrayscaleEffect ...
type CTGrayscaleEffect struct {
	XMLName xml.Name `xml:"CT_GrayscaleEffect"`
}

// CTHSLEffect ...
type CTHSLEffect struct {
	XMLName xml.Name           `xml:"CT_HSLEffect"`
	HueAttr *int               `xml:"hue,attr"`
	SatAttr *STFixedPercentage `xml:"sat,attr,omitempty"`
	LumAttr *STFixedPercentage `xml:"lum,attr,omitempty"`
}

// CTInnerShadowEffect ...
type CTInnerShadowEffect struct {
	XMLName       xml.Name `xml:"CT_InnerShadowEffect"`
	BlurRadAttr   *int64   `xml:"blurRad,attr"`
	DistAttr      *int64   `xml:"dist,attr"`
	DirAttr       *int     `xml:"dir,attr"`
	EGColorChoice []*EGColorChoice
}

// CTLuminanceEffect ...
type CTLuminanceEffect struct {
	XMLName      xml.Name           `xml:"CT_LuminanceEffect"`
	BrightAttr   *STFixedPercentage `xml:"bright,attr,omitempty"`
	ContrastAttr *STFixedPercentage `xml:"contrast,attr,omitempty"`
}

// CTOuterShadowEffect ...
type CTOuterShadowEffect struct {
	XMLName          xml.Name      `xml:"CT_OuterShadowEffect"`
	BlurRadAttr      *int64        `xml:"blurRad,attr"`
	DistAttr         *int64        `xml:"dist,attr"`
	DirAttr          *int          `xml:"dir,attr"`
	SxAttr           *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr           *int          `xml:"kx,attr"`
	KyAttr           *int          `xml:"ky,attr"`
	AlgnAttr         *string       `xml:"algn,attr"`
	RotWithShapeAttr *bool         `xml:"rotWithShape,attr"`
	EGColorChoice    []*EGColorChoice
}

// STPresetShadowVal ...
type STPresetShadowVal string

// CTPresetShadowEffect ...
type CTPresetShadowEffect struct {
	XMLName       xml.Name `xml:"CT_PresetShadowEffect"`
	PrstAttr      string   `xml:"prst,attr"`
	DistAttr      *int64   `xml:"dist,attr"`
	DirAttr       *int     `xml:"dir,attr"`
	EGColorChoice []*EGColorChoice
}

// CTReflectionEffect ...
type CTReflectionEffect struct {
	XMLName          xml.Name                   `xml:"CT_ReflectionEffect"`
	BlurRadAttr      *int64                     `xml:"blurRad,attr"`
	StAAttr          *STPositiveFixedPercentage `xml:"stA,attr,omitempty"`
	StPosAttr        *STPositiveFixedPercentage `xml:"stPos,attr,omitempty"`
	EndAAttr         *STPositiveFixedPercentage `xml:"endA,attr,omitempty"`
	EndPosAttr       *STPositiveFixedPercentage `xml:"endPos,attr,omitempty"`
	DistAttr         *int64                     `xml:"dist,attr"`
	DirAttr          *int                       `xml:"dir,attr"`
	FadeDirAttr      *int                       `xml:"fadeDir,attr"`
	SxAttr           *STPercentage              `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage              `xml:"sy,attr,omitempty"`
	KxAttr           *int                       `xml:"kx,attr"`
	KyAttr           *int                       `xml:"ky,attr"`
	AlgnAttr         *string                    `xml:"algn,attr"`
	RotWithShapeAttr *bool                      `xml:"rotWithShape,attr"`
}

// CTRelativeOffsetEffect ...
type CTRelativeOffsetEffect struct {
	XMLName xml.Name      `xml:"CT_RelativeOffsetEffect"`
	TxAttr  *STPercentage `xml:"tx,attr,omitempty"`
	TyAttr  *STPercentage `xml:"ty,attr,omitempty"`
}

// CTSoftEdgesEffect ...
type CTSoftEdgesEffect struct {
	XMLName xml.Name `xml:"CT_SoftEdgesEffect"`
	RadAttr int64    `xml:"rad,attr"`
}

// CTTintEffect ...
type CTTintEffect struct {
	XMLName xml.Name           `xml:"CT_TintEffect"`
	HueAttr *int               `xml:"hue,attr"`
	AmtAttr *STFixedPercentage `xml:"amt,attr,omitempty"`
}

// CTTransformEffect ...
type CTTransformEffect struct {
	XMLName xml.Name      `xml:"CT_TransformEffect"`
	SxAttr  *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr  *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr  *int          `xml:"kx,attr"`
	KyAttr  *int          `xml:"ky,attr"`
	TxAttr  *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr  *STCoordinate `xml:"ty,attr,omitempty"`
}

// CTNoFillProperties ...
type CTNoFillProperties struct {
	XMLName xml.Name `xml:"CT_NoFillProperties"`
}

// CTSolidColorFillProperties ...
type CTSolidColorFillProperties struct {
	XMLName       xml.Name `xml:"CT_SolidColorFillProperties"`
	EGColorChoice []*EGColorChoice
}

// CTLinearShadeProperties ...
type CTLinearShadeProperties struct {
	XMLName    xml.Name `xml:"CT_LinearShadeProperties"`
	AngAttr    *int     `xml:"ang,attr"`
	ScaledAttr *bool    `xml:"scaled,attr"`
}

// STPathShadeType ...
type STPathShadeType string

// CTPathShadeProperties ...
type CTPathShadeProperties struct {
	XMLName    xml.Name        `xml:"CT_PathShadeProperties"`
	PathAttr   *string         `xml:"path,attr"`
	FillToRect *CTRelativeRect `xml:"fillToRect"`
}

// EGShadeProperties ...
type EGShadeProperties struct {
	XMLName xml.Name `xml:"EG_ShadeProperties"`
	Lin     *CTLinearShadeProperties
	Path    *CTPathShadeProperties
}

// STTileFlipMode ...
type STTileFlipMode string

// CTGradientStop ...
type CTGradientStop struct {
	XMLName       xml.Name                   `xml:"CT_GradientStop"`
	PosAttr       *STPositiveFixedPercentage `xml:"pos,attr"`
	EGColorChoice []*EGColorChoice
}

// CTGradientStopList ...
type CTGradientStopList struct {
	XMLName xml.Name          `xml:"CT_GradientStopList"`
	Gs      []*CTGradientStop `xml:"gs"`
}

// CTGradientFillProperties ...
type CTGradientFillProperties struct {
	XMLName           xml.Name `xml:"CT_GradientFillProperties"`
	FlipAttr          *string  `xml:"flip,attr"`
	RotWithShapeAttr  *bool    `xml:"rotWithShape,attr"`
	EGShadeProperties []*EGShadeProperties
	GsLst             *CTGradientStopList `xml:"gsLst"`
	TileRect          *CTRelativeRect     `xml:"tileRect"`
}

// CTTileInfoProperties ...
type CTTileInfoProperties struct {
	XMLName  xml.Name      `xml:"CT_TileInfoProperties"`
	TxAttr   *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr   *STCoordinate `xml:"ty,attr,omitempty"`
	SxAttr   *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr   *STPercentage `xml:"sy,attr,omitempty"`
	FlipAttr *string       `xml:"flip,attr"`
	AlgnAttr *string       `xml:"algn,attr"`
}

// CTStretchInfoProperties ...
type CTStretchInfoProperties struct {
	XMLName  xml.Name        `xml:"CT_StretchInfoProperties"`
	FillRect *CTRelativeRect `xml:"fillRect"`
}

// EGFillModeProperties ...
type EGFillModeProperties struct {
	XMLName xml.Name `xml:"EG_FillModeProperties"`
	Tile    *CTTileInfoProperties
	Stretch *CTStretchInfoProperties
}

// STBlipCompression ...
type STBlipCompression string

// CTBlip ...
type CTBlip struct {
	XMLName      xml.Name `xml:"CT_Blip"`
	AGBlob       *AGBlob
	CstateAttr   *string                       `xml:"cstate,attr"`
	AlphaBiLevel []*CTAlphaBiLevelEffect       `xml:"alphaBiLevel"`
	AlphaCeiling []*CTAlphaCeilingEffect       `xml:"alphaCeiling"`
	AlphaFloor   []*CTAlphaFloorEffect         `xml:"alphaFloor"`
	AlphaInv     []*CTAlphaInverseEffect       `xml:"alphaInv"`
	AlphaMod     []*CTAlphaModulateEffect      `xml:"alphaMod"`
	AlphaModFix  []*CTAlphaModulateFixedEffect `xml:"alphaModFix"`
	AlphaRepl    []*CTAlphaReplaceEffect       `xml:"alphaRepl"`
	BiLevel      []*CTBiLevelEffect            `xml:"biLevel"`
	Blur         []*CTBlurEffect               `xml:"blur"`
	ClrChange    []*CTColorChangeEffect        `xml:"clrChange"`
	ClrRepl      []*CTColorReplaceEffect       `xml:"clrRepl"`
	Duotone      []*CTDuotoneEffect            `xml:"duotone"`
	FillOverlay  []*CTFillOverlayEffect        `xml:"fillOverlay"`
	Grayscl      []*CTGrayscaleEffect          `xml:"grayscl"`
	Hsl          []*CTHSLEffect                `xml:"hsl"`
	Lum          []*CTLuminanceEffect          `xml:"lum"`
	Tint         []*CTTintEffect               `xml:"tint"`
	ExtLst       *CTOfficeArtExtensionList     `xml:"extLst"`
}

// CTBlipFillProperties ...
type CTBlipFillProperties struct {
	XMLName              xml.Name `xml:"CT_BlipFillProperties"`
	DpiAttr              *uint32  `xml:"dpi,attr"`
	RotWithShapeAttr     *bool    `xml:"rotWithShape,attr"`
	EGFillModeProperties []*EGFillModeProperties
	Blip                 *CTBlip         `xml:"blip"`
	SrcRect              *CTRelativeRect `xml:"srcRect"`
}

// STPresetPatternVal ...
type STPresetPatternVal string

// CTPatternFillProperties ...
type CTPatternFillProperties struct {
	XMLName  xml.Name `xml:"CT_PatternFillProperties"`
	PrstAttr *string  `xml:"prst,attr"`
	FgClr    *CTColor `xml:"fgClr"`
	BgClr    *CTColor `xml:"bgClr"`
}

// CTGroupFillProperties ...
type CTGroupFillProperties struct {
	XMLName xml.Name `xml:"CT_GroupFillProperties"`
}

// EGFillProperties ...
type EGFillProperties struct {
	XMLName   xml.Name `xml:"EG_FillProperties"`
	NoFill    *CTNoFillProperties
	SolidFill *CTSolidColorFillProperties
	GradFill  *CTGradientFillProperties
	BlipFill  *CTBlipFillProperties
	PattFill  *CTPatternFillProperties
	GrpFill   *CTGroupFillProperties
}

// CTFillProperties ...
type CTFillProperties struct {
	XMLName          xml.Name `xml:"CT_FillProperties"`
	EGFillProperties []*EGFillProperties
}

// CTFillEffect ...
type CTFillEffect struct {
	XMLName          xml.Name `xml:"CT_FillEffect"`
	EGFillProperties []*EGFillProperties
}

// STBlendMode ...
type STBlendMode string

// CTFillOverlayEffect ...
type CTFillOverlayEffect struct {
	XMLName          xml.Name `xml:"CT_FillOverlayEffect"`
	BlendAttr        string   `xml:"blend,attr"`
	EGFillProperties []*EGFillProperties
}

// CTEffectReference ...
type CTEffectReference struct {
	XMLName xml.Name `xml:"CT_EffectReference"`
	RefAttr string   `xml:"ref,attr"`
}

// EGEffect ...
type EGEffect struct {
	XMLName      xml.Name `xml:"EG_Effect"`
	Cont         *CTEffectContainer
	Effect       *CTEffectReference
	AlphaBiLevel *CTAlphaBiLevelEffect
	AlphaCeiling *CTAlphaCeilingEffect
	AlphaFloor   *CTAlphaFloorEffect
	AlphaInv     *CTAlphaInverseEffect
	AlphaMod     *CTAlphaModulateEffect
	AlphaModFix  *CTAlphaModulateFixedEffect
	AlphaOutset  *CTAlphaOutsetEffect
	AlphaRepl    *CTAlphaReplaceEffect
	BiLevel      *CTBiLevelEffect
	Blend        *CTBlendEffect
	Blur         *CTBlurEffect
	ClrChange    *CTColorChangeEffect
	ClrRepl      *CTColorReplaceEffect
	Duotone      *CTDuotoneEffect
	Fill         *CTFillEffect
	FillOverlay  *CTFillOverlayEffect
	Glow         *CTGlowEffect
	Grayscl      *CTGrayscaleEffect
	Hsl          *CTHSLEffect
	InnerShdw    *CTInnerShadowEffect
	Lum          *CTLuminanceEffect
	OuterShdw    *CTOuterShadowEffect
	PrstShdw     *CTPresetShadowEffect
	Reflection   *CTReflectionEffect
	RelOff       *CTRelativeOffsetEffect
	SoftEdge     *CTSoftEdgesEffect
	Tint         *CTTintEffect
	Xfrm         *CTTransformEffect
}

// STEffectContainerType ...
type STEffectContainerType string

// CTEffectContainer ...
type CTEffectContainer struct {
	XMLName  xml.Name `xml:"CT_EffectContainer"`
	TypeAttr *string  `xml:"type,attr"`
	NameAttr *string  `xml:"name,attr"`
	EGEffect []*EGEffect
}

// CTAlphaModulateEffect ...
type CTAlphaModulateEffect struct {
	XMLName xml.Name           `xml:"CT_AlphaModulateEffect"`
	Cont    *CTEffectContainer `xml:"cont"`
}

// CTBlendEffect ...
type CTBlendEffect struct {
	XMLName   xml.Name           `xml:"CT_BlendEffect"`
	BlendAttr string             `xml:"blend,attr"`
	Cont      *CTEffectContainer `xml:"cont"`
}

// CTEffectList ...
type CTEffectList struct {
	XMLName     xml.Name              `xml:"CT_EffectList"`
	Blur        *CTBlurEffect         `xml:"blur"`
	FillOverlay *CTFillOverlayEffect  `xml:"fillOverlay"`
	Glow        *CTGlowEffect         `xml:"glow"`
	InnerShdw   *CTInnerShadowEffect  `xml:"innerShdw"`
	OuterShdw   *CTOuterShadowEffect  `xml:"outerShdw"`
	PrstShdw    *CTPresetShadowEffect `xml:"prstShdw"`
	Reflection  *CTReflectionEffect   `xml:"reflection"`
	SoftEdge    *CTSoftEdgesEffect    `xml:"softEdge"`
}

// EGEffectProperties ...
type EGEffectProperties struct {
	XMLName   xml.Name `xml:"EG_EffectProperties"`
	EffectLst *CTEffectList
	EffectDag *CTEffectContainer
}

// CTEffectProperties ...
type CTEffectProperties struct {
	XMLName            xml.Name `xml:"CT_EffectProperties"`
	EGEffectProperties []*EGEffectProperties
}

// Blip ...
type Blip *CTBlip

// STShapeType ...
type STShapeType string

// STTextShapeType ...
type STTextShapeType string

// STGeomGuideName ...
type STGeomGuideName string

// STGeomGuideFormula ...
type STGeomGuideFormula string

// CTGeomGuide ...
type CTGeomGuide struct {
	XMLName  xml.Name `xml:"CT_GeomGuide"`
	NameAttr string   `xml:"name,attr"`
	FmlaAttr string   `xml:"fmla,attr"`
}

// CTGeomGuideList ...
type CTGeomGuideList struct {
	XMLName xml.Name       `xml:"CT_GeomGuideList"`
	Gd      []*CTGeomGuide `xml:"gd"`
}

// STAdjCoordinate ...
type STAdjCoordinate struct {
	XMLName         xml.Name `xml:"ST_AdjCoordinate"`
	STCoordinate    *STCoordinate
	STGeomGuideName string
}

// STAdjAngle ...
type STAdjAngle struct {
	XMLName         xml.Name `xml:"ST_AdjAngle"`
	STAngle         int
	STGeomGuideName string
}

// CTAdjPoint2D ...
type CTAdjPoint2D struct {
	XMLName xml.Name         `xml:"CT_AdjPoint2D"`
	XAttr   *STAdjCoordinate `xml:"x,attr"`
	YAttr   *STAdjCoordinate `xml:"y,attr"`
}

// CTGeomRect ...
type CTGeomRect struct {
	XMLName xml.Name         `xml:"CT_GeomRect"`
	LAttr   *STAdjCoordinate `xml:"l,attr"`
	TAttr   *STAdjCoordinate `xml:"t,attr"`
	RAttr   *STAdjCoordinate `xml:"r,attr"`
	BAttr   *STAdjCoordinate `xml:"b,attr"`
}

// CTXYAdjustHandle ...
type CTXYAdjustHandle struct {
	XMLName    xml.Name         `xml:"CT_XYAdjustHandle"`
	GdRefXAttr *string          `xml:"gdRefX,attr"`
	MinXAttr   *STAdjCoordinate `xml:"minX,attr,omitempty"`
	MaxXAttr   *STAdjCoordinate `xml:"maxX,attr,omitempty"`
	GdRefYAttr *string          `xml:"gdRefY,attr"`
	MinYAttr   *STAdjCoordinate `xml:"minY,attr,omitempty"`
	MaxYAttr   *STAdjCoordinate `xml:"maxY,attr,omitempty"`
	Pos        *CTAdjPoint2D    `xml:"pos"`
}

// CTPolarAdjustHandle ...
type CTPolarAdjustHandle struct {
	XMLName      xml.Name         `xml:"CT_PolarAdjustHandle"`
	GdRefRAttr   *string          `xml:"gdRefR,attr"`
	MinRAttr     *STAdjCoordinate `xml:"minR,attr,omitempty"`
	MaxRAttr     *STAdjCoordinate `xml:"maxR,attr,omitempty"`
	GdRefAngAttr *string          `xml:"gdRefAng,attr"`
	MinAngAttr   *STAdjAngle      `xml:"minAng,attr,omitempty"`
	MaxAngAttr   *STAdjAngle      `xml:"maxAng,attr,omitempty"`
	Pos          *CTAdjPoint2D    `xml:"pos"`
}

// CTConnectionSite ...
type CTConnectionSite struct {
	XMLName xml.Name      `xml:"CT_ConnectionSite"`
	AngAttr *STAdjAngle   `xml:"ang,attr"`
	Pos     *CTAdjPoint2D `xml:"pos"`
}

// CTAdjustHandleList ...
type CTAdjustHandleList struct {
	XMLName xml.Name               `xml:"CT_AdjustHandleList"`
	AhXY    []*CTXYAdjustHandle    `xml:"ahXY"`
	AhPolar []*CTPolarAdjustHandle `xml:"ahPolar"`
}

// CTConnectionSiteList ...
type CTConnectionSiteList struct {
	XMLName xml.Name            `xml:"CT_ConnectionSiteList"`
	Cxn     []*CTConnectionSite `xml:"cxn"`
}

// CTConnection ...
type CTConnection struct {
	XMLName xml.Name `xml:"CT_Connection"`
	IdAttr  uint32   `xml:"id,attr"`
	IdxAttr uint32   `xml:"idx,attr"`
}

// CTPath2DMoveTo ...
type CTPath2DMoveTo struct {
	XMLName xml.Name      `xml:"CT_Path2DMoveTo"`
	Pt      *CTAdjPoint2D `xml:"pt"`
}

// CTPath2DLineTo ...
type CTPath2DLineTo struct {
	XMLName xml.Name      `xml:"CT_Path2DLineTo"`
	Pt      *CTAdjPoint2D `xml:"pt"`
}

// CTPath2DArcTo ...
type CTPath2DArcTo struct {
	XMLName   xml.Name         `xml:"CT_Path2DArcTo"`
	WRAttr    *STAdjCoordinate `xml:"wR,attr"`
	HRAttr    *STAdjCoordinate `xml:"hR,attr"`
	StAngAttr *STAdjAngle      `xml:"stAng,attr"`
	SwAngAttr *STAdjAngle      `xml:"swAng,attr"`
}

// CTPath2DQuadBezierTo ...
type CTPath2DQuadBezierTo struct {
	XMLName xml.Name        `xml:"CT_Path2DQuadBezierTo"`
	Pt      []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DCubicBezierTo ...
type CTPath2DCubicBezierTo struct {
	XMLName xml.Name        `xml:"CT_Path2DCubicBezierTo"`
	Pt      []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DClose ...
type CTPath2DClose struct {
	XMLName xml.Name `xml:"CT_Path2DClose"`
}

// STPathFillMode ...
type STPathFillMode string

// CTPath2D ...
type CTPath2D struct {
	XMLName         xml.Name                 `xml:"CT_Path2D"`
	WAttr           *int64                   `xml:"w,attr"`
	HAttr           *int64                   `xml:"h,attr"`
	FillAttr        *string                  `xml:"fill,attr"`
	StrokeAttr      *bool                    `xml:"stroke,attr"`
	ExtrusionOkAttr *bool                    `xml:"extrusionOk,attr"`
	Close           []*CTPath2DClose         `xml:"close"`
	MoveTo          []*CTPath2DMoveTo        `xml:"moveTo"`
	LnTo            []*CTPath2DLineTo        `xml:"lnTo"`
	ArcTo           []*CTPath2DArcTo         `xml:"arcTo"`
	QuadBezTo       []*CTPath2DQuadBezierTo  `xml:"quadBezTo"`
	CubicBezTo      []*CTPath2DCubicBezierTo `xml:"cubicBezTo"`
}

// CTPath2DList ...
type CTPath2DList struct {
	XMLName xml.Name    `xml:"CT_Path2DList"`
	Path    []*CTPath2D `xml:"path"`
}

// CTPresetGeometry2D ...
type CTPresetGeometry2D struct {
	XMLName  xml.Name         `xml:"CT_PresetGeometry2D"`
	PrstAttr string           `xml:"prst,attr"`
	AvLst    *CTGeomGuideList `xml:"avLst"`
}

// CTPresetTextShape ...
type CTPresetTextShape struct {
	XMLName  xml.Name         `xml:"CT_PresetTextShape"`
	PrstAttr string           `xml:"prst,attr"`
	AvLst    *CTGeomGuideList `xml:"avLst"`
}

// CTCustomGeometry2D ...
type CTCustomGeometry2D struct {
	XMLName xml.Name              `xml:"CT_CustomGeometry2D"`
	AvLst   *CTGeomGuideList      `xml:"avLst"`
	GdLst   *CTGeomGuideList      `xml:"gdLst"`
	AhLst   *CTAdjustHandleList   `xml:"ahLst"`
	CxnLst  *CTConnectionSiteList `xml:"cxnLst"`
	Rect    *CTGeomRect           `xml:"rect"`
	PathLst *CTPath2DList         `xml:"pathLst"`
}

// EGGeometry ...
type EGGeometry struct {
	XMLName  xml.Name `xml:"EG_Geometry"`
	CustGeom *CTCustomGeometry2D
	PrstGeom *CTPresetGeometry2D
}

// EGTextGeometry ...
type EGTextGeometry struct {
	XMLName    xml.Name `xml:"EG_TextGeometry"`
	CustGeom   *CTCustomGeometry2D
	PrstTxWarp *CTPresetTextShape
}

// STLineEndType ...
type STLineEndType string

// STLineEndWidth ...
type STLineEndWidth string

// STLineEndLength ...
type STLineEndLength string

// CTLineEndProperties ...
type CTLineEndProperties struct {
	XMLName  xml.Name `xml:"CT_LineEndProperties"`
	TypeAttr *string  `xml:"type,attr"`
	WAttr    *string  `xml:"w,attr"`
	LenAttr  *string  `xml:"len,attr"`
}

// EGLineFillProperties ...
type EGLineFillProperties struct {
	XMLName   xml.Name `xml:"EG_LineFillProperties"`
	NoFill    *CTNoFillProperties
	SolidFill *CTSolidColorFillProperties
	GradFill  *CTGradientFillProperties
	PattFill  *CTPatternFillProperties
}

// CTLineJoinBevel ...
type CTLineJoinBevel struct {
	XMLName xml.Name `xml:"CT_LineJoinBevel"`
}

// CTLineJoinRound ...
type CTLineJoinRound struct {
	XMLName xml.Name `xml:"CT_LineJoinRound"`
}

// CTLineJoinMiterProperties ...
type CTLineJoinMiterProperties struct {
	XMLName xml.Name              `xml:"CT_LineJoinMiterProperties"`
	LimAttr *STPositivePercentage `xml:"lim,attr,omitempty"`
}

// EGLineJoinProperties ...
type EGLineJoinProperties struct {
	XMLName xml.Name `xml:"EG_LineJoinProperties"`
	Round   *CTLineJoinRound
	Bevel   *CTLineJoinBevel
	Miter   *CTLineJoinMiterProperties
}

// STPresetLineDashVal ...
type STPresetLineDashVal string

// CTPresetLineDashProperties ...
type CTPresetLineDashProperties struct {
	XMLName xml.Name `xml:"CT_PresetLineDashProperties"`
	ValAttr *string  `xml:"val,attr"`
}

// CTDashStop ...
type CTDashStop struct {
	XMLName xml.Name              `xml:"CT_DashStop"`
	DAttr   *STPositivePercentage `xml:"d,attr"`
	SpAttr  *STPositivePercentage `xml:"sp,attr"`
}

// CTDashStopList ...
type CTDashStopList struct {
	XMLName xml.Name      `xml:"CT_DashStopList"`
	Ds      []*CTDashStop `xml:"ds"`
}

// EGLineDashProperties ...
type EGLineDashProperties struct {
	XMLName  xml.Name `xml:"EG_LineDashProperties"`
	PrstDash *CTPresetLineDashProperties
	CustDash *CTDashStopList
}

// STLineCap ...
type STLineCap string

// STLineWidth ...
type STLineWidth int

// STPenAlignment ...
type STPenAlignment string

// STCompoundLine ...
type STCompoundLine string

// CTLineProperties ...
type CTLineProperties struct {
	XMLName              xml.Name `xml:"CT_LineProperties"`
	WAttr                *int     `xml:"w,attr"`
	CapAttr              *string  `xml:"cap,attr"`
	CmpdAttr             *string  `xml:"cmpd,attr"`
	AlgnAttr             *string  `xml:"algn,attr"`
	EGLineFillProperties []*EGLineFillProperties
	EGLineDashProperties []*EGLineDashProperties
	EGLineJoinProperties []*EGLineJoinProperties
	HeadEnd              *CTLineEndProperties      `xml:"headEnd"`
	TailEnd              *CTLineEndProperties      `xml:"tailEnd"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// STShapeID ...
type STShapeID string

// CTShapeProperties ...
type CTShapeProperties struct {
	XMLName            xml.Name `xml:"CT_ShapeProperties"`
	BwModeAttr         *string  `xml:"bwMode,attr"`
	EGGeometry         []*EGGeometry
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               *CTTransform2D            `xml:"xfrm"`
	Ln                 *CTLineProperties         `xml:"ln"`
	Scene3d            *CTScene3D                `xml:"scene3d"`
	Sp3d               *CTShape3D                `xml:"sp3d"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupShapeProperties ...
type CTGroupShapeProperties struct {
	XMLName            xml.Name `xml:"CT_GroupShapeProperties"`
	BwModeAttr         *string  `xml:"bwMode,attr"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               *CTGroupTransform2D       `xml:"xfrm"`
	Scene3d            *CTScene3D                `xml:"scene3d"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTStyleMatrixReference ...
type CTStyleMatrixReference struct {
	XMLName       xml.Name `xml:"CT_StyleMatrixReference"`
	IdxAttr       uint32   `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTFontReference ...
type CTFontReference struct {
	XMLName       xml.Name `xml:"CT_FontReference"`
	IdxAttr       string   `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTShapeStyle ...
type CTShapeStyle struct {
	XMLName   xml.Name                `xml:"CT_ShapeStyle"`
	LnRef     *CTStyleMatrixReference `xml:"lnRef"`
	FillRef   *CTStyleMatrixReference `xml:"fillRef"`
	EffectRef *CTStyleMatrixReference `xml:"effectRef"`
	FontRef   *CTFontReference        `xml:"fontRef"`
}

// CTDefaultShapeDefinition ...
type CTDefaultShapeDefinition struct {
	XMLName  xml.Name                  `xml:"CT_DefaultShapeDefinition"`
	SpPr     *CTShapeProperties        `xml:"spPr"`
	BodyPr   *CTTextBodyProperties     `xml:"bodyPr"`
	LstStyle *CTTextListStyle          `xml:"lstStyle"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTObjectStyleDefaults ...
type CTObjectStyleDefaults struct {
	XMLName xml.Name                  `xml:"CT_ObjectStyleDefaults"`
	SpDef   *CTDefaultShapeDefinition `xml:"spDef"`
	LnDef   *CTDefaultShapeDefinition `xml:"lnDef"`
	TxDef   *CTDefaultShapeDefinition `xml:"txDef"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEmptyElement ...
type CTEmptyElement struct {
	XMLName xml.Name `xml:"CT_EmptyElement"`
}

// CTColorMapping ...
type CTColorMapping struct {
	XMLName      xml.Name                  `xml:"CT_ColorMapping"`
	Bg1Attr      string                    `xml:"bg1,attr"`
	Tx1Attr      string                    `xml:"tx1,attr"`
	Bg2Attr      string                    `xml:"bg2,attr"`
	Tx2Attr      string                    `xml:"tx2,attr"`
	Accent1Attr  string                    `xml:"accent1,attr"`
	Accent2Attr  string                    `xml:"accent2,attr"`
	Accent3Attr  string                    `xml:"accent3,attr"`
	Accent4Attr  string                    `xml:"accent4,attr"`
	Accent5Attr  string                    `xml:"accent5,attr"`
	Accent6Attr  string                    `xml:"accent6,attr"`
	HlinkAttr    string                    `xml:"hlink,attr"`
	FolHlinkAttr string                    `xml:"folHlink,attr"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTColorMappingOverride ...
type CTColorMappingOverride struct {
	XMLName            xml.Name        `xml:"CT_ColorMappingOverride"`
	MasterClrMapping   *CTEmptyElement `xml:"masterClrMapping"`
	OverrideClrMapping *CTColorMapping `xml:"overrideClrMapping"`
}

// CTColorSchemeAndMapping ...
type CTColorSchemeAndMapping struct {
	XMLName   xml.Name        `xml:"CT_ColorSchemeAndMapping"`
	ClrScheme *CTColorScheme  `xml:"clrScheme"`
	ClrMap    *CTColorMapping `xml:"clrMap"`
}

// CTColorSchemeList ...
type CTColorSchemeList struct {
	XMLName        xml.Name                   `xml:"CT_ColorSchemeList"`
	ExtraClrScheme []*CTColorSchemeAndMapping `xml:"extraClrScheme"`
}

// CTOfficeStyleSheet ...
type CTOfficeStyleSheet struct {
	XMLName           xml.Name                  `xml:"CT_OfficeStyleSheet"`
	NameAttr          *string                   `xml:"name,attr"`
	ThemeElements     *CTBaseStyles             `xml:"themeElements"`
	ObjectDefaults    *CTObjectStyleDefaults    `xml:"objectDefaults"`
	ExtraClrSchemeLst *CTColorSchemeList        `xml:"extraClrSchemeLst"`
	CustClrLst        *CTCustomColorList        `xml:"custClrLst"`
	ExtLst            *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBaseStylesOverride ...
type CTBaseStylesOverride struct {
	XMLName    xml.Name       `xml:"CT_BaseStylesOverride"`
	ClrScheme  *CTColorScheme `xml:"clrScheme"`
	FontScheme *CTFontScheme  `xml:"fontScheme"`
	FmtScheme  *CTStyleMatrix `xml:"fmtScheme"`
}

// CTClipboardStyleSheet ...
type CTClipboardStyleSheet struct {
	XMLName       xml.Name        `xml:"CT_ClipboardStyleSheet"`
	ThemeElements *CTBaseStyles   `xml:"themeElements"`
	ClrMap        *CTColorMapping `xml:"clrMap"`
}

// Theme ...
type Theme *CTOfficeStyleSheet

// ThemeOverride ...
type ThemeOverride *CTBaseStylesOverride

// ThemeManager ...
type ThemeManager *CTEmptyElement

// CTTableCellProperties ...
type CTTableCellProperties struct {
	XMLName          xml.Name        `xml:"CT_TableCellProperties"`
	MarLAttr         *STCoordinate32 `xml:"marL,attr,omitempty"`
	MarRAttr         *STCoordinate32 `xml:"marR,attr,omitempty"`
	MarTAttr         *STCoordinate32 `xml:"marT,attr,omitempty"`
	MarBAttr         *STCoordinate32 `xml:"marB,attr,omitempty"`
	VertAttr         *string         `xml:"vert,attr"`
	AnchorAttr       *string         `xml:"anchor,attr"`
	AnchorCtrAttr    *bool           `xml:"anchorCtr,attr"`
	HorzOverflowAttr *string         `xml:"horzOverflow,attr"`
	EGFillProperties []*EGFillProperties
	LnL              *CTLineProperties         `xml:"lnL"`
	LnR              *CTLineProperties         `xml:"lnR"`
	LnT              *CTLineProperties         `xml:"lnT"`
	LnB              *CTLineProperties         `xml:"lnB"`
	LnTlToBr         *CTLineProperties         `xml:"lnTlToBr"`
	LnBlToTr         *CTLineProperties         `xml:"lnBlToTr"`
	Cell3D           *CTCell3D                 `xml:"cell3D"`
	Headers          *CTHeaders                `xml:"headers"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTHeaders ...
type CTHeaders struct {
	XMLName xml.Name `xml:"CT_Headers"`
	Header  []string `xml:"header"`
}

// CTTableCol ...
type CTTableCol struct {
	XMLName xml.Name                  `xml:"CT_TableCol"`
	WAttr   *STCoordinate             `xml:"w,attr"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableGrid ...
type CTTableGrid struct {
	XMLName xml.Name      `xml:"CT_TableGrid"`
	GridCol []*CTTableCol `xml:"gridCol"`
}

// CTTableCell ...
type CTTableCell struct {
	XMLName      xml.Name                  `xml:"CT_TableCell"`
	RowSpanAttr  *int                      `xml:"rowSpan,attr"`
	GridSpanAttr *int                      `xml:"gridSpan,attr"`
	HMergeAttr   *bool                     `xml:"hMerge,attr"`
	VMergeAttr   *bool                     `xml:"vMerge,attr"`
	IdAttr       *string                   `xml:"id,attr"`
	TxBody       *CTTextBody               `xml:"txBody"`
	TcPr         *CTTableCellProperties    `xml:"tcPr"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableRow ...
type CTTableRow struct {
	XMLName xml.Name                  `xml:"CT_TableRow"`
	HAttr   *STCoordinate             `xml:"h,attr"`
	Tc      []*CTTableCell            `xml:"tc"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableProperties ...
type CTTableProperties struct {
	XMLName            xml.Name `xml:"CT_TableProperties"`
	RtlAttr            *bool    `xml:"rtl,attr"`
	FirstRowAttr       *bool    `xml:"firstRow,attr"`
	FirstColAttr       *bool    `xml:"firstCol,attr"`
	LastRowAttr        *bool    `xml:"lastRow,attr"`
	LastColAttr        *bool    `xml:"lastCol,attr"`
	BandRowAttr        *bool    `xml:"bandRow,attr"`
	BandColAttr        *bool    `xml:"bandCol,attr"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	TableStyle         *CTTableStyle             `xml:"tableStyle"`
	TableStyleId       *string                   `xml:"tableStyleId"`
	ExtLst             *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTable ...
type CTTable struct {
	XMLName xml.Name           `xml:"CT_Table"`
	TblPr   *CTTableProperties `xml:"tblPr"`
	TblGrid *CTTableGrid       `xml:"tblGrid"`
	Tr      []*CTTableRow      `xml:"tr"`
}

// Tbl ...
type Tbl *CTTable

// CTCell3D ...
type CTCell3D struct {
	XMLName          xml.Name                  `xml:"CT_Cell3D"`
	PrstMaterialAttr *string                   `xml:"prstMaterial,attr"`
	Bevel            *CTBevel                  `xml:"bevel"`
	LightRig         *CTLightRig               `xml:"lightRig"`
	ExtLst           *CTOfficeArtExtensionList `xml:"extLst"`
}

// EGThemeableFillStyle ...
type EGThemeableFillStyle struct {
	XMLName xml.Name `xml:"EG_ThemeableFillStyle"`
	Fill    *CTFillProperties
	FillRef *CTStyleMatrixReference
}

// CTThemeableLineStyle ...
type CTThemeableLineStyle struct {
	XMLName xml.Name                `xml:"CT_ThemeableLineStyle"`
	Ln      *CTLineProperties       `xml:"ln"`
	LnRef   *CTStyleMatrixReference `xml:"lnRef"`
}

// EGThemeableEffectStyle ...
type EGThemeableEffectStyle struct {
	XMLName   xml.Name `xml:"EG_ThemeableEffectStyle"`
	Effect    *CTEffectProperties
	EffectRef *CTStyleMatrixReference
}

// EGThemeableFontStyles ...
type EGThemeableFontStyles struct {
	XMLName xml.Name `xml:"EG_ThemeableFontStyles"`
	Font    *CTFontCollection
	FontRef *CTFontReference
}

// STOnOffStyleType ...
type STOnOffStyleType string

// CTTableStyleTextStyle ...
type CTTableStyleTextStyle struct {
	XMLName               xml.Name `xml:"CT_TableStyleTextStyle"`
	BAttr                 *string  `xml:"b,attr"`
	IAttr                 *string  `xml:"i,attr"`
	EGThemeableFontStyles []*EGThemeableFontStyles
	EGColorChoice         []*EGColorChoice
	ExtLst                *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableCellBorderStyle ...
type CTTableCellBorderStyle struct {
	XMLName xml.Name                  `xml:"CT_TableCellBorderStyle"`
	Left    *CTThemeableLineStyle     `xml:"left"`
	Right   *CTThemeableLineStyle     `xml:"right"`
	Top     *CTThemeableLineStyle     `xml:"top"`
	Bottom  *CTThemeableLineStyle     `xml:"bottom"`
	InsideH *CTThemeableLineStyle     `xml:"insideH"`
	InsideV *CTThemeableLineStyle     `xml:"insideV"`
	Tl2br   *CTThemeableLineStyle     `xml:"tl2br"`
	Tr2bl   *CTThemeableLineStyle     `xml:"tr2bl"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableBackgroundStyle ...
type CTTableBackgroundStyle struct {
	XMLName                xml.Name `xml:"CT_TableBackgroundStyle"`
	EGThemeableFillStyle   []*EGThemeableFillStyle
	EGThemeableEffectStyle []*EGThemeableEffectStyle
}

// CTTableStyleCellStyle ...
type CTTableStyleCellStyle struct {
	XMLName              xml.Name `xml:"CT_TableStyleCellStyle"`
	EGThemeableFillStyle []*EGThemeableFillStyle
	TcBdr                *CTTableCellBorderStyle `xml:"tcBdr"`
	Cell3D               *CTCell3D               `xml:"cell3D"`
}

// CTTablePartStyle ...
type CTTablePartStyle struct {
	XMLName   xml.Name               `xml:"CT_TablePartStyle"`
	TcTxStyle *CTTableStyleTextStyle `xml:"tcTxStyle"`
	TcStyle   *CTTableStyleCellStyle `xml:"tcStyle"`
}

// CTTableStyle ...
type CTTableStyle struct {
	XMLName       xml.Name                  `xml:"CT_TableStyle"`
	StyleIdAttr   string                    `xml:"styleId,attr"`
	StyleNameAttr string                    `xml:"styleName,attr"`
	TblBg         *CTTableBackgroundStyle   `xml:"tblBg"`
	WholeTbl      *CTTablePartStyle         `xml:"wholeTbl"`
	Band1H        *CTTablePartStyle         `xml:"band1H"`
	Band2H        *CTTablePartStyle         `xml:"band2H"`
	Band1V        *CTTablePartStyle         `xml:"band1V"`
	Band2V        *CTTablePartStyle         `xml:"band2V"`
	LastCol       *CTTablePartStyle         `xml:"lastCol"`
	FirstCol      *CTTablePartStyle         `xml:"firstCol"`
	LastRow       *CTTablePartStyle         `xml:"lastRow"`
	SeCell        *CTTablePartStyle         `xml:"seCell"`
	SwCell        *CTTablePartStyle         `xml:"swCell"`
	FirstRow      *CTTablePartStyle         `xml:"firstRow"`
	NeCell        *CTTablePartStyle         `xml:"neCell"`
	NwCell        *CTTablePartStyle         `xml:"nwCell"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableStyleList ...
type CTTableStyleList struct {
	XMLName  xml.Name        `xml:"CT_TableStyleList"`
	DefAttr  string          `xml:"def,attr"`
	TblStyle []*CTTableStyle `xml:"tblStyle"`
}

// TblStyleLst ...
type TblStyleLst *CTTableStyleList

// CTTextParagraph ...
type CTTextParagraph struct {
	XMLName    xml.Name `xml:"CT_TextParagraph"`
	EGTextRun  []*EGTextRun
	PPr        *CTTextParagraphProperties `xml:"pPr"`
	EndParaRPr *CTTextCharacterProperties `xml:"endParaRPr"`
}

// STTextAnchoringType ...
type STTextAnchoringType string

// STTextVertOverflowType ...
type STTextVertOverflowType string

// STTextHorzOverflowType ...
type STTextHorzOverflowType string

// STTextVerticalType ...
type STTextVerticalType string

// STTextWrappingType ...
type STTextWrappingType string

// STTextColumnCount ...
type STTextColumnCount int

// CTTextListStyle ...
type CTTextListStyle struct {
	XMLName xml.Name                   `xml:"CT_TextListStyle"`
	DefPPr  *CTTextParagraphProperties `xml:"defPPr"`
	Lvl1pPr *CTTextParagraphProperties `xml:"lvl1pPr"`
	Lvl2pPr *CTTextParagraphProperties `xml:"lvl2pPr"`
	Lvl3pPr *CTTextParagraphProperties `xml:"lvl3pPr"`
	Lvl4pPr *CTTextParagraphProperties `xml:"lvl4pPr"`
	Lvl5pPr *CTTextParagraphProperties `xml:"lvl5pPr"`
	Lvl6pPr *CTTextParagraphProperties `xml:"lvl6pPr"`
	Lvl7pPr *CTTextParagraphProperties `xml:"lvl7pPr"`
	Lvl8pPr *CTTextParagraphProperties `xml:"lvl8pPr"`
	Lvl9pPr *CTTextParagraphProperties `xml:"lvl9pPr"`
	ExtLst  *CTOfficeArtExtensionList  `xml:"extLst"`
}

// STTextFontScalePercentOrPercentString ...
type STTextFontScalePercentOrPercentString struct {
	XMLName      xml.Name `xml:"ST_TextFontScalePercentOrPercentString"`
	STPercentage string
}

// CTTextNormalAutofit ...
type CTTextNormalAutofit struct {
	XMLName            xml.Name                               `xml:"CT_TextNormalAutofit"`
	FontScaleAttr      *STTextFontScalePercentOrPercentString `xml:"fontScale,attr,omitempty"`
	LnSpcReductionAttr *STTextSpacingPercentOrPercentString   `xml:"lnSpcReduction,attr,omitempty"`
}

// CTTextShapeAutofit ...
type CTTextShapeAutofit struct {
	XMLName xml.Name `xml:"CT_TextShapeAutofit"`
}

// CTTextNoAutofit ...
type CTTextNoAutofit struct {
	XMLName xml.Name `xml:"CT_TextNoAutofit"`
}

// EGTextAutofit ...
type EGTextAutofit struct {
	XMLName     xml.Name `xml:"EG_TextAutofit"`
	NoAutofit   *CTTextNoAutofit
	NormAutofit *CTTextNormalAutofit
	SpAutoFit   *CTTextShapeAutofit
}

// CTTextBodyProperties ...
type CTTextBodyProperties struct {
	XMLName              xml.Name        `xml:"CT_TextBodyProperties"`
	RotAttr              *int            `xml:"rot,attr"`
	SpcFirstLastParaAttr *bool           `xml:"spcFirstLastPara,attr"`
	VertOverflowAttr     *string         `xml:"vertOverflow,attr"`
	HorzOverflowAttr     *string         `xml:"horzOverflow,attr"`
	VertAttr             *string         `xml:"vert,attr"`
	WrapAttr             *string         `xml:"wrap,attr"`
	LInsAttr             *STCoordinate32 `xml:"lIns,attr,omitempty"`
	TInsAttr             *STCoordinate32 `xml:"tIns,attr,omitempty"`
	RInsAttr             *STCoordinate32 `xml:"rIns,attr,omitempty"`
	BInsAttr             *STCoordinate32 `xml:"bIns,attr,omitempty"`
	NumColAttr           *int            `xml:"numCol,attr"`
	SpcColAttr           *int            `xml:"spcCol,attr"`
	RtlColAttr           *bool           `xml:"rtlCol,attr"`
	FromWordArtAttr      *bool           `xml:"fromWordArt,attr"`
	AnchorAttr           *string         `xml:"anchor,attr"`
	AnchorCtrAttr        *bool           `xml:"anchorCtr,attr"`
	ForceAAAttr          *bool           `xml:"forceAA,attr"`
	UprightAttr          *bool           `xml:"upright,attr"`
	CompatLnSpcAttr      *bool           `xml:"compatLnSpc,attr"`
	EGTextAutofit        []*EGTextAutofit
	EGText3D             []*EGText3D
	PrstTxWarp           *CTPresetTextShape        `xml:"prstTxWarp"`
	Scene3d              *CTScene3D                `xml:"scene3d"`
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTextBody ...
type CTTextBody struct {
	XMLName  xml.Name              `xml:"CT_TextBody"`
	BodyPr   *CTTextBodyProperties `xml:"bodyPr"`
	LstStyle *CTTextListStyle      `xml:"lstStyle"`
	P        []*CTTextParagraph    `xml:"p"`
}

// STTextBulletStartAtNum ...
type STTextBulletStartAtNum int

// STTextAutonumberScheme ...
type STTextAutonumberScheme string

// CTTextBulletColorFollowText ...
type CTTextBulletColorFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletColorFollowText"`
}

// EGTextBulletColor ...
type EGTextBulletColor struct {
	XMLName xml.Name `xml:"EG_TextBulletColor"`
	BuClrTx *CTTextBulletColorFollowText
	BuClr   *CTColor
}

// STTextBulletSize ...
type STTextBulletSize struct {
	XMLName                 xml.Name `xml:"ST_TextBulletSize"`
	STTextBulletSizePercent *STTextBulletSizePercent
}

// STTextBulletSizePercent ...
type STTextBulletSizePercent string

// CTTextBulletSizeFollowText ...
type CTTextBulletSizeFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletSizeFollowText"`
}

// CTTextBulletSizePercent ...
type CTTextBulletSizePercent struct {
	XMLName xml.Name `xml:"CT_TextBulletSizePercent"`
	ValAttr string   `xml:"val,attr"`
}

// CTTextBulletSizePoint ...
type CTTextBulletSizePoint struct {
	XMLName xml.Name `xml:"CT_TextBulletSizePoint"`
	ValAttr int      `xml:"val,attr"`
}

// EGTextBulletSize ...
type EGTextBulletSize struct {
	XMLName xml.Name `xml:"EG_TextBulletSize"`
	BuSzTx  *CTTextBulletSizeFollowText
	BuSzPct *CTTextBulletSizePercent
	BuSzPts *CTTextBulletSizePoint
}

// CTTextBulletTypefaceFollowText ...
type CTTextBulletTypefaceFollowText struct {
	XMLName xml.Name `xml:"CT_TextBulletTypefaceFollowText"`
}

// EGTextBulletTypeface ...
type EGTextBulletTypeface struct {
	XMLName  xml.Name `xml:"EG_TextBulletTypeface"`
	BuFontTx *CTTextBulletTypefaceFollowText
	BuFont   *CTTextFont
}

// CTTextAutonumberBullet ...
type CTTextAutonumberBullet struct {
	XMLName     xml.Name `xml:"CT_TextAutonumberBullet"`
	TypeAttr    string   `xml:"type,attr"`
	StartAtAttr *int     `xml:"startAt,attr"`
}

// CTTextCharBullet ...
type CTTextCharBullet struct {
	XMLName  xml.Name `xml:"CT_TextCharBullet"`
	CharAttr string   `xml:"char,attr"`
}

// CTTextBlipBullet ...
type CTTextBlipBullet struct {
	XMLName xml.Name `xml:"CT_TextBlipBullet"`
	Blip    *CTBlip  `xml:"blip"`
}

// CTTextNoBullet ...
type CTTextNoBullet struct {
	XMLName xml.Name `xml:"CT_TextNoBullet"`
}

// EGTextBullet ...
type EGTextBullet struct {
	XMLName   xml.Name `xml:"EG_TextBullet"`
	BuNone    *CTTextNoBullet
	BuAutoNum *CTTextAutonumberBullet
	BuChar    *CTTextCharBullet
	BuBlip    *CTTextBlipBullet
}

// STTextPoint ...
type STTextPoint struct {
	XMLName                xml.Name `xml:"ST_TextPoint"`
	STTextPointUnqualified *STTextPointUnqualified
	STUniversalMeasure     string
}

// STTextPointUnqualified ...
type STTextPointUnqualified int

// STTextNonNegativePoint ...
type STTextNonNegativePoint int

// STTextFontSize ...
type STTextFontSize int

// STTextTypeface ...
type STTextTypeface string

// STPitchFamily ...
type STPitchFamily int8

// CTTextFont ...
type CTTextFont struct {
	XMLName         xml.Name `xml:"CT_TextFont"`
	TypefaceAttr    string   `xml:"typeface,attr"`
	PanoseAttr      *string  `xml:"panose,attr"`
	PitchFamilyAttr *int8    `xml:"pitchFamily,attr"`
	CharsetAttr     *int8    `xml:"charset,attr"`
}

// STTextUnderlineType ...
type STTextUnderlineType string

// CTTextUnderlineLineFollowText ...
type CTTextUnderlineLineFollowText struct {
	XMLName xml.Name `xml:"CT_TextUnderlineLineFollowText"`
}

// CTTextUnderlineFillFollowText ...
type CTTextUnderlineFillFollowText struct {
	XMLName xml.Name `xml:"CT_TextUnderlineFillFollowText"`
}

// CTTextUnderlineFillGroupWrapper ...
type CTTextUnderlineFillGroupWrapper struct {
	XMLName          xml.Name `xml:"CT_TextUnderlineFillGroupWrapper"`
	EGFillProperties []*EGFillProperties
}

// EGTextUnderlineLine ...
type EGTextUnderlineLine struct {
	XMLName xml.Name `xml:"EG_TextUnderlineLine"`
	ULnTx   *CTTextUnderlineLineFollowText
	ULn     *CTLineProperties
}

// EGTextUnderlineFill ...
type EGTextUnderlineFill struct {
	XMLName xml.Name `xml:"EG_TextUnderlineFill"`
	UFillTx *CTTextUnderlineFillFollowText
	UFill   *CTTextUnderlineFillGroupWrapper
}

// STTextStrikeType ...
type STTextStrikeType string

// STTextCapsType ...
type STTextCapsType string

// CTTextCharacterProperties ...
type CTTextCharacterProperties struct {
	XMLName             xml.Name      `xml:"CT_TextCharacterProperties"`
	KumimojiAttr        *bool         `xml:"kumimoji,attr"`
	LangAttr            *string       `xml:"lang,attr"`
	AltLangAttr         *string       `xml:"altLang,attr"`
	SzAttr              *int          `xml:"sz,attr"`
	BAttr               *bool         `xml:"b,attr"`
	IAttr               *bool         `xml:"i,attr"`
	UAttr               *string       `xml:"u,attr"`
	StrikeAttr          *string       `xml:"strike,attr"`
	KernAttr            *int          `xml:"kern,attr"`
	CapAttr             *string       `xml:"cap,attr"`
	SpcAttr             *STTextPoint  `xml:"spc,attr,omitempty"`
	NormalizeHAttr      *bool         `xml:"normalizeH,attr"`
	BaselineAttr        *STPercentage `xml:"baseline,attr,omitempty"`
	NoProofAttr         *bool         `xml:"noProof,attr"`
	DirtyAttr           *bool         `xml:"dirty,attr"`
	ErrAttr             *bool         `xml:"err,attr"`
	SmtCleanAttr        *bool         `xml:"smtClean,attr"`
	SmtIdAttr           *uint32       `xml:"smtId,attr"`
	BmkAttr             *string       `xml:"bmk,attr"`
	EGFillProperties    []*EGFillProperties
	EGEffectProperties  []*EGEffectProperties
	EGTextUnderlineLine []*EGTextUnderlineLine
	EGTextUnderlineFill []*EGTextUnderlineFill
	Ln                  *CTLineProperties         `xml:"ln"`
	Highlight           *CTColor                  `xml:"highlight"`
	Latin               *CTTextFont               `xml:"latin"`
	Ea                  *CTTextFont               `xml:"ea"`
	Cs                  *CTTextFont               `xml:"cs"`
	Sym                 *CTTextFont               `xml:"sym"`
	HlinkClick          *CTHyperlink              `xml:"hlinkClick"`
	HlinkMouseOver      *CTHyperlink              `xml:"hlinkMouseOver"`
	Rtl                 *CTBoolean                `xml:"rtl"`
	ExtLst              *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBoolean ...
type CTBoolean struct {
	XMLName xml.Name `xml:"CT_Boolean"`
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// STTextSpacingPoint ...
type STTextSpacingPoint int

// STTextSpacingPercentOrPercentString ...
type STTextSpacingPercentOrPercentString struct {
	XMLName      xml.Name `xml:"ST_TextSpacingPercentOrPercentString"`
	STPercentage string
}

// CTTextSpacingPercent ...
type CTTextSpacingPercent struct {
	XMLName xml.Name                             `xml:"CT_TextSpacingPercent"`
	ValAttr *STTextSpacingPercentOrPercentString `xml:"val,attr"`
}

// CTTextSpacingPoint ...
type CTTextSpacingPoint struct {
	XMLName xml.Name `xml:"CT_TextSpacingPoint"`
	ValAttr int      `xml:"val,attr"`
}

// STTextMargin ...
type STTextMargin int

// STTextIndent ...
type STTextIndent int

// STTextTabAlignType ...
type STTextTabAlignType string

// CTTextTabStop ...
type CTTextTabStop struct {
	XMLName  xml.Name        `xml:"CT_TextTabStop"`
	PosAttr  *STCoordinate32 `xml:"pos,attr,omitempty"`
	AlgnAttr *string         `xml:"algn,attr"`
}

// CTTextTabStopList ...
type CTTextTabStopList struct {
	XMLName xml.Name         `xml:"CT_TextTabStopList"`
	Tab     []*CTTextTabStop `xml:"tab"`
}

// CTTextLineBreak ...
type CTTextLineBreak struct {
	XMLName xml.Name                   `xml:"CT_TextLineBreak"`
	RPr     *CTTextCharacterProperties `xml:"rPr"`
}

// CTTextSpacing ...
type CTTextSpacing struct {
	XMLName xml.Name              `xml:"CT_TextSpacing"`
	SpcPct  *CTTextSpacingPercent `xml:"spcPct"`
	SpcPts  *CTTextSpacingPoint   `xml:"spcPts"`
}

// STTextAlignType ...
type STTextAlignType string

// STTextFontAlignType ...
type STTextFontAlignType string

// STTextIndentLevelType ...
type STTextIndentLevelType int

// CTTextParagraphProperties ...
type CTTextParagraphProperties struct {
	XMLName              xml.Name        `xml:"CT_TextParagraphProperties"`
	MarLAttr             *int            `xml:"marL,attr"`
	MarRAttr             *int            `xml:"marR,attr"`
	LvlAttr              *int            `xml:"lvl,attr"`
	IndentAttr           *int            `xml:"indent,attr"`
	AlgnAttr             *string         `xml:"algn,attr"`
	DefTabSzAttr         *STCoordinate32 `xml:"defTabSz,attr,omitempty"`
	RtlAttr              *bool           `xml:"rtl,attr"`
	EaLnBrkAttr          *bool           `xml:"eaLnBrk,attr"`
	FontAlgnAttr         *string         `xml:"fontAlgn,attr"`
	LatinLnBrkAttr       *bool           `xml:"latinLnBrk,attr"`
	HangingPunctAttr     *bool           `xml:"hangingPunct,attr"`
	EGTextBulletColor    []*EGTextBulletColor
	EGTextBulletSize     []*EGTextBulletSize
	EGTextBulletTypeface []*EGTextBulletTypeface
	EGTextBullet         []*EGTextBullet
	LnSpc                *CTTextSpacing             `xml:"lnSpc"`
	SpcBef               *CTTextSpacing             `xml:"spcBef"`
	SpcAft               *CTTextSpacing             `xml:"spcAft"`
	TabLst               *CTTextTabStopList         `xml:"tabLst"`
	DefRPr               *CTTextCharacterProperties `xml:"defRPr"`
	ExtLst               *CTOfficeArtExtensionList  `xml:"extLst"`
}

// CTTextField ...
type CTTextField struct {
	XMLName  xml.Name                   `xml:"CT_TextField"`
	IdAttr   string                     `xml:"id,attr"`
	TypeAttr *string                    `xml:"type,attr"`
	RPr      *CTTextCharacterProperties `xml:"rPr"`
	PPr      *CTTextParagraphProperties `xml:"pPr"`
	T        *string                    `xml:"t"`
}

// EGTextRun ...
type EGTextRun struct {
	XMLName xml.Name `xml:"EG_TextRun"`
	R       *CTRegularTextRun
	Br      *CTTextLineBreak
	Fld     *CTTextField
}

// CTRegularTextRun ...
type CTRegularTextRun struct {
	XMLName xml.Name                   `xml:"CT_RegularTextRun"`
	RPr     *CTTextCharacterProperties `xml:"rPr"`
	T       string                     `xml:"t"`
}
