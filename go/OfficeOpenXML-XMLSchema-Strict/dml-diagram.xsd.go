// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// CTCTName ...
type CTCTName struct {
	XMLName  xml.Name `xml:"CT_CTName"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTCTDescription ...
type CTCTDescription struct {
	XMLName  xml.Name `xml:"CT_CTDescription"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTCTCategory ...
type CTCTCategory struct {
	XMLName  xml.Name `xml:"CT_CTCategory"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTCTCategories ...
type CTCTCategories struct {
	XMLName xml.Name        `xml:"CT_CTCategories"`
	Cat     []*CTCTCategory `xml:"cat"`
}

// STClrAppMethod ...
type STClrAppMethod string

// STHueDir ...
type STHueDir string

// CTColors ...
type CTColors struct {
	XMLName        xml.Name `xml:"CT_Colors"`
	MethAttr       *string  `xml:"meth,attr"`
	HueDirAttr     *string  `xml:"hueDir,attr"`
	AEGColorChoice []*EGColorChoice
}

// CTCTStyleLabel ...
type CTCTStyleLabel struct {
	XMLName        xml.Name                  `xml:"CT_CTStyleLabel"`
	NameAttr       string                    `xml:"name,attr"`
	FillClrLst     *CTColors                 `xml:"fillClrLst"`
	LinClrLst      *CTColors                 `xml:"linClrLst"`
	EffectClrLst   *CTColors                 `xml:"effectClrLst"`
	TxLinClrLst    *CTColors                 `xml:"txLinClrLst"`
	TxFillClrLst   *CTColors                 `xml:"txFillClrLst"`
	TxEffectClrLst *CTColors                 `xml:"txEffectClrLst"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTColorTransform ...
type CTColorTransform struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransform"`
	UniqueIdAttr *string                   `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	Title        []*CTCTName               `xml:"title"`
	Desc         []*CTCTDescription        `xml:"desc"`
	CatLst       *CTCTCategories           `xml:"catLst"`
	StyleLbl     []*CTCTStyleLabel         `xml:"styleLbl"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// ColorsDef ...
type ColorsDef *CTColorTransform

// CTColorTransformHeader ...
type CTColorTransformHeader struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransformHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	ResIdAttr    *int                      `xml:"resId,attr"`
	Title        []*CTCTName               `xml:"title"`
	Desc         []*CTCTDescription        `xml:"desc"`
	CatLst       *CTCTCategories           `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// ColorsDefHdr ...
type ColorsDefHdr *CTColorTransformHeader

// CTColorTransformHeaderLst ...
type CTColorTransformHeaderLst struct {
	XMLName      xml.Name                  `xml:"CT_ColorTransformHeaderLst"`
	ColorsDefHdr []*CTColorTransformHeader `xml:"colorsDefHdr"`
}

// ColorsDefHdrLst ...
type ColorsDefHdrLst *CTColorTransformHeaderLst

// STPtType ...
type STPtType string

// CTPt ...
type CTPt struct {
	XMLName     xml.Name                  `xml:"CT_Pt"`
	ModelIdAttr *STModelId                `xml:"modelId,attr"`
	TypeAttr    *string                   `xml:"type,attr"`
	CxnIdAttr   *STModelId                `xml:"cxnId,attr,omitempty"`
	PrSet       *CTElemPropSet            `xml:"prSet"`
	SpPr        *CTShapeProperties        `xml:"spPr"`
	T           *CTTextBody               `xml:"t"`
	ExtLst      *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTPtList ...
type CTPtList struct {
	XMLName xml.Name `xml:"CT_PtList"`
	Pt      []*CTPt  `xml:"pt"`
}

// STCxnType ...
type STCxnType string

// CTCxn ...
type CTCxn struct {
	XMLName        xml.Name                  `xml:"CT_Cxn"`
	ModelIdAttr    *STModelId                `xml:"modelId,attr"`
	TypeAttr       *string                   `xml:"type,attr"`
	SrcIdAttr      *STModelId                `xml:"srcId,attr"`
	DestIdAttr     *STModelId                `xml:"destId,attr"`
	SrcOrdAttr     uint32                    `xml:"srcOrd,attr"`
	DestOrdAttr    uint32                    `xml:"destOrd,attr"`
	ParTransIdAttr *STModelId                `xml:"parTransId,attr,omitempty"`
	SibTransIdAttr *STModelId                `xml:"sibTransId,attr,omitempty"`
	PresIdAttr     *string                   `xml:"presId,attr"`
	ExtLst         *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTCxnList ...
type CTCxnList struct {
	XMLName xml.Name `xml:"CT_CxnList"`
	Cxn     []*CTCxn `xml:"cxn"`
}

// CTDataModel ...
type CTDataModel struct {
	XMLName xml.Name                  `xml:"CT_DataModel"`
	PtLst   *CTPtList                 `xml:"ptLst"`
	CxnLst  *CTCxnList                `xml:"cxnLst"`
	Bg      *CTBackgroundFormatting   `xml:"bg"`
	Whole   *CTWholeE2oFormatting     `xml:"whole"`
	ExtLst  *CTOfficeArtExtensionList `xml:"extLst"`
}

// DataModel ...
type DataModel *CTDataModel

// AGIteratorAttributes ...
type AGIteratorAttributes struct {
	XMLName           xml.Name        `xml:"AG_IteratorAttributes"`
	AxisAttr          *STAxisTypes    `xml:"axis,attr,omitempty"`
	PtTypeAttr        *STElementTypes `xml:"ptType,attr,omitempty"`
	HideLastTransAttr *STBooleans     `xml:"hideLastTrans,attr,omitempty"`
	StAttr            *STInts         `xml:"st,attr,omitempty"`
	CntAttr           *STUnsignedInts `xml:"cnt,attr,omitempty"`
	StepAttr          *STInts         `xml:"step,attr,omitempty"`
}

// AGConstraintAttributes ...
type AGConstraintAttributes struct {
	XMLName     xml.Name `xml:"AG_ConstraintAttributes"`
	TypeAttr    string   `xml:"type,attr"`
	ForAttr     string   `xml:"for,attr,omitempty"`
	ForNameAttr string   `xml:"forName,attr,omitempty"`
	PtTypeAttr  string   `xml:"ptType,attr,omitempty"`
}

// AGConstraintRefAttributes ...
type AGConstraintRefAttributes struct {
	XMLName        xml.Name `xml:"AG_ConstraintRefAttributes"`
	RefTypeAttr    string   `xml:"refType,attr,omitempty"`
	RefForAttr     string   `xml:"refFor,attr,omitempty"`
	RefForNameAttr string   `xml:"refForName,attr,omitempty"`
	RefPtTypeAttr  string   `xml:"refPtType,attr,omitempty"`
}

// CTConstraint ...
type CTConstraint struct {
	XMLName                   xml.Name `xml:"CT_Constraint"`
	AGConstraintAttributes    *AGConstraintAttributes
	AGConstraintRefAttributes *AGConstraintRefAttributes
	OpAttr                    *string                   `xml:"op,attr"`
	ValAttr                   *float64                  `xml:"val,attr"`
	FactAttr                  *float64                  `xml:"fact,attr"`
	ExtLst                    *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTConstraints ...
type CTConstraints struct {
	XMLName xml.Name        `xml:"CT_Constraints"`
	Constr  []*CTConstraint `xml:"constr"`
}

// CTNumericRule ...
type CTNumericRule struct {
	XMLName                xml.Name `xml:"CT_NumericRule"`
	AGConstraintAttributes *AGConstraintAttributes
	ValAttr                *float64                  `xml:"val,attr"`
	FactAttr               *float64                  `xml:"fact,attr"`
	MaxAttr                *float64                  `xml:"max,attr"`
	ExtLst                 *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTRules ...
type CTRules struct {
	XMLName xml.Name         `xml:"CT_Rules"`
	Rule    []*CTNumericRule `xml:"rule"`
}

// CTPresentationOf ...
type CTPresentationOf struct {
	XMLName              xml.Name `xml:"CT_PresentationOf"`
	AGIteratorAttributes *AGIteratorAttributes
	ExtLst               *CTOfficeArtExtensionList `xml:"extLst"`
}

// STLayoutShapeType ...
type STLayoutShapeType struct {
	XMLName           xml.Name `xml:"ST_LayoutShapeType"`
	STOutputShapeType *STOutputShapeType
	STShapeType       string
}

// STIndex1 ...
type STIndex1 uint32

// CTAdj ...
type CTAdj struct {
	XMLName xml.Name `xml:"CT_Adj"`
	IdxAttr uint32   `xml:"idx,attr"`
	ValAttr float64  `xml:"val,attr"`
}

// CTAdjLst ...
type CTAdjLst struct {
	XMLName xml.Name `xml:"CT_AdjLst"`
	Adj     []*CTAdj `xml:"adj"`
}

// CTShape ...
type CTShape struct {
	XMLName       xml.Name                  `xml:"CT_Shape"`
	RotAttr       *float64                  `xml:"rot,attr"`
	TypeAttr      *STLayoutShapeType        `xml:"type,attr,omitempty"`
	RBlipAttr     *string                   `xml:"r:blip,attr"`
	ZOrderOffAttr *int                      `xml:"zOrderOff,attr"`
	HideGeomAttr  *bool                     `xml:"hideGeom,attr"`
	LkTxEntryAttr *bool                     `xml:"lkTxEntry,attr"`
	BlipPhldrAttr *bool                     `xml:"blipPhldr,attr"`
	AdjLst        *CTAdjLst                 `xml:"adjLst"`
	ExtLst        *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTParameter ...
type CTParameter struct {
	XMLName  xml.Name        `xml:"CT_Parameter"`
	TypeAttr string          `xml:"type,attr"`
	ValAttr  *STParameterVal `xml:"val,attr"`
}

// CTAlgorithm ...
type CTAlgorithm struct {
	XMLName  xml.Name                  `xml:"CT_Algorithm"`
	TypeAttr string                    `xml:"type,attr"`
	RevAttr  *uint32                   `xml:"rev,attr"`
	Param    []*CTParameter            `xml:"param"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTLayoutNode ...
type CTLayoutNode struct {
	XMLName      xml.Name                       `xml:"CT_LayoutNode"`
	NameAttr     *string                        `xml:"name,attr"`
	StyleLblAttr *string                        `xml:"styleLbl,attr"`
	ChOrderAttr  *string                        `xml:"chOrder,attr"`
	MoveWithAttr *string                        `xml:"moveWith,attr"`
	Alg          []*CTAlgorithm                 `xml:"alg"`
	Shape        []*CTShape                     `xml:"shape"`
	PresOf       []*CTPresentationOf            `xml:"presOf"`
	ConstrLst    []*CTConstraints               `xml:"constrLst"`
	RuleLst      []*CTRules                     `xml:"ruleLst"`
	VarLst       []*CTLayoutVariablePropertySet `xml:"varLst"`
	ForEach      []*CTForEach                   `xml:"forEach"`
	LayoutNode   []*CTLayoutNode                `xml:"layoutNode"`
	Choose       []*CTChoose                    `xml:"choose"`
	ExtLst       []*CTOfficeArtExtensionList    `xml:"extLst"`
}

// CTForEach ...
type CTForEach struct {
	XMLName              xml.Name `xml:"CT_ForEach"`
	AGIteratorAttributes *AGIteratorAttributes
	NameAttr             *string                     `xml:"name,attr"`
	RefAttr              *string                     `xml:"ref,attr"`
	Alg                  []*CTAlgorithm              `xml:"alg"`
	Shape                []*CTShape                  `xml:"shape"`
	PresOf               []*CTPresentationOf         `xml:"presOf"`
	ConstrLst            []*CTConstraints            `xml:"constrLst"`
	RuleLst              []*CTRules                  `xml:"ruleLst"`
	ForEach              []*CTForEach                `xml:"forEach"`
	LayoutNode           []*CTLayoutNode             `xml:"layoutNode"`
	Choose               []*CTChoose                 `xml:"choose"`
	ExtLst               []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTWhen ...
type CTWhen struct {
	XMLName              xml.Name `xml:"CT_When"`
	AGIteratorAttributes *AGIteratorAttributes
	NameAttr             *string                     `xml:"name,attr"`
	FuncAttr             string                      `xml:"func,attr"`
	ArgAttr              *STFunctionArgument         `xml:"arg,attr,omitempty"`
	OpAttr               string                      `xml:"op,attr"`
	ValAttr              *STFunctionValue            `xml:"val,attr"`
	Alg                  []*CTAlgorithm              `xml:"alg"`
	Shape                []*CTShape                  `xml:"shape"`
	PresOf               []*CTPresentationOf         `xml:"presOf"`
	ConstrLst            []*CTConstraints            `xml:"constrLst"`
	RuleLst              []*CTRules                  `xml:"ruleLst"`
	ForEach              []*CTForEach                `xml:"forEach"`
	LayoutNode           []*CTLayoutNode             `xml:"layoutNode"`
	Choose               []*CTChoose                 `xml:"choose"`
	ExtLst               []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTOtherwise ...
type CTOtherwise struct {
	XMLName    xml.Name                    `xml:"CT_Otherwise"`
	NameAttr   *string                     `xml:"name,attr"`
	Alg        []*CTAlgorithm              `xml:"alg"`
	Shape      []*CTShape                  `xml:"shape"`
	PresOf     []*CTPresentationOf         `xml:"presOf"`
	ConstrLst  []*CTConstraints            `xml:"constrLst"`
	RuleLst    []*CTRules                  `xml:"ruleLst"`
	ForEach    []*CTForEach                `xml:"forEach"`
	LayoutNode []*CTLayoutNode             `xml:"layoutNode"`
	Choose     []*CTChoose                 `xml:"choose"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTChoose ...
type CTChoose struct {
	XMLName  xml.Name     `xml:"CT_Choose"`
	NameAttr *string      `xml:"name,attr"`
	If       []*CTWhen    `xml:"if"`
	Else     *CTOtherwise `xml:"else"`
}

// CTSampleData ...
type CTSampleData struct {
	XMLName    xml.Name     `xml:"CT_SampleData"`
	UseDefAttr *bool        `xml:"useDef,attr"`
	DataModel  *CTDataModel `xml:"dataModel"`
}

// CTCategory ...
type CTCategory struct {
	XMLName  xml.Name `xml:"CT_Category"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTCategories ...
type CTCategories struct {
	XMLName xml.Name      `xml:"CT_Categories"`
	Cat     []*CTCategory `xml:"cat"`
}

// CTName ...
type CTName struct {
	XMLName  xml.Name `xml:"CT_Name"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTDescription ...
type CTDescription struct {
	XMLName  xml.Name `xml:"CT_Description"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTDiagramDefinition ...
type CTDiagramDefinition struct {
	XMLName      xml.Name                  `xml:"CT_DiagramDefinition"`
	UniqueIdAttr *string                   `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	DefStyleAttr *string                   `xml:"defStyle,attr"`
	Title        []*CTName                 `xml:"title"`
	Desc         []*CTDescription          `xml:"desc"`
	CatLst       *CTCategories             `xml:"catLst"`
	SampData     *CTSampleData             `xml:"sampData"`
	StyleData    *CTSampleData             `xml:"styleData"`
	ClrData      *CTSampleData             `xml:"clrData"`
	LayoutNode   *CTLayoutNode             `xml:"layoutNode"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// LayoutDef ...
type LayoutDef *CTDiagramDefinition

// CTDiagramDefinitionHeader ...
type CTDiagramDefinitionHeader struct {
	XMLName      xml.Name                  `xml:"CT_DiagramDefinitionHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	DefStyleAttr *string                   `xml:"defStyle,attr"`
	ResIdAttr    *int                      `xml:"resId,attr"`
	Title        []*CTName                 `xml:"title"`
	Desc         []*CTDescription          `xml:"desc"`
	CatLst       *CTCategories             `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// LayoutDefHdr ...
type LayoutDefHdr *CTDiagramDefinitionHeader

// CTDiagramDefinitionHeaderLst ...
type CTDiagramDefinitionHeaderLst struct {
	XMLName      xml.Name                     `xml:"CT_DiagramDefinitionHeaderLst"`
	LayoutDefHdr []*CTDiagramDefinitionHeader `xml:"layoutDefHdr"`
}

// LayoutDefHdrLst ...
type LayoutDefHdrLst *CTDiagramDefinitionHeaderLst

// CTRelIds ...
type CTRelIds struct {
	XMLName xml.Name `xml:"CT_RelIds"`
	RDmAttr string   `xml:"r:dm,attr"`
	RLoAttr string   `xml:"r:lo,attr"`
	RQsAttr string   `xml:"r:qs,attr"`
	RCsAttr string   `xml:"r:cs,attr"`
}

// RelIds ...
type RelIds *CTRelIds

// STParameterVal ...
type STParameterVal struct {
	XMLName                      xml.Name `xml:"ST_ParameterVal"`
	STArrowheadStyle             *STArrowheadStyle
	STAutoTextRotation           *STAutoTextRotation
	STBendPoint                  *STBendPoint
	STBreakpoint                 *STBreakpoint
	STCenterShapeMapping         *STCenterShapeMapping
	STChildAlignment             *STChildAlignment
	STChildDirection             *STChildDirection
	STConnectorDimension         *STConnectorDimension
	STConnectorPoint             *STConnectorPoint
	STConnectorRouting           *STConnectorRouting
	STContinueDirection          *STContinueDirection
	STDiagramHorizontalAlignment *STDiagramHorizontalAlignment
	STDiagramTextAlignment       *STDiagramTextAlignment
	STFallbackDimension          *STFallbackDimension
	STFlowDirection              *STFlowDirection
	STGrowDirection              *STGrowDirection
	STHierarchyAlignment         *STHierarchyAlignment
	STLinearDirection            *STLinearDirection
	STNodeHorizontalAlignment    *STNodeHorizontalAlignment
	STNodeVerticalAlignment      *STNodeVerticalAlignment
	STOffset                     *STOffset
	STPyramidAccentPosition      *STPyramidAccentPosition
	STPyramidAccentTextMargin    *STPyramidAccentTextMargin
	STRotationPath               *STRotationPath
	STSecondaryChildAlignment    *STSecondaryChildAlignment
	STSecondaryLinearDirection   *STSecondaryLinearDirection
	STStartingElement            *STStartingElement
	STTextAnchorHorizontal       *STTextAnchorHorizontal
	STTextAnchorVertical         *STTextAnchorVertical
	STTextBlockDirection         *STTextBlockDirection
	STTextDirection              *STTextDirection
	STVerticalAlignment          *STVerticalAlignment
	Boolean                      bool
	Double                       float64
	Int                          int
	String                       string
}

// STModelId ...
type STModelId struct {
	XMLName xml.Name `xml:"ST_ModelId"`
	Int     int
	STGuid  string
}

// STPrSetCustVal ...
type STPrSetCustVal struct {
	XMLName      xml.Name `xml:"ST_PrSetCustVal"`
	STPercentage string
}

// CTElemPropSet ...
type CTElemPropSet struct {
	XMLName                  xml.Name                     `xml:"CT_ElemPropSet"`
	PresAssocIDAttr          *STModelId                   `xml:"presAssocID,attr,omitempty"`
	PresNameAttr             *string                      `xml:"presName,attr"`
	PresStyleLblAttr         *string                      `xml:"presStyleLbl,attr"`
	PresStyleIdxAttr         *int                         `xml:"presStyleIdx,attr"`
	PresStyleCntAttr         *int                         `xml:"presStyleCnt,attr"`
	LoTypeIdAttr             *string                      `xml:"loTypeId,attr"`
	LoCatIdAttr              *string                      `xml:"loCatId,attr"`
	QsTypeIdAttr             *string                      `xml:"qsTypeId,attr"`
	QsCatIdAttr              *string                      `xml:"qsCatId,attr"`
	CsTypeIdAttr             *string                      `xml:"csTypeId,attr"`
	CsCatIdAttr              *string                      `xml:"csCatId,attr"`
	Coherent3DOffAttr        *bool                        `xml:"coherent3DOff,attr"`
	PhldrTAttr               *string                      `xml:"phldrT,attr"`
	PhldrAttr                *bool                        `xml:"phldr,attr"`
	CustAngAttr              *int                         `xml:"custAng,attr"`
	CustFlipVertAttr         *bool                        `xml:"custFlipVert,attr"`
	CustFlipHorAttr          *bool                        `xml:"custFlipHor,attr"`
	CustSzXAttr              *int                         `xml:"custSzX,attr"`
	CustSzYAttr              *int                         `xml:"custSzY,attr"`
	CustScaleXAttr           *STPrSetCustVal              `xml:"custScaleX,attr,omitempty"`
	CustScaleYAttr           *STPrSetCustVal              `xml:"custScaleY,attr,omitempty"`
	CustTAttr                *bool                        `xml:"custT,attr"`
	CustLinFactXAttr         *STPrSetCustVal              `xml:"custLinFactX,attr,omitempty"`
	CustLinFactYAttr         *STPrSetCustVal              `xml:"custLinFactY,attr,omitempty"`
	CustLinFactNeighborXAttr *STPrSetCustVal              `xml:"custLinFactNeighborX,attr,omitempty"`
	CustLinFactNeighborYAttr *STPrSetCustVal              `xml:"custLinFactNeighborY,attr,omitempty"`
	CustRadScaleRadAttr      *STPrSetCustVal              `xml:"custRadScaleRad,attr,omitempty"`
	CustRadScaleIncAttr      *STPrSetCustVal              `xml:"custRadScaleInc,attr,omitempty"`
	PresLayoutVars           *CTLayoutVariablePropertySet `xml:"presLayoutVars"`
	Style                    *CTShapeStyle                `xml:"style"`
}

// STDirection ...
type STDirection string

// STHierBranchStyle ...
type STHierBranchStyle string

// STAnimOneStr ...
type STAnimOneStr string

// STAnimLvlStr ...
type STAnimLvlStr string

// CTOrgChart ...
type CTOrgChart struct {
	XMLName xml.Name `xml:"CT_OrgChart"`
	ValAttr *bool    `xml:"val,attr"`
}

// STNodeCount ...
type STNodeCount int

// CTChildMax ...
type CTChildMax struct {
	XMLName xml.Name `xml:"CT_ChildMax"`
	ValAttr *int     `xml:"val,attr"`
}

// CTChildPref ...
type CTChildPref struct {
	XMLName xml.Name `xml:"CT_ChildPref"`
	ValAttr *int     `xml:"val,attr"`
}

// CTBulletEnabled ...
type CTBulletEnabled struct {
	XMLName xml.Name `xml:"CT_BulletEnabled"`
	ValAttr *bool    `xml:"val,attr"`
}

// CTDirection ...
type CTDirection struct {
	XMLName xml.Name `xml:"CT_Direction"`
	ValAttr *string  `xml:"val,attr"`
}

// CTHierBranchStyle ...
type CTHierBranchStyle struct {
	XMLName xml.Name `xml:"CT_HierBranchStyle"`
	ValAttr *string  `xml:"val,attr"`
}

// CTAnimOne ...
type CTAnimOne struct {
	XMLName xml.Name `xml:"CT_AnimOne"`
	ValAttr *string  `xml:"val,attr"`
}

// CTAnimLvl ...
type CTAnimLvl struct {
	XMLName xml.Name `xml:"CT_AnimLvl"`
	ValAttr *string  `xml:"val,attr"`
}

// STResizeHandlesStr ...
type STResizeHandlesStr string

// CTResizeHandles ...
type CTResizeHandles struct {
	XMLName xml.Name `xml:"CT_ResizeHandles"`
	ValAttr *string  `xml:"val,attr"`
}

// CTLayoutVariablePropertySet ...
type CTLayoutVariablePropertySet struct {
	XMLName       xml.Name           `xml:"CT_LayoutVariablePropertySet"`
	OrgChart      *CTOrgChart        `xml:"orgChart"`
	ChMax         *CTChildMax        `xml:"chMax"`
	ChPref        *CTChildPref       `xml:"chPref"`
	BulletEnabled *CTBulletEnabled   `xml:"bulletEnabled"`
	Dir           *CTDirection       `xml:"dir"`
	HierBranch    *CTHierBranchStyle `xml:"hierBranch"`
	AnimOne       *CTAnimOne         `xml:"animOne"`
	AnimLvl       *CTAnimLvl         `xml:"animLvl"`
	ResizeHandles *CTResizeHandles   `xml:"resizeHandles"`
}

// CTSDName ...
type CTSDName struct {
	XMLName  xml.Name `xml:"CT_SDName"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTSDDescription ...
type CTSDDescription struct {
	XMLName  xml.Name `xml:"CT_SDDescription"`
	LangAttr *string  `xml:"lang,attr"`
	ValAttr  string   `xml:"val,attr"`
}

// CTSDCategory ...
type CTSDCategory struct {
	XMLName  xml.Name `xml:"CT_SDCategory"`
	TypeAttr string   `xml:"type,attr"`
	PriAttr  uint32   `xml:"pri,attr"`
}

// CTSDCategories ...
type CTSDCategories struct {
	XMLName xml.Name        `xml:"CT_SDCategories"`
	Cat     []*CTSDCategory `xml:"cat"`
}

// CTTextProps ...
type CTTextProps struct {
	XMLName   xml.Name `xml:"CT_TextProps"`
	AEGText3D []*EGText3D
}

// CTStyleLabel ...
type CTStyleLabel struct {
	XMLName  xml.Name                  `xml:"CT_StyleLabel"`
	NameAttr string                    `xml:"name,attr"`
	Scene3d  *CTScene3D                `xml:"scene3d"`
	Sp3d     *CTShape3D                `xml:"sp3d"`
	TxPr     *CTTextProps              `xml:"txPr"`
	Style    *CTShapeStyle             `xml:"style"`
	ExtLst   *CTOfficeArtExtensionList `xml:"extLst"`
}

// CTStyleDefinition ...
type CTStyleDefinition struct {
	XMLName      xml.Name                  `xml:"CT_StyleDefinition"`
	UniqueIdAttr *string                   `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	Title        []*CTSDName               `xml:"title"`
	Desc         []*CTSDDescription        `xml:"desc"`
	CatLst       *CTSDCategories           `xml:"catLst"`
	Scene3d      *CTScene3D                `xml:"scene3d"`
	StyleLbl     []*CTStyleLabel           `xml:"styleLbl"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// StyleDef ...
type StyleDef *CTStyleDefinition

// CTStyleDefinitionHeader ...
type CTStyleDefinitionHeader struct {
	XMLName      xml.Name                  `xml:"CT_StyleDefinitionHeader"`
	UniqueIdAttr string                    `xml:"uniqueId,attr"`
	MinVerAttr   *string                   `xml:"minVer,attr"`
	ResIdAttr    *int                      `xml:"resId,attr"`
	Title        []*CTSDName               `xml:"title"`
	Desc         []*CTSDDescription        `xml:"desc"`
	CatLst       *CTSDCategories           `xml:"catLst"`
	ExtLst       *CTOfficeArtExtensionList `xml:"extLst"`
}

// StyleDefHdr ...
type StyleDefHdr *CTStyleDefinitionHeader

// CTStyleDefinitionHeaderLst ...
type CTStyleDefinitionHeaderLst struct {
	XMLName     xml.Name                   `xml:"CT_StyleDefinitionHeaderLst"`
	StyleDefHdr []*CTStyleDefinitionHeader `xml:"styleDefHdr"`
}

// StyleDefHdrLst ...
type StyleDefHdrLst *CTStyleDefinitionHeaderLst

// STAlgorithmType ...
type STAlgorithmType string

// STAxisType ...
type STAxisType string

// STAxisTypes ...
type STAxisTypes []string

// STBoolOperator ...
type STBoolOperator string

// STChildOrderType ...
type STChildOrderType string

// STConstraintType ...
type STConstraintType string

// STConstraintRelationship ...
type STConstraintRelationship string

// STElementType ...
type STElementType string

// STElementTypes ...
type STElementTypes []string

// STParameterId ...
type STParameterId string

// STInts ...
type STInts []int

// STUnsignedInts ...
type STUnsignedInts []uint32

// STBooleans ...
type STBooleans []bool

// STFunctionType ...
type STFunctionType string

// STFunctionOperator ...
type STFunctionOperator string

// STDiagramHorizontalAlignment ...
type STDiagramHorizontalAlignment string

// STVerticalAlignment ...
type STVerticalAlignment string

// STChildDirection ...
type STChildDirection string

// STChildAlignment ...
type STChildAlignment string

// STSecondaryChildAlignment ...
type STSecondaryChildAlignment string

// STLinearDirection ...
type STLinearDirection string

// STSecondaryLinearDirection ...
type STSecondaryLinearDirection string

// STStartingElement ...
type STStartingElement string

// STRotationPath ...
type STRotationPath string

// STCenterShapeMapping ...
type STCenterShapeMapping string

// STBendPoint ...
type STBendPoint string

// STConnectorRouting ...
type STConnectorRouting string

// STArrowheadStyle ...
type STArrowheadStyle string

// STConnectorDimension ...
type STConnectorDimension string

// STConnectorPoint ...
type STConnectorPoint string

// STNodeHorizontalAlignment ...
type STNodeHorizontalAlignment string

// STNodeVerticalAlignment ...
type STNodeVerticalAlignment string

// STFallbackDimension ...
type STFallbackDimension string

// STTextDirection ...
type STTextDirection string

// STPyramidAccentPosition ...
type STPyramidAccentPosition string

// STPyramidAccentTextMargin ...
type STPyramidAccentTextMargin string

// STTextBlockDirection ...
type STTextBlockDirection string

// STTextAnchorHorizontal ...
type STTextAnchorHorizontal string

// STTextAnchorVertical ...
type STTextAnchorVertical string

// STDiagramTextAlignment ...
type STDiagramTextAlignment string

// STAutoTextRotation ...
type STAutoTextRotation string

// STGrowDirection ...
type STGrowDirection string

// STFlowDirection ...
type STFlowDirection string

// STContinueDirection ...
type STContinueDirection string

// STBreakpoint ...
type STBreakpoint string

// STOffset ...
type STOffset string

// STHierarchyAlignment ...
type STHierarchyAlignment string

// STFunctionValue ...
type STFunctionValue struct {
	XMLName            xml.Name `xml:"ST_FunctionValue"`
	Boolean            bool
	Int                int
	STResizeHandlesStr string
	STHierBranchStyle  string
	STDirection        string
	STAnimOneStr       string
	STAnimLvlStr       string
}

// STVariableType ...
type STVariableType string

// STFunctionArgument ...
type STFunctionArgument struct {
	XMLName        xml.Name `xml:"ST_FunctionArgument"`
	STVariableType string
}

// STOutputShapeType ...
type STOutputShapeType string
