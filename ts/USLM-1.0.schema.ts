// Code generated by xgen. DO NOT EDIT.

// DateSimpleType is The date simple type unifies both date and time formats and allows
//             a date to be specified as either a day or a time in a day. This is
//             to allow situations where the law becomes effective based on another
//             time zone.
export class DateSimpleType {
	DateTime: string;
	Date: string;
}

// OccurrenceSimpleType is The occurrence simple type specifies which occurrence is affected
//             by an action when amending. An occurence can be either a positive
//             integer or a value from the choice enumeration such as "all" for
//             all occurrences or "last" for the last occurrence.
export class OccurrenceSimpleType {
	ChoiceEnum: ChoiceEnum;
	PositiveInteger: number;
}

// ShortStringSimpleType is A simple string with not more than 32 characters.
export type ShortStringSimpleType = string;

// MediumStringSimpleType is A simple string with not more than 128 characters.
export type MediumStringSimpleType = string;

// LongStringSimpleType is A simple string with not more than 1024 characters.
export type LongStringSimpleType = string;

// ChoiceEnum is The choice enumeration is used to enumerate some textual values for
//             use with the occurrence simple type defined above.
export enum ChoiceEnum {
	all = 'all',
	none = 'none',
	first = 'first',
	last = 'last',
}

// PropertyTypeEnum is The property  type enumeration allows a property to be given a
//             type specification. If the @type attribute is not specified, then
//             the default type is "string".
export enum PropertyTypeEnum {
	string = 'string',
	number = 'number',
	token = 'token',
	boolean = 'boolean',
	text = 'text',
	date = 'date',
	url = 'url',
}

// SetTypeEnum is A "res" is a resource, such as a person, place, or thing and
//                   the properties enclosed within the set describe it.
export enum SetTypeEnum {
	bag = 'bag',
	seq = 'seq',
	grp = 'grp',
	alt = 'alt',
	res = 'res',
}

// StatusEnum is A "unknown" status indicates that the status is not known.
export enum StatusEnum {
	proposed = 'proposed',
	withdrawn = 'withdrawn',
	cancelled = 'cancelled',
	pending = 'pending',
	operational = 'operational',
	suspended = 'suspended',
	renumbered = 'renumbered',
	repealed = 'repealed',
	expired = 'expired',
	terminated = 'terminated',
	hadItsEffect = 'hadItsEffect',
	omitted = 'omitted',
	notAdopted = 'notAdopted',
	transferred = 'transferred',
	redesignated = 'redesignated',
	reserved = 'reserved',
	vacant = 'vacant',
	crossReference = 'crossReference',
	unknown = 'unknown',
}

// ActionTypeEnum is The "delete" action removes text from a proposed provision to
//                   the law.
export enum ActionTypeEnum {
	enact = 'enact',
	add = 'add',
	amend = 'amend',
	substitute = 'substitute',
	renumber = 'renumber',
	repeal = 'repeal',
	insert = 'insert',
	delete = 'delete',
}

// PositionEnum is The position enumeration is used with references found within
//             amendments when it is necessary to specify a position relative to an
//             item rather than when referencing the item itself.
export enum PositionEnum {
	start = 'start',
	before = 'before',
	inside = 'inside',
	after = 'after',
	end = 'end',
}

// OrientationEnum is The orientation enumeration is used specify how an item should be
//             oriented in the printed form. The orientation can be specified
//             for any content item or for any appendix item, including a
//             schedule.
export enum OrientationEnum {
	portrait = 'portrait',
	landscape = 'landscape',
}

// NoteTypeEnum is Notes can be placed inline, as footnotes at the end of the page,
//             as end notes as the end of document, or U.S. Code notes. By default,
//             notes are inline
export enum NoteTypeEnum {
	inline = 'inline',
	footnote = 'footnote',
	endnote = 'endnote',
	uscNote = 'uscNote',
}

// IdentificationGroup is Use the @identifier attribute to specify the URL context of the
//                element. Typically, the @identifier will be established on the
//                root element or on any element, such as a <quotedStructure> or
//                <quotedText> element, that changes the context.
// 
//                The @identifier attribute is optional.
export class IdentificationGroup {
	IdAttr: string | null;
	NameAttr: string | null;
	TemporalIdAttr: string | null;
	IdentifierAttr: string | null;
}

// ClassificationGroup is The @style attribute is used to specify CSS attributes that
//                override the default styles defined for an element or an element
//                class. The current loose-leaf publication standards should be
//                specified using an external style sheet and the use of the @style
//                attribute should be reserved for exception cases where the
//                default presentation must be overridden.
export class ClassificationGroup {
	RoleAttr: string | null;
	ClassAttr: string | null;
	StyleAttr: string | null;
}

// AnnotationGroup is The @codificationTip is for internal use by the OLRC.
export class AnnotationGroup {
	NoteAttr: string | null;
	AltAttr: string | null;
	MetaAttr: string | null;
	MiscAttr: string | null;
	DraftingTipAttr: string | null;
	CodificationTipAttr: string | null;
}

// DescriptionGroup is The @sortOrder attribute is used to specify a sorting order for
//                a list of items, when that sort order is not the document
//                sequence. The @sortOrder value must be specified as a positive
//                integer. This attribute should rarely be used.
export class DescriptionGroup {
	TitleAttr: string | null;
	BriefAttr: string | null;
	SortOrderAttr: number | null;
}

// ReferenceGroup is The @portion attribute is used, in conjunction with the @idref
//                attribute, when only a portion of the referenced item is being
//                affected. The value of @portion is an additional part to append
//                to the URL, with a "/" separator to identify the item affected.
//                Do not include a leading "/" in the @portion value.
export class ReferenceGroup {
	HrefAttr: string | null;
	IdrefAttr: string | null;
	PortionAttr: string | null;
}

// AmendingGroup is The @posCount attribute is used to specify the number of
//                occurrences of the @posText to seek out when establishing the
//                context.
export class AmendingGroup {
	PosAttr: string | null;
	PosTextAttr: string | null;
	PosCountAttr: number | null;
}

// LinkGroup is The @src attribute is a URL that points to an item to be included
//                in the published document. Unlike an @href attribute, a @src
//                attribute can be any normal URL and can be relative or absolute.
export class LinkGroup {
	SrcAttr: string | null;
}

// ValueGroup is The @endValue attribute is used for the upper end of a value
//             range.
export class ValueGroup {
	ValueAttr: string | null;
	StartValueAttr: string | null;
	EndValueAttr: string | null;
}

// NoteGroup is Set the @topic attribute to a string value in order
//                      to categorize the note or group of notes. An open,
//                      but enumerated, list of string values should be used.
//                      Using a fixed list of values will better aid in
//                      categorization of notes later.
export class NoteGroup {
	TypeAttr: string | null;
	TopicAttr: string | null;
}

// DateGroup is The @endDate attribute is used for the ending date of a date
//                range.
export class DateGroup {
	DateAttr: DateSimpleType | null;
	StartDateAttr: DateSimpleType | null;
	EndDateAttr: DateSimpleType | null;
}

// VersioningGroup is The @partial attribute is used, in conjunction with the
//                @status attribute to indicate that the status is not fully
//                applied.
export class VersioningGroup {
	StartPeriodAttr: DateSimpleType | null;
	EndPeriodAttr: DateSimpleType | null;
	StatusAttr: string | null;
	PartialAttr: boolean | null;
}

// ActionGroup is The @commencementDate attribute specifies the date upon which the
//                action is to be applied.
export class ActionGroup {
	TypeAttr: string | null;
	OccurrenceAttr: OccurrenceSimpleType | null;
	CommencementDateAttr: DateSimpleType | null;
}

// CellGroup is The @leaders attribute specifies whether leaders should be
//             shown either trailing or following the text content. The character
//             included as the value is the character used to render the leaders.
// 
//             Use the CSS text-align character to position the text. If you
//             align the text to the left, then the leaders will show to the
//             right and if you align the text to the right, then the leaders
//             will show to the left.
export class CellGroup {
	ColspanAttr: number | null;
	RowspanAttr: number | null;
	LeadersAttr: string | null;
}

// BaseType is The base type defines the most general element, specifying the
//             attributes which can be found on all elements - specifically
//             attributes belonging to the identification, classification, and
//             annotation groups.
// 
//             The base type is defined as an abstract type and elements cannot
//             be declared based on it.
export class BaseType {
	IdentificationGroup: IdentificationGroup;
	ClassificationGroup: ClassificationGroup;
	AnnotationGroup: AnnotationGroup;
	VersioningGroup: VersioningGroup;
	Value: string;
}

// BaseBlockType is The base block type is a variant of the base type, but having a
//             content structure to support block level children - elements
//             but no text.
export class BaseBlockType {
	IdentificationGroup: IdentificationGroup;
	ClassificationGroup: ClassificationGroup;
	AnnotationGroup: AnnotationGroup;
	VersioningGroup: VersioningGroup;
}

// BaseContentType is The base content type is a variant of the base type, but having
//             a very open content model including text.
export class BaseContentType {
	IdentificationGroup: IdentificationGroup;
	ClassificationGroup: ClassificationGroup;
	AnnotationGroup: AnnotationGroup;
	VersioningGroup: VersioningGroup;
}

// MarkerType is The marker type is a restriction of the base type to an element
//             without content.
export class MarkerType {
}

// InlineType is The inline type is a extension of the base type to text content or
//             other inline elements.
export class InlineType extends BaseContentType  {
	Marker: Array<MarkerType>;
	Inline: Array<InlineType>;
}

// BlockType is The block type is a extension of the base type to content
//             consisting of only elements.
export class BlockType extends BaseBlockType  {
}

// TextType is The text type is a broad base type allowing any content.
export class TextType extends BaseContentType  {
}

// ContentType is The content type is a broad base type allowing any content.
export class ContentType extends BaseContentType  {
	OrientationAttr: string | null;
}

// Marker is The <marker> element is a primitive element to be used to mark or
//             denote a spot in the text. I can be used in the <content> areas or
//             anywhere else where an <inline> element is expected. The <marker>
//             element contains no text.
export type Marker = MarkerType;

// Inline is The <inline> element is a primitive element to be used within
//             <content> areas or within any other areas which can accept
//             inline content.
export type Inline = InlineType;

// Block is The <block> element is a primitive element to be used anywhere
//             where <block> elements are permitted including within <content>
//             elements or anywhere where <block> elements have been explicitly
//             permitted.
export type Block = BlockType;

// Content is The <content> element is a primitive element to be used anywhere
//             where a very general content model is desired, including within
//             other <content> elements.
export type Content = ContentType;

// LawDocType is In addition to the main part of the document, a document
//                         may have one or more appendices such as schedules or
//                         explanatory memorandums/notes. These appendices can
//                         either be inline documents or the can be external
//                         referenced documents.
export class LawDocType extends BaseBlockType  {
	Meta: MetaType;
	Main: MainType;
	Block: Array<BlockType>;
	Appendix: Array<AppendixType>;
}

// GenericDocType is In addition to the content part of the document, a document
//                         may have one or more appendices.
export class GenericDocType extends BaseBlockType  {
	Meta: MetaType;
	Content: ContentType;
	Appendix: Array<AppendixType>;
}

// MetaType is Properties can be grouped into sets. These set can
//                         be used to represent something like a series of events,
//                         a person, or another other object related to the
//                         document.
export class MetaType extends BaseBlockType  {
	Property: Array<PropertyType>;
	Set: Array<SetType>;
}

// PropertyType is A property can represent a pointer to either an external
//                   document or an element within the document.
// 
//                   You can use a ref to create a pointer to an endnote or a
//                   footnote. In that case, the ref text will be the endnote or
//                   footnote indicator as seen in "<ref idref="fn000001">†</ref>"
//                   where the dagger is the indicator. An endnote or footnote
//                   reference should always use the @idref attribute to point to
//                   an endnote or a footnote within the document.
export class PropertyType extends InlineType  {
	DateGroup: DateGroup;
	ValueGroup: ValueGroup;
	ReferenceGroup: ReferenceGroup;
	TypeAttr: string | null;
}

// SetType is A set can contain 0 or more sets.
export class SetType extends BaseBlockType  {
	TypeAttr: string | null;
	Property: Array<PropertyType>;
	Set: Array<SetType>;
}

// TocType is The items in a table of contents can be arranged in
//                         a tabular fashion by surrounding the items in a layout.
//                         When a layout is specified, use <column> elements
//                         within each <tocItem> to indicate specific columns.
export class TocType extends BaseBlockType  {
	GenerateAttr: boolean | null;
	HeadingStructure: HeadingStructure;
	TocItem: Array<TocItemType>;
	Layout: Array<LayoutType>;
}

// TocItemType is Use the description group to record the number and title in the
//                   table of contents as metadata.
export class TocItemType extends BaseBlockType  {
	DescriptionGroup: DescriptionGroup;
	HeadingStructure: HeadingStructure;
	TocItem: Array<TocItemType>;
	Content: Array<ContentType>;
}

// MainType is The document is permitted to be empty to allow for the
//                         case when the document is newly created and still in a
//                         drafting state.
export class MainType {
	NoteStructure: Array<NoteStructure>;
	PreambleStructure: PreambleStructure;
	LevelStructure: LevelStructure;
	Property: Array<PropertyType>;
	Block: Array<BlockType>;
	Statement: Array<StatementType>;
	Toc: Array<TocType>;
}

// StatementType is The attributes of the description group can be used to
//                   record a number and title for a statement for use when
//                   generating a table of contents.
export class StatementType extends BaseContentType  {
	DescriptionGroup: DescriptionGroup;
	Marker: Array<MarkerType>;
	Inline: Array<InlineType>;
	Block: Array<BlockType>;
	Text: Array<TextType>;
	Content: Array<ContentType>;
	Level: Array<LevelType>;
}

// PreambleType is Attributes from the description group may be used to
//                      attach information to the preamble for use in generating
//                      a table of contents.
export class PreambleType extends BaseBlockType  {
	DescriptionGroup: DescriptionGroup;
	HeadingStructure: HeadingStructure;
	RecitalStructure: Array<RecitalStructure>;
	EnactingFormula: StatementType;
}

// LevelType is Use the description group to record information in the
//                      attributes to be used when generating the table of contents.
export class LevelType extends BaseBlockType  {
	DescriptionGroup: DescriptionGroup;
	NumStructure: NumStructure;
	HeadingStructure: HeadingStructure;
	TocStructure: Array<TocStructure>;
	LevelStructure: LevelStructure;
}

// NumType is Use the @value attribute to record a normalized value of
//                      the <num> content. When the text content represents a
//                      range of values, use the @beginValue and @endValue
//                      attributes to record the range.
export class NumType extends InlineType  {
	ValueGroup: ValueGroup;
}

// HeadingType is The heading type is used to define heading and subheadings for
//             levels and other structured items. Often a heading will follow
//             a number.
export class HeadingType extends ContentType  {
}

// InstructionType is A quoted structure may be associated with an
//                            action (by position) as part of the processing
//                            action.
export class InstructionType extends BaseContentType  {
	Ref: RefType;
	Inline: Array<InlineType>;
	Marker: Array<MarkerType>;
	Action: Array<ActionType>;
	Level: Array<LevelType>;
	QuotedText: QuotedTextType;
	QuotedContent: QuotedContentType;
}

// ActionType is Use the @action attribute to describe the action being taken.
export class ActionType extends InlineType  {
	ReferenceGroup: ReferenceGroup;
	AmendingGroup: AmendingGroup;
	ActionGroup: ActionGroup;
}

// NotesType is You can use the @type attribute to position the notes
//                      and the @topic attribute to categorize the notes.
export class NotesType extends BaseBlockType  {
	NoteGroup: NoteGroup;
	Heading: HeadingType;
	Subheading: Array<HeadingType>;
	Note: Array<NoteType>;
	Layout: LayoutType;
}

// NoteType is You can use the @date to associate dates to your notes.
//                      This can be used to generate alerts.
export class NoteType extends ContentType  {
	NoteGroup: NoteGroup;
	DateGroup: DateGroup;
}

// AppendixType is If an <appendix> is to be included by reference, use the
//                      @src attribute with a normal URL to point to the document
//                      to be included.
export class AppendixType extends BaseBlockType  {
	DescriptionGroup: DescriptionGroup;
	LinkGroup: LinkGroup;
	OrientationAttr: string | null;
	NumStructure: NumStructure;
	HeadingStructure: HeadingStructure;
	TocStructure: TocStructure;
	LevelStructure: LevelStructure;
	Block: BlockType;
}

// SignaturesType is Defines a block for a collection of signatures. An opening paragraph
//             is permitted as well as an ending date. In some cases, the date may
//             appear within the opening paragraph.
// 
//             The signatures may either be specified serially in a grid-like
//             layout.
export class SignaturesType {
	P: PType;
	Signature: Array<SignatureType>;
	Layout: LayoutType;
	Date: string;
}

// Name ...
export class Name {
}

// Role ...
export class Role {
}

// Affiliation ...
export class Affiliation {
}

// SignatureType is Defines a basic signature element comprising a name and optionally
//             the person's role, their affiliation, and a date. All fields can be
//             defined to include either an @href or an @idref to point to an
//             identifying resource that describes the person, their role, and
//             their affiliation.
export class SignatureType {
	Name: Name;
	Role: Role;
	Affiliation: Affiliation;
	Date: string;
}

// RefType is Use the @pos and other attributes to describe
//                      what or where is being affected.
// 
//                      The attributes in the amending group should only be used
//                      for references or actions within an amending instruction.
export class RefType extends PropertyType  {
	AmendingGroup: AmendingGroup;
}

// DateType is Use the @date attribute to record a normalized value of the
//                      date according to ISO 8601.
export class DateType {
	DateGroup: DateGroup;
}

// QuotedTextType is A quoted text type is an extraction of simple text from another
//             source or origin. If the quoted text is to have literal quotes
//             surrounding it, then those characters must be included in the text
//             surrounding the quoted text and not within it.
// 
//             Quoted text is seen in amendments or modifications.
// 
//             Use the @identifier attribute to establish the referencing context
//             of the quoted text.
export class QuotedTextType extends InlineType  {
	OriginAttr: string | null;
}

// QuotedContentType is A quotedContentType is used for an extraction of potentially structured
//             text (text with XML elements) from another source or origin.
// 
//             Quoted content is seen in USC Notes, amendments, and modifications.
// 
//             Use the @identifier attribute to establish the referencing context
//             of the quoted structure
export class QuotedContentType extends ContentType  {
	OriginAttr: string | null;
}

// NoteStructure ...
export class NoteStructure {
	Note: NoteType;
	Notes: NotesType;
}

// NumStructure ...
export class NumStructure {
	Num: Array<NumType>;
	NoteStructure: Array<NoteStructure>;
}

// HeadingStructure ...
export class HeadingStructure {
	Heading: Array<HeadingType>;
	Subheading: Array<HeadingType>;
	NoteStructure: Array<NoteStructure>;
}

// TocStructure ...
export class TocStructure {
	Toc: TocType;
	NoteStructure: Array<NoteStructure>;
}

// StatementStructure ...
export class StatementStructure {
	Statement: StatementType;
	NoteStructure: Array<NoteStructure>;
}

// RecitalStructure ...
export class RecitalStructure {
	Recital: StatementType;
	NoteStructure: Array<NoteStructure>;
}

// PreambleStructure ...
export class PreambleStructure {
	Preamble: PreambleType;
	EnactingFormula: StatementType;
	NoteStructure: Array<NoteStructure>;
}

// LevelStructure ...
export class LevelStructure {
	Instruction: Array<InstructionType>;
	Content: Array<ContentType>;
	Text: TextType;
	Level: LevelType;
	CrossHeading: HeadingType;
	NoteStructure: Array<NoteStructure>;
	NoteStructure: Array<NoteStructure>;
	NoteStructure: Array<NoteStructure>;
}

// LawDoc is A <lawDoc> is a base level element representing all types of
//             legislative documents.
export type LawDoc = LawDocType;

// Document is A <document> is a base level element for loosely structured
//             documents.
export type Document = GenericDocType;

// Meta is A <meta> block contains properties and sets of properties recording
//             metadata about the document. The information contained within the
//             meta block is not part of the official law and should not be printed
//             as such. Ordinarily, all text content in a document is intended for
//             publication in textual representations of the document. However,
//             this is not the case for textual content in the <meta> block. If,
//             for instance, a property in the meta block has text content, it
//             does not automatically become text to be included in a published
//             form. However, in some case this may be desirable and can be done.
//             However, the meaning is not implicit.
// 
//             The <meta> block may contain elements from the Dublin Core.
export type Meta = MetaType;

// Property is A <property> is simple value recorded with the document. Typically
//             properties are stored in the <meta> block of the document. However,
//             this is not necessarily the case. It is possible to also define
//             properties within any content area in the document. A case where
//             this occurs is the definition of the short title. The short title
//             is treated as a property (the <docTitle> element is a derivation
//             from the <property> element).
// 
//             If a property in the <meta> block has textual content, then this
//             text is not implicitly intended for publication. However, if a
//             property outside the <meta> block has textual content, then this
//             text is implicitly intended for publication.
export type Property = PropertyType;

// Set is A <set> is a grouping of properties in the <meta> block. Sets
//             themselves can contain other sets. Sets can be typed using the
//             @type attribute with the SetTypeEnum enumeration. By default, sets
//             are simply unordered bags of properties.
export type Set = SetType;

// Toc is A <toc> is a table of contents. A table of contents can appear in a
//             number of locations in document. A table of contents can appear in
//             three different locations:
// 
//             - It can appear anywhere within the top of the <main> element,
//               before the levels.
//             - It can appear in any level following the <heading>, <subheading>,
//               and any notes.
//             - It can appear in an <appendix>.
export type Toc = TocType;

// TocItem is A <tocItem> is an entry in a table of contents. In addition to being
//             found within a <toc> element, a <tocItem> can contain other <tocItem>
//             elements in a hierarchy.
export type TocItem = TocItemType;

// Main is A <main> is the primary container for the body of a legislative
//             document.
export type Main = MainType;

// Statement is A <statement> is the general container for the provisions at the
//             beginning of legislation.
export type Statement = StatementType;

// Preamble is The <preamble> is a container for the "Whereas" clauses and the
//             enacting formula. Modern practice is to not use the preamble,
//             but to use a standalone enacting formula. However, for the rare
//             cases where a preamble is desired, the tags are made available.
export type Preamble = PreambleType;

// Recital is A <recital> is a preliminary statement in a bill stating the reasons
//             for the Bill. Modern legislation seldom uses a recital although it
//             can still occur.
export type Recital = StatementType;

// EnactingFormula is The <enactingFormula> is specified just before the main provisions of
//             a bill. The <enactingFormula> can appear as either the last statement
//             in a preamble or, when a preamble is not present, standalone within
//             the main element just prior to the main provisions.
export type EnactingFormula = StatementType;

// Level is A <level> is the general container for the main provisions of
//             legislation, often organized as a hierarchy.
export type Level = LevelType;

// Num is The <num> surrounds the numeric designation assigned to a level
//             in legislation. Numbering is not always present. The number should
//             always include the surrounding decoration including descriptive
//             text and parenthesis and grammar. This number should never be
//             auto-generated. A normalized value based on the text content of the
//             <num> element should be stored in the @value attribute.
export type Num = NumType;

// Text is The <text> element is a base class for <chapeau>, <continuation>,
//             <proviso>, <def> and any other type of text that can be interspersed
//             in the hierarchy of a document. It is similar to the <content> tag,
//             but has more limited applicability. In general, use the <content>
//             tag when a hierarchical level is made up largely of general content
//             and use the one of its derivatives of the text tag when limited text
//             is found interstitially between levels or other tags.
export type Text = TextType;

// Heading is The <heading> is an optional part of a level element and various other
//             elements. The heading is based on the content primitive and can contain
//             various elements including definitions.
export type Heading = HeadingType;

// Subheading is The <subheading> is an optional part of a level element and various
//             other elements. Like the heading, the subheading is based on the
//             content primitive and can contain various elements including
//             definitions. A subheading should only be created if a heading
//             already exists.
export type Subheading = HeadingType;

// CrossHeading is A <crossHeading> is a non-hierarchical heading construct which can
//             be placed within and amongst heading levels. A <crossHeading> acts
//             as a divider, separating items within a level.
// 
//             Cross headings are typically shown as center-aligned headings
//             without any level identification or level numbering.
export type CrossHeading = HeadingType;

// Instruction is An <instruction> is a container having formalized text describing an
//             amendment or a modification. An <instruction> contains the <action>s
//             and <quotedText>/<quotedContent> necessary to describe an
//             amendment.
export type Instruction = InstructionType;

// Action is An <action> is an atomic-level change defined within an amending
//             formula. The action contains the text related to that action and,
//             through attributes, identifies the item affected and the type of
//             action to be performed.
export type Action = ActionType;

// Notes is The <notes> is a container for collections of individual notes.
export type Notes = NotesType;

// Note is A <note> is a generic element for notes associated with items in the
//             document. Typically, a derived note type should be used to
//             differentiate between official statutory notes and unofficial
//             editorial notes.
export type Note = NoteType;

// Appendix is An <appendix> is a generic element appended to the main part of a
//             document. Appendices can either be inline or included via a @src
//             reference. Typically the appendix tag is not used. Rather, the
//             derived tags such as <schedule> and <explanation> are used instead.
export type Appendix = AppendixType;

// Signatures is Some documents, may conclude with one or
//             more signatures indicating sponsorship or approval. These
//             signatures are placed within this container.
export type Signatures = SignaturesType;

// Signature is A <signature> consists of a name and, optionally, role, affiliation,
//             and/or date. Both the name and the role may be hyperlinked to something
//             which identifies the person or role.
export type Signature = SignatureType;

// Ref is A <ref> element is a reference or link to another document, a
//             location within another document, or a location with the same
//             document.
export type Ref = RefType;

// Date is A <date> element is a wrapper around dates. A normalized value
//             of the date text can be stored in the @date attribute or in the
//             @startDate and @endDate attributes in the case of a date range.
export type Date = DateType;

// QuotedText is A <quotedText> element is used for an extraction of simple text from
//             another source or origin. If the quoted text is to have literal
//             quotes surrounding it, then those characters must be included in the
//             text surrounding the quoted text and not within it.
// 
//             Quoted text is seen in amendments or modifications.
export type QuotedText = QuotedTextType;

// QuotedContent is A <quotedContent> element is used for an extraction of potentially structured
//             text (text with XML elements) from another source or origin.
// 
//             Quoted content is used in USC Notes, amendments, and modifications.
export type QuotedContent = QuotedContentType;

// LayoutType is A <layout> type can contain various types of elements
//                      as rows including headers, rows, TOC items, blocks,
//                      and contents. All elements, aside from <column> elements,
//                      are treated as rows when found directly within a layout
//                      structure.
export class LayoutType extends BaseBlockType  {
	OrientationAttr: string | null;
	NoteStructure: Array<NoteStructure>;
	Header: Array<RowType>;
	Row: Array<RowType>;
	TocItem: Array<TocItemType>;
	Block: Array<BlockType>;
	Content: Array<ContentType>;
}

// RowType is A row contains one or more column cells.
export class RowType extends BaseBlockType  {
	Column: Array<ColumnType>;
}

// ColumnType is Use the elements of the cell group to specify
//                      the row and column spans.
export class ColumnType extends ContentType  {
	CellGroup: CellGroup;
}

// PType is A "P" type is a simple unnumbered paragraph. As a <content>
//             element, it can contain a wide range of text and elements.
export class PType extends ContentType  {
}

// BrType is A break type is simple marker element denoting a line break.
export class BrType extends MarkerType  {
}

// ImgType is An image type is a simple marker element denoting where a graphic
//             image is to be inserted.
export class ImgType extends MarkerType  {
	LinkGroup: LinkGroup;
	OrientationAttr: string | null;
}

// Layout is A <layout> element is used to denote an area of text intended to
//             be displayed in a columns-oriented format similar to table. Use
//             the <header>, <row>, and <column> elements to denote the rows and
//             columns of the structure.
// 
//             Use <layout> when describing legislative structure in a column-
//             oriented fashion. For regular tables as shown for forms, use HTML
//             tables.
export type Layout = LayoutType;

// Header is A <header> denotes a header row within a column-based structure.
export type Header = RowType;

// Row is A <row> denotes a row entry within a column-based structure.
//             In addition to the formal <row> element, any child element
//             in a <layout> element, aside from a <column> element, is regarded as
//             a row. There should always be a <layout> element as an
//             ancestor of a <row>. Both column and row spans may be defined for
//             <row> entries.
export type Row = RowType;

// Column is A <column> denotes a column when specified directly under a <layout>
//             or a cell when specified within a <row> (or equivalent) in a
//             <layout> structure. There should always be a <layout> element as an
//             ancestor of a <column>. Both column and row spans may be defined for
//             <column> entries.
export type Column = ColumnType;

// P is A <p> is a simple paragraph. This is different from the
//             more complex numbered <paragraph> element used for
//             the formal paragraph level of legislative documents.
export type P = PType;

// Br is A <br> is simple marker element denoting a line break.
export type Br = BrType;

// Img is An <img> is a simple marker element denoting where a graphic
//             image is to be inserted. Use the @src attribute to point to the
//             image with a normal URL.
export type Img = ImgType;

// Center is A <center> is content text to be centered on the page.
export type Center = ContentType;

// FillIn is A <fillIn> is an inline spacer which denotes an area to be filled
//             in a printed form. Usually, a <fillIn> is rendered as dotted lines
//             with the text content within the <fillIn> tags shown just below. If
//             parenthesis are to surround the text shown below the line, then
//             those parenthesis should be included in the text content.
export type FillIn = ContentType;

// CheckBox is A <checkBox> is an inline tick box which denotes a box to be filled
//             in on an form.
export type CheckBox = ContentType;

// B is A <b> is a simple inline text to be shown in bold text.
export type B = InlineType;

// I is An <i> is a simple inline text to be shown in italic text.
export type I = InlineType;

// Sub is A <sub> is a simple inline text to be shown in subscript text.
export type Sub = InlineType;

// Sup is A <sup> is a simple inline text to be shown in superscript text.
export type Sup = InlineType;

// Del is A <del> is a simple inline text to be shown in deleted text
//             within a modification.
export type Del = InlineType;

// Ins is An <ins> is a simple inline tag to be used to show inserted text
//             within a modification.
export type Ins = InlineType;

// Bill is A <bill> is a document containing proposed law. When enacted, a
//             <bill> becomes an <statute>.
export type Bill = LawDocType;

// Statute is An <statute> is a document containing an enacted bill.
export type Statute = LawDocType;

// Resolution is A <resolution> is a simple resolution, joint resolution, or concurrent
//             resolution, as those terms are defined by the U.S. Congress.
export type Resolution = LawDocType;

// Amendment is An <amendment> is a document containing a pre-enactment stage amendment.
export type Amendment = LawDocType;

// UscDoc is A <uscDoc> is a document containing a title or appendix of the
//             U.S. Code.
export type UscDoc = LawDocType;

// DocNumber is The <docNumber> is a property that contains a numeric designation
//             assigned to this document. The document number should not contain
//             any document prefix. Use the <docType> for the prefix.
export type DocNumber = PropertyType;

// DocPublicationName is The <docPublicationName> is a property used to record the name of
//             the publication that this document is part of. The values of the
//             <docPublicationName> are not defined.
export type DocPublicationName = PropertyType;

// DocReleasePoint is The <docReleasePoint> is a property used to record the point the document
//             was released. The values of the doc status are not defined.  For a USC title,
//             this may be the Public Law number that the title is updated through.
export type DocReleasePoint = PropertyType;

// DocTitle is A <docTitle> is a statement that precedes the long title in legislation. The short title is declared in the
//             first clause of a bill and is tagged in that location using the
//             <shortTitle> tag.
export type DocTitle = StatementType;

// LongTitle is A <longTitle> is a statement that sets out the purposes of the bill
//             in general terms.
export type LongTitle = StatementType;

// ShortTitle is The <shortTitle> element is used to surround the short title when it
//             is first defined, usually in the first clause of the bill. Note
//             that the <shortTitle> element is to be used in this case rather than
//             the <docTitle> element.
export type ShortTitle = InlineType;

// Term is A <term> is always defined within a definition. The <term> element
//             surrounds the words for the term being defined. It is quite possible
//             for multiple <term> elements to be specified within a definition.
//             When a <term> is the words, in the alternate language, then the
//             xml:lang attribute must be used. <term> elements can also be used
//             for synonyms or near-synonyms which are also specified within the
//             definition.
// 
//             There are two ways in which defined terms are presented. The modern
//             form is to present the term in bold and/or italic. The older form
//             is to present the terms bounded by open and close double quotes. In
//             all cases, the term (excluding the quotation marks) should be bound
//             with the <term> element. The presentation should be determined based
//             on the use of the @class and the @style attributes (TBD). It is
//             important that the semantics be captured in the tags and that the
//             presentation be separated and isolated to the styling attributes.
// 
//             Notes:
// 
//             (1) In some cases, a term from the opposite language may be defined
//             without a term in the primary language and the term will be used as
//             such in the legislation despite being in the opposite language.
// 
//             (2) It is possible that a <term> appear multiple times within a
//             definition and be identified as a <term> (along with the
//             corresponding interpretation) each time the term appears.
// 
//             (3) In some rare cases, a term may be defined to include the open
//             and close quotes. In newer presentation forms, the term with the
//             quotation marks will be found within the bold and/or italics while
//             in older presentation forms, the term will show as a pair of open
//             and a pair of close quotation marks. In that case, the inner
//             quotation marks should be treated as part of the term itself.
export type Term = InlineType;

// Preliminary is A <preliminary> level is used to create a hierarchical region
//             of the main document consisting of preliminary clauses that
//             are outside of the main document hierarchy.
// 
//             When naming a preliminary level, the case-sensitive prefix "prelim".
export type Preliminary = LevelType;

// Title is A <title> is the top hierarchical level of a legislative document.
// 
//             When naming a title, use the case-sensitive prefix "t".
export type Title = LevelType;

// Subtitle is A <subtitle> is a hierarchical level of a legislative document.
// 
//             When naming a subtitle, use the case-sensitive prefix "st".
export type Subtitle = LevelType;

// Part is A <part> is a hierarchical level of a legislative document.
// 
//             When naming a part, use the case-sensitive prefix "p".
export type Part = LevelType;

// Subpart is A <subpart> is a hierarchical level of a legislative document.
// 
//             When naming a subpart, use the case-sensitive prefix "sp".
export type Subpart = LevelType;

// Division is A <division> is a hierarchical level of a legislative document.
// 
//             When naming a Division, use the case-sensitive prefix "d".
export type Division = LevelType;

// Subdivision is A <subdivision> is a hierarchical level of a legislative document.
// 
//             When naming a subdivision, use the case-sensitive prefix "sd".
export type Subdivision = LevelType;

// Chapter is A <chapter> is a hierarchical of a legislative document.
// 
//             When naming a chapter, use the case-sensitive prefix "c".
export type Chapter = LevelType;

// Subchapter is A <subchapter> is a hierarchical level of a legislative document.
// 
//             When naming a subchapter, use the case-sensitive prefix "sc".
export type Subchapter = LevelType;

// Article is An <article> is a used in bills.
// 
//             When naming an article, use the case-sensitive prefix "a".
export type Article = LevelType;

// Subarticle is A <subarticle> is used in bills.
// 
//             When naming a subarticle, use the case-sensitive prefix "sa".
export type Subarticle = LevelType;

// Section is A <section> is the primary hierarchical level in a USC Title or a bill.
// 
//             When naming a section, use the case-sensitive prefix "s".
export type Section = LevelType;

// Subsection is A <subsection> is an optional hierarchical level below a section.
//             Subsections are usually numbered with lower-case letters.
// 
//             When naming a subsection, use the case-sensitive prefix "ss".
export type Subsection = LevelType;

// Paragraph is A <paragraph> is a numbered level usually found below a
//             subsection in the document hierarchy. Paragraphs are
//             usually numbered with Arabic numbers.
// 
//             When naming a paragraph, use the case-sensitive prefix "p".
export type Paragraph = LevelType;

// Subparagraph is A <subparagraph> is a level below a paragraph in the document
//             hierarchy. Subparagraphs are usually numbered with upper-case
//             letters.
// 
//             When naming a subparagraph, use the case-sensitive prefix "sp".
export type Subparagraph = LevelType;

// Clause is A <clause> is an optional below-section hierarchical level.
//             Clauses are usually numbered with lower-case Roman numerals.
// 
//             When naming a subclause, use the case-sensitive prefix "sc".
export type Clause = LevelType;

// Subclause is A <subclause> is an optional hierarchical level below a clause.
//             Subclauses are usually numbered with upper-case Roman numerals.
// 
//             When naming a subclause, use the case-sensitive prefix "sc".
export type Subclause = LevelType;

// Item is An <item> is a level usually below a subclause in the document
//             hierarchy. Items are usually numbered with double lower-case
//             letters.
export type Item = LevelType;

// Subitem is A <subitem> is a level below an item in the document
//             hierarchy. Subitems are usually numbered with double upper-case
//             letters.
export type Subitem = LevelType;

// Subsubitem is A <subsubitem> is a level below a subitem in the document
//             hierarchy. Subsubitems are usually numbered with triple lower-case
//             letters.
export type Subsubitem = LevelType;

// Def is A <def> defines a term. It contains one or more <term> elements
//             identifying the term being defined as well as the text describing
//             the term. It is customary for the <term> to be identified in both
//             languages. In the case where the term is for the opposite language,
//             then the xml:lang attribute should be set for the term expressed in
//             the opposite language. In some cases, closely related other terms
//             might also be identified within the text of the definition and will
//             also be identified with the <term> element..
export type Def = TextType;

// Chapeau is Use a <chapeau> whenever there is introductory text that comes
//             before lower levels in a level hierarchy and the text alone is not
//             permitted by the content model.
export type Chapeau = TextType;

// Continuation is Use a <continuation> for interstitial text or whenever there is
//             final text that comes after lower levels in a level hierarchy and
//             the text alone is not permitted by the content model.
// 
//             Be careful not to confuse continuation text with a proviso, which has
//             a separate tag.
export type Continuation = TextType;

// Proviso is A <proviso> is a paragraph that states conditions relating to the
//             law it is related to. A proviso generally begins with "Provided that"
//             or just "Provided". Proviso can contain their own
//             complex structure including sandwich structures. When referencing
//             into numbered parts of a proviso, a "proviso" level is added to
//             the reference. If there are multiple provisos within a single
//             parent, then those provisos should be named.
export type Proviso = TextType;

// AmendingFormula is An <amendingFormula> element is an instruction used when defining an amendment
//             to legislation or proposed legislation.
export type AmendingFormula = InstructionType;

// SourceCredit is A <sourceCredit> is a note included to indicate the source of a
//             provision. It usually will contain a reference to the source of the
//             provision and the Statute(s) that have affected it. Source credits are
//             usually set out in parenthesis. The surrounding
//             parenthesis are shown in the text - they must
//             not be automatically added.
export type SourceCredit = NoteType;

// StatutoryNote is An <statutoryNote> is a note that becomes part of the law.
export type StatutoryNote = NoteType;

// EditorialNote is An <editorialNote> is a note included for editorial purposes only. While
//             present in the text of the document as printed, it is not a part of
//             the law. Editorial notes are often used to record where provisions
//             have been omitted or other changes have been made.
export type EditorialNote = NoteType;

// ChangeNote is A <changeNote> is a note that records a non-substantive change that
//             has been made to the document. Usually
//             change notes are set out in square brackets and these must be set out in
//             the text and must not be automatically added.
export type ChangeNote = NoteType;

// Made is The signatures of the people making the legislation.
export type Made = SignaturesType;

// Approved is The signature of the people approving the document.
export type Approved = SignaturesType;

// Schedule is A <schedule> is an appendix to a bill or other document.
//             It contains a wide variety of content and the containment model is
//             consequently quite loose. A <schedule> is often a list of numbered items,
//             sometimes arranged in columns. Sometimes a schedule is a list of
//             consequential amendments. Schedules can also be tables or documents
//             defined externally such as extradition treaties or trade agreements.
//             Schedules are sometimes printed in a landscape rather that portrait
//             orientation.
// 
//             In order to support the wide variety of content types, it is possible
//             to embed arbitrary HTML content in a <content> element within a
//             schedule.
export type Schedule = AppendixType;
