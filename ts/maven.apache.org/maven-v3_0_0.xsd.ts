// Code generated by xgen. DO NOT EDIT.

// Project is The <code>&lt;project&gt;</code> element specifies various attributes 
//          about a project. This is the root element of the project descriptor. 
//          The following table lists all of the possible child elements. Child 
//          elements with children are then documented further in subsequent 
//          sections.
export type Project = Model;

// MailingLists is Contains information about a project's mailing lists.  This
//             is used to generate the <a href="/plugins/site/index.html">front
//             page</a> of the site's web site.
export class MailingLists {
	MailingList?: Array<MailingList>;
}

// Developers is Describes the committers to a project.  This is used to
//             generate the <a href="/plugins/site/index.html">Project Team</a>
//             page of the project's web site.
export class Developers {
	Developer?: Array<Developer>;
}

// Contributors is Describes the contributors to a project.  This is used to generate
//             the <a href="/plugins/site/index.html">Project Team</a> page of
//             the project's web site.
export class Contributors {
	Contributor?: Array<Contributor>;
}

// Licenses is This element describes all of the licenses for this project.  
//             Each license is described by a <code>license</code> element, which 
//             is then described by additional elements (described below).  The 
//             auto-generated site documentation references this information.  
//             Projects should only list the license(s) that applies to the project 
//             and not the licenses that apply to dependencies.
export class Licenses {
	License?: Array<License>;
}

// Versions is Optional. Contains information on previous versions of the
//             project. This information is used when invoking the 
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
export class Versions {
	Version?: Array<Version>;
}

// Branches is Optional. Contains information on branches of the
//             project. This information is used when invoking the 
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
export class Branches {
	Branch?: Array<Branch>;
}

// PackageGroups is Package groups required for complete javadocs.
export class PackageGroups {
	PackageGroup?: Array<PackageGroup>;
}

// Reports is This element includes the specification of reports to be
//             included in a Maven-generated site.  These reports will be run
//             when a user executes <code>maven site</code>.  All of the
//             reports will be included in the navigation bar for browsing in
//             the order they are specified.
export class Reports {
	Report?: string;
}

// Properties is Project properties that will be used by various plugins
export class Properties {
}

// Dependencies is <p>
//               This element describes all of the dependencies associated with a
//               project.  Each dependency is described by a
//               <code>dependency</code> element, which is then described by
//               additional elements (described below).
//             </p>
//             <p>
//               These dependencies are used to construct a classpath for your 
//               project during the build process.
//             </p>
//             <p>
//               Maven can automatically download these dependencies from a 
//               <a href="/user-guide.html#Remote%20Repository%20Layout">remote repository</a>.
//             </p>
//             <p>
//               The filename that Maven downloads from the repository is 
//               <code>artifactId-version.jar</code> where <code>artifactId</code> 
//               corresponds to the <code>artifactId</code> element and 
//               <code>version</code> corresponds to the <code>version</code> element.
//             </p>
//             <p>
//               When Maven goes looking for a dependency in the remote repository, 
//               it uses the dependency element to construct the URL to download 
//               from. This URL is defined as:
//             </p>
//             <div class="source">
//               <pre>${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}</pre>
//             </div>
//             <p>
//               Where
//             </p>
//             <dl>
//               <dt>repo</dt>
//               <dd>
//                 is the remote repository URL specified by 
//                 <code>${maven.repo.remote}</code>
//               </dd>
//               
//               <dt>groupId</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>type</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>artifactId</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>version</dt>
//               <dd>is taken from the dependency element</dd>
//             </dl>
export class Dependencies {
	Dependency?: Array<Dependency>;
}

// Model is Optional. The directory on the web server where the final
//             distributions will be published.  This is used when the
//             distributions are
//             <a href="/plugins/dist/index.html">deployed</a>.
export class Model {
	Extend?: string;
	PomVersion?: string;
	Id?: string;
	GroupId?: string;
	ArtifactId?: string;
	Name?: string;
	CurrentVersion?: string;
	ShortDescription?: string;
	Description?: string;
	Url?: string;
	Logo?: string;
	IssueTrackingUrl?: string;
	InceptionYear?: string;
	GumpRepositoryId?: string;
	SiteAddress?: string;
	SiteDirectory?: string;
	DistributionSite?: string;
	DistributionDirectory?: string;
	MailingLists?: MailingLists;
	Developers?: Developers;
	Contributors?: Contributors;
	Licenses?: Licenses;
	Versions?: Versions;
	Branches?: Branches;
	PackageGroups?: PackageGroups;
	Reports?: Reports;
	Repository?: Repository;
	Organization?: Organization;
	Properties?: Properties;
	Package?: string;
	Build?: Build;
	Dependencies?: Dependencies;
}

// SourceModifications is This element describes all of the sourceModifications associated 
//             with a project.  Each source modification is described by a
//             <code>sourceModification</code> element, which is then described by
//              additional elements (described below).  These modifications are used 
//             to exclude or include various source depending on the environment
//              the build is running in.
export class SourceModifications {
	SourceModification?: Array<SourceModification>;
}

// Resources is This element describes all of the resources associated with a 
//             project or unit tests. Each resource is described by a resource 
//             element, which is then described by additional elements (described 
//             <a href="#resource">below</a>). These resources are used to complete 
//             the jar file or to run unit test.
export class Resources {
	Resource?: Array<Resource>;
}

// Build is This element specifies a directory containing integration test    
//              sources of the project.
export class Build {
	NagEmailAddress?: string;
	SourceDirectory?: string;
	UnitTestSourceDirectory?: string;
	AspectSourceDirectory?: string;
	IntegrationUnitTestSourceDirectory?: string;
	SourceModifications?: SourceModifications;
	UnitTest?: UnitTest;
	DefaultGoal?: string;
	Resources?: Resources;
}

// Includes is the description
export class Includes {
	Include?: string;
}

// Excludes is the description
export class Excludes {
	Exclude?: string;
}

// UnitTest is 3.0.0
export class UnitTest {
	Resources?: Resources;
	Includes?: Includes;
	Excludes?: Excludes;
}

// Resource is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
export class Resource {
	TargetPath?: string;
	Filtering?: boolean;
	Directory?: string;
	Includes?: Includes;
	Excludes?: Excludes;
}

// SourceModification is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
export class SourceModification {
	ClassName?: string;
	Property?: string;
	Directory?: string;
	Includes?: Includes;
	Excludes?: Excludes;
}

// Organization is The URL to the organization's logo image.  This can be an URL relative
//             to the base directory of the generated web site,
//             (e.g., <code>/images/org-logo.png</code>) or an absolute URL
//             (e.g., <code>http://my.corp/logo.png</code>).  This value is used
//             when generating the project documentation.
export class Organization {
	Name?: string;
	Url?: string;
	Logo?: string;
}

// Roles is The roles the contributor plays in the project.  Each role is
//             described by a <code>role</code> element, the body of which is a
//             role name.
export class Roles {
	Role?: string;
}

// Developer is The URL of the organization.
export class Developer {
	Id?: string;
	Name?: string;
	Email?: string;
	Url?: string;
	Organization?: string;
	OrganizationUrl?: string;
	Roles?: Roles;
	Timezone?: string;
	Properties?: Properties;
}

// Dependency is The type of dependency. This defaults to <code>jar</code>.
//             Known recognised dependency types are:
//             <ul>
//             <li><code>jar</code></li>
//             <li><code>ejb</code></li>
//             <li><code>plugin</code></li>
//             </ul>
export class Dependency {
	Id?: string;
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	Url?: string;
	Jar?: string;
	Type?: string;
	Properties?: Properties;
}

// Repository is The URL to the project's browsable CVS repository.
export class Repository {
	Connection?: string;
	DeveloperConnection?: string;
	Url?: string;
}

// PackageGroup is the description
export class PackageGroup {
	Title?: string;
	Packages?: string;
}

// Version is A unique identifier for a version.  This ID is
//             used to specify the version that
//             <a href="/plugins/dist/index.html">
//               <code>maven:dist</code>
//             </a> builds.
export class Version {
	Name?: string;
	Tag?: string;
	Id?: string;
}

// License is Addendum information pertaining to this license.
export class License {
	Name?: string;
	Url?: string;
	Distribution?: string;
	Comments?: string;
}

// Contributor is The URL of the organization.
export class Contributor {
	Name?: string;
	Email?: string;
	Url?: string;
	Organization?: string;
	OrganizationUrl?: string;
	Roles?: Roles;
	Timezone?: string;
	Properties?: Properties;
}

// Branch is The branch tag in the version control system (e.g. cvs) used by the 
//             project for the source code associated with this branch of the
//             project.
export class Branch {
	Tag?: string;
}

// OtherArchives is The link to other URLs where you can browse the list archive.
export class OtherArchives {
	OtherArchive?: string;
}

// MailingList is The link to a URL where you can browse the mailing list archive.
export class MailingList {
	Name?: string;
	Subscribe?: string;
	Unsubscribe?: string;
	Post?: string;
	Archive?: string;
	OtherArchives?: OtherArchives;
}
