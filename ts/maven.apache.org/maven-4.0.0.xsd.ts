// Code generated by xgen. DO NOT EDIT.

// Project is The <code>&lt;project&gt;</code> element is the root of the descriptor.
//         The following table lists all of the possible child elements.
export type Project = Model;

// Licenses is This element describes all of the licenses for this project.
//             Each license is described by a <code>license</code> element, which
//             is then described by additional elements.
//             Projects should only list the license(s) that applies to the project
//             and not the licenses that apply to dependencies.
//             If multiple licenses are listed, it is assumed that the user can select
//             any of them, not that they must accept all.
export class Licenses {
	License?: Array<License>;
}

// Developers is Describes the committers of a project.
export class Developers {
	Developer?: Array<Developer>;
}

// Contributors is Describes the contributors to a project that are not yet committers.
export class Contributors {
	Contributor?: Array<Contributor>;
}

// MailingLists is Contains information about a project's mailing lists.
export class MailingLists {
	MailingList?: Array<MailingList>;
}

// Modules is The modules (sometimes called subprojects) to build as a part of this
//             project. Each module listed is a relative path to the directory containing the module.
//             To be consistent with the way default urls are calculated from parent, it is recommended
//             to have module names match artifact ids.
export class Modules {
	Module?: string;
}

// Properties is Properties that can be used throughout the POM as a substitution, and
//             are used as filters in resources if enabled.
//             The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.
export class Properties {
}

// Dependencies is This element describes all of the dependencies associated with a
//             project.
//             These dependencies are used to construct a classpath for your
//             project during the build process. They are automatically downloaded from the
//             repositories defined in this project.
//             See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
//             dependency mechanism</a> for more information.
export class Dependencies {
	Dependency?: Array<Dependency>;
}

// Repositories is The lists of the remote repositories for discovering dependencies and
//             extensions.
export class Repositories {
	Repository?: Array<Repository>;
}

// PluginRepositories is The lists of the remote repositories for discovering plugins for builds and
//             reports.
export class PluginRepositories {
	PluginRepository?: Array<Repository>;
}

// Reports is <b>Deprecated</b>. Now ignored by Maven.
export class Reports {
}

// Profiles is A listing of project-local build profiles which will modify the build process
//             when activated.
export class Profiles {
	Profile?: Array<Profile>;
}

// Model is This element describes various attributes of the organization to which the
//             project belongs. These attributes are utilized when documentation is created (for
//             copyright notices and links).
export class Model {
	ChildProjectUrlInheritAppendPathAttr?: string;
	ModelVersion?: string;
	Parent?: Parent;
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	Packaging?: string;
	Name?: string;
	Description?: string;
	Url?: string;
	InceptionYear?: string;
	Organization?: Organization;
	Licenses?: Licenses;
	Developers?: Developers;
	Contributors?: Contributors;
	MailingLists?: MailingLists;
	Prerequisites?: Prerequisites;
	Modules?: Modules;
	Scm?: Scm;
	IssueManagement?: IssueManagement;
	CiManagement?: CiManagement;
	DistributionManagement?: DistributionManagement;
	Properties?: Properties;
	DependencyManagement?: DependencyManagement;
	Dependencies?: Dependencies;
	Repositories?: Repositories;
	PluginRepositories?: PluginRepositories;
	Build?: Build;
	Reports?: Reports;
	Reporting?: Reporting;
	Profiles?: Profiles;
}

// License is Addendum information pertaining to this license.
export class License {
	Name?: string;
	Url?: string;
	Distribution?: string;
	Comments?: string;
}

// Notifiers is Configuration for notifying developers/users when a build is unsuccessful,
//             including user information and notification mode.
export class Notifiers {
	Notifier?: Array<Notifier>;
}

// CiManagement is URL for the continuous integration system used by the project if it has a web
//             interface.
export class CiManagement {
	System?: string;
	Url?: string;
	Notifiers?: Notifiers;
}

// Configuration is Extended configuration specific to this notifier goes here.
export class Configuration {
}

// Notifier is <b>Deprecated</b>. Where to send the notification to - eg email address.
export class Notifier {
	Type?: string;
	SendOnError?: boolean;
	SendOnFailure?: boolean;
	SendOnSuccess?: boolean;
	SendOnWarning?: boolean;
	Address?: string;
	Configuration?: Configuration;
}

// Scm is The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             scm's <code>child.scm.url.inherit.append.path="false"</code>
export class Scm {
	ChildScmConnectionInheritAppendPathAttr?: string;
	ChildScmDeveloperConnectionInheritAppendPathAttr?: string;
	ChildScmUrlInheritAppendPathAttr?: string;
	Connection?: string;
	DeveloperConnection?: string;
	Tag?: string;
	Url?: string;
}

// IssueManagement is URL for the issue management system used by the project.
export class IssueManagement {
	System?: string;
	Url?: string;
}

// DependencyManagement is Section for management of default dependency information for use in a group of
//         POMs.
export class DependencyManagement {
	Dependencies?: Dependencies;
}

// Exclusions is Lists a set of artifacts that should be excluded from this dependency's
//             artifact list when it comes to calculating transitive dependencies.
export class Exclusions {
	Exclusion?: Array<Exclusion>;
}

// Dependency is FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
//             and may be replaced in later versions. This specifies the path on the filesystem
//             for this dependency.
//             Requires an absolute path for the value, not relative.
//             Use a property that gives the machine specific absolute path,
//             e.g. <code>${java.home}</code>.
export class Dependency {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	Type?: string;
	Classifier?: string;
	Scope?: string;
	SystemPath?: string;
	Exclusions?: Exclusions;
	Optional?: string;
}

// Exclusion is The group ID of the project to exclude.
export class Exclusion {
	ArtifactId?: string;
	GroupId?: string;
}

// Parent is The relative path of the parent <code>pom.xml</code> file within the check out.
//             If not specified, it defaults to <code>../pom.xml</code>.
//             Maven looks for the parent POM first in this location on
//             the filesystem, then the local repository, and lastly in the remote repo.
//             <code>relativePath</code> allows you to select a different location,
//             for example when your structure is flat, or deeper without an intermediate parent POM.
//             However, the group ID, artifact ID and version are still required,
//             and must match the file in the location given or it will revert to the repository for the POM.
//             This feature is only for enhancing the development in a local checkout of that project.
//             Set the value to an empty string in case you want to disable the feature and always resolve
//             the parent POM from the repositories.
export class Parent {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	RelativePath?: string;
}

// Roles is The roles the contributor plays in the project. Each role is described by a
//             <code>role</code> element, the body of which is a role name. This can also be used to
//             describe the contribution.
export class Roles {
	Role?: string;
}

// Developer is The URL of the organization.
export class Developer {
	Id?: string;
	Name?: string;
	Email?: string;
	Url?: string;
	Organization?: string;
	OrganizationUrl?: string;
	Roles?: Roles;
	Timezone?: string;
	Properties?: Properties;
}

// OtherArchives is The link to alternate URLs where you can browse the list archive.
export class OtherArchives {
	OtherArchive?: string;
}

// MailingList is The link to a URL where you can browse the mailing list archive.
export class MailingList {
	Name?: string;
	Subscribe?: string;
	Unsubscribe?: string;
	Post?: string;
	Archive?: string;
	OtherArchives?: OtherArchives;
}

// Contributor is The URL of the organization.
export class Contributor {
	Name?: string;
	Email?: string;
	Url?: string;
	Organization?: string;
	OrganizationUrl?: string;
	Roles?: Roles;
	Timezone?: string;
	Properties?: Properties;
}

// Organization is The URL to the organization's home page.
export class Organization {
	Name?: string;
	Url?: string;
}

// DistributionManagement is Gives the status of this artifact in the remote repository.
//             This must not be set in your local project, as it is updated by
//             tools placing it in the reposiory. Valid values are: <code>none</code> (default),
//             <code>converted</code> (repository manager converted this from an Maven 1 POM),
//             <code>partner</code>
//             (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
//             instance), <code>verified</code> (has been hand verified as correct and final).
export class DistributionManagement {
	Repository?: DeploymentRepository;
	SnapshotRepository?: DeploymentRepository;
	Site?: Site;
	DownloadUrl?: string;
	Relocation?: Relocation;
	Status?: string;
}

// DeploymentRepository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
export class DeploymentRepository {
	UniqueVersion?: boolean;
	Releases?: RepositoryPolicy;
	Snapshots?: RepositoryPolicy;
	Id?: string;
	Name?: string;
	Url?: string;
	Layout?: string;
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails. Valid values are
//             <code>ignore</code>
//             ,
//             <code>fail</code>
//             or
//             <code>warn</code>
//             (the default).
export class RepositoryPolicy {
	Enabled?: string;
	UpdatePolicy?: string;
	ChecksumPolicy?: string;
}

// Relocation is An additional message to show the user about the move, such as the reason.
export class Relocation {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	Message?: string;
}

// Site is The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             site's <code>child.site.url.inherit.append.path="false"</code>
export class Site {
	ChildSiteUrlInheritAppendPathAttr?: string;
	Id?: string;
	Name?: string;
	Url?: string;
}

// Plugins is The reporting plugins to use and their configuration.
export class Plugins {
	Plugin?: Array<ReportPlugin>;
}

// Reporting is Where to store all of the generated reports. The default is
//             <code>${project.build.directory}/site</code>.
export class Reporting {
	ExcludeDefaults?: string;
	OutputDirectory?: string;
	Plugins?: Plugins;
}

// ReportSets is Multiple specifications of a set of reports, each having (possibly) different
//             configuration. This is the reporting parallel to an <code>execution</code> in the build.
export class ReportSets {
	ReportSet?: Array<ReportSet>;
}

// ReportPlugin is The version of the reporting plugin to be used.
export class ReportPlugin {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	ReportSets?: ReportSets;
	Inherited?: string;
	Configuration?: Configuration;
}

// ReportSet is The unique id for this report set, to be used during POM inheritance and profile injection
//             for merging of report sets.
export class ReportSet {
	Id?: string;
	Reports?: Reports;
	Inherited?: string;
	Configuration?: Configuration;
}

// Profile is Information required to build the project.
export class Profile {
	Id?: string;
	Activation?: Activation;
	Build?: BuildBase;
	Modules?: Modules;
	DistributionManagement?: DistributionManagement;
	Properties?: Properties;
	DependencyManagement?: DependencyManagement;
	Dependencies?: Dependencies;
	Repositories?: Repositories;
	PluginRepositories?: PluginRepositories;
	Reports?: Reports;
	Reporting?: Reporting;
}

// Activation is Specifies that this profile will be activated based on existence of a file.
export class Activation {
	ActiveByDefault?: boolean;
	Jdk?: string;
	Os?: ActivationOS;
	Property?: ActivationProperty;
	File?: ActivationFile;
}

// ActivationProperty is The value of the property required to activate a profile.
export class ActivationProperty {
	Name?: string;
	Value?: string;
}

// ActivationFile is The name of the file that must exist to activate the profile.
export class ActivationFile {
	Missing?: string;
	Exists?: string;
}

// ActivationOS is The version of the operating system to be used to activate the
//           profile.
export class ActivationOS {
	Name?: string;
	Family?: string;
	Arch?: string;
	Version?: string;
}

// Repository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
export class Repository {
	Releases?: RepositoryPolicy;
	Snapshots?: RepositoryPolicy;
	Id?: string;
	Name?: string;
	Url?: string;
	Layout?: string;
}

// Resources is This element describes all of the classpath resources such as properties
//             files associated with a project. These resources are often included in the final
//             package.
//             The default value is <code>src/main/resources</code>.
export class Resources {
	Resource?: Array<Resource>;
}

// TestResources is This element describes all of the classpath resources such as properties
//             files associated with a project's unit tests.
//             The default value is <code>src/test/resources</code>.
export class TestResources {
	TestResource?: Array<Resource>;
}

// Filters is The list of filter properties files that are used when filtering is enabled.
export class Filters {
	Filter?: string;
}

// BuildBase is The default goal (or phase in Maven 2) to execute when none is specified for
//             the project. Note that in case of a multi-module build, only the default goal of the top-level
//             project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
//             multiple goals/phases can be separated by whitespace.
export class BuildBase {
	DefaultGoal?: string;
	Resources?: Resources;
	TestResources?: TestResources;
	Directory?: string;
	FinalName?: string;
	Filters?: Filters;
	PluginManagement?: PluginManagement;
	Plugins?: Plugins;
}

// Executions is Multiple specifications of a set of goals to execute during the build
//             lifecycle, each having (possibly) a different configuration.
export class Executions {
	Execution?: Array<PluginExecution>;
}

// Goals is <b>Deprecated</b>. Unused by Maven.
export class Goals {
}

// Plugin is Whether to load Maven extensions (such as packaging and type handlers) from
//             this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
//             of this field is <code>String</code> for technical reasons, the semantic type is actually
//             <code>Boolean</code>. Default value is <code>false</code>.
export class Plugin {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
	Extensions?: string;
	Executions?: Executions;
	Dependencies?: Dependencies;
	Goals?: Goals;
	Inherited?: string;
	Configuration?: Configuration;
}

// PluginExecution is The build lifecycle phase to bind the goals in this execution to. If omitted,
//             the goals will be bound to the default phase specified by the plugin.
export class PluginExecution {
	Id?: string;
	Phase?: string;
	Goals?: Goals;
	Inherited?: string;
	Configuration?: Configuration;
}

// Includes is A list of patterns to include, e.g. <code>**&#47;*.xml</code>.
export class Includes {
	Include?: string;
}

// Excludes is A list of patterns to exclude, e.g. <code>**&#47;*.xml</code>
export class Excludes {
	Exclude?: string;
}

// Resource is Describe the directory where the resources are stored. The path is relative
//             to the POM.
export class Resource {
	TargetPath?: string;
	Filtering?: string;
	Directory?: string;
	Includes?: Includes;
	Excludes?: Excludes;
}

// PluginManagement is Section for management of default plugin information for use in a group of POMs.
export class PluginManagement {
	Plugins?: Plugins;
}

// Prerequisites is For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
//             Maven required to use the resulting plugin.<br>
export class Prerequisites {
	Maven?: string;
}

// Extensions is A set of build extensions to use from this project.
export class Extensions {
	Extension?: Array<Extension>;
}

// Build is The directory where compiled test classes are placed.
//             The default value is <code>target/test-classes</code>.
export class Build {
	SourceDirectory?: string;
	ScriptSourceDirectory?: string;
	TestSourceDirectory?: string;
	OutputDirectory?: string;
	TestOutputDirectory?: string;
	Extensions?: Extensions;
	DefaultGoal?: string;
	Resources?: Resources;
	TestResources?: TestResources;
	Directory?: string;
	FinalName?: string;
	Filters?: Filters;
	PluginManagement?: PluginManagement;
	Plugins?: Plugins;
}

// Extension is The version of the extension.
export class Extension {
	GroupId?: string;
	ArtifactId?: string;
	Version?: string;
}
