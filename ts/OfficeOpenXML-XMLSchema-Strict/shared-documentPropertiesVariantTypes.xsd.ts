// Code generated by xgen. DO NOT EDIT.

// ST_VectorBaseType ...
export enum ST_VectorBaseType {
	variant = 'variant',
	i1 = 'i1',
	i2 = 'i2',
	i4 = 'i4',
	i8 = 'i8',
	ui1 = 'ui1',
	ui2 = 'ui2',
	ui4 = 'ui4',
	ui8 = 'ui8',
	r4 = 'r4',
	r8 = 'r8',
	lpstr = 'lpstr',
	lpwstr = 'lpwstr',
	bstr = 'bstr',
	date = 'date',
	filetime = 'filetime',
	bool = 'bool',
	cy = 'cy',
	error = 'error',
	clsid = 'clsid',
}

// ST_ArrayBaseType ...
export enum ST_ArrayBaseType {
	variant = 'variant',
	i1 = 'i1',
	i2 = 'i2',
	i4 = 'i4',
	int = 'int',
	ui1 = 'ui1',
	ui2 = 'ui2',
	ui4 = 'ui4',
	uint = 'uint',
	r4 = 'r4',
	r8 = 'r8',
	decimal = 'decimal',
	bstr = 'bstr',
	date = 'date',
	bool = 'bool',
	cy = 'cy',
	error = 'error',
}

// ST_Cy ...
export type ST_Cy = string;

// ST_Error ...
export type ST_Error = string;

// CT_Empty ...
export class CT_Empty {
}

// CT_Null ...
export class CT_Null {
}

// CT_Vector ...
export class CT_Vector {
	BaseTypeAttr: string;
	SizeAttr: number;
	Variant?: Array<CT_Variant>;
	I1?: Array<any>;
	I2?: number;
	I4?: number;
	I8?: number;
	Ui1?: Array<any>;
	Ui2?: number;
	Ui4?: number;
	Ui8?: number;
	R4?: number;
	R8?: number;
	Lpstr?: string;
	Lpwstr?: string;
	Bstr?: string;
	Date?: string;
	Filetime?: string;
	Bool?: boolean;
	Cy?: string;
	Error?: string;
	Clsid?: string;
}

// CT_Array ...
export class CT_Array {
	LBoundsAttr: number;
	UBoundsAttr: number;
	BaseTypeAttr: string;
	Variant?: Array<CT_Variant>;
	I1?: Array<any>;
	I2?: number;
	I4?: number;
	Int?: number;
	Ui1?: Array<any>;
	Ui2?: number;
	Ui4?: number;
	Uint?: number;
	R4?: number;
	R8?: number;
	Decimal?: number;
	Bstr?: string;
	Date?: string;
	Bool?: boolean;
	Error?: string;
	Cy?: string;
}

// CT_Variant ...
export class CT_Variant {
	Variant?: CT_Variant;
	Vector?: CT_Vector;
	Array?: CT_Array;
	Blob?: Uint8Array;
	Oblob?: Uint8Array;
	Empty?: CT_Empty;
	Null?: CT_Null;
	I1?: any;
	I2?: number;
	I4?: number;
	I8?: number;
	Int?: number;
	Ui1?: any;
	Ui2?: number;
	Ui4?: number;
	Ui8?: number;
	Uint?: number;
	R4?: number;
	R8?: number;
	Decimal?: number;
	Lpstr?: string;
	Lpwstr?: string;
	Bstr?: string;
	Date?: string;
	Filetime?: string;
	Bool?: boolean;
	Cy?: string;
	Error?: string;
	Stream?: Uint8Array;
	Ostream?: Uint8Array;
	Storage?: Uint8Array;
	Ostorage?: Uint8Array;
	Vstream?: CT_Vstream;
	Clsid?: string;
}

// CT_Vstream ...
export class CT_Vstream {
	VersionAttr?: string;
	Value: Uint8Array;
}

// Variant ...
export type Variant = CT_Variant;

// Vector ...
export type Vector = CT_Vector;

// Array ...
export type Array = CT_Array;

// Blob ...
export type Blob = Uint8Array;

// Oblob ...
export type Oblob = Uint8Array;

// Empty ...
export type Empty = CT_Empty;

// Null ...
export type Null = CT_Null;

// I1 ...
export type I1 = any;

// I2 ...
export type I2 = number;

// I4 ...
export type I4 = number;

// I8 ...
export type I8 = number;

// Int ...
export type Int = number;

// Ui1 ...
export type Ui1 = any;

// Ui2 ...
export type Ui2 = number;

// Ui4 ...
export type Ui4 = number;

// Ui8 ...
export type Ui8 = number;

// Uint ...
export type Uint = number;

// R4 ...
export type R4 = number;

// R8 ...
export type R8 = number;

// Decimal ...
export type Decimal = number;

// Lpstr ...
export type Lpstr = string;

// Lpwstr ...
export type Lpwstr = string;

// Bstr ...
export type Bstr = string;

// Date ...
export type Date = string;

// Filetime ...
export type Filetime = string;

// Bool ...
export type Bool = boolean;

// Cy ...
export type Cy = string;

// Error ...
export type Error = string;

// Stream ...
export type Stream = Uint8Array;

// Ostream ...
export type Ostream = Uint8Array;

// Storage ...
export type Storage = Uint8Array;

// Ostorage ...
export type Ostorage = Uint8Array;

// Vstream ...
export type Vstream = CT_Vstream;

// Clsid ...
export type Clsid = string;
