// Code generated by xgen. DO NOT EDIT.

// CT_EffectExtent ...
export class CT_EffectExtent {
	LAttr: ST_Coordinate;
	TAttr: ST_Coordinate;
	RAttr: ST_Coordinate;
	BAttr: ST_Coordinate;
}

// ST_WrapDistance ...
export type ST_WrapDistance = number;

// CT_Inline ...
export class CT_Inline {
	DistTAttr?: number;
	DistBAttr?: number;
	DistLAttr?: number;
	DistRAttr?: number;
	Extent: CT_PositiveSize2D;
	EffectExtent?: CT_EffectExtent;
	DocPr: CT_NonVisualDrawingProps;
	CNvGraphicFramePr?: CT_NonVisualGraphicFrameProperties;
	AGraphic: CT_GraphicalObject;
}

// ST_WrapText ...
export enum ST_WrapText {
	bothSides = 'bothSides',
	left = 'left',
	right = 'right',
	largest = 'largest',
}

// CT_WrapPath ...
export class CT_WrapPath {
	EditedAttr?: boolean;
	Start: CT_Point2D;
	LineTo: Array<CT_Point2D>;
}

// CT_WrapNone ...
export class CT_WrapNone {
}

// CT_WrapSquare ...
export class CT_WrapSquare {
	WrapTextAttr: string;
	DistTAttr?: number;
	DistBAttr?: number;
	DistLAttr?: number;
	DistRAttr?: number;
	EffectExtent?: CT_EffectExtent;
}

// CT_WrapTight ...
export class CT_WrapTight {
	WrapTextAttr: string;
	DistLAttr?: number;
	DistRAttr?: number;
	WrapPolygon: CT_WrapPath;
}

// CT_WrapThrough ...
export class CT_WrapThrough {
	WrapTextAttr: string;
	DistLAttr?: number;
	DistRAttr?: number;
	WrapPolygon: CT_WrapPath;
}

// CT_WrapTopBottom ...
export class CT_WrapTopBottom {
	DistTAttr?: number;
	DistBAttr?: number;
	EffectExtent?: CT_EffectExtent;
}

// EG_WrapType ...
export class EG_WrapType {
	WrapNone: CT_WrapNone;
	WrapSquare: CT_WrapSquare;
	WrapTight: CT_WrapTight;
	WrapThrough: CT_WrapThrough;
	WrapTopAndBottom: CT_WrapTopBottom;
}

// ST_PositionOffset ...
export type ST_PositionOffset = number;

// ST_AlignH ...
export enum ST_AlignH {
	left = 'left',
	right = 'right',
	center = 'center',
	inside = 'inside',
	outside = 'outside',
}

// ST_RelFromH ...
export enum ST_RelFromH {
	margin = 'margin',
	page = 'page',
	column = 'column',
	character = 'character',
	leftMargin = 'leftMargin',
	rightMargin = 'rightMargin',
	insideMargin = 'insideMargin',
	outsideMargin = 'outsideMargin',
}

// CT_PosH ...
export class CT_PosH {
	RelativeFromAttr: string;
	Align?: string;
	PosOffset?: number;
}

// ST_AlignV ...
export enum ST_AlignV {
	top = 'top',
	bottom = 'bottom',
	center = 'center',
	inside = 'inside',
	outside = 'outside',
}

// ST_RelFromV ...
export enum ST_RelFromV {
	margin = 'margin',
	page = 'page',
	paragraph = 'paragraph',
	line = 'line',
	topMargin = 'topMargin',
	bottomMargin = 'bottomMargin',
	insideMargin = 'insideMargin',
	outsideMargin = 'outsideMargin',
}

// CT_PosV ...
export class CT_PosV {
	RelativeFromAttr: string;
	Align?: string;
	PosOffset?: number;
}

// CT_Anchor ...
export class CT_Anchor {
	DistTAttr?: number;
	DistBAttr?: number;
	DistLAttr?: number;
	DistRAttr?: number;
	SimplePosAttr?: boolean;
	RelativeHeightAttr: number;
	BehindDocAttr: boolean;
	LockedAttr: boolean;
	LayoutInCellAttr: boolean;
	HiddenAttr?: boolean;
	AllowOverlapAttr: boolean;
	EG_WrapType: EG_WrapType;
	SimplePos: CT_Point2D;
	PositionH: CT_PosH;
	PositionV: CT_PosV;
	Extent: CT_PositiveSize2D;
	EffectExtent?: CT_EffectExtent;
	DocPr: CT_NonVisualDrawingProps;
	CNvGraphicFramePr?: CT_NonVisualGraphicFrameProperties;
	AGraphic: CT_GraphicalObject;
}

// CT_TxbxContent ...
export class CT_TxbxContent {
	WEG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

// CT_TextboxInfo ...
export class CT_TextboxInfo {
	IdAttr?: number;
	TxbxContent: CT_TxbxContent;
	ExtLst?: CT_OfficeArtExtensionList;
}

// CT_LinkedTextboxInformation ...
export class CT_LinkedTextboxInformation {
	IdAttr: number;
	SeqAttr: number;
	ExtLst?: CT_OfficeArtExtensionList;
}

// CT_WordprocessingShape ...
export class CT_WordprocessingShape {
	NormalEastAsianFlowAttr?: boolean;
	CNvPr?: CT_NonVisualDrawingProps;
	CNvSpPr?: CT_NonVisualDrawingShapeProps;
	CNvCnPr?: CT_NonVisualConnectorProperties;
	SpPr: CT_ShapeProperties;
	Style?: CT_ShapeStyle;
	ExtLst?: CT_OfficeArtExtensionList;
	Txbx?: CT_TextboxInfo;
	LinkedTxbx?: CT_LinkedTextboxInformation;
	BodyPr: CT_TextBodyProperties;
}

// CT_GraphicFrame ...
export class CT_GraphicFrame {
	CNvPr: CT_NonVisualDrawingProps;
	CNvFrPr: CT_NonVisualGraphicFrameProperties;
	Xfrm: CT_Transform2D;
	AGraphic: CT_GraphicalObject;
	ExtLst?: CT_OfficeArtExtensionList;
}

// CT_WordprocessingContentPartNonVisual ...
export class CT_WordprocessingContentPartNonVisual {
	CNvPr?: CT_NonVisualDrawingProps;
	CNvContentPartPr?: CT_NonVisualContentPartProperties;
}

// CT_WordprocessingContentPart ...
export class CT_WordprocessingContentPart {
	BwModeAttr?: string;
	RIdAttr: string;
	NvContentPartPr?: CT_WordprocessingContentPartNonVisual;
	Xfrm?: CT_Transform2D;
	ExtLst?: CT_OfficeArtExtensionList;
}

// CT_WordprocessingGroup ...
export class CT_WordprocessingGroup {
	CNvPr?: CT_NonVisualDrawingProps;
	CNvGrpSpPr: CT_NonVisualGroupDrawingShapeProps;
	GrpSpPr: CT_GroupShapeProperties;
	Wsp?: Array<CT_WordprocessingShape>;
	GrpSp?: Array<CT_WordprocessingGroup>;
	GraphicFrame?: Array<CT_GraphicFrame>;
	DpctPic?: Array<CT_Picture>;
	ContentPart?: Array<CT_WordprocessingContentPart>;
	ExtLst?: CT_OfficeArtExtensionList;
}

// CT_WordprocessingCanvas ...
export class CT_WordprocessingCanvas {
	Bg?: CT_BackgroundFormatting;
	Whole?: CT_WholeE2oFormatting;
	Wsp?: Array<CT_WordprocessingShape>;
	DpctPic?: Array<CT_Picture>;
	ContentPart?: Array<CT_WordprocessingContentPart>;
	Wgp?: Array<CT_WordprocessingGroup>;
	GraphicFrame?: Array<CT_GraphicFrame>;
	ExtLst?: CT_OfficeArtExtensionList;
}

// Wpc ...
export type Wpc = CT_WordprocessingCanvas;

// Wgp ...
export type Wgp = CT_WordprocessingGroup;

// Wsp ...
export type Wsp = CT_WordprocessingShape;

// Inline ...
export type Inline = CT_Inline;

// Anchor ...
export type Anchor = CT_Anchor;
