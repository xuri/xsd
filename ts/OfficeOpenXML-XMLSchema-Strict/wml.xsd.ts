// Code generated by xgen. DO NOT EDIT.

// CT_Empty ...
export class CT_Empty {
}

// CT_OnOff ...
export class CT_OnOff {
	ValAttr: ST_OnOff | null;
}

// ST_LongHexNumber ...
export type ST_LongHexNumber = Uint8Array;

// CT_LongHexNumber ...
export class CT_LongHexNumber {
	ValAttr: Uint8Array;
}

// ST_ShortHexNumber ...
export type ST_ShortHexNumber = Uint8Array;

// ST_UcharHexNumber ...
export type ST_UcharHexNumber = Uint8Array;

// CT_Charset ...
export class CT_Charset {
	CharacterSetAttr: string | null;
}

// ST_DecimalNumberOrPercent ...
export class ST_DecimalNumberOrPercent {
	ST_Percentage: string;
}

// ST_DecimalNumber ...
export type ST_DecimalNumber = number;

// CT_DecimalNumber ...
export class CT_DecimalNumber {
	ValAttr: number;
}

// CT_UnsignedDecimalNumber ...
export class CT_UnsignedDecimalNumber {
	ValAttr: number;
}

// CT_DecimalNumberOrPrecent ...
export class CT_DecimalNumberOrPrecent {
	ValAttr: ST_DecimalNumberOrPercent;
}

// CT_TwipsMeasure ...
export class CT_TwipsMeasure {
	ValAttr: ST_TwipsMeasure;
}

// ST_SignedTwipsMeasure ...
export class ST_SignedTwipsMeasure {
	Integer: number;
	ST_UniversalMeasure: string;
}

// CT_SignedTwipsMeasure ...
export class CT_SignedTwipsMeasure {
	ValAttr: ST_SignedTwipsMeasure;
}

// ST_PixelsMeasure ...
export type ST_PixelsMeasure = number;

// CT_PixelsMeasure ...
export class CT_PixelsMeasure {
	ValAttr: number;
}

// ST_HpsMeasure ...
export class ST_HpsMeasure {
	ST_UnsignedDecimalNumber: number;
	ST_PositiveUniversalMeasure: string;
}

// CT_HpsMeasure ...
export class CT_HpsMeasure {
	ValAttr: ST_HpsMeasure;
}

// ST_SignedHpsMeasure ...
export class ST_SignedHpsMeasure {
	Integer: number;
	ST_UniversalMeasure: string;
}

// CT_SignedHpsMeasure ...
export class CT_SignedHpsMeasure {
	ValAttr: ST_SignedHpsMeasure;
}

// ST_DateTime ...
export type ST_DateTime = string;

// ST_MacroName ...
export type ST_MacroName = string;

// CT_MacroName ...
export class CT_MacroName {
	ValAttr: string;
}

// ST_EighthPointMeasure ...
export type ST_EighthPointMeasure = number;

// ST_PointMeasure ...
export type ST_PointMeasure = number;

// CT_String ...
export class CT_String {
	ValAttr: string;
}

// ST_TextScale ...
export class ST_TextScale {
	ST_TextScalePercent: ST_TextScalePercent;
}

// ST_TextScalePercent ...
export type ST_TextScalePercent = string;

// CT_TextScale ...
export class CT_TextScale {
	ValAttr: ST_TextScale | null;
}

// ST_HighlightColor ...
export enum ST_HighlightColor {
	black = 'black',
	blue = 'blue',
	cyan = 'cyan',
	green = 'green',
	magenta = 'magenta',
	red = 'red',
	yellow = 'yellow',
	white = 'white',
	darkBlue = 'darkBlue',
	darkCyan = 'darkCyan',
	darkGreen = 'darkGreen',
	darkMagenta = 'darkMagenta',
	darkRed = 'darkRed',
	darkYellow = 'darkYellow',
	darkGray = 'darkGray',
	lightGray = 'lightGray',
	none = 'none',
}

// CT_Highlight ...
export class CT_Highlight {
	ValAttr: string;
}

// ST_HexColorAuto ...
export enum ST_HexColorAuto {
	auto = 'auto',
}

// ST_HexColor ...
export class ST_HexColor {
	ST_HexColorRGB: Uint8Array;
	ST_HexColorAuto: string;
}

// CT_Color ...
export class CT_Color {
	ValAttr: ST_HexColor;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Uint8Array | null;
	ThemeShadeAttr: Uint8Array | null;
}

// CT_Lang ...
export class CT_Lang {
	ValAttr: string;
}

// CT_Guid ...
export class CT_Guid {
	ValAttr: string | null;
}

// ST_Underline ...
export enum ST_Underline {
	single = 'single',
	words = 'words',
	double = 'double',
	thick = 'thick',
	dotted = 'dotted',
	dottedHeavy = 'dottedHeavy',
	dash = 'dash',
	dashedHeavy = 'dashedHeavy',
	dashLong = 'dashLong',
	dashLongHeavy = 'dashLongHeavy',
	dotDash = 'dotDash',
	dashDotHeavy = 'dashDotHeavy',
	dotDotDash = 'dotDotDash',
	dashDotDotHeavy = 'dashDotDotHeavy',
	wave = 'wave',
	wavyHeavy = 'wavyHeavy',
	wavyDouble = 'wavyDouble',
	none = 'none',
}

// CT_Underline ...
export class CT_Underline {
	ValAttr: string | null;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Uint8Array | null;
	ThemeShadeAttr: Uint8Array | null;
}

// ST_TextEffect ...
export enum ST_TextEffect {
	blinkBackground = 'blinkBackground',
	lights = 'lights',
	antsBlack = 'antsBlack',
	antsRed = 'antsRed',
	shimmer = 'shimmer',
	sparkle = 'sparkle',
	none = 'none',
}

// CT_TextEffect ...
export class CT_TextEffect {
	ValAttr: string;
}

// ST_Border ...
export enum ST_Border {
	nil = 'nil',
	none = 'none',
	single = 'single',
	thick = 'thick',
	double = 'double',
	dotted = 'dotted',
	dashed = 'dashed',
	dotDash = 'dotDash',
	dotDotDash = 'dotDotDash',
	triple = 'triple',
	thinThickSmallGap = 'thinThickSmallGap',
	thickThinSmallGap = 'thickThinSmallGap',
	thinThickThinSmallGap = 'thinThickThinSmallGap',
	thinThickMediumGap = 'thinThickMediumGap',
	thickThinMediumGap = 'thickThinMediumGap',
	thinThickThinMediumGap = 'thinThickThinMediumGap',
	thinThickLargeGap = 'thinThickLargeGap',
	thickThinLargeGap = 'thickThinLargeGap',
	thinThickThinLargeGap = 'thinThickThinLargeGap',
	wave = 'wave',
	doubleWave = 'doubleWave',
	dashSmallGap = 'dashSmallGap',
	dashDotStroked = 'dashDotStroked',
	threeDEmboss = 'threeDEmboss',
	threeDEngrave = 'threeDEngrave',
	outset = 'outset',
	inset = 'inset',
	apples = 'apples',
	archedScallops = 'archedScallops',
	babyPacifier = 'babyPacifier',
	babyRattle = 'babyRattle',
	balloons3Colors = 'balloons3Colors',
	balloonsHotAir = 'balloonsHotAir',
	basicBlackDashes = 'basicBlackDashes',
	basicBlackDots = 'basicBlackDots',
	basicBlackSquares = 'basicBlackSquares',
	basicThinLines = 'basicThinLines',
	basicWhiteDashes = 'basicWhiteDashes',
	basicWhiteDots = 'basicWhiteDots',
	basicWhiteSquares = 'basicWhiteSquares',
	basicWideInline = 'basicWideInline',
	basicWideMidline = 'basicWideMidline',
	basicWideOutline = 'basicWideOutline',
	bats = 'bats',
	birds = 'birds',
	birdsFlight = 'birdsFlight',
	cabins = 'cabins',
	cakeSlice = 'cakeSlice',
	candyCorn = 'candyCorn',
	celticKnotwork = 'celticKnotwork',
	certificateBanner = 'certificateBanner',
	chainLink = 'chainLink',
	champagneBottle = 'champagneBottle',
	checkedBarBlack = 'checkedBarBlack',
	checkedBarColor = 'checkedBarColor',
	checkered = 'checkered',
	christmasTree = 'christmasTree',
	circlesLines = 'circlesLines',
	circlesRectangles = 'circlesRectangles',
	classicalWave = 'classicalWave',
	clocks = 'clocks',
	compass = 'compass',
	confetti = 'confetti',
	confettiGrays = 'confettiGrays',
	confettiOutline = 'confettiOutline',
	confettiStreamers = 'confettiStreamers',
	confettiWhite = 'confettiWhite',
	cornerTriangles = 'cornerTriangles',
	couponCutoutDashes = 'couponCutoutDashes',
	couponCutoutDots = 'couponCutoutDots',
	crazyMaze = 'crazyMaze',
	creaturesButterfly = 'creaturesButterfly',
	creaturesFish = 'creaturesFish',
	creaturesInsects = 'creaturesInsects',
	creaturesLadyBug = 'creaturesLadyBug',
	crossStitch = 'crossStitch',
	cup = 'cup',
	decoArch = 'decoArch',
	decoArchColor = 'decoArchColor',
	decoBlocks = 'decoBlocks',
	diamondsGray = 'diamondsGray',
	doubleD = 'doubleD',
	doubleDiamonds = 'doubleDiamonds',
	earth1 = 'earth1',
	earth2 = 'earth2',
	earth3 = 'earth3',
	eclipsingSquares1 = 'eclipsingSquares1',
	eclipsingSquares2 = 'eclipsingSquares2',
	eggsBlack = 'eggsBlack',
	fans = 'fans',
	film = 'film',
	firecrackers = 'firecrackers',
	flowersBlockPrint = 'flowersBlockPrint',
	flowersDaisies = 'flowersDaisies',
	flowersModern1 = 'flowersModern1',
	flowersModern2 = 'flowersModern2',
	flowersPansy = 'flowersPansy',
	flowersRedRose = 'flowersRedRose',
	flowersRoses = 'flowersRoses',
	flowersTeacup = 'flowersTeacup',
	flowersTiny = 'flowersTiny',
	gems = 'gems',
	gingerbreadMan = 'gingerbreadMan',
	gradient = 'gradient',
	handmade1 = 'handmade1',
	handmade2 = 'handmade2',
	heartBalloon = 'heartBalloon',
	heartGray = 'heartGray',
	hearts = 'hearts',
	heebieJeebies = 'heebieJeebies',
	holly = 'holly',
	houseFunky = 'houseFunky',
	hypnotic = 'hypnotic',
	iceCreamCones = 'iceCreamCones',
	lightBulb = 'lightBulb',
	lightning1 = 'lightning1',
	lightning2 = 'lightning2',
	mapPins = 'mapPins',
	mapleLeaf = 'mapleLeaf',
	mapleMuffins = 'mapleMuffins',
	marquee = 'marquee',
	marqueeToothed = 'marqueeToothed',
	moons = 'moons',
	mosaic = 'mosaic',
	musicNotes = 'musicNotes',
	northwest = 'northwest',
	ovals = 'ovals',
	packages = 'packages',
	palmsBlack = 'palmsBlack',
	palmsColor = 'palmsColor',
	paperClips = 'paperClips',
	papyrus = 'papyrus',
	partyFavor = 'partyFavor',
	partyGlass = 'partyGlass',
	pencils = 'pencils',
	people = 'people',
	peopleWaving = 'peopleWaving',
	peopleHats = 'peopleHats',
	poinsettias = 'poinsettias',
	postageStamp = 'postageStamp',
	pumpkin1 = 'pumpkin1',
	pushPinNote2 = 'pushPinNote2',
	pushPinNote1 = 'pushPinNote1',
	pyramids = 'pyramids',
	pyramidsAbove = 'pyramidsAbove',
	quadrants = 'quadrants',
	rings = 'rings',
	safari = 'safari',
	sawtooth = 'sawtooth',
	sawtoothGray = 'sawtoothGray',
	scaredCat = 'scaredCat',
	seattle = 'seattle',
	shadowedSquares = 'shadowedSquares',
	sharksTeeth = 'sharksTeeth',
	shorebirdTracks = 'shorebirdTracks',
	skyrocket = 'skyrocket',
	snowflakeFancy = 'snowflakeFancy',
	snowflakes = 'snowflakes',
	sombrero = 'sombrero',
	southwest = 'southwest',
	stars = 'stars',
	starsTop = 'starsTop',
	stars3d = 'stars3d',
	starsBlack = 'starsBlack',
	starsShadowed = 'starsShadowed',
	sun = 'sun',
	swirligig = 'swirligig',
	tornPaper = 'tornPaper',
	tornPaperBlack = 'tornPaperBlack',
	trees = 'trees',
	triangleParty = 'triangleParty',
	triangles = 'triangles',
	triangle1 = 'triangle1',
	triangle2 = 'triangle2',
	triangleCircle1 = 'triangleCircle1',
	triangleCircle2 = 'triangleCircle2',
	shapes1 = 'shapes1',
	shapes2 = 'shapes2',
	twistedLines1 = 'twistedLines1',
	twistedLines2 = 'twistedLines2',
	vine = 'vine',
	waveline = 'waveline',
	weavingAngles = 'weavingAngles',
	weavingBraid = 'weavingBraid',
	weavingRibbon = 'weavingRibbon',
	weavingStrips = 'weavingStrips',
	whiteFlowers = 'whiteFlowers',
	woodwork = 'woodwork',
	xIllusions = 'xIllusions',
	zanyTriangles = 'zanyTriangles',
	zigZag = 'zigZag',
	zigZagStitch = 'zigZagStitch',
	custom = 'custom',
}

// CT_Border ...
export class CT_Border {
	ValAttr: string;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Uint8Array | null;
	ThemeShadeAttr: Uint8Array | null;
	SzAttr: number | null;
	SpaceAttr: number | null;
	ShadowAttr: ST_OnOff | null;
	FrameAttr: ST_OnOff | null;
}

// ST_Shd ...
export enum ST_Shd {
	nil = 'nil',
	clear = 'clear',
	solid = 'solid',
	horzStripe = 'horzStripe',
	vertStripe = 'vertStripe',
	reverseDiagStripe = 'reverseDiagStripe',
	diagStripe = 'diagStripe',
	horzCross = 'horzCross',
	diagCross = 'diagCross',
	thinHorzStripe = 'thinHorzStripe',
	thinVertStripe = 'thinVertStripe',
	thinReverseDiagStripe = 'thinReverseDiagStripe',
	thinDiagStripe = 'thinDiagStripe',
	thinHorzCross = 'thinHorzCross',
	thinDiagCross = 'thinDiagCross',
	pct5 = 'pct5',
	pct10 = 'pct10',
	pct12 = 'pct12',
	pct15 = 'pct15',
	pct20 = 'pct20',
	pct25 = 'pct25',
	pct30 = 'pct30',
	pct35 = 'pct35',
	pct37 = 'pct37',
	pct40 = 'pct40',
	pct45 = 'pct45',
	pct50 = 'pct50',
	pct55 = 'pct55',
	pct60 = 'pct60',
	pct62 = 'pct62',
	pct65 = 'pct65',
	pct70 = 'pct70',
	pct75 = 'pct75',
	pct80 = 'pct80',
	pct85 = 'pct85',
	pct87 = 'pct87',
	pct90 = 'pct90',
	pct95 = 'pct95',
}

// CT_Shd ...
export class CT_Shd {
	ValAttr: string;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Uint8Array | null;
	ThemeShadeAttr: Uint8Array | null;
	FillAttr: ST_HexColor | null;
	ThemeFillAttr: string | null;
	ThemeFillTintAttr: Uint8Array | null;
	ThemeFillShadeAttr: Uint8Array | null;
}

// CT_VerticalAlignRun ...
export class CT_VerticalAlignRun {
	ValAttr: string;
}

// CT_FitText ...
export class CT_FitText {
	ValAttr: ST_TwipsMeasure;
	IdAttr: number | null;
}

// ST_Em ...
export enum ST_Em {
	none = 'none',
	dot = 'dot',
	comma = 'comma',
	circle = 'circle',
	underDot = 'underDot',
}

// CT_Em ...
export class CT_Em {
	ValAttr: string;
}

// CT_Language ...
export class CT_Language {
	ValAttr: string | null;
	EastAsiaAttr: string | null;
	BidiAttr: string | null;
}

// ST_CombineBrackets ...
export enum ST_CombineBrackets {
	none = 'none',
	round = 'round',
	square = 'square',
	angle = 'angle',
	curly = 'curly',
}

// CT_EastAsianLayout ...
export class CT_EastAsianLayout {
	IdAttr: number | null;
	CombineAttr: ST_OnOff | null;
	CombineBracketsAttr: string | null;
	VertAttr: ST_OnOff | null;
	VertCompressAttr: ST_OnOff | null;
}

// ST_HeightRule ...
export enum ST_HeightRule {
	auto = 'auto',
	exact = 'exact',
	atLeast = 'atLeast',
}

// ST_Wrap ...
export enum ST_Wrap {
	auto = 'auto',
	notBeside = 'notBeside',
	around = 'around',
	tight = 'tight',
	through = 'through',
	none = 'none',
}

// ST_VAnchor ...
export enum ST_VAnchor {
	text = 'text',
	margin = 'margin',
	page = 'page',
}

// ST_HAnchor ...
export enum ST_HAnchor {
	text = 'text',
	margin = 'margin',
	page = 'page',
}

// ST_DropCap ...
export enum ST_DropCap {
	none = 'none',
	drop = 'drop',
	margin = 'margin',
}

// CT_FramePr ...
export class CT_FramePr {
	DropCapAttr: string | null;
	LinesAttr: number | null;
	WAttr: ST_TwipsMeasure | null;
	HAttr: ST_TwipsMeasure | null;
	VSpaceAttr: ST_TwipsMeasure | null;
	HSpaceAttr: ST_TwipsMeasure | null;
	WrapAttr: string | null;
	HAnchorAttr: string | null;
	VAnchorAttr: string | null;
	XAttr: ST_SignedTwipsMeasure | null;
	XAlignAttr: string | null;
	YAttr: ST_SignedTwipsMeasure | null;
	YAlignAttr: string | null;
	HRuleAttr: string | null;
	AnchorLockAttr: ST_OnOff | null;
}

// ST_TabJc ...
export enum ST_TabJc {
	clear = 'clear',
	start = 'start',
	center = 'center',
	end = 'end',
	decimal = 'decimal',
	bar = 'bar',
	num = 'num',
}

// ST_TabTlc ...
export enum ST_TabTlc {
	none = 'none',
	dot = 'dot',
	hyphen = 'hyphen',
	underscore = 'underscore',
	heavy = 'heavy',
	middleDot = 'middleDot',
}

// CT_TabStop ...
export class CT_TabStop {
	ValAttr: string;
	LeaderAttr: string | null;
	PosAttr: ST_SignedTwipsMeasure;
}

// ST_LineSpacingRule ...
export enum ST_LineSpacingRule {
	auto = 'auto',
	exact = 'exact',
	atLeast = 'atLeast',
}

// CT_Spacing ...
export class CT_Spacing {
	BeforeAttr: ST_TwipsMeasure | null;
	BeforeLinesAttr: number | null;
	BeforeAutospacingAttr: ST_OnOff | null;
	AfterAttr: ST_TwipsMeasure | null;
	AfterLinesAttr: number | null;
	AfterAutospacingAttr: ST_OnOff | null;
	LineAttr: ST_SignedTwipsMeasure | null;
	LineRuleAttr: string | null;
}

// CT_Ind ...
export class CT_Ind {
	StartAttr: ST_SignedTwipsMeasure | null;
	StartCharsAttr: number | null;
	EndAttr: ST_SignedTwipsMeasure | null;
	EndCharsAttr: number | null;
	HangingAttr: ST_TwipsMeasure | null;
	HangingCharsAttr: number | null;
	FirstLineAttr: ST_TwipsMeasure | null;
	FirstLineCharsAttr: number | null;
}

// ST_Jc ...
export enum ST_Jc {
	start = 'start',
	center = 'center',
	end = 'end',
	both = 'both',
	mediumKashida = 'mediumKashida',
	distribute = 'distribute',
	numTab = 'numTab',
	highKashida = 'highKashida',
	lowKashida = 'lowKashida',
	thaiDistribute = 'thaiDistribute',
}

// ST_JcTable ...
export enum ST_JcTable {
	center = 'center',
	end = 'end',
	start = 'start',
}

// CT_Jc ...
export class CT_Jc {
	ValAttr: string;
}

// CT_JcTable ...
export class CT_JcTable {
	ValAttr: string;
}

// ST_View ...
export enum ST_View {
	none = 'none',
	print = 'print',
	outline = 'outline',
	masterPages = 'masterPages',
	normal = 'normal',
	web = 'web',
}

// CT_View ...
export class CT_View {
	ValAttr: string;
}

// ST_Zoom ...
export enum ST_Zoom {
	none = 'none',
	fullPage = 'fullPage',
	bestFit = 'bestFit',
	textFit = 'textFit',
}

// CT_Zoom ...
export class CT_Zoom {
	ValAttr: string | null;
	PercentAttr: ST_DecimalNumberOrPercent;
}

// CT_WritingStyle ...
export class CT_WritingStyle {
	LangAttr: string;
	VendorIDAttr: string;
	DllVersionAttr: string;
	NlCheckAttr: ST_OnOff | null;
	CheckStyleAttr: ST_OnOff;
	AppNameAttr: string;
}

// ST_Proof ...
export enum ST_Proof {
	clean = 'clean',
	dirty = 'dirty',
}

// CT_Proof ...
export class CT_Proof {
	SpellingAttr: string | null;
	GrammarAttr: string | null;
}

// ST_DocType ...
export type ST_DocType = string;

// CT_DocType ...
export class CT_DocType {
	ValAttr: string;
}

// ST_DocProtect ...
export enum ST_DocProtect {
	none = 'none',
	readOnly = 'readOnly',
	comments = 'comments',
	trackedChanges = 'trackedChanges',
	forms = 'forms',
}

// AG_Password ...
export class AG_Password {
	AlgorithmNameAttr: string | null;
	HashValueAttr: Uint8Array | null;
	SaltValueAttr: Uint8Array | null;
	SpinCountAttr: number | null;
}

// CT_DocProtect ...
export class CT_DocProtect {
	AG_Password: AG_Password;
	EditAttr: string | null;
	FormattingAttr: ST_OnOff | null;
	EnforcementAttr: ST_OnOff | null;
}

// ST_MailMergeDocType ...
export enum ST_MailMergeDocType {
	catalog = 'catalog',
	envelopes = 'envelopes',
	mailingLabels = 'mailingLabels',
	formLetters = 'formLetters',
	email = 'email',
	fax = 'fax',
}

// CT_MailMergeDocType ...
export class CT_MailMergeDocType {
	ValAttr: string;
}

// ST_MailMergeDataType ...
export type ST_MailMergeDataType = string;

// CT_MailMergeDataType ...
export class CT_MailMergeDataType {
	ValAttr: string;
}

// ST_MailMergeDest ...
export enum ST_MailMergeDest {
	newDocument = 'newDocument',
	printer = 'printer',
	email = 'email',
	fax = 'fax',
}

// CT_MailMergeDest ...
export class CT_MailMergeDest {
	ValAttr: string;
}

// ST_MailMergeOdsoFMDFieldType ...
export enum ST_MailMergeOdsoFMDFieldType {
	null = 'null',
	dbColumn = 'dbColumn',
}

// CT_MailMergeOdsoFMDFieldType ...
export class CT_MailMergeOdsoFMDFieldType {
	ValAttr: string;
}

// CT_TrackChangesView ...
export class CT_TrackChangesView {
	MarkupAttr: ST_OnOff | null;
	CommentsAttr: ST_OnOff | null;
	InsDelAttr: ST_OnOff | null;
	FormattingAttr: ST_OnOff | null;
	InkAnnotationsAttr: ST_OnOff | null;
}

// CT_Kinsoku ...
export class CT_Kinsoku {
	LangAttr: string;
	ValAttr: string;
}

// ST_TextDirection ...
export enum ST_TextDirection {
	tb = 'tb',
	rl = 'rl',
	lr = 'lr',
	tbV = 'tbV',
	rlV = 'rlV',
	lrV = 'lrV',
}

// CT_TextDirection ...
export class CT_TextDirection {
	ValAttr: string;
}

// ST_TextAlignment ...
export enum ST_TextAlignment {
	top = 'top',
	center = 'center',
	baseline = 'baseline',
	bottom = 'bottom',
	auto = 'auto',
}

// CT_TextAlignment ...
export class CT_TextAlignment {
	ValAttr: string;
}

// ST_DisplacedByCustomXml ...
export enum ST_DisplacedByCustomXml {
	next = 'next',
	prev = 'prev',
}

// ST_AnnotationVMerge ...
export enum ST_AnnotationVMerge {
	cont = 'cont',
	rest = 'rest',
}

// CT_Markup ...
export class CT_Markup {
	IdAttr: number;
}

// CT_TrackChange ...
export class CT_TrackChange extends CT_Markup  {
	AuthorAttr: string;
	DateAttr: string | null;
}

// CT_CellMergeTrackChange ...
export class CT_CellMergeTrackChange extends CT_TrackChange  {
	VMergeAttr: string | null;
	VMergeOrigAttr: string | null;
}

// CT_TrackChangeRange ...
export class CT_TrackChangeRange extends CT_TrackChange  {
	DisplacedByCustomXmlAttr: string | null;
}

// CT_MarkupRange ...
export class CT_MarkupRange extends CT_Markup  {
	DisplacedByCustomXmlAttr: string | null;
}

// CT_BookmarkRange ...
export class CT_BookmarkRange extends CT_MarkupRange  {
	ColFirstAttr: number | null;
	ColLastAttr: number | null;
}

// CT_Bookmark ...
export class CT_Bookmark extends CT_BookmarkRange  {
	NameAttr: string;
}

// CT_MoveBookmark ...
export class CT_MoveBookmark extends CT_Bookmark  {
	AuthorAttr: string;
	DateAttr: string;
}

// CT_Comment ...
export class CT_Comment extends CT_TrackChange  {
	InitialsAttr: string | null;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

// CT_TblPrExChange ...
export class CT_TblPrExChange extends CT_TrackChange  {
	TblPrEx: CT_TblPrExBase;
}

// CT_TcPrChange ...
export class CT_TcPrChange extends CT_TrackChange  {
	TcPr: CT_TcPrInner;
}

// CT_TrPrChange ...
export class CT_TrPrChange extends CT_TrackChange  {
	TrPr: CT_TrPrBase;
}

// CT_TblGridChange ...
export class CT_TblGridChange extends CT_Markup  {
	TblGrid: CT_TblGridBase;
}

// CT_TblPrChange ...
export class CT_TblPrChange extends CT_TrackChange  {
	TblPr: CT_TblPrBase;
}

// CT_SectPrChange ...
export class CT_SectPrChange extends CT_TrackChange  {
	SectPr: CT_SectPrBase;
}

// CT_PPrChange ...
export class CT_PPrChange extends CT_TrackChange  {
	PPr: CT_PPrBase;
}

// CT_RPrChange ...
export class CT_RPrChange extends CT_TrackChange  {
	RPr: CT_RPrOriginal;
}

// CT_ParaRPrChange ...
export class CT_ParaRPrChange extends CT_TrackChange  {
	RPr: CT_ParaRPrOriginal;
}

// CT_RunTrackChange ...
export class CT_RunTrackChange extends CT_TrackChange  {
	EG_ContentRunContent: Array<EG_ContentRunContent>;
	MEG_OMathMathElements: Array<EG_OMathMathElements>;
}

// EG_PContentMath ...
export class EG_PContentMath {
	EG_PContentBase: Array<EG_PContentBase>;
	EG_ContentRunContentBase: Array<EG_ContentRunContentBase>;
}

// EG_PContentBase ...
export class EG_PContentBase {
	CustomXml: CT_CustomXmlRun;
	FldSimple: Array<CT_SimpleField>;
	Hyperlink: CT_Hyperlink;
}

// EG_ContentRunContentBase ...
export class EG_ContentRunContentBase {
	SmartTag: CT_SmartTagRun;
	Sdt: CT_SdtRun;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// EG_CellMarkupElements ...
export class EG_CellMarkupElements {
	CellIns: CT_TrackChange;
	CellDel: CT_TrackChange;
	CellMerge: CT_CellMergeTrackChange;
}

// EG_RangeMarkupElements ...
export class EG_RangeMarkupElements {
	BookmarkStart: CT_Bookmark;
	BookmarkEnd: CT_MarkupRange;
	MoveFromRangeStart: CT_MoveBookmark;
	MoveFromRangeEnd: CT_MarkupRange;
	MoveToRangeStart: CT_MoveBookmark;
	MoveToRangeEnd: CT_MarkupRange;
	CommentRangeStart: CT_MarkupRange;
	CommentRangeEnd: CT_MarkupRange;
	CustomXmlInsRangeStart: CT_TrackChange;
	CustomXmlInsRangeEnd: CT_Markup;
	CustomXmlDelRangeStart: CT_TrackChange;
	CustomXmlDelRangeEnd: CT_Markup;
	CustomXmlMoveFromRangeStart: CT_TrackChange;
	CustomXmlMoveFromRangeEnd: CT_Markup;
	CustomXmlMoveToRangeStart: CT_TrackChange;
	CustomXmlMoveToRangeEnd: CT_Markup;
}

// CT_NumPr ...
export class CT_NumPr {
	Ilvl: CT_DecimalNumber;
	NumId: CT_DecimalNumber;
	Ins: CT_TrackChange;
}

// CT_PBdr ...
export class CT_PBdr {
	Top: CT_Border;
	Left: CT_Border;
	Bottom: CT_Border;
	Right: CT_Border;
	Between: CT_Border;
	Bar: CT_Border;
}

// CT_Tabs ...
export class CT_Tabs {
	Tab: Array<CT_TabStop>;
}

// ST_TextboxTightWrap ...
export enum ST_TextboxTightWrap {
	none = 'none',
	allLines = 'allLines',
	firstAndLastLine = 'firstAndLastLine',
	firstLineOnly = 'firstLineOnly',
	lastLineOnly = 'lastLineOnly',
}

// CT_TextboxTightWrap ...
export class CT_TextboxTightWrap {
	ValAttr: string;
}

// CT_PPr ...
export class CT_PPr extends CT_PPrBase  {
	RPr: CT_ParaRPr;
	SectPr: CT_SectPr;
	PPrChange: CT_PPrChange;
}

// CT_PPrBase ...
export class CT_PPrBase {
	PStyle: CT_String;
	KeepNext: CT_OnOff;
	KeepLines: CT_OnOff;
	PageBreakBefore: CT_OnOff;
	FramePr: CT_FramePr;
	WidowControl: CT_OnOff;
	NumPr: CT_NumPr;
	SuppressLineNumbers: CT_OnOff;
	PBdr: CT_PBdr;
	Shd: CT_Shd;
	Tabs: CT_Tabs;
	SuppressAutoHyphens: CT_OnOff;
	Kinsoku: CT_OnOff;
	WordWrap: CT_OnOff;
	OverflowPunct: CT_OnOff;
	TopLinePunct: CT_OnOff;
	AutoSpaceDE: CT_OnOff;
	AutoSpaceDN: CT_OnOff;
	Bidi: CT_OnOff;
	AdjustRightInd: CT_OnOff;
	SnapToGrid: CT_OnOff;
	Spacing: CT_Spacing;
	Ind: CT_Ind;
	ContextualSpacing: CT_OnOff;
	MirrorIndents: CT_OnOff;
	SuppressOverlap: CT_OnOff;
	Jc: CT_Jc;
	TextDirection: CT_TextDirection;
	TextAlignment: CT_TextAlignment;
	TextboxTightWrap: CT_TextboxTightWrap;
	OutlineLvl: CT_DecimalNumber;
	DivId: CT_DecimalNumber;
	CnfStyle: CT_Cnf;
}

// CT_PPrGeneral ...
export class CT_PPrGeneral extends CT_PPrBase  {
	PPrChange: CT_PPrChange;
}

// CT_Control ...
export class CT_Control {
	NameAttr: string | null;
	ShapeidAttr: string | null;
	RIdAttr: string | null;
}

// CT_Background ...
export class CT_Background {
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Uint8Array | null;
	ThemeShadeAttr: Uint8Array | null;
	Drawing: CT_Drawing;
}

// CT_Rel ...
export class CT_Rel {
	RIdAttr: string;
}

// CT_Object ...
export class CT_Object {
	DxaOrigAttr: ST_TwipsMeasure | null;
	DyaOrigAttr: ST_TwipsMeasure | null;
	Drawing: CT_Drawing;
	Control: CT_Control;
	ObjectLink: CT_ObjectLink;
	ObjectEmbed: CT_ObjectEmbed;
	Movie: CT_Rel;
}

// CT_ObjectEmbed ...
export class CT_ObjectEmbed {
	DrawAspectAttr: string | null;
	RIdAttr: string;
	ProgIdAttr: string | null;
	ShapeIdAttr: string | null;
	FieldCodesAttr: string | null;
}

// ST_ObjectDrawAspect ...
export enum ST_ObjectDrawAspect {
	content = 'content',
	icon = 'icon',
}

// CT_ObjectLink ...
export class CT_ObjectLink extends CT_ObjectEmbed  {
	UpdateModeAttr: string;
	LockedFieldAttr: ST_OnOff | null;
}

// ST_ObjectUpdateMode ...
export enum ST_ObjectUpdateMode {
	always = 'always',
	onCall = 'onCall',
}

// CT_Drawing ...
export class CT_Drawing {
	WpAnchor: Array<CT_Anchor>;
	WpInline: Array<CT_Inline>;
}

// CT_SimpleField ...
export class CT_SimpleField {
	InstrAttr: string;
	FldLockAttr: ST_OnOff | null;
	DirtyAttr: ST_OnOff | null;
	EG_PContent: Array<EG_PContent>;
}

// ST_FldCharType ...
export enum ST_FldCharType {
	begin = 'begin',
	separate = 'separate',
	end = 'end',
}

// ST_InfoTextType ...
export enum ST_InfoTextType {
	text = 'text',
	autoText = 'autoText',
}

// ST_FFHelpTextVal ...
export type ST_FFHelpTextVal = string;

// ST_FFStatusTextVal ...
export type ST_FFStatusTextVal = string;

// ST_FFName ...
export type ST_FFName = string;

// ST_FFTextType ...
export enum ST_FFTextType {
	regular = 'regular',
	number = 'number',
	date = 'date',
	currentTime = 'currentTime',
	currentDate = 'currentDate',
	calculated = 'calculated',
}

// CT_FFTextType ...
export class CT_FFTextType {
	ValAttr: string;
}

// CT_FFName ...
export class CT_FFName {
	ValAttr: string | null;
}

// CT_FldChar ...
export class CT_FldChar {
	FldCharTypeAttr: string;
	FldLockAttr: ST_OnOff | null;
	DirtyAttr: ST_OnOff | null;
	FfData: CT_FFData;
}

// CT_Hyperlink ...
export class CT_Hyperlink {
	TgtFrameAttr: string | null;
	TooltipAttr: string | null;
	DocLocationAttr: string | null;
	HistoryAttr: ST_OnOff | null;
	AnchorAttr: string | null;
	RIdAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

// CT_FFData ...
export class CT_FFData {
	Name: Array<CT_FFName>;
	Label: Array<CT_DecimalNumber>;
	TabIndex: Array<CT_UnsignedDecimalNumber>;
	Enabled: Array<CT_OnOff>;
	CalcOnExit: Array<CT_OnOff>;
	EntryMacro: Array<CT_MacroName>;
	ExitMacro: Array<CT_MacroName>;
	HelpText: Array<CT_FFHelpText>;
	StatusText: Array<CT_FFStatusText>;
	CheckBox: Array<CT_FFCheckBox>;
	DdList: Array<CT_FFDDList>;
	TextInput: Array<CT_FFTextInput>;
}

// CT_FFHelpText ...
export class CT_FFHelpText {
	TypeAttr: string | null;
	ValAttr: string | null;
}

// CT_FFStatusText ...
export class CT_FFStatusText {
	TypeAttr: string | null;
	ValAttr: string | null;
}

// CT_FFCheckBox ...
export class CT_FFCheckBox {
	Size: CT_HpsMeasure;
	SizeAuto: CT_OnOff;
	Default: CT_OnOff;
	Checked: CT_OnOff;
}

// CT_FFDDList ...
export class CT_FFDDList {
	Result: CT_DecimalNumber;
	Default: CT_DecimalNumber;
	ListEntry: Array<CT_String>;
}

// CT_FFTextInput ...
export class CT_FFTextInput {
	Type: CT_FFTextType;
	Default: CT_String;
	MaxLength: CT_DecimalNumber;
	Format: CT_String;
}

// ST_SectionMark ...
export enum ST_SectionMark {
	nextPage = 'nextPage',
	nextColumn = 'nextColumn',
	continuous = 'continuous',
	evenPage = 'evenPage',
	oddPage = 'oddPage',
}

// CT_SectType ...
export class CT_SectType {
	ValAttr: string | null;
}

// CT_PaperSource ...
export class CT_PaperSource {
	FirstAttr: number | null;
	OtherAttr: number | null;
}

// ST_NumberFormat ...
export enum ST_NumberFormat {
	decimal = 'decimal',
	upperRoman = 'upperRoman',
	lowerRoman = 'lowerRoman',
	upperLetter = 'upperLetter',
	lowerLetter = 'lowerLetter',
	ordinal = 'ordinal',
	cardinalText = 'cardinalText',
	ordinalText = 'ordinalText',
	hex = 'hex',
	chicago = 'chicago',
	ideographDigital = 'ideographDigital',
	japaneseCounting = 'japaneseCounting',
	aiueo = 'aiueo',
	iroha = 'iroha',
	decimalFullWidth = 'decimalFullWidth',
	decimalHalfWidth = 'decimalHalfWidth',
	japaneseLegal = 'japaneseLegal',
	japaneseDigitalTenThousand = 'japaneseDigitalTenThousand',
	decimalEnclosedCircle = 'decimalEnclosedCircle',
	decimalFullWidth2 = 'decimalFullWidth2',
	aiueoFullWidth = 'aiueoFullWidth',
	irohaFullWidth = 'irohaFullWidth',
	decimalZero = 'decimalZero',
	bullet = 'bullet',
	ganada = 'ganada',
	chosung = 'chosung',
	decimalEnclosedFullstop = 'decimalEnclosedFullstop',
	decimalEnclosedParen = 'decimalEnclosedParen',
	decimalEnclosedCircleChinese = 'decimalEnclosedCircleChinese',
	ideographEnclosedCircle = 'ideographEnclosedCircle',
	ideographTraditional = 'ideographTraditional',
	ideographZodiac = 'ideographZodiac',
	ideographZodiacTraditional = 'ideographZodiacTraditional',
	taiwaneseCounting = 'taiwaneseCounting',
	ideographLegalTraditional = 'ideographLegalTraditional',
	taiwaneseCountingThousand = 'taiwaneseCountingThousand',
	taiwaneseDigital = 'taiwaneseDigital',
	chineseCounting = 'chineseCounting',
	chineseLegalSimplified = 'chineseLegalSimplified',
	chineseCountingThousand = 'chineseCountingThousand',
	koreanDigital = 'koreanDigital',
	koreanCounting = 'koreanCounting',
	koreanLegal = 'koreanLegal',
	koreanDigital2 = 'koreanDigital2',
	vietnameseCounting = 'vietnameseCounting',
	russianLower = 'russianLower',
	russianUpper = 'russianUpper',
	none = 'none',
	numberInDash = 'numberInDash',
	hebrew1 = 'hebrew1',
	hebrew2 = 'hebrew2',
	arabicAlpha = 'arabicAlpha',
	arabicAbjad = 'arabicAbjad',
	hindiVowels = 'hindiVowels',
	hindiConsonants = 'hindiConsonants',
	hindiNumbers = 'hindiNumbers',
	hindiCounting = 'hindiCounting',
	thaiLetters = 'thaiLetters',
	thaiNumbers = 'thaiNumbers',
	thaiCounting = 'thaiCounting',
	bahtText = 'bahtText',
	dollarText = 'dollarText',
	custom = 'custom',
}

// ST_PageOrientation ...
export enum ST_PageOrientation {
	portrait = 'portrait',
	landscape = 'landscape',
}

// CT_PageSz ...
export class CT_PageSz {
	WAttr: ST_TwipsMeasure | null;
	HAttr: ST_TwipsMeasure | null;
	OrientAttr: string | null;
	CodeAttr: number | null;
}

// CT_PageMar ...
export class CT_PageMar {
	TopAttr: ST_SignedTwipsMeasure;
	RightAttr: ST_TwipsMeasure;
	BottomAttr: ST_SignedTwipsMeasure;
	LeftAttr: ST_TwipsMeasure;
	HeaderAttr: ST_TwipsMeasure;
	FooterAttr: ST_TwipsMeasure;
	GutterAttr: ST_TwipsMeasure;
}

// ST_PageBorderZOrder ...
export enum ST_PageBorderZOrder {
	front = 'front',
	back = 'back',
}

// ST_PageBorderDisplay ...
export enum ST_PageBorderDisplay {
	allPages = 'allPages',
	firstPage = 'firstPage',
	notFirstPage = 'notFirstPage',
}

// ST_PageBorderOffset ...
export enum ST_PageBorderOffset {
	page = 'page',
	text = 'text',
}

// CT_PageBorders ...
export class CT_PageBorders {
	ZOrderAttr: string | null;
	DisplayAttr: string | null;
	OffsetFromAttr: string | null;
	Top: CT_TopPageBorder;
	Left: CT_PageBorder;
	Bottom: CT_BottomPageBorder;
	Right: CT_PageBorder;
}

// CT_PageBorder ...
export class CT_PageBorder extends CT_Border  {
	RIdAttr: string | null;
}

// CT_BottomPageBorder ...
export class CT_BottomPageBorder extends CT_PageBorder  {
	RBottomLeftAttr: string | null;
	RBottomRightAttr: string | null;
}

// CT_TopPageBorder ...
export class CT_TopPageBorder extends CT_PageBorder  {
	RTopLeftAttr: string | null;
	RTopRightAttr: string | null;
}

// ST_ChapterSep ...
export enum ST_ChapterSep {
	hyphen = 'hyphen',
	period = 'period',
	colon = 'colon',
	emDash = 'emDash',
	enDash = 'enDash',
}

// ST_LineNumberRestart ...
export enum ST_LineNumberRestart {
	newPage = 'newPage',
	newSection = 'newSection',
	continuous = 'continuous',
}

// CT_LineNumber ...
export class CT_LineNumber {
	CountByAttr: number | null;
	StartAttr: number | null;
	DistanceAttr: ST_TwipsMeasure | null;
	RestartAttr: string | null;
}

// CT_PageNumber ...
export class CT_PageNumber {
	FmtAttr: string | null;
	StartAttr: number | null;
	ChapStyleAttr: number | null;
	ChapSepAttr: string | null;
}

// CT_Column ...
export class CT_Column {
	WAttr: ST_TwipsMeasure | null;
	SpaceAttr: ST_TwipsMeasure | null;
}

// CT_Columns ...
export class CT_Columns {
	EqualWidthAttr: ST_OnOff | null;
	SpaceAttr: ST_TwipsMeasure | null;
	NumAttr: number | null;
	SepAttr: ST_OnOff | null;
	Col: Array<CT_Column>;
}

// ST_VerticalJc ...
export enum ST_VerticalJc {
	top = 'top',
	center = 'center',
	both = 'both',
	bottom = 'bottom',
}

// CT_VerticalJc ...
export class CT_VerticalJc {
	ValAttr: string;
}

// ST_DocGrid ...
export enum ST_DocGrid {
	default = 'default',
	lines = 'lines',
	linesAndChars = 'linesAndChars',
	snapToChars = 'snapToChars',
}

// CT_DocGrid ...
export class CT_DocGrid {
	TypeAttr: string | null;
	LinePitchAttr: number | null;
	CharSpaceAttr: number | null;
}

// ST_HdrFtr ...
export enum ST_HdrFtr {
	even = 'even',
	default = 'default',
	first = 'first',
}

// ST_FtnEdn ...
export enum ST_FtnEdn {
	normal = 'normal',
	separator = 'separator',
	continuationSeparator = 'continuationSeparator',
	continuationNotice = 'continuationNotice',
}

// CT_HdrFtrRef ...
export class CT_HdrFtrRef extends CT_Rel  {
	TypeAttr: string;
}

// EG_HdrFtrReferences ...
export class EG_HdrFtrReferences {
	HeaderReference: CT_HdrFtrRef;
	FooterReference: CT_HdrFtrRef;
}

// CT_HdrFtr ...
export class CT_HdrFtr {
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

// EG_SectPrContents ...
export class EG_SectPrContents {
	FootnotePr: CT_FtnProps;
	EndnotePr: CT_EdnProps;
	Type: CT_SectType;
	PgSz: CT_PageSz;
	PgMar: CT_PageMar;
	PaperSrc: CT_PaperSource;
	PgBorders: CT_PageBorders;
	LnNumType: CT_LineNumber;
	PgNumType: CT_PageNumber;
	Cols: CT_Columns;
	FormProt: CT_OnOff;
	VAlign: CT_VerticalJc;
	NoEndnote: CT_OnOff;
	TitlePg: CT_OnOff;
	TextDirection: CT_TextDirection;
	Bidi: CT_OnOff;
	RtlGutter: CT_OnOff;
	DocGrid: CT_DocGrid;
	PrinterSettings: CT_Rel;
}

// AG_SectPrAttributes ...
export class AG_SectPrAttributes {
	RsidRPrAttr: Uint8Array | null;
	RsidDelAttr: Uint8Array | null;
	RsidRAttr: Uint8Array | null;
	RsidSectAttr: Uint8Array | null;
}

// CT_SectPrBase ...
export class CT_SectPrBase {
	AG_SectPrAttributes: AG_SectPrAttributes;
	EG_SectPrContents: EG_SectPrContents;
}

// CT_SectPr ...
export class CT_SectPr {
	AG_SectPrAttributes: AG_SectPrAttributes;
	EG_HdrFtrReferences: Array<EG_HdrFtrReferences>;
	EG_SectPrContents: EG_SectPrContents;
	SectPrChange: CT_SectPrChange;
}

// ST_BrType ...
export enum ST_BrType {
	page = 'page',
	column = 'column',
	textWrapping = 'textWrapping',
}

// ST_BrClear ...
export enum ST_BrClear {
	none = 'none',
	left = 'left',
	right = 'right',
	all = 'all',
}

// CT_Br ...
export class CT_Br {
	TypeAttr: string | null;
	ClearAttr: string | null;
}

// ST_PTabAlignment ...
export enum ST_PTabAlignment {
	left = 'left',
	center = 'center',
	right = 'right',
}

// ST_PTabRelativeTo ...
export enum ST_PTabRelativeTo {
	margin = 'margin',
	indent = 'indent',
}

// ST_PTabLeader ...
export enum ST_PTabLeader {
	none = 'none',
	dot = 'dot',
	hyphen = 'hyphen',
	underscore = 'underscore',
	middleDot = 'middleDot',
}

// CT_PTab ...
export class CT_PTab {
	AlignmentAttr: string;
	RelativeToAttr: string;
	LeaderAttr: string;
}

// CT_Sym ...
export class CT_Sym {
	FontAttr: string | null;
	CharAttr: Uint8Array | null;
}

// ST_ProofErr ...
export enum ST_ProofErr {
	spellStart = 'spellStart',
	spellEnd = 'spellEnd',
	gramStart = 'gramStart',
	gramEnd = 'gramEnd',
}

// CT_ProofErr ...
export class CT_ProofErr {
	TypeAttr: string;
}

// ST_EdGrp ...
export enum ST_EdGrp {
	none = 'none',
	everyone = 'everyone',
	administrators = 'administrators',
	contributors = 'contributors',
	editors = 'editors',
	owners = 'owners',
	current = 'current',
}

// CT_Perm ...
export class CT_Perm {
	IdAttr: string;
	DisplacedByCustomXmlAttr: string | null;
}

// CT_PermStart ...
export class CT_PermStart extends CT_Perm  {
	EdGrpAttr: string | null;
	EdAttr: string | null;
	ColFirstAttr: number | null;
	ColLastAttr: number | null;
}

// CT_Text ...
export class CT_Text {
	XmlSpaceAttr: Space | null;
	Value: string;
}

// EG_RunInnerContent ...
export class EG_RunInnerContent {
	Br: CT_Br;
	T: CT_Text;
	ContentPart: CT_Rel;
	DelText: CT_Text;
	InstrText: CT_Text;
	DelInstrText: CT_Text;
	NoBreakHyphen: CT_Empty;
	SoftHyphen: CT_Empty;
	DayShort: CT_Empty;
	MonthShort: CT_Empty;
	YearShort: CT_Empty;
	DayLong: CT_Empty;
	MonthLong: CT_Empty;
	YearLong: CT_Empty;
	AnnotationRef: CT_Empty;
	FootnoteRef: CT_Empty;
	EndnoteRef: CT_Empty;
	Separator: CT_Empty;
	ContinuationSeparator: CT_Empty;
	Sym: CT_Sym;
	PgNum: CT_Empty;
	Cr: CT_Empty;
	Tab: CT_Empty;
	Object: CT_Object;
	FldChar: CT_FldChar;
	Ruby: CT_Ruby;
	FootnoteReference: CT_FtnEdnRef;
	EndnoteReference: CT_FtnEdnRef;
	CommentReference: CT_Markup;
	Drawing: CT_Drawing;
	Ptab: CT_PTab;
	LastRenderedPageBreak: CT_Empty;
}

// CT_R ...
export class CT_R {
	RsidRPrAttr: Uint8Array | null;
	RsidDelAttr: Uint8Array | null;
	RsidRAttr: Uint8Array | null;
	EG_RPr: EG_RPr;
	EG_RunInnerContent: Array<EG_RunInnerContent>;
}

// ST_Hint ...
export enum ST_Hint {
	default = 'default',
	eastAsia = 'eastAsia',
}

// ST_Theme ...
export enum ST_Theme {
	majorEastAsia = 'majorEastAsia',
	majorBidi = 'majorBidi',
	majorAscii = 'majorAscii',
	majorHAnsi = 'majorHAnsi',
	minorEastAsia = 'minorEastAsia',
	minorBidi = 'minorBidi',
	minorAscii = 'minorAscii',
	minorHAnsi = 'minorHAnsi',
}

// CT_Fonts ...
export class CT_Fonts {
	HintAttr: string | null;
	AsciiAttr: string | null;
	HAnsiAttr: string | null;
	EastAsiaAttr: string | null;
	CsAttr: string | null;
	AsciiThemeAttr: string | null;
	HAnsiThemeAttr: string | null;
	EastAsiaThemeAttr: string | null;
	CsthemeAttr: string | null;
}

// EG_RPrBase ...
export class EG_RPrBase {
	RStyle: CT_String;
	RFonts: CT_Fonts;
	B: CT_OnOff;
	BCs: CT_OnOff;
	I: CT_OnOff;
	ICs: CT_OnOff;
	Caps: CT_OnOff;
	SmallCaps: CT_OnOff;
	Strike: CT_OnOff;
	Dstrike: CT_OnOff;
	Outline: CT_OnOff;
	Shadow: CT_OnOff;
	Emboss: CT_OnOff;
	Imprint: CT_OnOff;
	NoProof: CT_OnOff;
	SnapToGrid: CT_OnOff;
	Vanish: CT_OnOff;
	WebHidden: CT_OnOff;
	Color: CT_Color;
	Spacing: CT_SignedTwipsMeasure;
	W: CT_TextScale;
	Kern: CT_HpsMeasure;
	Position: CT_SignedHpsMeasure;
	Sz: CT_HpsMeasure;
	SzCs: CT_HpsMeasure;
	Highlight: CT_Highlight;
	U: CT_Underline;
	Effect: CT_TextEffect;
	Bdr: CT_Border;
	Shd: CT_Shd;
	FitText: CT_FitText;
	VertAlign: CT_VerticalAlignRun;
	Rtl: CT_OnOff;
	Cs: CT_OnOff;
	Em: CT_Em;
	Lang: CT_Language;
	EastAsianLayout: CT_EastAsianLayout;
	SpecVanish: CT_OnOff;
	OMath: CT_OnOff;
}

// EG_RPrContent ...
export class EG_RPrContent {
	RPrChange: CT_RPrChange;
	EG_RPrBase: Array<EG_RPrBase>;
}

// CT_RPr ...
export class CT_RPr {
	EG_RPrContent: EG_RPrContent;
}

// EG_RPr ...
export class EG_RPr {
	RPr: CT_RPr;
}

// EG_RPrMath ...
export class EG_RPrMath {
	Ins: CT_MathCtrlIns;
	Del: CT_MathCtrlDel;
	EG_RPr: EG_RPr;
}

// CT_MathCtrlIns ...
export class CT_MathCtrlIns extends CT_TrackChange  {
	Del: CT_RPrChange;
	RPr: CT_RPr;
}

// CT_MathCtrlDel ...
export class CT_MathCtrlDel extends CT_TrackChange  {
	RPr: CT_RPr;
}

// CT_RPrOriginal ...
export class CT_RPrOriginal {
	EG_RPrBase: Array<EG_RPrBase>;
}

// CT_ParaRPrOriginal ...
export class CT_ParaRPrOriginal {
	EG_ParaRPrTrackChanges: EG_ParaRPrTrackChanges;
	EG_RPrBase: Array<EG_RPrBase>;
}

// CT_ParaRPr ...
export class CT_ParaRPr {
	EG_ParaRPrTrackChanges: EG_ParaRPrTrackChanges;
	EG_RPrBase: Array<EG_RPrBase>;
	RPrChange: CT_ParaRPrChange;
}

// EG_ParaRPrTrackChanges ...
export class EG_ParaRPrTrackChanges {
	Ins: CT_TrackChange;
	Del: CT_TrackChange;
	MoveFrom: CT_TrackChange;
	MoveTo: CT_TrackChange;
}

// CT_AltChunk ...
export class CT_AltChunk {
	RIdAttr: string | null;
	AltChunkPr: CT_AltChunkPr;
}

// CT_AltChunkPr ...
export class CT_AltChunkPr {
	MatchSrc: CT_OnOff;
}

// ST_RubyAlign ...
export enum ST_RubyAlign {
	center = 'center',
	distributeLetter = 'distributeLetter',
	distributeSpace = 'distributeSpace',
	left = 'left',
	right = 'right',
	rightVertical = 'rightVertical',
}

// CT_RubyAlign ...
export class CT_RubyAlign {
	ValAttr: string;
}

// CT_RubyPr ...
export class CT_RubyPr {
	RubyAlign: CT_RubyAlign;
	Hps: CT_HpsMeasure;
	HpsRaise: CT_HpsMeasure;
	HpsBaseText: CT_HpsMeasure;
	Lid: CT_Lang;
	Dirty: CT_OnOff;
}

// EG_RubyContent ...
export class EG_RubyContent {
	R: CT_R;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// CT_RubyContent ...
export class CT_RubyContent {
	EG_RubyContent: Array<EG_RubyContent>;
}

// CT_Ruby ...
export class CT_Ruby {
	RubyPr: CT_RubyPr;
	Rt: CT_RubyContent;
	RubyBase: CT_RubyContent;
}

// ST_Lock ...
export enum ST_Lock {
	sdtLocked = 'sdtLocked',
	contentLocked = 'contentLocked',
	unlocked = 'unlocked',
	sdtContentLocked = 'sdtContentLocked',
}

// CT_Lock ...
export class CT_Lock {
	ValAttr: string | null;
}

// CT_SdtListItem ...
export class CT_SdtListItem {
	DisplayTextAttr: string | null;
	ValueAttr: string | null;
}

// ST_SdtDateMappingType ...
export enum ST_SdtDateMappingType {
	text = 'text',
	date = 'date',
	dateTime = 'dateTime',
}

// CT_SdtDateMappingType ...
export class CT_SdtDateMappingType {
	ValAttr: string | null;
}

// CT_CalendarType ...
export class CT_CalendarType {
	ValAttr: string | null;
}

// CT_SdtDate ...
export class CT_SdtDate {
	FullDateAttr: string | null;
	DateFormat: CT_String;
	Lid: CT_Lang;
	StoreMappedDataAs: CT_SdtDateMappingType;
	Calendar: CT_CalendarType;
}

// CT_SdtComboBox ...
export class CT_SdtComboBox {
	LastValueAttr: string | null;
	ListItem: Array<CT_SdtListItem>;
}

// CT_SdtDocPart ...
export class CT_SdtDocPart {
	DocPartGallery: CT_String;
	DocPartCategory: CT_String;
	DocPartUnique: CT_OnOff;
}

// CT_SdtDropDownList ...
export class CT_SdtDropDownList {
	LastValueAttr: string | null;
	ListItem: Array<CT_SdtListItem>;
}

// CT_Placeholder ...
export class CT_Placeholder {
	DocPart: CT_String;
}

// CT_SdtText ...
export class CT_SdtText {
	MultiLineAttr: ST_OnOff | null;
}

// CT_DataBinding ...
export class CT_DataBinding {
	PrefixMappingsAttr: string | null;
	XpathAttr: string;
	StoreItemIDAttr: string;
}

// CT_SdtPr ...
export class CT_SdtPr {
	RPr: CT_RPr;
	Alias: CT_String;
	Tag: CT_String;
	Id: CT_DecimalNumber;
	Lock: CT_Lock;
	Placeholder: CT_Placeholder;
	Temporary: CT_OnOff;
	ShowingPlcHdr: CT_OnOff;
	DataBinding: CT_DataBinding;
	Label: CT_DecimalNumber;
	TabIndex: CT_UnsignedDecimalNumber;
	Equation: CT_Empty;
	ComboBox: CT_SdtComboBox;
	Date: CT_SdtDate;
	DocPartObj: CT_SdtDocPart;
	DocPartList: CT_SdtDocPart;
	DropDownList: CT_SdtDropDownList;
	Picture: CT_Empty;
	RichText: CT_Empty;
	Text: CT_SdtText;
	Citation: CT_Empty;
	Group: CT_Empty;
	Bibliography: CT_Empty;
}

// CT_SdtEndPr ...
export class CT_SdtEndPr {
	RPr: Array<CT_RPr>;
}

// EG_ContentRunContent ...
export class EG_ContentRunContent {
	CustomXml: CT_CustomXmlRun;
	SmartTag: CT_SmartTagRun;
	Sdt: CT_SdtRun;
	Dir: CT_DirContentRun;
	Bdo: CT_BdoContentRun;
	R: CT_R;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// CT_DirContentRun ...
export class CT_DirContentRun {
	ValAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

// CT_BdoContentRun ...
export class CT_BdoContentRun {
	ValAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

// ST_Direction ...
export enum ST_Direction {
	ltr = 'ltr',
	rtl = 'rtl',
}

// CT_SdtContentRun ...
export class CT_SdtContentRun {
	EG_PContent: Array<EG_PContent>;
}

// EG_ContentBlockContent ...
export class EG_ContentBlockContent {
	CustomXml: CT_CustomXmlBlock;
	Sdt: CT_SdtBlock;
	P: Array<CT_P>;
	Tbl: Array<CT_Tbl>;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// CT_SdtContentBlock ...
export class CT_SdtContentBlock {
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
}

// EG_ContentRowContent ...
export class EG_ContentRowContent {
	Tr: Array<CT_Row>;
	CustomXml: CT_CustomXmlRow;
	Sdt: CT_SdtRow;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// CT_SdtContentRow ...
export class CT_SdtContentRow {
	EG_ContentRowContent: Array<EG_ContentRowContent>;
}

// EG_ContentCellContent ...
export class EG_ContentCellContent {
	Tc: Array<CT_Tc>;
	CustomXml: CT_CustomXmlCell;
	Sdt: CT_SdtCell;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

// CT_SdtContentCell ...
export class CT_SdtContentCell {
	EG_ContentCellContent: Array<EG_ContentCellContent>;
}

// CT_SdtBlock ...
export class CT_SdtBlock {
	SdtPr: CT_SdtPr;
	SdtEndPr: CT_SdtEndPr;
	SdtContent: CT_SdtContentBlock;
}

// CT_SdtRun ...
export class CT_SdtRun {
	SdtPr: CT_SdtPr;
	SdtEndPr: CT_SdtEndPr;
	SdtContent: CT_SdtContentRun;
}

// CT_SdtCell ...
export class CT_SdtCell {
	SdtPr: CT_SdtPr;
	SdtEndPr: CT_SdtEndPr;
	SdtContent: CT_SdtContentCell;
}

// CT_SdtRow ...
export class CT_SdtRow {
	SdtPr: CT_SdtPr;
	SdtEndPr: CT_SdtEndPr;
	SdtContent: CT_SdtContentRow;
}

// CT_Attr ...
export class CT_Attr {
	UriAttr: string | null;
	NameAttr: string;
	ValAttr: string;
}

// CT_CustomXmlRun ...
export class CT_CustomXmlRun {
	UriAttr: string | null;
	ElementAttr: string;
	EG_PContent: Array<EG_PContent>;
	CustomXmlPr: CT_CustomXmlPr;
}

// CT_SmartTagRun ...
export class CT_SmartTagRun {
	UriAttr: string | null;
	ElementAttr: string;
	EG_PContent: Array<EG_PContent>;
	SmartTagPr: CT_SmartTagPr;
}

// CT_CustomXmlBlock ...
export class CT_CustomXmlBlock {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
	CustomXmlPr: CT_CustomXmlPr;
}

// CT_CustomXmlPr ...
export class CT_CustomXmlPr {
	Placeholder: CT_String;
	Attr: Array<CT_Attr>;
}

// CT_CustomXmlRow ...
export class CT_CustomXmlRow {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentRowContent: Array<EG_ContentRowContent>;
	CustomXmlPr: CT_CustomXmlPr;
}

// CT_CustomXmlCell ...
export class CT_CustomXmlCell {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentCellContent: Array<EG_ContentCellContent>;
	CustomXmlPr: CT_CustomXmlPr;
}

// CT_SmartTagPr ...
export class CT_SmartTagPr {
	Attr: Array<CT_Attr>;
}

// EG_PContent ...
export class EG_PContent {
	FldSimple: Array<CT_SimpleField>;
	Hyperlink: CT_Hyperlink;
	SubDoc: CT_Rel;
	EG_ContentRunContent: Array<EG_ContentRunContent>;
}

// CT_P ...
export class CT_P {
	RsidRPrAttr: Uint8Array | null;
	RsidRAttr: Uint8Array | null;
	RsidDelAttr: Uint8Array | null;
	RsidPAttr: Uint8Array | null;
	RsidRDefaultAttr: Uint8Array | null;
	EG_PContent: Array<EG_PContent>;
	PPr: CT_PPr;
}

// ST_TblWidth ...
export enum ST_TblWidth {
	nil = 'nil',
	pct = 'pct',
	dxa = 'dxa',
	auto = 'auto',
}

// CT_Height ...
export class CT_Height {
	ValAttr: ST_TwipsMeasure | null;
	HRuleAttr: string | null;
}

// ST_MeasurementOrPercent ...
export class ST_MeasurementOrPercent {
	ST_DecimalNumberOrPercent: ST_DecimalNumberOrPercent;
	ST_UniversalMeasure: string;
}

// CT_TblWidth ...
export class CT_TblWidth {
	WAttr: ST_MeasurementOrPercent | null;
	TypeAttr: string | null;
}

// CT_TblGridCol ...
export class CT_TblGridCol {
	WAttr: ST_TwipsMeasure | null;
}

// CT_TblGridBase ...
export class CT_TblGridBase {
	GridCol: Array<CT_TblGridCol>;
}

// CT_TblGrid ...
export class CT_TblGrid extends CT_TblGridBase  {
	TblGridChange: CT_TblGridChange;
}

// CT_TcBorders ...
export class CT_TcBorders {
	Top: CT_Border;
	Start: CT_Border;
	Bottom: CT_Border;
	End: CT_Border;
	InsideH: CT_Border;
	InsideV: CT_Border;
	Tl2br: CT_Border;
	Tr2bl: CT_Border;
}

// CT_TcMar ...
export class CT_TcMar {
	Top: CT_TblWidth;
	Start: CT_TblWidth;
	Bottom: CT_TblWidth;
	End: CT_TblWidth;
}

// ST_Merge ...
export enum ST_Merge {
	continue = 'continue',
	restart = 'restart',
}

// CT_VMerge ...
export class CT_VMerge {
	ValAttr: string | null;
}

// CT_TcPrBase ...
export class CT_TcPrBase {
	CnfStyle: CT_Cnf;
	TcW: CT_TblWidth;
	GridSpan: CT_DecimalNumber;
	VMerge: CT_VMerge;
	TcBorders: CT_TcBorders;
	Shd: CT_Shd;
	NoWrap: CT_OnOff;
	TcMar: CT_TcMar;
	TextDirection: CT_TextDirection;
	TcFitText: CT_OnOff;
	VAlign: CT_VerticalJc;
	HideMark: CT_OnOff;
	Headers: CT_Headers;
}

// CT_TcPr ...
export class CT_TcPr extends CT_TcPrInner  {
	TcPrChange: CT_TcPrChange;
}

// CT_TcPrInner ...
export class CT_TcPrInner extends CT_TcPrBase  {
	EG_CellMarkupElements: Array<EG_CellMarkupElements>;
}

// CT_Tc ...
export class CT_Tc {
	IdAttr: string | null;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
	TcPr: CT_TcPr;
}

// CT_Cnf ...
export class CT_Cnf {
	FirstRowAttr: ST_OnOff | null;
	LastRowAttr: ST_OnOff | null;
	FirstColumnAttr: ST_OnOff | null;
	LastColumnAttr: ST_OnOff | null;
	OddVBandAttr: ST_OnOff | null;
	EvenVBandAttr: ST_OnOff | null;
	OddHBandAttr: ST_OnOff | null;
	EvenHBandAttr: ST_OnOff | null;
	FirstRowFirstColumnAttr: ST_OnOff | null;
	FirstRowLastColumnAttr: ST_OnOff | null;
	LastRowFirstColumnAttr: ST_OnOff | null;
	LastRowLastColumnAttr: ST_OnOff | null;
}

// CT_Headers ...
export class CT_Headers {
	Header: CT_String;
}

// CT_TrPrBase ...
export class CT_TrPrBase {
	CnfStyle: Array<CT_Cnf>;
	DivId: Array<CT_DecimalNumber>;
	GridBefore: Array<CT_DecimalNumber>;
	GridAfter: Array<CT_DecimalNumber>;
	WBefore: Array<CT_TblWidth>;
	WAfter: Array<CT_TblWidth>;
	CantSplit: Array<CT_OnOff>;
	TrHeight: Array<CT_Height>;
	TblHeader: Array<CT_OnOff>;
	TblCellSpacing: Array<CT_TblWidth>;
	Jc: Array<CT_JcTable>;
	Hidden: Array<CT_OnOff>;
}

// CT_TrPr ...
export class CT_TrPr extends CT_TrPrBase  {
	Ins: CT_TrackChange;
	Del: CT_TrackChange;
	TrPrChange: CT_TrPrChange;
}

// CT_Row ...
export class CT_Row {
	RsidRPrAttr: Uint8Array | null;
	RsidRAttr: Uint8Array | null;
	RsidDelAttr: Uint8Array | null;
	RsidTrAttr: Uint8Array | null;
	EG_ContentCellContent: Array<EG_ContentCellContent>;
	TblPrEx: CT_TblPrEx;
	TrPr: CT_TrPr;
}

// ST_TblLayoutType ...
export enum ST_TblLayoutType {
	fixed = 'fixed',
	autofit = 'autofit',
}

// CT_TblLayoutType ...
export class CT_TblLayoutType {
	TypeAttr: string | null;
}

// ST_TblOverlap ...
export enum ST_TblOverlap {
	never = 'never',
	overlap = 'overlap',
}

// CT_TblOverlap ...
export class CT_TblOverlap {
	ValAttr: string;
}

// CT_TblPPr ...
export class CT_TblPPr {
	LeftFromTextAttr: ST_TwipsMeasure | null;
	RightFromTextAttr: ST_TwipsMeasure | null;
	TopFromTextAttr: ST_TwipsMeasure | null;
	BottomFromTextAttr: ST_TwipsMeasure | null;
	VertAnchorAttr: string | null;
	HorzAnchorAttr: string | null;
	TblpXSpecAttr: string | null;
	TblpXAttr: ST_SignedTwipsMeasure | null;
	TblpYSpecAttr: string | null;
	TblpYAttr: ST_SignedTwipsMeasure | null;
}

// CT_TblCellMar ...
export class CT_TblCellMar {
	Top: CT_TblWidth;
	Start: CT_TblWidth;
	Bottom: CT_TblWidth;
	End: CT_TblWidth;
}

// CT_TblBorders ...
export class CT_TblBorders {
	Top: CT_Border;
	Start: CT_Border;
	Bottom: CT_Border;
	End: CT_Border;
	InsideH: CT_Border;
	InsideV: CT_Border;
}

// CT_TblPrBase ...
export class CT_TblPrBase {
	TblStyle: CT_String;
	TblpPr: CT_TblPPr;
	TblOverlap: CT_TblOverlap;
	BidiVisual: CT_OnOff;
	TblStyleRowBandSize: CT_DecimalNumber;
	TblStyleColBandSize: CT_DecimalNumber;
	TblW: CT_TblWidth;
	Jc: CT_JcTable;
	TblCellSpacing: CT_TblWidth;
	TblInd: CT_TblWidth;
	TblBorders: CT_TblBorders;
	Shd: CT_Shd;
	TblLayout: CT_TblLayoutType;
	TblCellMar: CT_TblCellMar;
	TblLook: CT_TblLook;
	TblCaption: CT_String;
	TblDescription: CT_String;
}

// CT_TblPr ...
export class CT_TblPr extends CT_TblPrBase  {
	TblPrChange: CT_TblPrChange;
}

// CT_TblPrExBase ...
export class CT_TblPrExBase {
	TblW: CT_TblWidth;
	Jc: CT_JcTable;
	TblCellSpacing: CT_TblWidth;
	TblInd: CT_TblWidth;
	TblBorders: CT_TblBorders;
	Shd: CT_Shd;
	TblLayout: CT_TblLayoutType;
	TblCellMar: CT_TblCellMar;
	TblLook: CT_TblLook;
}

// CT_TblPrEx ...
export class CT_TblPrEx extends CT_TblPrExBase  {
	TblPrExChange: CT_TblPrExChange;
}

// CT_Tbl ...
export class CT_Tbl {
	EG_RangeMarkupElements: Array<EG_RangeMarkupElements>;
	EG_ContentRowContent: Array<EG_ContentRowContent>;
	TblPr: CT_TblPr;
	TblGrid: CT_TblGrid;
}

// CT_TblLook ...
export class CT_TblLook {
	FirstRowAttr: ST_OnOff | null;
	LastRowAttr: ST_OnOff | null;
	FirstColumnAttr: ST_OnOff | null;
	LastColumnAttr: ST_OnOff | null;
	NoHBandAttr: ST_OnOff | null;
	NoVBandAttr: ST_OnOff | null;
}

// ST_FtnPos ...
export enum ST_FtnPos {
	pageBottom = 'pageBottom',
	beneathText = 'beneathText',
	sectEnd = 'sectEnd',
	docEnd = 'docEnd',
}

// CT_FtnPos ...
export class CT_FtnPos {
	ValAttr: string;
}

// ST_EdnPos ...
export enum ST_EdnPos {
	sectEnd = 'sectEnd',
	docEnd = 'docEnd',
}

// CT_EdnPos ...
export class CT_EdnPos {
	ValAttr: string;
}

// CT_NumFmt ...
export class CT_NumFmt {
	ValAttr: string;
	FormatAttr: string | null;
}

// ST_RestartNumber ...
export enum ST_RestartNumber {
	continuous = 'continuous',
	eachSect = 'eachSect',
	eachPage = 'eachPage',
}

// CT_NumRestart ...
export class CT_NumRestart {
	ValAttr: string;
}

// CT_FtnEdnRef ...
export class CT_FtnEdnRef {
	CustomMarkFollowsAttr: ST_OnOff | null;
	IdAttr: number;
}

// CT_FtnEdnSepRef ...
export class CT_FtnEdnSepRef {
	IdAttr: number;
}

// CT_FtnEdn ...
export class CT_FtnEdn {
	TypeAttr: string | null;
	IdAttr: number;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

// EG_FtnEdnNumProps ...
export class EG_FtnEdnNumProps {
	NumStart: CT_DecimalNumber;
	NumRestart: CT_NumRestart;
}

// CT_FtnProps ...
export class CT_FtnProps {
	EG_FtnEdnNumProps: EG_FtnEdnNumProps;
	Pos: CT_FtnPos;
	NumFmt: CT_NumFmt;
}

// CT_EdnProps ...
export class CT_EdnProps {
	EG_FtnEdnNumProps: EG_FtnEdnNumProps;
	Pos: CT_EdnPos;
	NumFmt: CT_NumFmt;
}

// CT_FtnDocProps ...
export class CT_FtnDocProps extends CT_FtnProps  {
	Footnote: Array<CT_FtnEdnSepRef>;
}

// CT_EdnDocProps ...
export class CT_EdnDocProps extends CT_EdnProps  {
	Endnote: Array<CT_FtnEdnSepRef>;
}

// CT_RecipientData ...
export class CT_RecipientData {
	Active: CT_OnOff;
	Column: CT_DecimalNumber;
	UniqueTag: CT_Base64Binary;
}

// CT_Base64Binary ...
export class CT_Base64Binary {
	ValAttr: Uint8Array;
}

// CT_Recipients ...
export class CT_Recipients {
	RecipientData: Array<CT_RecipientData>;
}

// Recipients ...
export type Recipients = CT_Recipients;

// CT_OdsoFieldMapData ...
export class CT_OdsoFieldMapData {
	Type: CT_MailMergeOdsoFMDFieldType;
	Name: CT_String;
	MappedName: CT_String;
	Column: CT_DecimalNumber;
	Lid: CT_Lang;
	DynamicAddress: CT_OnOff;
}

// ST_MailMergeSourceType ...
export enum ST_MailMergeSourceType {
	database = 'database',
	addressBook = 'addressBook',
	document1 = 'document1',
	document2 = 'document2',
	text = 'text',
	email = 'email',
	native = 'native',
	legacy = 'legacy',
	master = 'master',
}

// CT_MailMergeSourceType ...
export class CT_MailMergeSourceType {
	ValAttr: string;
}

// CT_Odso ...
export class CT_Odso {
	Udl: CT_String;
	Table: CT_String;
	Src: CT_Rel;
	ColDelim: CT_DecimalNumber;
	Type: CT_MailMergeSourceType;
	FHdr: CT_OnOff;
	FieldMapData: Array<CT_OdsoFieldMapData>;
	RecipientData: Array<CT_Rel>;
}

// CT_MailMerge ...
export class CT_MailMerge {
	MainDocumentType: CT_MailMergeDocType;
	LinkToQuery: CT_OnOff;
	DataType: CT_MailMergeDataType;
	ConnectString: CT_String;
	Query: CT_String;
	DataSource: CT_Rel;
	HeaderSource: CT_Rel;
	DoNotSuppressBlankLines: CT_OnOff;
	Destination: CT_MailMergeDest;
	AddressFieldName: CT_String;
	MailSubject: CT_String;
	MailAsAttachment: CT_OnOff;
	ViewMergedData: CT_OnOff;
	ActiveRecord: CT_DecimalNumber;
	CheckErrors: CT_DecimalNumber;
	Odso: CT_Odso;
}

// ST_TargetScreenSz ...
export enum ST_TargetScreenSz {
	544x376 = '544x376',
	640x480 = '640x480',
	720x512 = '720x512',
	800x600 = '800x600',
	1024x768 = '1024x768',
	1152x882 = '1152x882',
	1152x900 = '1152x900',
	1280x1024 = '1280x1024',
	1600x1200 = '1600x1200',
	1800x1440 = '1800x1440',
	1920x1200 = '1920x1200',
}

// CT_TargetScreenSz ...
export class CT_TargetScreenSz {
	ValAttr: string;
}

// CT_Compat ...
export class CT_Compat {
	SpaceForUL: CT_OnOff;
	BalanceSingleByteDoubleByteWidth: CT_OnOff;
	DoNotLeaveBackslashAlone: CT_OnOff;
	UlTrailSpace: CT_OnOff;
	DoNotExpandShiftReturn: CT_OnOff;
	AdjustLineHeightInTable: CT_OnOff;
	ApplyBreakingRules: CT_OnOff;
	CompatSetting: Array<CT_CompatSetting>;
}

// CT_CompatSetting ...
export class CT_CompatSetting {
	NameAttr: string | null;
	UriAttr: string | null;
	ValAttr: string | null;
}

// CT_DocVar ...
export class CT_DocVar {
	NameAttr: string;
	ValAttr: string;
}

// CT_DocVars ...
export class CT_DocVars {
	DocVar: Array<CT_DocVar>;
}

// CT_DocRsids ...
export class CT_DocRsids {
	RsidRoot: CT_LongHexNumber;
	Rsid: Array<CT_LongHexNumber>;
}

// ST_CharacterSpacing ...
export enum ST_CharacterSpacing {
	doNotCompress = 'doNotCompress',
	compressPunctuation = 'compressPunctuation',
	compressPunctuationAndJapaneseKana = 'compressPunctuationAndJapaneseKana',
}

// CT_CharacterSpacing ...
export class CT_CharacterSpacing {
	ValAttr: string;
}

// CT_SaveThroughXslt ...
export class CT_SaveThroughXslt {
	RIdAttr: string | null;
	SolutionIDAttr: string | null;
}

// CT_RPrDefault ...
export class CT_RPrDefault {
	RPr: CT_RPr;
}

// CT_PPrDefault ...
export class CT_PPrDefault {
	PPr: CT_PPrGeneral;
}

// CT_DocDefaults ...
export class CT_DocDefaults {
	RPrDefault: CT_RPrDefault;
	PPrDefault: CT_PPrDefault;
}

// ST_WmlColorSchemeIndex ...
export enum ST_WmlColorSchemeIndex {
	dark1 = 'dark1',
	light1 = 'light1',
	dark2 = 'dark2',
	light2 = 'light2',
	accent1 = 'accent1',
	accent2 = 'accent2',
	accent3 = 'accent3',
	accent4 = 'accent4',
	accent5 = 'accent5',
	accent6 = 'accent6',
	hyperlink = 'hyperlink',
	followedHyperlink = 'followedHyperlink',
}

// CT_ColorSchemeMapping ...
export class CT_ColorSchemeMapping {
	Bg1Attr: string | null;
	T1Attr: string | null;
	Bg2Attr: string | null;
	T2Attr: string | null;
	Accent1Attr: string | null;
	Accent2Attr: string | null;
	Accent3Attr: string | null;
	Accent4Attr: string | null;
	Accent5Attr: string | null;
	Accent6Attr: string | null;
	HyperlinkAttr: string | null;
	FollowedHyperlinkAttr: string | null;
}

// CT_ReadingModeInkLockDown ...
export class CT_ReadingModeInkLockDown {
	ActualPgAttr: ST_OnOff;
	WAttr: number;
	HAttr: number;
	FontSzAttr: ST_DecimalNumberOrPercent;
}

// CT_WriteProtection ...
export class CT_WriteProtection {
	AG_Password: AG_Password;
	RecommendedAttr: ST_OnOff | null;
}

// CT_Settings ...
export class CT_Settings {
	WriteProtection: CT_WriteProtection;
	View: CT_View;
	Zoom: CT_Zoom;
	RemovePersonalInformation: CT_OnOff;
	RemoveDateAndTime: CT_OnOff;
	DoNotDisplayPageBoundaries: CT_OnOff;
	DisplayBackgroundShape: CT_OnOff;
	PrintPostScriptOverText: CT_OnOff;
	PrintFractionalCharacterWidth: CT_OnOff;
	PrintFormsData: CT_OnOff;
	EmbedTrueTypeFonts: CT_OnOff;
	EmbedSystemFonts: CT_OnOff;
	SaveSubsetFonts: CT_OnOff;
	SaveFormsData: CT_OnOff;
	MirrorMargins: CT_OnOff;
	AlignBordersAndEdges: CT_OnOff;
	BordersDoNotSurroundHeader: CT_OnOff;
	BordersDoNotSurroundFooter: CT_OnOff;
	GutterAtTop: CT_OnOff;
	HideSpellingErrors: CT_OnOff;
	HideGrammaticalErrors: CT_OnOff;
	ActiveWritingStyle: Array<CT_WritingStyle>;
	ProofState: CT_Proof;
	FormsDesign: CT_OnOff;
	AttachedTemplate: CT_Rel;
	LinkStyles: CT_OnOff;
	StylePaneFormatFilter: CT_StylePaneFilter;
	StylePaneSortMethod: CT_StyleSort;
	DocumentType: CT_DocType;
	MailMerge: CT_MailMerge;
	RevisionView: CT_TrackChangesView;
	TrackRevisions: CT_OnOff;
	DoNotTrackMoves: CT_OnOff;
	DoNotTrackFormatting: CT_OnOff;
	DocumentProtection: CT_DocProtect;
	AutoFormatOverride: CT_OnOff;
	StyleLockTheme: CT_OnOff;
	StyleLockQFSet: CT_OnOff;
	DefaultTabStop: CT_TwipsMeasure;
	AutoHyphenation: CT_OnOff;
	ConsecutiveHyphenLimit: CT_DecimalNumber;
	HyphenationZone: CT_TwipsMeasure;
	DoNotHyphenateCaps: CT_OnOff;
	ShowEnvelope: CT_OnOff;
	SummaryLength: CT_DecimalNumberOrPrecent;
	ClickAndTypeStyle: CT_String;
	DefaultTableStyle: CT_String;
	EvenAndOddHeaders: CT_OnOff;
	BookFoldRevPrinting: CT_OnOff;
	BookFoldPrinting: CT_OnOff;
	BookFoldPrintingSheets: CT_DecimalNumber;
	DrawingGridHorizontalSpacing: CT_TwipsMeasure;
	DrawingGridVerticalSpacing: CT_TwipsMeasure;
	DisplayHorizontalDrawingGridEvery: CT_DecimalNumber;
	DisplayVerticalDrawingGridEvery: CT_DecimalNumber;
	DoNotUseMarginsForDrawingGridOrigin: CT_OnOff;
	DrawingGridHorizontalOrigin: CT_TwipsMeasure;
	DrawingGridVerticalOrigin: CT_TwipsMeasure;
	DoNotShadeFormData: CT_OnOff;
	NoPunctuationKerning: CT_OnOff;
	CharacterSpacingControl: CT_CharacterSpacing;
	PrintTwoOnOne: CT_OnOff;
	StrictFirstAndLastChars: CT_OnOff;
	NoLineBreaksAfter: CT_Kinsoku;
	NoLineBreaksBefore: CT_Kinsoku;
	SavePreviewPicture: CT_OnOff;
	DoNotValidateAgainstSchema: CT_OnOff;
	SaveInvalidXml: CT_OnOff;
	IgnoreMixedContent: CT_OnOff;
	AlwaysShowPlaceholderText: CT_OnOff;
	DoNotDemarcateInvalidXml: CT_OnOff;
	SaveXmlDataOnly: CT_OnOff;
	UseXSLTWhenSaving: CT_OnOff;
	SaveThroughXslt: CT_SaveThroughXslt;
	ShowXMLTags: CT_OnOff;
	AlwaysMergeEmptyNamespace: CT_OnOff;
	UpdateFields: CT_OnOff;
	FootnotePr: CT_FtnDocProps;
	EndnotePr: CT_EdnDocProps;
	Compat: CT_Compat;
	DocVars: CT_DocVars;
	Rsids: CT_DocRsids;
	MMathPr: CT_MathPr;
	AttachedSchema: Array<CT_String>;
	ThemeFontLang: CT_Language;
	ClrSchemeMapping: CT_ColorSchemeMapping;
	DoNotIncludeSubdocsInStats: CT_OnOff;
	DoNotAutoCompressPictures: CT_OnOff;
	ForceUpgrade: CT_Empty;
	Captions: CT_Captions;
	ReadModeInkLockDown: CT_ReadingModeInkLockDown;
	SmartTagType: Array<CT_SmartTagType>;
	SlSchemaLibrary: CT_SchemaLibrary;
	DoNotEmbedSmartTags: CT_OnOff;
	DecimalSymbol: CT_String;
	ListSeparator: CT_String;
}

// CT_StyleSort ...
export class CT_StyleSort {
	ValAttr: string;
}

// CT_StylePaneFilter ...
export class CT_StylePaneFilter {
	AllStylesAttr: ST_OnOff | null;
	CustomStylesAttr: ST_OnOff | null;
	LatentStylesAttr: ST_OnOff | null;
	StylesInUseAttr: ST_OnOff | null;
	HeadingStylesAttr: ST_OnOff | null;
	NumberingStylesAttr: ST_OnOff | null;
	TableStylesAttr: ST_OnOff | null;
	DirectFormattingOnRunsAttr: ST_OnOff | null;
	DirectFormattingOnParagraphsAttr: ST_OnOff | null;
	DirectFormattingOnNumberingAttr: ST_OnOff | null;
	DirectFormattingOnTablesAttr: ST_OnOff | null;
	ClearFormattingAttr: ST_OnOff | null;
	Top3HeadingStylesAttr: ST_OnOff | null;
	VisibleStylesAttr: ST_OnOff | null;
	AlternateStyleNamesAttr: ST_OnOff | null;
}

// ST_StyleSort ...
export enum ST_StyleSort {
	name = 'name',
	priority = 'priority',
	default = 'default',
	font = 'font',
	basedOn = 'basedOn',
	type = 'type',
}

// CT_WebSettings ...
export class CT_WebSettings {
	Frameset: CT_Frameset;
	Divs: CT_Divs;
	Encoding: CT_String;
	OptimizeForBrowser: CT_OptimizeForBrowser;
	AllowPNG: CT_OnOff;
	DoNotRelyOnCSS: CT_OnOff;
	DoNotSaveAsSingleFile: CT_OnOff;
	DoNotOrganizeInFolder: CT_OnOff;
	DoNotUseLongFileNames: CT_OnOff;
	PixelsPerInch: CT_DecimalNumber;
	TargetScreenSz: CT_TargetScreenSz;
	SaveSmartTagsAsXml: CT_OnOff;
}

// ST_FrameScrollbar ...
export enum ST_FrameScrollbar {
	on = 'on',
	off = 'off',
	auto = 'auto',
}

// CT_FrameScrollbar ...
export class CT_FrameScrollbar {
	ValAttr: string;
}

// CT_OptimizeForBrowser ...
export class CT_OptimizeForBrowser extends CT_OnOff  {
	TargetAttr: string | null;
}

// CT_Frame ...
export class CT_Frame {
	Sz: CT_String;
	Name: CT_String;
	Title: CT_String;
	LongDesc: CT_Rel;
	SourceFileName: CT_Rel;
	MarW: CT_PixelsMeasure;
	MarH: CT_PixelsMeasure;
	Scrollbar: CT_FrameScrollbar;
	NoResizeAllowed: CT_OnOff;
	LinkedToFile: CT_OnOff;
}

// ST_FrameLayout ...
export enum ST_FrameLayout {
	rows = 'rows',
	cols = 'cols',
	none = 'none',
}

// CT_FrameLayout ...
export class CT_FrameLayout {
	ValAttr: string;
}

// CT_FramesetSplitbar ...
export class CT_FramesetSplitbar {
	W: CT_TwipsMeasure;
	Color: CT_Color;
	NoBorder: CT_OnOff;
	FlatBorders: CT_OnOff;
}

// CT_Frameset ...
export class CT_Frameset {
	Sz: CT_String;
	FramesetSplitbar: CT_FramesetSplitbar;
	FrameLayout: CT_FrameLayout;
	Title: CT_String;
	Frameset: Array<CT_Frameset>;
	Frame: Array<CT_Frame>;
}

// CT_NumPicBullet ...
export class CT_NumPicBullet {
	NumPicBulletIdAttr: number;
	Drawing: CT_Drawing;
}

// ST_LevelSuffix ...
export enum ST_LevelSuffix {
	tab = 'tab',
	space = 'space',
	nothing = 'nothing',
}

// CT_LevelSuffix ...
export class CT_LevelSuffix {
	ValAttr: string;
}

// CT_LevelText ...
export class CT_LevelText {
	ValAttr: string | null;
	NullAttr: ST_OnOff | null;
}

// CT_Lvl ...
export class CT_Lvl {
	IlvlAttr: number;
	TplcAttr: Uint8Array | null;
	TentativeAttr: ST_OnOff | null;
	Start: CT_DecimalNumber;
	NumFmt: CT_NumFmt;
	LvlRestart: CT_DecimalNumber;
	PStyle: CT_String;
	IsLgl: CT_OnOff;
	Suff: CT_LevelSuffix;
	LvlText: CT_LevelText;
	LvlPicBulletId: CT_DecimalNumber;
	LvlJc: CT_Jc;
	PPr: CT_PPrGeneral;
	RPr: CT_RPr;
}

// ST_MultiLevelType ...
export enum ST_MultiLevelType {
	singleLevel = 'singleLevel',
	multilevel = 'multilevel',
	hybridMultilevel = 'hybridMultilevel',
}

// CT_MultiLevelType ...
export class CT_MultiLevelType {
	ValAttr: string;
}

// CT_AbstractNum ...
export class CT_AbstractNum {
	AbstractNumIdAttr: number;
	Nsid: CT_LongHexNumber;
	MultiLevelType: CT_MultiLevelType;
	Tmpl: CT_LongHexNumber;
	Name: CT_String;
	StyleLink: CT_String;
	NumStyleLink: CT_String;
	Lvl: Array<CT_Lvl>;
}

// CT_NumLvl ...
export class CT_NumLvl {
	IlvlAttr: number;
	StartOverride: CT_DecimalNumber;
	Lvl: CT_Lvl;
}

// CT_Num ...
export class CT_Num {
	NumIdAttr: number;
	AbstractNumId: CT_DecimalNumber;
	LvlOverride: Array<CT_NumLvl>;
}

// CT_Numbering ...
export class CT_Numbering {
	NumPicBullet: Array<CT_NumPicBullet>;
	AbstractNum: Array<CT_AbstractNum>;
	Num: Array<CT_Num>;
	NumIdMacAtCleanup: CT_DecimalNumber;
}

// ST_TblStyleOverrideType ...
export enum ST_TblStyleOverrideType {
	wholeTable = 'wholeTable',
	firstRow = 'firstRow',
	lastRow = 'lastRow',
	firstCol = 'firstCol',
	lastCol = 'lastCol',
	band1Vert = 'band1Vert',
	band2Vert = 'band2Vert',
	band1Horz = 'band1Horz',
	band2Horz = 'band2Horz',
	neCell = 'neCell',
	nwCell = 'nwCell',
	seCell = 'seCell',
	swCell = 'swCell',
}

// CT_TblStylePr ...
export class CT_TblStylePr {
	TypeAttr: string;
	PPr: CT_PPrGeneral;
	RPr: CT_RPr;
	TblPr: CT_TblPrBase;
	TrPr: CT_TrPr;
	TcPr: CT_TcPr;
}

// ST_StyleType ...
export enum ST_StyleType {
	paragraph = 'paragraph',
	character = 'character',
	table = 'table',
	numbering = 'numbering',
}

// CT_Style ...
export class CT_Style {
	TypeAttr: string | null;
	StyleIdAttr: string | null;
	DefaultAttr: ST_OnOff | null;
	CustomStyleAttr: ST_OnOff | null;
	Name: CT_String;
	Aliases: CT_String;
	BasedOn: CT_String;
	Next: CT_String;
	Link: CT_String;
	AutoRedefine: CT_OnOff;
	Hidden: CT_OnOff;
	UiPriority: CT_DecimalNumber;
	SemiHidden: CT_OnOff;
	UnhideWhenUsed: CT_OnOff;
	QFormat: CT_OnOff;
	Locked: CT_OnOff;
	Personal: CT_OnOff;
	PersonalCompose: CT_OnOff;
	PersonalReply: CT_OnOff;
	Rsid: CT_LongHexNumber;
	PPr: CT_PPrGeneral;
	RPr: CT_RPr;
	TblPr: CT_TblPrBase;
	TrPr: CT_TrPr;
	TcPr: CT_TcPr;
	TblStylePr: Array<CT_TblStylePr>;
}

// CT_LsdException ...
export class CT_LsdException {
	NameAttr: string;
	LockedAttr: ST_OnOff | null;
	UiPriorityAttr: number | null;
	SemiHiddenAttr: ST_OnOff | null;
	UnhideWhenUsedAttr: ST_OnOff | null;
	QFormatAttr: ST_OnOff | null;
}

// CT_LatentStyles ...
export class CT_LatentStyles {
	DefLockedStateAttr: ST_OnOff | null;
	DefUIPriorityAttr: number | null;
	DefSemiHiddenAttr: ST_OnOff | null;
	DefUnhideWhenUsedAttr: ST_OnOff | null;
	DefQFormatAttr: ST_OnOff | null;
	CountAttr: number | null;
	LsdException: Array<CT_LsdException>;
}

// CT_Styles ...
export class CT_Styles {
	DocDefaults: CT_DocDefaults;
	LatentStyles: CT_LatentStyles;
	Style: Array<CT_Style>;
}

// CT_Panose ...
export class CT_Panose {
	ValAttr: Uint8Array;
}

// ST_FontFamily ...
export enum ST_FontFamily {
	decorative = 'decorative',
	modern = 'modern',
	roman = 'roman',
	script = 'script',
	swiss = 'swiss',
	auto = 'auto',
}

// CT_FontFamily ...
export class CT_FontFamily {
	ValAttr: string;
}

// ST_Pitch ...
export enum ST_Pitch {
	fixed = 'fixed',
	variable = 'variable',
	default = 'default',
}

// CT_Pitch ...
export class CT_Pitch {
	ValAttr: string;
}

// CT_FontSig ...
export class CT_FontSig {
	Usb0Attr: Uint8Array;
	Usb1Attr: Uint8Array;
	Usb2Attr: Uint8Array;
	Usb3Attr: Uint8Array;
	Csb0Attr: Uint8Array;
	Csb1Attr: Uint8Array;
}

// CT_FontRel ...
export class CT_FontRel extends CT_Rel  {
	FontKeyAttr: string | null;
	SubsettedAttr: ST_OnOff | null;
}

// CT_Font ...
export class CT_Font {
	NameAttr: string;
	AltName: CT_String;
	Panose1: CT_Panose;
	Charset: CT_Charset;
	Family: CT_FontFamily;
	NotTrueType: CT_OnOff;
	Pitch: CT_Pitch;
	Sig: CT_FontSig;
	EmbedRegular: CT_FontRel;
	EmbedBold: CT_FontRel;
	EmbedItalic: CT_FontRel;
	EmbedBoldItalic: CT_FontRel;
}

// CT_FontsList ...
export class CT_FontsList {
	Font: Array<CT_Font>;
}

// CT_DivBdr ...
export class CT_DivBdr {
	Top: CT_Border;
	Left: CT_Border;
	Bottom: CT_Border;
	Right: CT_Border;
}

// CT_Div ...
export class CT_Div {
	IdAttr: number;
	BlockQuote: CT_OnOff;
	BodyDiv: CT_OnOff;
	MarLeft: CT_SignedTwipsMeasure;
	MarRight: CT_SignedTwipsMeasure;
	MarTop: CT_SignedTwipsMeasure;
	MarBottom: CT_SignedTwipsMeasure;
	DivBdr: CT_DivBdr;
	DivsChild: Array<CT_Divs>;
}

// CT_Divs ...
export class CT_Divs {
	Div: CT_Div;
}

// EG_MathContent ...
export class EG_MathContent {
	MOMathPara: CT_OMathPara;
	MOMath: CT_OMath;
}

// EG_BlockLevelChunkElts ...
export class EG_BlockLevelChunkElts {
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
}

// EG_BlockLevelElts ...
export class EG_BlockLevelElts {
	AltChunk: Array<CT_AltChunk>;
	EG_BlockLevelChunkElts: Array<EG_BlockLevelChunkElts>;
}

// EG_RunLevelElts ...
export class EG_RunLevelElts {
	ProofErr: CT_ProofErr;
	PermStart: CT_PermStart;
	PermEnd: CT_Perm;
	Ins: CT_RunTrackChange;
	Del: CT_RunTrackChange;
	MoveFrom: CT_RunTrackChange;
	MoveTo: CT_RunTrackChange;
	EG_RangeMarkupElements: Array<EG_RangeMarkupElements>;
	EG_MathContent: Array<EG_MathContent>;
}

// CT_Body ...
export class CT_Body {
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
	SectPr: CT_SectPr;
}

// CT_Comments ...
export class CT_Comments {
	Comment: Array<CT_Comment>;
}

// Comments ...
export type Comments = CT_Comments;

// CT_Footnotes ...
export class CT_Footnotes {
	Footnote: CT_FtnEdn;
}

// Footnotes ...
export type Footnotes = CT_Footnotes;

// CT_Endnotes ...
export class CT_Endnotes {
	Endnote: CT_FtnEdn;
}

// Endnotes ...
export type Endnotes = CT_Endnotes;

// Hdr ...
export type Hdr = CT_HdrFtr;

// Ftr ...
export type Ftr = CT_HdrFtr;

// CT_SmartTagType ...
export class CT_SmartTagType {
	NamespaceuriAttr: string | null;
	NameAttr: string | null;
	UrlAttr: string | null;
}

// ST_ThemeColor ...
export enum ST_ThemeColor {
	dark1 = 'dark1',
	light1 = 'light1',
	dark2 = 'dark2',
	light2 = 'light2',
	accent1 = 'accent1',
	accent2 = 'accent2',
	accent3 = 'accent3',
	accent4 = 'accent4',
	accent5 = 'accent5',
	accent6 = 'accent6',
	hyperlink = 'hyperlink',
	followedHyperlink = 'followedHyperlink',
	none = 'none',
	background1 = 'background1',
	text1 = 'text1',
	background2 = 'background2',
	text2 = 'text2',
}

// ST_DocPartBehavior ...
export enum ST_DocPartBehavior {
	content = 'content',
	p = 'p',
	pg = 'pg',
}

// CT_DocPartBehavior ...
export class CT_DocPartBehavior {
	ValAttr: string;
}

// CT_DocPartBehaviors ...
export class CT_DocPartBehaviors {
	Behavior: Array<CT_DocPartBehavior>;
}

// ST_DocPartType ...
export enum ST_DocPartType {
	none = 'none',
	normal = 'normal',
	autoExp = 'autoExp',
	toolbar = 'toolbar',
	speller = 'speller',
	formFld = 'formFld',
	bbPlcHdr = 'bbPlcHdr',
}

// CT_DocPartType ...
export class CT_DocPartType {
	ValAttr: string;
}

// CT_DocPartTypes ...
export class CT_DocPartTypes {
	AllAttr: ST_OnOff | null;
	Type: Array<CT_DocPartType>;
}

// ST_DocPartGallery ...
export enum ST_DocPartGallery {
	placeholder = 'placeholder',
	any = 'any',
	default = 'default',
	docParts = 'docParts',
	coverPg = 'coverPg',
	eq = 'eq',
	ftrs = 'ftrs',
	hdrs = 'hdrs',
	pgNum = 'pgNum',
	tbls = 'tbls',
	watermarks = 'watermarks',
	autoTxt = 'autoTxt',
	txtBox = 'txtBox',
	pgNumT = 'pgNumT',
	pgNumB = 'pgNumB',
	pgNumMargins = 'pgNumMargins',
	tblOfContents = 'tblOfContents',
	bib = 'bib',
	custQuickParts = 'custQuickParts',
	custCoverPg = 'custCoverPg',
	custEq = 'custEq',
	custFtrs = 'custFtrs',
	custHdrs = 'custHdrs',
	custPgNum = 'custPgNum',
	custTbls = 'custTbls',
	custWatermarks = 'custWatermarks',
	custAutoTxt = 'custAutoTxt',
	custTxtBox = 'custTxtBox',
	custPgNumT = 'custPgNumT',
	custPgNumB = 'custPgNumB',
	custPgNumMargins = 'custPgNumMargins',
	custTblOfContents = 'custTblOfContents',
	custBib = 'custBib',
	custom1 = 'custom1',
	custom2 = 'custom2',
	custom3 = 'custom3',
	custom4 = 'custom4',
	custom5 = 'custom5',
}

// CT_DocPartGallery ...
export class CT_DocPartGallery {
	ValAttr: string;
}

// CT_DocPartCategory ...
export class CT_DocPartCategory {
	Name: CT_String;
	Gallery: CT_DocPartGallery;
}

// CT_DocPartName ...
export class CT_DocPartName {
	ValAttr: string;
	DecoratedAttr: ST_OnOff | null;
}

// CT_DocPartPr ...
export class CT_DocPartPr {
	Name: CT_DocPartName;
	Style: CT_String;
	Category: CT_DocPartCategory;
	Types: CT_DocPartTypes;
	Behaviors: CT_DocPartBehaviors;
	Description: CT_String;
	Guid: CT_Guid;
}

// CT_DocPart ...
export class CT_DocPart {
	DocPartPr: CT_DocPartPr;
	DocPartBody: CT_Body;
}

// CT_DocParts ...
export class CT_DocParts {
	DocPart: Array<CT_DocPart>;
}

// Settings ...
export type Settings = CT_Settings;

// WebSettings ...
export type WebSettings = CT_WebSettings;

// Fonts ...
export type Fonts = CT_FontsList;

// Numbering ...
export type Numbering = CT_Numbering;

// Styles ...
export type Styles = CT_Styles;

// ST_CaptionPos ...
export enum ST_CaptionPos {
	above = 'above',
	below = 'below',
	left = 'left',
	right = 'right',
}

// CT_Caption ...
export class CT_Caption {
	NameAttr: string;
	PosAttr: string | null;
	ChapNumAttr: ST_OnOff | null;
	HeadingAttr: number | null;
	NoLabelAttr: ST_OnOff | null;
	NumFmtAttr: string | null;
	SepAttr: string | null;
}

// CT_AutoCaption ...
export class CT_AutoCaption {
	NameAttr: string;
	CaptionAttr: string;
}

// CT_AutoCaptions ...
export class CT_AutoCaptions {
	AutoCaption: Array<CT_AutoCaption>;
}

// CT_Captions ...
export class CT_Captions {
	Caption: Array<CT_Caption>;
	AutoCaptions: CT_AutoCaptions;
}

// CT_DocumentBase ...
export class CT_DocumentBase {
	Background: CT_Background;
}

// CT_Document ...
export class CT_Document extends CT_DocumentBase  {
	ConformanceAttr: string | null;
	Body: CT_Body;
}

// CT_GlossaryDocument ...
export class CT_GlossaryDocument extends CT_DocumentBase  {
	DocParts: CT_DocParts;
}

// Document ...
export type Document = CT_Document;

// GlossaryDocument ...
export type GlossaryDocument = CT_GlossaryDocument;
