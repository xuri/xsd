// Code generated by xgen. DO NOT EDIT.

// CT_AutoFilter ...
export class CT_AutoFilter {
	RefAttr?: string;
	FilterColumn?: Array<CT_FilterColumn>;
	SortState?: CT_SortState;
	ExtLst?: CT_ExtensionList;
}

// CT_FilterColumn ...
export class CT_FilterColumn {
	ColIdAttr: number;
	HiddenButtonAttr?: boolean;
	ShowButtonAttr?: boolean;
	Filters?: CT_Filters;
	Top10?: CT_Top10;
	CustomFilters?: CT_CustomFilters;
	DynamicFilter?: CT_DynamicFilter;
	ColorFilter?: CT_ColorFilter;
	IconFilter?: CT_IconFilter;
	ExtLst?: CT_ExtensionList;
}

// CT_Filters ...
export class CT_Filters {
	BlankAttr?: boolean;
	CalendarTypeAttr?: string;
	Filter?: Array<CT_Filter>;
	DateGroupItem?: Array<CT_DateGroupItem>;
}

// CT_Filter ...
export class CT_Filter {
	ValAttr?: string;
}

// CT_CustomFilters ...
export class CT_CustomFilters {
	AndAttr?: boolean;
	CustomFilter: Array<CT_CustomFilter>;
}

// CT_CustomFilter ...
export class CT_CustomFilter {
	OperatorAttr?: string;
	ValAttr?: string;
}

// CT_Top10 ...
export class CT_Top10 {
	TopAttr?: boolean;
	PercentAttr?: boolean;
	ValAttr: number;
	FilterValAttr?: number;
}

// CT_ColorFilter ...
export class CT_ColorFilter {
	DxfIdAttr?: number;
	CellColorAttr?: boolean;
}

// CT_IconFilter ...
export class CT_IconFilter {
	IconSetAttr: string;
	IconIdAttr?: number;
}

// ST_FilterOperator ...
export enum ST_FilterOperator {
	equal = 'equal',
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	notEqual = 'notEqual',
	greaterThanOrEqual = 'greaterThanOrEqual',
	greaterThan = 'greaterThan',
}

// CT_DynamicFilter ...
export class CT_DynamicFilter {
	TypeAttr: string;
	ValAttr?: number;
	ValIsoAttr?: string;
	MaxValIsoAttr?: string;
}

// ST_DynamicFilterType ...
export enum ST_DynamicFilterType {
	null = 'null',
	aboveAverage = 'aboveAverage',
	belowAverage = 'belowAverage',
	tomorrow = 'tomorrow',
	today = 'today',
	yesterday = 'yesterday',
	nextWeek = 'nextWeek',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextMonth = 'nextMonth',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextQuarter = 'nextQuarter',
	thisQuarter = 'thisQuarter',
	lastQuarter = 'lastQuarter',
	nextYear = 'nextYear',
	thisYear = 'thisYear',
	lastYear = 'lastYear',
	yearToDate = 'yearToDate',
	Q1 = 'Q1',
	Q2 = 'Q2',
	Q3 = 'Q3',
	Q4 = 'Q4',
	M1 = 'M1',
	M2 = 'M2',
	M3 = 'M3',
	M4 = 'M4',
	M5 = 'M5',
	M6 = 'M6',
	M7 = 'M7',
	M8 = 'M8',
	M9 = 'M9',
	M10 = 'M10',
	M11 = 'M11',
	M12 = 'M12',
}

// ST_IconSetType ...
export enum ST_IconSetType {
	3Arrows = '3Arrows',
	3ArrowsGray = '3ArrowsGray',
	3Flags = '3Flags',
	3TrafficLights1 = '3TrafficLights1',
	3TrafficLights2 = '3TrafficLights2',
	3Signs = '3Signs',
	3Symbols = '3Symbols',
	3Symbols2 = '3Symbols2',
	4Arrows = '4Arrows',
	4ArrowsGray = '4ArrowsGray',
	4RedToBlack = '4RedToBlack',
	4Rating = '4Rating',
	4TrafficLights = '4TrafficLights',
	5Arrows = '5Arrows',
	5ArrowsGray = '5ArrowsGray',
	5Rating = '5Rating',
	5Quarters = '5Quarters',
}

// CT_SortState ...
export class CT_SortState {
	ColumnSortAttr?: boolean;
	CaseSensitiveAttr?: boolean;
	SortMethodAttr?: string;
	RefAttr: string;
	SortCondition?: Array<CT_SortCondition>;
	ExtLst?: CT_ExtensionList;
}

// CT_SortCondition ...
export class CT_SortCondition {
	DescendingAttr?: boolean;
	SortByAttr?: string;
	RefAttr: string;
	CustomListAttr?: string;
	DxfIdAttr?: number;
	IconSetAttr?: string;
	IconIdAttr?: number;
}

// ST_SortBy ...
export enum ST_SortBy {
	value = 'value',
	cellColor = 'cellColor',
	fontColor = 'fontColor',
	icon = 'icon',
}

// ST_SortMethod ...
export enum ST_SortMethod {
	stroke = 'stroke',
	pinYin = 'pinYin',
	none = 'none',
}

// CT_DateGroupItem ...
export class CT_DateGroupItem {
	YearAttr: number;
	MonthAttr?: number;
	DayAttr?: number;
	HourAttr?: number;
	MinuteAttr?: number;
	SecondAttr?: number;
	DateTimeGroupingAttr: string;
}

// ST_DateTimeGrouping ...
export enum ST_DateTimeGrouping {
	year = 'year',
	month = 'month',
	day = 'day',
	hour = 'hour',
	minute = 'minute',
	second = 'second',
}

// ST_CellRef ...
export type ST_CellRef = string;

// ST_Ref ...
export type ST_Ref = string;

// ST_RefA ...
export type ST_RefA = string;

// ST_Sqref ...
export type ST_Sqref = string;

// ST_Formula ...
export type ST_Formula = string;

// ST_UnsignedIntHex ...
export type ST_UnsignedIntHex = Uint8Array;

// CT_XStringElement ...
export class CT_XStringElement {
	VAttr: string;
}

// CT_Extension ...
export class CT_Extension {
	UriAttr?: string;
}

// CT_ObjectAnchor ...
export class CT_ObjectAnchor {
	MoveWithCellsAttr?: boolean;
	SizeWithCellsAttr?: boolean;
	XdrFrom: CT_Marker;
	XdrTo: CT_Marker;
}

// EG_ExtensionList ...
export class EG_ExtensionList {
	Ext: Array<CT_Extension>;
}

// CT_ExtensionList ...
export class CT_ExtensionList {
	EG_ExtensionList: EG_ExtensionList;
}

// CalcChain ...
export type CalcChain = CT_CalcChain;

// CT_CalcChain ...
export class CT_CalcChain {
	C: Array<CT_CalcCell>;
	ExtLst?: CT_ExtensionList;
}

// CT_CalcCell ...
export class CT_CalcCell {
	RAttr: string;
	IAttr?: number;
	SAttr?: boolean;
	LAttr?: boolean;
	TAttr?: boolean;
	AAttr?: boolean;
}

// Comments ...
export type Comments = CT_Comments;

// CT_Comments ...
export class CT_Comments {
	Authors: CT_Authors;
	CommentList: CT_CommentList;
	ExtLst?: CT_ExtensionList;
}

// CT_Authors ...
export class CT_Authors {
	Author?: string;
}

// CT_CommentList ...
export class CT_CommentList {
	Comment?: Array<CT_Comment>;
}

// CT_Comment ...
export class CT_Comment {
	RefAttr: string;
	AuthorIdAttr: number;
	GuidAttr?: string;
	ShapeIdAttr?: number;
	Text: CT_Rst;
	CommentPr?: CT_CommentPr;
}

// CT_CommentPr ...
export class CT_CommentPr {
	LockedAttr?: boolean;
	DefaultSizeAttr?: boolean;
	PrintAttr?: boolean;
	DisabledAttr?: boolean;
	AutoFillAttr?: boolean;
	AutoLineAttr?: boolean;
	AltTextAttr?: string;
	TextHAlignAttr?: string;
	TextVAlignAttr?: string;
	LockTextAttr?: boolean;
	JustLastXAttr?: boolean;
	AutoScaleAttr?: boolean;
	Anchor: CT_ObjectAnchor;
}

// ST_TextHAlign ...
export enum ST_TextHAlign {
	left = 'left',
	center = 'center',
	right = 'right',
	justify = 'justify',
	distributed = 'distributed',
}

// ST_TextVAlign ...
export enum ST_TextVAlign {
	top = 'top',
	center = 'center',
	bottom = 'bottom',
	justify = 'justify',
	distributed = 'distributed',
}

// MapInfo ...
export type MapInfo = CT_MapInfo;

// CT_MapInfo ...
export class CT_MapInfo {
	SelectionNamespacesAttr: string;
	Schema: Array<CT_Schema>;
	Map: Array<CT_Map>;
}

// CT_Schema ...
export class CT_Schema {
	IDAttr: string;
	SchemaRefAttr?: string;
	NamespaceAttr?: string;
	SchemaLanguageAttr?: string;
}

// CT_Map ...
export class CT_Map {
	IDAttr: number;
	NameAttr: string;
	RootElementAttr: string;
	SchemaIDAttr: string;
	ShowImportExportValidationErrorsAttr: boolean;
	AutoFitAttr: boolean;
	AppendAttr: boolean;
	PreserveSortAFLayoutAttr: boolean;
	PreserveFormatAttr: boolean;
	DataBinding?: CT_DataBinding;
}

// CT_DataBinding ...
export class CT_DataBinding {
	DataBindingNameAttr?: string;
	FileBindingAttr?: boolean;
	ConnectionIDAttr?: number;
	FileBindingNameAttr?: string;
	DataBindingLoadModeAttr: number;
}

// Connections ...
export type Connections = CT_Connections;

// CT_Connections ...
export class CT_Connections {
	Connection: Array<CT_Connection>;
}

// CT_Connection ...
export class CT_Connection {
	IdAttr: number;
	SourceFileAttr?: string;
	OdcFileAttr?: string;
	KeepAliveAttr?: boolean;
	IntervalAttr?: number;
	NameAttr?: string;
	DescriptionAttr?: string;
	TypeAttr?: number;
	ReconnectionMethodAttr?: number;
	RefreshedVersionAttr: any;
	MinRefreshableVersionAttr?: any;
	SavePasswordAttr?: boolean;
	NewAttr?: boolean;
	DeletedAttr?: boolean;
	OnlyUseConnectionFileAttr?: boolean;
	BackgroundAttr?: boolean;
	RefreshOnLoadAttr?: boolean;
	SaveDataAttr?: boolean;
	CredentialsAttr?: string;
	SingleSignOnIdAttr?: string;
	DbPr?: CT_DbPr;
	OlapPr?: CT_OlapPr;
	WebPr?: CT_WebPr;
	TextPr?: CT_TextPr;
	Parameters?: CT_Parameters;
	ExtLst?: CT_ExtensionList;
}

// ST_CredMethod ...
export enum ST_CredMethod {
	integrated = 'integrated',
	none = 'none',
	stored = 'stored',
	prompt = 'prompt',
}

// CT_DbPr ...
export class CT_DbPr {
	ConnectionAttr: string;
	CommandAttr?: string;
	ServerCommandAttr?: string;
	CommandTypeAttr?: number;
}

// CT_OlapPr ...
export class CT_OlapPr {
	LocalAttr?: boolean;
	LocalConnectionAttr?: string;
	LocalRefreshAttr?: boolean;
	SendLocaleAttr?: boolean;
	RowDrillCountAttr?: number;
	ServerFillAttr?: boolean;
	ServerNumberFormatAttr?: boolean;
	ServerFontAttr?: boolean;
	ServerFontColorAttr?: boolean;
}

// CT_WebPr ...
export class CT_WebPr {
	XmlAttr?: boolean;
	SourceDataAttr?: boolean;
	ParsePreAttr?: boolean;
	ConsecutiveAttr?: boolean;
	FirstRowAttr?: boolean;
	Xl97Attr?: boolean;
	TextDatesAttr?: boolean;
	Xl2000Attr?: boolean;
	UrlAttr?: string;
	PostAttr?: string;
	HtmlTablesAttr?: boolean;
	HtmlFormatAttr?: string;
	EditPageAttr?: string;
	Tables?: CT_Tables;
}

// ST_HtmlFmt ...
export enum ST_HtmlFmt {
	none = 'none',
	rtf = 'rtf',
	all = 'all',
}

// CT_Parameters ...
export class CT_Parameters {
	CountAttr?: number;
	Parameter: Array<CT_Parameter>;
}

// CT_Parameter ...
export class CT_Parameter {
	NameAttr?: string;
	SqlTypeAttr?: number;
	ParameterTypeAttr?: string;
	RefreshOnChangeAttr?: boolean;
	PromptAttr?: string;
	BooleanAttr?: boolean;
	DoubleAttr?: number;
	IntegerAttr?: number;
	StringAttr?: string;
	CellAttr?: string;
}

// ST_ParameterType ...
export enum ST_ParameterType {
	prompt = 'prompt',
	value = 'value',
	cell = 'cell',
}

// CT_Tables ...
export class CT_Tables {
	CountAttr?: number;
	M?: Array<CT_TableMissing>;
	S?: Array<CT_XStringElement>;
	X?: Array<CT_Index>;
}

// CT_TableMissing ...
export class CT_TableMissing {
}

// CT_TextPr ...
export class CT_TextPr {
	PromptAttr?: boolean;
	FileTypeAttr?: string;
	CharacterSetAttr?: string;
	FirstRowAttr?: number;
	SourceFileAttr?: string;
	DelimitedAttr?: boolean;
	DecimalAttr?: string;
	ThousandsAttr?: string;
	TabAttr?: boolean;
	SpaceAttr?: boolean;
	CommaAttr?: boolean;
	SemicolonAttr?: boolean;
	ConsecutiveAttr?: boolean;
	QualifierAttr?: string;
	DelimiterAttr?: string;
	TextFields?: CT_TextFields;
}

// ST_FileType ...
export enum ST_FileType {
	mac = 'mac',
	win = 'win',
	dos = 'dos',
	lin = 'lin',
	other = 'other',
}

// ST_Qualifier ...
export enum ST_Qualifier {
	doubleQuote = 'doubleQuote',
	singleQuote = 'singleQuote',
	none = 'none',
}

// CT_TextFields ...
export class CT_TextFields {
	CountAttr?: number;
	TextField: Array<CT_TextField>;
}

// CT_TextField ...
export class CT_TextField {
	TypeAttr?: string;
	PositionAttr?: number;
}

// ST_ExternalConnectionType ...
export enum ST_ExternalConnectionType {
	general = 'general',
	text = 'text',
	MDY = 'MDY',
	DMY = 'DMY',
	YMD = 'YMD',
	MYD = 'MYD',
	DYM = 'DYM',
	YDM = 'YDM',
	skip = 'skip',
	EMD = 'EMD',
}

// PivotCacheDefinition ...
export type PivotCacheDefinition = CT_PivotCacheDefinition;

// PivotCacheRecords ...
export type PivotCacheRecords = CT_PivotCacheRecords;

// PivotTableDefinition ...
export type PivotTableDefinition = CT_pivotTableDefinition;

// CT_PivotCacheDefinition ...
export class CT_PivotCacheDefinition {
	RIdAttr?: string;
	InvalidAttr?: boolean;
	SaveDataAttr?: boolean;
	RefreshOnLoadAttr?: boolean;
	OptimizeMemoryAttr?: boolean;
	EnableRefreshAttr?: boolean;
	RefreshedByAttr?: string;
	RefreshedDateIsoAttr?: string;
	BackgroundQueryAttr?: boolean;
	MissingItemsLimitAttr?: number;
	CreatedVersionAttr?: any;
	RefreshedVersionAttr?: any;
	MinRefreshableVersionAttr?: any;
	RecordCountAttr?: number;
	UpgradeOnRefreshAttr?: boolean;
	TupleCacheAttr?: boolean;
	SupportSubqueryAttr?: boolean;
	SupportAdvancedDrillAttr?: boolean;
	CacheSource: CT_CacheSource;
	CacheFields: CT_CacheFields;
	CacheHierarchies?: CT_CacheHierarchies;
	Kpis?: CT_PCDKPIs;
	TupleCache?: CT_TupleCache;
	CalculatedItems?: CT_CalculatedItems;
	CalculatedMembers?: CT_CalculatedMembers;
	Dimensions?: CT_Dimensions;
	MeasureGroups?: CT_MeasureGroups;
	Maps?: CT_MeasureDimensionMaps;
	ExtLst?: CT_ExtensionList;
}

// CT_CacheFields ...
export class CT_CacheFields {
	CountAttr?: number;
	CacheField?: Array<CT_CacheField>;
}

// CT_CacheField ...
export class CT_CacheField {
	NameAttr: string;
	CaptionAttr?: string;
	PropertyNameAttr?: string;
	ServerFieldAttr?: boolean;
	UniqueListAttr?: boolean;
	NumFmtIdAttr?: number;
	FormulaAttr?: string;
	SqlTypeAttr?: number;
	HierarchyAttr?: number;
	LevelAttr?: number;
	DatabaseFieldAttr?: boolean;
	MappingCountAttr?: number;
	MemberPropertyFieldAttr?: boolean;
	SharedItems?: CT_SharedItems;
	FieldGroup?: CT_FieldGroup;
	MpMap?: Array<CT_X>;
	ExtLst?: CT_ExtensionList;
}

// CT_CacheSource ...
export class CT_CacheSource {
	TypeAttr: string;
	ConnectionIdAttr?: number;
	WorksheetSource?: CT_WorksheetSource;
	Consolidation?: CT_Consolidation;
	ExtLst?: CT_ExtensionList;
}

// ST_SourceType ...
export enum ST_SourceType {
	worksheet = 'worksheet',
	external = 'external',
	consolidation = 'consolidation',
	scenario = 'scenario',
}

// CT_WorksheetSource ...
export class CT_WorksheetSource {
	RefAttr?: string;
	NameAttr?: string;
	SheetAttr?: string;
	RIdAttr?: string;
}

// CT_Consolidation ...
export class CT_Consolidation {
	AutoPageAttr?: boolean;
	Pages?: CT_Pages;
	RangeSets: CT_RangeSets;
}

// CT_Pages ...
export class CT_Pages {
	CountAttr?: number;
	Page: Array<CT_PCDSCPage>;
}

// CT_PCDSCPage ...
export class CT_PCDSCPage {
	CountAttr?: number;
	PageItem?: Array<CT_PageItem>;
}

// CT_PageItem ...
export class CT_PageItem {
	NameAttr: string;
}

// CT_RangeSets ...
export class CT_RangeSets {
	CountAttr?: number;
	RangeSet: Array<CT_RangeSet>;
}

// CT_RangeSet ...
export class CT_RangeSet {
	I1Attr?: number;
	I2Attr?: number;
	I3Attr?: number;
	I4Attr?: number;
	RefAttr?: string;
	NameAttr?: string;
	SheetAttr?: string;
	RIdAttr?: string;
}

// CT_SharedItems ...
export class CT_SharedItems {
	ContainsSemiMixedTypesAttr?: boolean;
	ContainsNonDateAttr?: boolean;
	ContainsDateAttr?: boolean;
	ContainsStringAttr?: boolean;
	ContainsBlankAttr?: boolean;
	ContainsMixedTypesAttr?: boolean;
	ContainsNumberAttr?: boolean;
	ContainsIntegerAttr?: boolean;
	MinValueAttr?: number;
	MaxValueAttr?: number;
	MinDateAttr?: string;
	MaxDateAttr?: string;
	CountAttr?: number;
	LongTextAttr?: boolean;
	M?: Array<CT_Missing>;
	N?: Array<CT_Number>;
	B?: Array<CT_Boolean>;
	E?: Array<CT_Error>;
	S?: Array<CT_String>;
	D?: Array<CT_DateTime>;
}

// CT_Missing ...
export class CT_Missing {
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	InAttr?: number;
	BcAttr?: Uint8Array;
	FcAttr?: Uint8Array;
	IAttr?: boolean;
	UnAttr?: boolean;
	StAttr?: boolean;
	BAttr?: boolean;
	Tpls?: Array<CT_Tuples>;
	X?: Array<CT_X>;
}

// CT_Number ...
export class CT_Number {
	VAttr: number;
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	InAttr?: number;
	BcAttr?: Uint8Array;
	FcAttr?: Uint8Array;
	IAttr?: boolean;
	UnAttr?: boolean;
	StAttr?: boolean;
	BAttr?: boolean;
	Tpls?: Array<CT_Tuples>;
	X?: Array<CT_X>;
}

// CT_Boolean ...
export class CT_Boolean {
	VAttr: boolean;
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	X?: Array<CT_X>;
}

// CT_Error ...
export class CT_Error {
	VAttr: string;
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	InAttr?: number;
	BcAttr?: Uint8Array;
	FcAttr?: Uint8Array;
	IAttr?: boolean;
	UnAttr?: boolean;
	StAttr?: boolean;
	BAttr?: boolean;
	Tpls?: CT_Tuples;
	X?: Array<CT_X>;
}

// CT_String ...
export class CT_String {
	VAttr: string;
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	InAttr?: number;
	BcAttr?: Uint8Array;
	FcAttr?: Uint8Array;
	IAttr?: boolean;
	UnAttr?: boolean;
	StAttr?: boolean;
	BAttr?: boolean;
	Tpls?: Array<CT_Tuples>;
	X?: Array<CT_X>;
}

// CT_DateTime ...
export class CT_DateTime {
	VAttr: string;
	UAttr?: boolean;
	FAttr?: boolean;
	CAttr?: string;
	CpAttr?: number;
	X?: Array<CT_X>;
}

// CT_FieldGroup ...
export class CT_FieldGroup {
	ParAttr?: number;
	BaseAttr?: number;
	RangePr?: CT_RangePr;
	DiscretePr?: CT_DiscretePr;
	GroupItems?: CT_GroupItems;
}

// CT_RangePr ...
export class CT_RangePr {
	AutoStartAttr?: boolean;
	AutoEndAttr?: boolean;
	GroupByAttr?: string;
	StartNumAttr?: number;
	EndNumAttr?: number;
	StartDateAttr?: string;
	EndDateAttr?: string;
	GroupIntervalAttr?: number;
}

// ST_GroupBy ...
export enum ST_GroupBy {
	range = 'range',
	seconds = 'seconds',
	minutes = 'minutes',
	hours = 'hours',
	days = 'days',
	months = 'months',
	quarters = 'quarters',
	years = 'years',
}

// CT_DiscretePr ...
export class CT_DiscretePr {
	CountAttr?: number;
	X: Array<CT_Index>;
}

// CT_GroupItems ...
export class CT_GroupItems {
	CountAttr?: number;
	M?: Array<CT_Missing>;
	N?: Array<CT_Number>;
	B?: Array<CT_Boolean>;
	E?: Array<CT_Error>;
	S?: Array<CT_String>;
	D?: Array<CT_DateTime>;
}

// CT_PivotCacheRecords ...
export class CT_PivotCacheRecords {
	CountAttr?: number;
	R?: Array<CT_Record>;
	ExtLst?: CT_ExtensionList;
}

// CT_Record ...
export class CT_Record {
	M?: Array<CT_Missing>;
	N?: Array<CT_Number>;
	B?: Array<CT_Boolean>;
	E?: Array<CT_Error>;
	S?: Array<CT_String>;
	D?: Array<CT_DateTime>;
	X?: Array<CT_Index>;
}

// CT_PCDKPIs ...
export class CT_PCDKPIs {
	CountAttr?: number;
	Kpi?: Array<CT_PCDKPI>;
}

// CT_PCDKPI ...
export class CT_PCDKPI {
	UniqueNameAttr: string;
	CaptionAttr?: string;
	DisplayFolderAttr?: string;
	MeasureGroupAttr?: string;
	ParentAttr?: string;
	ValueAttr: string;
	GoalAttr?: string;
	StatusAttr?: string;
	TrendAttr?: string;
	WeightAttr?: string;
	TimeAttr?: string;
}

// CT_CacheHierarchies ...
export class CT_CacheHierarchies {
	CountAttr?: number;
	CacheHierarchy?: Array<CT_CacheHierarchy>;
}

// CT_CacheHierarchy ...
export class CT_CacheHierarchy {
	UniqueNameAttr: string;
	CaptionAttr?: string;
	MeasureAttr?: boolean;
	SetAttr?: boolean;
	ParentSetAttr?: number;
	IconSetAttr?: number;
	AttributeAttr?: boolean;
	TimeAttr?: boolean;
	KeyAttributeAttr?: boolean;
	DefaultMemberUniqueNameAttr?: string;
	AllUniqueNameAttr?: string;
	AllCaptionAttr?: string;
	DimensionUniqueNameAttr?: string;
	DisplayFolderAttr?: string;
	MeasureGroupAttr?: string;
	MeasuresAttr?: boolean;
	CountAttr: number;
	OneFieldAttr?: boolean;
	MemberValueDatatypeAttr?: number;
	UnbalancedAttr?: boolean;
	UnbalancedGroupAttr?: boolean;
	HiddenAttr?: boolean;
	FieldsUsage?: CT_FieldsUsage;
	GroupLevels?: CT_GroupLevels;
	ExtLst?: CT_ExtensionList;
}

// CT_FieldsUsage ...
export class CT_FieldsUsage {
	CountAttr?: number;
	FieldUsage?: Array<CT_FieldUsage>;
}

// CT_FieldUsage ...
export class CT_FieldUsage {
	XAttr: number;
}

// CT_GroupLevels ...
export class CT_GroupLevels {
	CountAttr?: number;
	GroupLevel: Array<CT_GroupLevel>;
}

// CT_GroupLevel ...
export class CT_GroupLevel {
	UniqueNameAttr: string;
	CaptionAttr: string;
	UserAttr?: boolean;
	CustomRollUpAttr?: boolean;
	Groups?: CT_Groups;
	ExtLst?: CT_ExtensionList;
}

// CT_Groups ...
export class CT_Groups {
	CountAttr?: number;
	Group: Array<CT_LevelGroup>;
}

// CT_LevelGroup ...
export class CT_LevelGroup {
	NameAttr: string;
	UniqueNameAttr: string;
	CaptionAttr: string;
	UniqueParentAttr?: string;
	IdAttr?: number;
	GroupMembers: CT_GroupMembers;
}

// CT_GroupMembers ...
export class CT_GroupMembers {
	CountAttr?: number;
	GroupMember: Array<CT_GroupMember>;
}

// CT_GroupMember ...
export class CT_GroupMember {
	UniqueNameAttr: string;
	GroupAttr?: boolean;
}

// CT_TupleCache ...
export class CT_TupleCache {
	Entries?: CT_PCDSDTCEntries;
	Sets?: CT_Sets;
	QueryCache?: CT_QueryCache;
	ServerFormats?: CT_ServerFormats;
	ExtLst?: CT_ExtensionList;
}

// CT_ServerFormat ...
export class CT_ServerFormat {
	CultureAttr?: string;
	FormatAttr?: string;
}

// CT_ServerFormats ...
export class CT_ServerFormats {
	CountAttr?: number;
	ServerFormat?: Array<CT_ServerFormat>;
}

// CT_PCDSDTCEntries ...
export class CT_PCDSDTCEntries {
	CountAttr?: number;
	M?: Array<CT_Missing>;
	N?: Array<CT_Number>;
	E?: Array<CT_Error>;
	S?: Array<CT_String>;
}

// CT_Tuples ...
export class CT_Tuples {
	CAttr?: number;
	Tpl: Array<CT_Tuple>;
}

// CT_Tuple ...
export class CT_Tuple {
	FldAttr?: number;
	HierAttr?: number;
	ItemAttr: number;
}

// CT_Sets ...
export class CT_Sets {
	CountAttr?: number;
	Set: Array<CT_Set>;
}

// CT_Set ...
export class CT_Set {
	CountAttr?: number;
	MaxRankAttr: number;
	SetDefinitionAttr: string;
	SortTypeAttr?: string;
	QueryFailedAttr?: boolean;
	Tpls?: Array<CT_Tuples>;
	SortByTuple?: CT_Tuples;
}

// ST_SortType ...
export enum ST_SortType {
	none = 'none',
	ascending = 'ascending',
	descending = 'descending',
	ascendingAlpha = 'ascendingAlpha',
	descendingAlpha = 'descendingAlpha',
	ascendingNatural = 'ascendingNatural',
	descendingNatural = 'descendingNatural',
}

// CT_QueryCache ...
export class CT_QueryCache {
	CountAttr?: number;
	Query: Array<CT_Query>;
}

// CT_Query ...
export class CT_Query {
	MdxAttr: string;
	Tpls?: CT_Tuples;
}

// CT_CalculatedItems ...
export class CT_CalculatedItems {
	CountAttr?: number;
	CalculatedItem: Array<CT_CalculatedItem>;
}

// CT_CalculatedItem ...
export class CT_CalculatedItem {
	FieldAttr?: number;
	FormulaAttr?: string;
	PivotArea: CT_PivotArea;
	ExtLst?: CT_ExtensionList;
}

// CT_CalculatedMembers ...
export class CT_CalculatedMembers {
	CountAttr?: number;
	CalculatedMember: Array<CT_CalculatedMember>;
}

// CT_CalculatedMember ...
export class CT_CalculatedMember {
	NameAttr: string;
	MdxAttr: string;
	MemberNameAttr?: string;
	HierarchyAttr?: string;
	ParentAttr?: string;
	SolveOrderAttr?: number;
	SetAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_pivotTableDefinition ...
export class CT_pivotTableDefinition {
	AG_AutoFormat: AG_AutoFormat;
	NameAttr: string;
	CacheIdAttr: number;
	DataOnRowsAttr?: boolean;
	DataPositionAttr?: number;
	DataCaptionAttr: string;
	GrandTotalCaptionAttr?: string;
	ErrorCaptionAttr?: string;
	ShowErrorAttr?: boolean;
	MissingCaptionAttr?: string;
	ShowMissingAttr?: boolean;
	PageStyleAttr?: string;
	PivotTableStyleAttr?: string;
	VacatedStyleAttr?: string;
	TagAttr?: string;
	UpdatedVersionAttr?: any;
	MinRefreshableVersionAttr?: any;
	AsteriskTotalsAttr?: boolean;
	ShowItemsAttr?: boolean;
	EditDataAttr?: boolean;
	DisableFieldListAttr?: boolean;
	ShowCalcMbrsAttr?: boolean;
	VisualTotalsAttr?: boolean;
	ShowMultipleLabelAttr?: boolean;
	ShowDataDropDownAttr?: boolean;
	ShowDrillAttr?: boolean;
	PrintDrillAttr?: boolean;
	ShowMemberPropertyTipsAttr?: boolean;
	ShowDataTipsAttr?: boolean;
	EnableWizardAttr?: boolean;
	EnableDrillAttr?: boolean;
	EnableFieldPropertiesAttr?: boolean;
	PreserveFormattingAttr?: boolean;
	UseAutoFormattingAttr?: boolean;
	PageWrapAttr?: number;
	PageOverThenDownAttr?: boolean;
	SubtotalHiddenItemsAttr?: boolean;
	RowGrandTotalsAttr?: boolean;
	ColGrandTotalsAttr?: boolean;
	FieldPrintTitlesAttr?: boolean;
	ItemPrintTitlesAttr?: boolean;
	MergeItemAttr?: boolean;
	ShowDropZonesAttr?: boolean;
	CreatedVersionAttr?: any;
	IndentAttr?: number;
	ShowEmptyRowAttr?: boolean;
	ShowEmptyColAttr?: boolean;
	ShowHeadersAttr?: boolean;
	CompactAttr?: boolean;
	OutlineAttr?: boolean;
	OutlineDataAttr?: boolean;
	CompactDataAttr?: boolean;
	PublishedAttr?: boolean;
	GridDropZonesAttr?: boolean;
	ImmersiveAttr?: boolean;
	MultipleFieldFiltersAttr?: boolean;
	ChartFormatAttr?: number;
	RowHeaderCaptionAttr?: string;
	ColHeaderCaptionAttr?: string;
	FieldListSortAscendingAttr?: boolean;
	MdxSubqueriesAttr?: boolean;
	CustomListSortAttr?: boolean;
	Location: CT_Location;
	PivotFields?: CT_PivotFields;
	RowFields?: CT_RowFields;
	RowItems?: CT_rowItems;
	ColFields?: CT_ColFields;
	ColItems?: CT_colItems;
	PageFields?: CT_PageFields;
	DataFields?: CT_DataFields;
	Formats?: CT_Formats;
	ConditionalFormats?: CT_ConditionalFormats;
	ChartFormats?: CT_ChartFormats;
	PivotHierarchies?: CT_PivotHierarchies;
	PivotTableStyleInfo?: CT_PivotTableStyle;
	Filters?: CT_PivotFilters;
	RowHierarchiesUsage?: CT_RowHierarchiesUsage;
	ColHierarchiesUsage?: CT_ColHierarchiesUsage;
	ExtLst?: CT_ExtensionList;
}

// CT_Location ...
export class CT_Location {
	RefAttr: string;
	FirstHeaderRowAttr: number;
	FirstDataRowAttr: number;
	FirstDataColAttr: number;
	RowPageCountAttr?: number;
	ColPageCountAttr?: number;
}

// CT_PivotFields ...
export class CT_PivotFields {
	CountAttr?: number;
	PivotField: Array<CT_PivotField>;
}

// CT_PivotField ...
export class CT_PivotField {
	NameAttr?: string;
	AxisAttr?: string;
	DataFieldAttr?: boolean;
	SubtotalCaptionAttr?: string;
	ShowDropDownsAttr?: boolean;
	HiddenLevelAttr?: boolean;
	UniqueMemberPropertyAttr?: string;
	CompactAttr?: boolean;
	AllDrilledAttr?: boolean;
	NumFmtIdAttr?: number;
	OutlineAttr?: boolean;
	SubtotalTopAttr?: boolean;
	DragToRowAttr?: boolean;
	DragToColAttr?: boolean;
	MultipleItemSelectionAllowedAttr?: boolean;
	DragToPageAttr?: boolean;
	DragToDataAttr?: boolean;
	DragOffAttr?: boolean;
	ShowAllAttr?: boolean;
	InsertBlankRowAttr?: boolean;
	ServerFieldAttr?: boolean;
	InsertPageBreakAttr?: boolean;
	AutoShowAttr?: boolean;
	TopAutoShowAttr?: boolean;
	HideNewItemsAttr?: boolean;
	MeasureFilterAttr?: boolean;
	IncludeNewItemsInFilterAttr?: boolean;
	ItemPageCountAttr?: number;
	SortTypeAttr?: string;
	DataSourceSortAttr?: boolean;
	NonAutoSortDefaultAttr?: boolean;
	RankByAttr?: number;
	DefaultSubtotalAttr?: boolean;
	SumSubtotalAttr?: boolean;
	CountASubtotalAttr?: boolean;
	AvgSubtotalAttr?: boolean;
	MaxSubtotalAttr?: boolean;
	MinSubtotalAttr?: boolean;
	ProductSubtotalAttr?: boolean;
	CountSubtotalAttr?: boolean;
	StdDevSubtotalAttr?: boolean;
	StdDevPSubtotalAttr?: boolean;
	VarSubtotalAttr?: boolean;
	VarPSubtotalAttr?: boolean;
	ShowPropCellAttr?: boolean;
	ShowPropTipAttr?: boolean;
	ShowPropAsCaptionAttr?: boolean;
	DefaultAttributeDrillStateAttr?: boolean;
	Items?: CT_Items;
	AutoSortScope?: CT_AutoSortScope;
	ExtLst?: CT_ExtensionList;
}

// CT_AutoSortScope ...
export class CT_AutoSortScope {
	PivotArea: CT_PivotArea;
}

// CT_Items ...
export class CT_Items {
	CountAttr?: number;
	Item: Array<CT_Item>;
}

// CT_Item ...
export class CT_Item {
	NAttr?: string;
	TAttr?: string;
	HAttr?: boolean;
	SAttr?: boolean;
	SdAttr?: boolean;
	FAttr?: boolean;
	MAttr?: boolean;
	CAttr?: boolean;
	XAttr?: number;
	DAttr?: boolean;
	EAttr?: boolean;
}

// CT_PageFields ...
export class CT_PageFields {
	CountAttr?: number;
	PageField: Array<CT_PageField>;
}

// CT_PageField ...
export class CT_PageField {
	FldAttr: number;
	ItemAttr?: number;
	HierAttr?: number;
	NameAttr?: string;
	CapAttr?: string;
	ExtLst?: CT_ExtensionList;
}

// CT_DataFields ...
export class CT_DataFields {
	CountAttr?: number;
	DataField: Array<CT_DataField>;
}

// CT_DataField ...
export class CT_DataField {
	NameAttr?: string;
	FldAttr: number;
	SubtotalAttr?: string;
	ShowDataAsAttr?: string;
	BaseFieldAttr?: number;
	BaseItemAttr?: number;
	NumFmtIdAttr?: number;
	ExtLst?: CT_ExtensionList;
}

// CT_rowItems ...
export class CT_rowItems {
	CountAttr?: number;
	I: Array<CT_I>;
}

// CT_colItems ...
export class CT_colItems {
	CountAttr?: number;
	I: Array<CT_I>;
}

// CT_I ...
export class CT_I {
	TAttr?: string;
	RAttr?: number;
	IAttr?: number;
	X?: Array<CT_X>;
}

// CT_X ...
export class CT_X {
	VAttr?: number;
}

// CT_RowFields ...
export class CT_RowFields {
	CountAttr?: number;
	Field: Array<CT_Field>;
}

// CT_ColFields ...
export class CT_ColFields {
	CountAttr?: number;
	Field: Array<CT_Field>;
}

// CT_Field ...
export class CT_Field {
	XAttr: number;
}

// CT_Formats ...
export class CT_Formats {
	CountAttr?: number;
	Format: Array<CT_Format>;
}

// CT_Format ...
export class CT_Format {
	ActionAttr?: string;
	DxfIdAttr?: number;
	PivotArea: CT_PivotArea;
	ExtLst?: CT_ExtensionList;
}

// CT_ConditionalFormats ...
export class CT_ConditionalFormats {
	CountAttr?: number;
	ConditionalFormat: Array<CT_ConditionalFormat>;
}

// CT_ConditionalFormat ...
export class CT_ConditionalFormat {
	ScopeAttr?: string;
	TypeAttr?: string;
	PriorityAttr: number;
	PivotAreas: CT_PivotAreas;
	ExtLst?: CT_ExtensionList;
}

// CT_PivotAreas ...
export class CT_PivotAreas {
	CountAttr?: number;
	PivotArea?: Array<CT_PivotArea>;
}

// ST_Scope ...
export enum ST_Scope {
	selection = 'selection',
	data = 'data',
	field = 'field',
}

// ST_Type ...
export enum ST_Type {
	none = 'none',
	all = 'all',
	row = 'row',
	column = 'column',
}

// CT_ChartFormats ...
export class CT_ChartFormats {
	CountAttr?: number;
	ChartFormat: Array<CT_ChartFormat>;
}

// CT_ChartFormat ...
export class CT_ChartFormat {
	ChartAttr: number;
	FormatAttr: number;
	SeriesAttr?: boolean;
	PivotArea: CT_PivotArea;
}

// CT_PivotHierarchies ...
export class CT_PivotHierarchies {
	CountAttr?: number;
	PivotHierarchy: Array<CT_PivotHierarchy>;
}

// CT_PivotHierarchy ...
export class CT_PivotHierarchy {
	OutlineAttr?: boolean;
	MultipleItemSelectionAllowedAttr?: boolean;
	SubtotalTopAttr?: boolean;
	ShowInFieldListAttr?: boolean;
	DragToRowAttr?: boolean;
	DragToColAttr?: boolean;
	DragToPageAttr?: boolean;
	DragToDataAttr?: boolean;
	DragOffAttr?: boolean;
	IncludeNewItemsInFilterAttr?: boolean;
	CaptionAttr?: string;
	Mps?: CT_MemberProperties;
	Members?: Array<CT_Members>;
	ExtLst?: CT_ExtensionList;
}

// CT_RowHierarchiesUsage ...
export class CT_RowHierarchiesUsage {
	CountAttr?: number;
	RowHierarchyUsage: Array<CT_HierarchyUsage>;
}

// CT_ColHierarchiesUsage ...
export class CT_ColHierarchiesUsage {
	CountAttr?: number;
	ColHierarchyUsage: Array<CT_HierarchyUsage>;
}

// CT_HierarchyUsage ...
export class CT_HierarchyUsage {
	HierarchyUsageAttr: number;
}

// CT_MemberProperties ...
export class CT_MemberProperties {
	CountAttr?: number;
	Mp: Array<CT_MemberProperty>;
}

// CT_MemberProperty ...
export class CT_MemberProperty {
	NameAttr?: string;
	ShowCellAttr?: boolean;
	ShowTipAttr?: boolean;
	ShowAsCaptionAttr?: boolean;
	NameLenAttr?: number;
	PPosAttr?: number;
	PLenAttr?: number;
	LevelAttr?: number;
	FieldAttr: number;
}

// CT_Members ...
export class CT_Members {
	CountAttr?: number;
	LevelAttr?: number;
	Member: Array<CT_Member>;
}

// CT_Member ...
export class CT_Member {
	NameAttr: string;
}

// CT_Dimensions ...
export class CT_Dimensions {
	CountAttr?: number;
	Dimension?: Array<CT_PivotDimension>;
}

// CT_PivotDimension ...
export class CT_PivotDimension {
	MeasureAttr?: boolean;
	NameAttr: string;
	UniqueNameAttr: string;
	CaptionAttr: string;
}

// CT_MeasureGroups ...
export class CT_MeasureGroups {
	CountAttr?: number;
	MeasureGroup?: Array<CT_MeasureGroup>;
}

// CT_MeasureDimensionMaps ...
export class CT_MeasureDimensionMaps {
	CountAttr?: number;
	Map?: Array<CT_MeasureDimensionMap>;
}

// CT_MeasureGroup ...
export class CT_MeasureGroup {
	NameAttr: string;
	CaptionAttr: string;
}

// CT_MeasureDimensionMap ...
export class CT_MeasureDimensionMap {
	MeasureGroupAttr?: number;
	DimensionAttr?: number;
}

// CT_PivotTableStyle ...
export class CT_PivotTableStyle {
	NameAttr?: string;
	ShowRowHeadersAttr?: boolean;
	ShowColHeadersAttr?: boolean;
	ShowRowStripesAttr?: boolean;
	ShowColStripesAttr?: boolean;
	ShowLastColumnAttr?: boolean;
}

// CT_PivotFilters ...
export class CT_PivotFilters {
	CountAttr?: number;
	Filter?: Array<CT_PivotFilter>;
}

// CT_PivotFilter ...
export class CT_PivotFilter {
	FldAttr: number;
	MpFldAttr?: number;
	TypeAttr: string;
	EvalOrderAttr?: number;
	IdAttr: number;
	IMeasureHierAttr?: number;
	IMeasureFldAttr?: number;
	NameAttr?: string;
	DescriptionAttr?: string;
	StringValue1Attr?: string;
	StringValue2Attr?: string;
	AutoFilter: CT_AutoFilter;
	ExtLst?: CT_ExtensionList;
}

// ST_ShowDataAs ...
export enum ST_ShowDataAs {
	normal = 'normal',
	difference = 'difference',
	percent = 'percent',
	percentDiff = 'percentDiff',
	runTotal = 'runTotal',
	percentOfRow = 'percentOfRow',
	percentOfCol = 'percentOfCol',
	percentOfTotal = 'percentOfTotal',
	index = 'index',
}

// ST_ItemType ...
export enum ST_ItemType {
	data = 'data',
	default = 'default',
	sum = 'sum',
	countA = 'countA',
	avg = 'avg',
	max = 'max',
	min = 'min',
	product = 'product',
	count = 'count',
	stdDev = 'stdDev',
	stdDevP = 'stdDevP',
	var = 'var',
	varP = 'varP',
	grand = 'grand',
	blank = 'blank',
}

// ST_FormatAction ...
export enum ST_FormatAction {
	blank = 'blank',
	formatting = 'formatting',
	drill = 'drill',
	formula = 'formula',
}

// ST_FieldSortType ...
export enum ST_FieldSortType {
	manual = 'manual',
	ascending = 'ascending',
	descending = 'descending',
}

// ST_PivotFilterType ...
export enum ST_PivotFilterType {
	unknown = 'unknown',
	count = 'count',
	percent = 'percent',
	sum = 'sum',
	captionEqual = 'captionEqual',
	captionNotEqual = 'captionNotEqual',
	captionBeginsWith = 'captionBeginsWith',
	captionNotBeginsWith = 'captionNotBeginsWith',
	captionEndsWith = 'captionEndsWith',
	captionNotEndsWith = 'captionNotEndsWith',
	captionContains = 'captionContains',
	captionNotContains = 'captionNotContains',
	captionGreaterThan = 'captionGreaterThan',
	captionGreaterThanOrEqual = 'captionGreaterThanOrEqual',
	captionLessThan = 'captionLessThan',
	captionLessThanOrEqual = 'captionLessThanOrEqual',
	captionBetween = 'captionBetween',
	captionNotBetween = 'captionNotBetween',
	valueEqual = 'valueEqual',
	valueNotEqual = 'valueNotEqual',
	valueGreaterThan = 'valueGreaterThan',
	valueGreaterThanOrEqual = 'valueGreaterThanOrEqual',
	valueLessThan = 'valueLessThan',
	valueLessThanOrEqual = 'valueLessThanOrEqual',
	valueBetween = 'valueBetween',
	valueNotBetween = 'valueNotBetween',
	dateEqual = 'dateEqual',
	dateNotEqual = 'dateNotEqual',
	dateOlderThan = 'dateOlderThan',
	dateOlderThanOrEqual = 'dateOlderThanOrEqual',
	dateNewerThan = 'dateNewerThan',
	dateNewerThanOrEqual = 'dateNewerThanOrEqual',
	dateBetween = 'dateBetween',
	dateNotBetween = 'dateNotBetween',
	tomorrow = 'tomorrow',
	today = 'today',
	yesterday = 'yesterday',
	nextWeek = 'nextWeek',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextMonth = 'nextMonth',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextQuarter = 'nextQuarter',
	thisQuarter = 'thisQuarter',
	lastQuarter = 'lastQuarter',
	nextYear = 'nextYear',
	thisYear = 'thisYear',
	lastYear = 'lastYear',
	yearToDate = 'yearToDate',
	Q1 = 'Q1',
	Q2 = 'Q2',
	Q3 = 'Q3',
	Q4 = 'Q4',
	M1 = 'M1',
	M2 = 'M2',
	M3 = 'M3',
	M4 = 'M4',
	M5 = 'M5',
	M6 = 'M6',
	M7 = 'M7',
	M8 = 'M8',
	M9 = 'M9',
	M10 = 'M10',
	M11 = 'M11',
	M12 = 'M12',
}

// CT_PivotArea ...
export class CT_PivotArea {
	FieldAttr?: number;
	TypeAttr?: string;
	DataOnlyAttr?: boolean;
	LabelOnlyAttr?: boolean;
	GrandRowAttr?: boolean;
	GrandColAttr?: boolean;
	CacheIndexAttr?: boolean;
	OutlineAttr?: boolean;
	OffsetAttr?: string;
	CollapsedLevelsAreSubtotalsAttr?: boolean;
	AxisAttr?: string;
	FieldPositionAttr?: number;
	References?: CT_PivotAreaReferences;
	ExtLst?: CT_ExtensionList;
}

// ST_PivotAreaType ...
export enum ST_PivotAreaType {
	none = 'none',
	normal = 'normal',
	data = 'data',
	all = 'all',
	origin = 'origin',
	button = 'button',
	topEnd = 'topEnd',
}

// CT_PivotAreaReferences ...
export class CT_PivotAreaReferences {
	CountAttr?: number;
	Reference: Array<CT_PivotAreaReference>;
}

// CT_PivotAreaReference ...
export class CT_PivotAreaReference {
	FieldAttr?: number;
	CountAttr?: number;
	SelectedAttr?: boolean;
	ByPositionAttr?: boolean;
	RelativeAttr?: boolean;
	DefaultSubtotalAttr?: boolean;
	SumSubtotalAttr?: boolean;
	CountASubtotalAttr?: boolean;
	AvgSubtotalAttr?: boolean;
	MaxSubtotalAttr?: boolean;
	MinSubtotalAttr?: boolean;
	ProductSubtotalAttr?: boolean;
	CountSubtotalAttr?: boolean;
	StdDevSubtotalAttr?: boolean;
	StdDevPSubtotalAttr?: boolean;
	VarSubtotalAttr?: boolean;
	VarPSubtotalAttr?: boolean;
	X?: Array<CT_Index>;
	ExtLst?: CT_ExtensionList;
}

// CT_Index ...
export class CT_Index {
	VAttr: number;
}

// ST_Axis ...
export enum ST_Axis {
	axisRow = 'axisRow',
	axisCol = 'axisCol',
	axisPage = 'axisPage',
	axisValues = 'axisValues',
}

// QueryTable ...
export type QueryTable = CT_QueryTable;

// CT_QueryTable ...
export class CT_QueryTable {
	AG_AutoFormat: AG_AutoFormat;
	NameAttr: string;
	HeadersAttr?: boolean;
	RowNumbersAttr?: boolean;
	DisableRefreshAttr?: boolean;
	BackgroundRefreshAttr?: boolean;
	FirstBackgroundRefreshAttr?: boolean;
	RefreshOnLoadAttr?: boolean;
	GrowShrinkTypeAttr?: string;
	FillFormulasAttr?: boolean;
	RemoveDataOnSaveAttr?: boolean;
	DisableEditAttr?: boolean;
	PreserveFormattingAttr?: boolean;
	AdjustColumnWidthAttr?: boolean;
	IntermediateAttr?: boolean;
	ConnectionIdAttr: number;
	QueryTableRefresh?: CT_QueryTableRefresh;
	ExtLst?: CT_ExtensionList;
}

// CT_QueryTableRefresh ...
export class CT_QueryTableRefresh {
	PreserveSortFilterLayoutAttr?: boolean;
	FieldIdWrappedAttr?: boolean;
	HeadersInLastRefreshAttr?: boolean;
	MinimumVersionAttr?: any;
	NextIdAttr?: number;
	UnboundColumnsLeftAttr?: number;
	UnboundColumnsRightAttr?: number;
	QueryTableFields: CT_QueryTableFields;
	QueryTableDeletedFields?: CT_QueryTableDeletedFields;
	SortState?: CT_SortState;
	ExtLst?: CT_ExtensionList;
}

// CT_QueryTableDeletedFields ...
export class CT_QueryTableDeletedFields {
	CountAttr?: number;
	DeletedField: Array<CT_DeletedField>;
}

// CT_DeletedField ...
export class CT_DeletedField {
	NameAttr: string;
}

// CT_QueryTableFields ...
export class CT_QueryTableFields {
	CountAttr?: number;
	QueryTableField?: Array<CT_QueryTableField>;
}

// CT_QueryTableField ...
export class CT_QueryTableField {
	IdAttr: number;
	NameAttr?: string;
	DataBoundAttr?: boolean;
	RowNumbersAttr?: boolean;
	FillFormulasAttr?: boolean;
	ClippedAttr?: boolean;
	TableColumnIdAttr?: number;
	ExtLst?: CT_ExtensionList;
}

// ST_GrowShrinkType ...
export enum ST_GrowShrinkType {
	insertDelete = 'insertDelete',
	insertClear = 'insertClear',
	overwriteClear = 'overwriteClear',
}

// Sst ...
export type Sst = CT_Sst;

// CT_Sst ...
export class CT_Sst {
	CountAttr?: number;
	UniqueCountAttr?: number;
	Si?: Array<CT_Rst>;
	ExtLst?: CT_ExtensionList;
}

// ST_PhoneticType ...
export enum ST_PhoneticType {
	halfwidthKatakana = 'halfwidthKatakana',
	fullwidthKatakana = 'fullwidthKatakana',
	Hiragana = 'Hiragana',
	noConversion = 'noConversion',
}

// ST_PhoneticAlignment ...
export enum ST_PhoneticAlignment {
	noControl = 'noControl',
	left = 'left',
	center = 'center',
	distributed = 'distributed',
}

// CT_PhoneticRun ...
export class CT_PhoneticRun {
	SbAttr: number;
	EbAttr: number;
	T: string;
}

// CT_RElt ...
export class CT_RElt {
	RPr?: CT_RPrElt;
	T: string;
}

// CT_RPrElt ...
export class CT_RPrElt {
	RFont?: Array<CT_FontName>;
	Charset?: Array<CT_IntProperty>;
	Family?: Array<CT_IntProperty>;
	B?: Array<CT_BooleanProperty>;
	I?: Array<CT_BooleanProperty>;
	Strike?: Array<CT_BooleanProperty>;
	Outline?: Array<CT_BooleanProperty>;
	Shadow?: Array<CT_BooleanProperty>;
	Condense?: Array<CT_BooleanProperty>;
	Extend?: Array<CT_BooleanProperty>;
	Color?: Array<CT_Color>;
	Sz?: Array<CT_FontSize>;
	U?: Array<CT_UnderlineProperty>;
	VertAlign?: Array<CT_VerticalAlignFontProperty>;
	Scheme?: Array<CT_FontScheme>;
}

// CT_Rst ...
export class CT_Rst {
	T?: string;
	R?: Array<CT_RElt>;
	RPh?: Array<CT_PhoneticRun>;
	PhoneticPr?: CT_PhoneticPr;
}

// CT_PhoneticPr ...
export class CT_PhoneticPr {
	FontIdAttr: number;
	TypeAttr?: string;
	AlignmentAttr?: string;
}

// Headers ...
export type Headers = CT_RevisionHeaders;

// Revisions ...
export type Revisions = CT_Revisions;

// CT_RevisionHeaders ...
export class CT_RevisionHeaders {
	GuidAttr: string;
	LastGuidAttr?: string;
	SharedAttr?: boolean;
	DiskRevisionsAttr?: boolean;
	HistoryAttr?: boolean;
	TrackRevisionsAttr?: boolean;
	ExclusiveAttr?: boolean;
	RevisionIdAttr?: number;
	VersionAttr?: number;
	KeepChangeHistoryAttr?: boolean;
	ProtectedAttr?: boolean;
	PreserveHistoryAttr?: number;
	Header: Array<CT_RevisionHeader>;
}

// CT_Revisions ...
export class CT_Revisions {
	Rrc?: Array<CT_RevisionRowColumn>;
	Rm?: Array<CT_RevisionMove>;
	Rcv?: Array<CT_RevisionCustomView>;
	Rsnm?: Array<CT_RevisionSheetRename>;
	Ris?: Array<CT_RevisionInsertSheet>;
	Rcc?: Array<CT_RevisionCellChange>;
	Rfmt?: Array<CT_RevisionFormatting>;
	Raf?: Array<CT_RevisionAutoFormatting>;
	Rdn?: Array<CT_RevisionDefinedName>;
	Rcmt?: Array<CT_RevisionComment>;
	Rqt?: Array<CT_RevisionQueryTableField>;
	Rcft?: Array<CT_RevisionConflict>;
}

// AG_RevData ...
export class AG_RevData {
	RIdAttr: number;
	UaAttr: boolean | null;
	RaAttr: boolean | null;
}

// CT_RevisionHeader ...
export class CT_RevisionHeader {
	GuidAttr: string;
	DateTimeAttr: string;
	MaxSheetIdAttr: number;
	UserNameAttr: string;
	RIdAttr: string;
	MinRIdAttr?: number;
	MaxRIdAttr?: number;
	SheetIdMap: CT_SheetIdMap;
	ReviewedList?: CT_ReviewedRevisions;
	ExtLst?: CT_ExtensionList;
}

// CT_SheetIdMap ...
export class CT_SheetIdMap {
	CountAttr?: number;
	SheetId: Array<CT_SheetId>;
}

// CT_SheetId ...
export class CT_SheetId {
	ValAttr: number;
}

// CT_ReviewedRevisions ...
export class CT_ReviewedRevisions {
	CountAttr?: number;
	Reviewed: Array<CT_Reviewed>;
}

// CT_Reviewed ...
export class CT_Reviewed {
	RIdAttr: number;
}

// CT_UndoInfo ...
export class CT_UndoInfo {
	IndexAttr: number;
	ExpAttr: string;
	Ref3DAttr?: boolean;
	ArrayAttr?: boolean;
	VAttr?: boolean;
	NfAttr?: boolean;
	CsAttr?: boolean;
	DrAttr: string;
	DnAttr?: string;
	RAttr?: string;
	SIdAttr?: number;
}

// CT_RevisionRowColumn ...
export class CT_RevisionRowColumn {
	AG_RevData: AG_RevData;
	SIdAttr: number;
	EolAttr?: boolean;
	RefAttr: string;
	ActionAttr: string;
	EdgeAttr?: boolean;
	Undo?: Array<CT_UndoInfo>;
	Rcc?: Array<CT_RevisionCellChange>;
	Rfmt?: Array<CT_RevisionFormatting>;
}

// CT_RevisionMove ...
export class CT_RevisionMove {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	SourceAttr: string;
	DestinationAttr: string;
	SourceSheetIdAttr?: number;
	Undo?: Array<CT_UndoInfo>;
	Rcc?: Array<CT_RevisionCellChange>;
	Rfmt?: Array<CT_RevisionFormatting>;
}

// CT_RevisionCustomView ...
export class CT_RevisionCustomView {
	GuidAttr: string;
	ActionAttr: string;
}

// CT_RevisionSheetRename ...
export class CT_RevisionSheetRename {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	OldNameAttr: string;
	NewNameAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_RevisionInsertSheet ...
export class CT_RevisionInsertSheet {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	NameAttr: string;
	SheetPositionAttr: number;
}

// CT_RevisionCellChange ...
export class CT_RevisionCellChange {
	AG_RevData: AG_RevData;
	SIdAttr: number;
	OdxfAttr?: boolean;
	XfDxfAttr?: boolean;
	SAttr?: boolean;
	DxfAttr?: boolean;
	NumFmtIdAttr?: number;
	QuotePrefixAttr?: boolean;
	OldQuotePrefixAttr?: boolean;
	PhAttr?: boolean;
	OldPhAttr?: boolean;
	EndOfListFormulaUpdateAttr?: boolean;
	Oc?: CT_Cell;
	Nc: CT_Cell;
	Odxf?: CT_Dxf;
	Ndxf?: CT_Dxf;
	ExtLst?: CT_ExtensionList;
}

// CT_RevisionFormatting ...
export class CT_RevisionFormatting {
	SheetIdAttr: number;
	XfDxfAttr?: boolean;
	SAttr?: boolean;
	SqrefAttr: ST_Sqref;
	StartAttr?: number;
	LengthAttr?: number;
	Dxf?: CT_Dxf;
	ExtLst?: CT_ExtensionList;
}

// CT_RevisionAutoFormatting ...
export class CT_RevisionAutoFormatting {
	AG_AutoFormat: AG_AutoFormat;
	SheetIdAttr: number;
	RefAttr: string;
}

// CT_RevisionComment ...
export class CT_RevisionComment {
	SheetIdAttr: number;
	CellAttr: string;
	GuidAttr: string;
	ActionAttr?: string;
	AlwaysShowAttr?: boolean;
	OldAttr?: boolean;
	HiddenRowAttr?: boolean;
	HiddenColumnAttr?: boolean;
	AuthorAttr: string;
	OldLengthAttr?: number;
	NewLengthAttr?: number;
}

// CT_RevisionDefinedName ...
export class CT_RevisionDefinedName {
	AG_RevData: AG_RevData;
	LocalSheetIdAttr?: number;
	CustomViewAttr?: boolean;
	NameAttr: string;
	FunctionAttr?: boolean;
	OldFunctionAttr?: boolean;
	FunctionGroupIdAttr?: any;
	OldFunctionGroupIdAttr?: any;
	ShortcutKeyAttr?: any;
	OldShortcutKeyAttr?: any;
	HiddenAttr?: boolean;
	OldHiddenAttr?: boolean;
	CustomMenuAttr?: string;
	OldCustomMenuAttr?: string;
	DescriptionAttr?: string;
	OldDescriptionAttr?: string;
	HelpAttr?: string;
	OldHelpAttr?: string;
	StatusBarAttr?: string;
	OldStatusBarAttr?: string;
	CommentAttr?: string;
	OldCommentAttr?: string;
	Formula?: string;
	OldFormula?: string;
	ExtLst?: CT_ExtensionList;
}

// CT_RevisionConflict ...
export class CT_RevisionConflict {
	AG_RevData: AG_RevData;
	SheetIdAttr?: number;
}

// CT_RevisionQueryTableField ...
export class CT_RevisionQueryTableField {
	SheetIdAttr: number;
	RefAttr: string;
	FieldIdAttr: number;
}

// ST_rwColActionType ...
export enum ST_rwColActionType {
	insertRow = 'insertRow',
	deleteRow = 'deleteRow',
	insertCol = 'insertCol',
	deleteCol = 'deleteCol',
}

// ST_RevisionAction ...
export enum ST_RevisionAction {
	add = 'add',
	delete = 'delete',
}

// ST_FormulaExpression ...
export enum ST_FormulaExpression {
	ref = 'ref',
	refError = 'refError',
	area = 'area',
	areaError = 'areaError',
	computedArea = 'computedArea',
}

// Users ...
export type Users = CT_Users;

// CT_Users ...
export class CT_Users {
	CountAttr?: number;
	UserInfo?: Array<CT_SharedUser>;
}

// CT_SharedUser ...
export class CT_SharedUser {
	GuidAttr: string;
	NameAttr: string;
	IdAttr: number;
	DateTimeAttr: string;
	ExtLst?: CT_ExtensionList;
}

// Worksheet ...
export type Worksheet = CT_Worksheet;

// Chartsheet ...
export type Chartsheet = CT_Chartsheet;

// Dialogsheet ...
export type Dialogsheet = CT_Dialogsheet;

// CT_Macrosheet ...
export class CT_Macrosheet {
	SheetPr?: CT_SheetPr;
	Dimension?: CT_SheetDimension;
	SheetViews?: CT_SheetViews;
	SheetFormatPr?: CT_SheetFormatPr;
	Cols?: Array<CT_Cols>;
	SheetData: CT_SheetData;
	SheetProtection?: CT_SheetProtection;
	AutoFilter?: CT_AutoFilter;
	SortState?: CT_SortState;
	DataConsolidate?: CT_DataConsolidate;
	CustomSheetViews?: CT_CustomSheetViews;
	PhoneticPr?: CT_PhoneticPr;
	ConditionalFormatting?: Array<CT_ConditionalFormatting>;
	PrintOptions?: CT_PrintOptions;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_PageSetup;
	HeaderFooter?: CT_HeaderFooter;
	RowBreaks?: CT_PageBreak;
	ColBreaks?: CT_PageBreak;
	CustomProperties?: CT_CustomProperties;
	Drawing?: CT_Drawing;
	DrawingHF?: CT_DrawingHF;
	Picture?: CT_SheetBackgroundPicture;
	OleObjects?: CT_OleObjects;
	ExtLst?: CT_ExtensionList;
}

// CT_Dialogsheet ...
export class CT_Dialogsheet {
	SheetPr?: CT_SheetPr;
	SheetViews?: CT_SheetViews;
	SheetFormatPr?: CT_SheetFormatPr;
	SheetProtection?: CT_SheetProtection;
	CustomSheetViews?: CT_CustomSheetViews;
	PrintOptions?: CT_PrintOptions;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_PageSetup;
	HeaderFooter?: CT_HeaderFooter;
	Drawing?: CT_Drawing;
	DrawingHF?: CT_DrawingHF;
	OleObjects?: CT_OleObjects;
	Controls?: CT_Controls;
	ExtLst?: CT_ExtensionList;
}

// CT_Worksheet ...
export class CT_Worksheet {
	SheetPr?: CT_SheetPr;
	Dimension?: CT_SheetDimension;
	SheetViews?: CT_SheetViews;
	SheetFormatPr?: CT_SheetFormatPr;
	Cols?: Array<CT_Cols>;
	SheetData: CT_SheetData;
	SheetCalcPr?: CT_SheetCalcPr;
	SheetProtection?: CT_SheetProtection;
	ProtectedRanges?: CT_ProtectedRanges;
	Scenarios?: CT_Scenarios;
	AutoFilter?: CT_AutoFilter;
	SortState?: CT_SortState;
	DataConsolidate?: CT_DataConsolidate;
	CustomSheetViews?: CT_CustomSheetViews;
	MergeCells?: CT_MergeCells;
	PhoneticPr?: CT_PhoneticPr;
	ConditionalFormatting?: Array<CT_ConditionalFormatting>;
	DataValidations?: CT_DataValidations;
	Hyperlinks?: CT_Hyperlinks;
	PrintOptions?: CT_PrintOptions;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_PageSetup;
	HeaderFooter?: CT_HeaderFooter;
	RowBreaks?: CT_PageBreak;
	ColBreaks?: CT_PageBreak;
	CustomProperties?: CT_CustomProperties;
	CellWatches?: CT_CellWatches;
	IgnoredErrors?: CT_IgnoredErrors;
	SmartTags?: CT_SmartTags;
	Drawing?: CT_Drawing;
	DrawingHF?: CT_DrawingHF;
	Picture?: CT_SheetBackgroundPicture;
	OleObjects?: CT_OleObjects;
	Controls?: CT_Controls;
	WebPublishItems?: CT_WebPublishItems;
	TableParts?: CT_TableParts;
	ExtLst?: CT_ExtensionList;
}

// CT_SheetData ...
export class CT_SheetData {
	Row?: Array<CT_Row>;
}

// CT_SheetCalcPr ...
export class CT_SheetCalcPr {
	FullCalcOnLoadAttr?: boolean;
}

// CT_SheetFormatPr ...
export class CT_SheetFormatPr {
	BaseColWidthAttr?: number;
	DefaultColWidthAttr?: number;
	DefaultRowHeightAttr: number;
	CustomHeightAttr?: boolean;
	ZeroHeightAttr?: boolean;
	ThickTopAttr?: boolean;
	ThickBottomAttr?: boolean;
	OutlineLevelRowAttr?: any;
	OutlineLevelColAttr?: any;
}

// CT_Cols ...
export class CT_Cols {
	Col: Array<CT_Col>;
}

// CT_Col ...
export class CT_Col {
	MinAttr: number;
	MaxAttr: number;
	WidthAttr?: number;
	StyleAttr?: number;
	HiddenAttr?: boolean;
	BestFitAttr?: boolean;
	CustomWidthAttr?: boolean;
	PhoneticAttr?: boolean;
	OutlineLevelAttr?: any;
	CollapsedAttr?: boolean;
}

// ST_CellSpan ...
export type ST_CellSpan = string;

// ST_CellSpans ...
export type ST_CellSpans = string;

// CT_Row ...
export class CT_Row {
	RAttr?: number;
	SpansAttr?: ST_CellSpans;
	SAttr?: number;
	CustomFormatAttr?: boolean;
	HtAttr?: number;
	HiddenAttr?: boolean;
	CustomHeightAttr?: boolean;
	OutlineLevelAttr?: any;
	CollapsedAttr?: boolean;
	ThickTopAttr?: boolean;
	ThickBotAttr?: boolean;
	PhAttr?: boolean;
	C?: Array<CT_Cell>;
	ExtLst?: CT_ExtensionList;
}

// CT_Cell ...
export class CT_Cell {
	RAttr?: string;
	SAttr?: number;
	TAttr?: string;
	CmAttr?: number;
	VmAttr?: number;
	PhAttr?: boolean;
	F?: CT_CellFormula;
	V?: string;
	Is?: CT_Rst;
	ExtLst?: CT_ExtensionList;
}

// ST_CellType ...
export enum ST_CellType {
	b = 'b',
	d = 'd',
	n = 'n',
	e = 'e',
	s = 's',
	str = 'str',
	inlineStr = 'inlineStr',
}

// ST_CellFormulaType ...
export enum ST_CellFormulaType {
	normal = 'normal',
	array = 'array',
	dataTable = 'dataTable',
	shared = 'shared',
}

// CT_SheetPr ...
export class CT_SheetPr {
	SyncHorizontalAttr?: boolean;
	SyncVerticalAttr?: boolean;
	SyncRefAttr?: string;
	TransitionEvaluationAttr?: boolean;
	TransitionEntryAttr?: boolean;
	PublishedAttr?: boolean;
	CodeNameAttr?: string;
	FilterModeAttr?: boolean;
	EnableFormatConditionsCalculationAttr?: boolean;
	TabColor?: CT_Color;
	OutlinePr?: CT_OutlinePr;
	PageSetUpPr?: CT_PageSetUpPr;
}

// CT_SheetDimension ...
export class CT_SheetDimension {
	RefAttr: string;
}

// CT_SheetViews ...
export class CT_SheetViews {
	SheetView: Array<CT_SheetView>;
	ExtLst?: CT_ExtensionList;
}

// CT_SheetView ...
export class CT_SheetView {
	WindowProtectionAttr?: boolean;
	ShowFormulasAttr?: boolean;
	ShowGridLinesAttr?: boolean;
	ShowRowColHeadersAttr?: boolean;
	ShowZerosAttr?: boolean;
	RightToLeftAttr?: boolean;
	TabSelectedAttr?: boolean;
	ShowRulerAttr?: boolean;
	ShowOutlineSymbolsAttr?: boolean;
	DefaultGridColorAttr?: boolean;
	ShowWhiteSpaceAttr?: boolean;
	ViewAttr?: string;
	TopLeftCellAttr?: string;
	ColorIdAttr?: number;
	ZoomScaleAttr?: number;
	ZoomScaleNormalAttr?: number;
	ZoomScaleSheetLayoutViewAttr?: number;
	ZoomScalePageLayoutViewAttr?: number;
	WorkbookViewIdAttr: number;
	Pane?: CT_Pane;
	Selection?: Array<CT_Selection>;
	PivotSelection?: Array<CT_PivotSelection>;
	ExtLst?: CT_ExtensionList;
}

// CT_Pane ...
export class CT_Pane {
	XSplitAttr?: number;
	YSplitAttr?: number;
	TopLeftCellAttr?: string;
	ActivePaneAttr?: string;
	StateAttr?: string;
}

// CT_PivotSelection ...
export class CT_PivotSelection {
	PaneAttr?: string;
	ShowHeaderAttr?: boolean;
	LabelAttr?: boolean;
	DataAttr?: boolean;
	ExtendableAttr?: boolean;
	CountAttr?: number;
	AxisAttr?: string;
	DimensionAttr?: number;
	StartAttr?: number;
	MinAttr?: number;
	MaxAttr?: number;
	ActiveRowAttr?: number;
	ActiveColAttr?: number;
	PreviousRowAttr?: number;
	PreviousColAttr?: number;
	ClickAttr?: number;
	RIdAttr?: string;
	PivotArea: CT_PivotArea;
}

// CT_Selection ...
export class CT_Selection {
	PaneAttr?: string;
	ActiveCellAttr?: string;
	ActiveCellIdAttr?: number;
	SqrefAttr?: ST_Sqref;
}

// ST_Pane ...
export enum ST_Pane {
	bottomRight = 'bottomRight',
	topRight = 'topRight',
	bottomLeft = 'bottomLeft',
	topLeft = 'topLeft',
}

// CT_PageBreak ...
export class CT_PageBreak {
	CountAttr?: number;
	ManualBreakCountAttr?: number;
	Brk?: Array<CT_Break>;
}

// CT_Break ...
export class CT_Break {
	IdAttr?: number;
	MinAttr?: number;
	MaxAttr?: number;
	ManAttr?: boolean;
	PtAttr?: boolean;
}

// ST_SheetViewType ...
export enum ST_SheetViewType {
	normal = 'normal',
	pageBreakPreview = 'pageBreakPreview',
	pageLayout = 'pageLayout',
}

// CT_OutlinePr ...
export class CT_OutlinePr {
	ApplyStylesAttr?: boolean;
	SummaryBelowAttr?: boolean;
	SummaryRightAttr?: boolean;
	ShowOutlineSymbolsAttr?: boolean;
}

// CT_PageSetUpPr ...
export class CT_PageSetUpPr {
	AutoPageBreaksAttr?: boolean;
	FitToPageAttr?: boolean;
}

// CT_DataConsolidate ...
export class CT_DataConsolidate {
	FunctionAttr?: string;
	StartLabelsAttr?: boolean;
	TopLabelsAttr?: boolean;
	LinkAttr?: boolean;
	DataRefs?: CT_DataRefs;
}

// ST_DataConsolidateFunction ...
export enum ST_DataConsolidateFunction {
	average = 'average',
	count = 'count',
	countNums = 'countNums',
	max = 'max',
	min = 'min',
	product = 'product',
	stdDev = 'stdDev',
	stdDevp = 'stdDevp',
	sum = 'sum',
	var = 'var',
	varp = 'varp',
}

// CT_DataRefs ...
export class CT_DataRefs {
	CountAttr?: number;
	DataRef?: Array<CT_DataRef>;
}

// CT_DataRef ...
export class CT_DataRef {
	RefAttr?: string;
	NameAttr?: string;
	SheetAttr?: string;
	RIdAttr?: string;
}

// CT_MergeCells ...
export class CT_MergeCells {
	CountAttr?: number;
	MergeCell: Array<CT_MergeCell>;
}

// CT_MergeCell ...
export class CT_MergeCell {
	RefAttr: string;
}

// CT_SmartTags ...
export class CT_SmartTags {
	CellSmartTags: Array<CT_CellSmartTags>;
}

// CT_CellSmartTags ...
export class CT_CellSmartTags {
	RAttr: string;
	CellSmartTag: Array<CT_CellSmartTag>;
}

// CT_CellSmartTag ...
export class CT_CellSmartTag {
	TypeAttr: number;
	DeletedAttr?: boolean;
	XmlBasedAttr?: boolean;
	CellSmartTagPr?: Array<CT_CellSmartTagPr>;
}

// CT_CellSmartTagPr ...
export class CT_CellSmartTagPr {
	KeyAttr: string;
	ValAttr: string;
}

// CT_Drawing ...
export class CT_Drawing {
	RIdAttr: string;
}

// CT_DrawingHF ...
export class CT_DrawingHF {
	RIdAttr: string;
	LhoAttr?: number;
	LheAttr?: number;
	LhfAttr?: number;
	ChoAttr?: number;
	CheAttr?: number;
	ChfAttr?: number;
	RhoAttr?: number;
	RheAttr?: number;
	RhfAttr?: number;
	LfoAttr?: number;
	LfeAttr?: number;
	LffAttr?: number;
	CfoAttr?: number;
	CfeAttr?: number;
	CffAttr?: number;
	RfoAttr?: number;
	RfeAttr?: number;
	RffAttr?: number;
}

// CT_CustomSheetViews ...
export class CT_CustomSheetViews {
	CustomSheetView: Array<CT_CustomSheetView>;
}

// CT_CustomSheetView ...
export class CT_CustomSheetView {
	GuidAttr: string;
	ScaleAttr?: number;
	ColorIdAttr?: number;
	ShowPageBreaksAttr?: boolean;
	ShowFormulasAttr?: boolean;
	ShowGridLinesAttr?: boolean;
	ShowRowColAttr?: boolean;
	OutlineSymbolsAttr?: boolean;
	ZeroValuesAttr?: boolean;
	FitToPageAttr?: boolean;
	PrintAreaAttr?: boolean;
	FilterAttr?: boolean;
	ShowAutoFilterAttr?: boolean;
	HiddenRowsAttr?: boolean;
	HiddenColumnsAttr?: boolean;
	StateAttr?: string;
	FilterUniqueAttr?: boolean;
	ViewAttr?: string;
	ShowRulerAttr?: boolean;
	TopLeftCellAttr?: string;
	Pane?: CT_Pane;
	Selection?: CT_Selection;
	RowBreaks?: CT_PageBreak;
	ColBreaks?: CT_PageBreak;
	PageMargins?: CT_PageMargins;
	PrintOptions?: CT_PrintOptions;
	PageSetup?: CT_PageSetup;
	HeaderFooter?: CT_HeaderFooter;
	AutoFilter?: CT_AutoFilter;
	ExtLst?: CT_ExtensionList;
}

// CT_DataValidations ...
export class CT_DataValidations {
	DisablePromptsAttr?: boolean;
	XWindowAttr?: number;
	YWindowAttr?: number;
	CountAttr?: number;
	DataValidation: Array<CT_DataValidation>;
}

// CT_DataValidation ...
export class CT_DataValidation {
	TypeAttr?: string;
	ErrorStyleAttr?: string;
	ImeModeAttr?: string;
	OperatorAttr?: string;
	AllowBlankAttr?: boolean;
	ShowDropDownAttr?: boolean;
	ShowInputMessageAttr?: boolean;
	ShowErrorMessageAttr?: boolean;
	ErrorTitleAttr?: string;
	ErrorAttr?: string;
	PromptTitleAttr?: string;
	PromptAttr?: string;
	SqrefAttr: ST_Sqref;
	Formula1?: string;
	Formula2?: string;
}

// ST_DataValidationType ...
export enum ST_DataValidationType {
	none = 'none',
	whole = 'whole',
	decimal = 'decimal',
	list = 'list',
	date = 'date',
	time = 'time',
	textLength = 'textLength',
	custom = 'custom',
}

// ST_DataValidationOperator ...
export enum ST_DataValidationOperator {
	between = 'between',
	notBetween = 'notBetween',
	equal = 'equal',
	notEqual = 'notEqual',
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	greaterThan = 'greaterThan',
	greaterThanOrEqual = 'greaterThanOrEqual',
}

// ST_DataValidationErrorStyle ...
export enum ST_DataValidationErrorStyle {
	stop = 'stop',
	warning = 'warning',
	information = 'information',
}

// ST_DataValidationImeMode ...
export enum ST_DataValidationImeMode {
	noControl = 'noControl',
	off = 'off',
	on = 'on',
	disabled = 'disabled',
	hiragana = 'hiragana',
	fullKatakana = 'fullKatakana',
	halfKatakana = 'halfKatakana',
	fullAlpha = 'fullAlpha',
	halfAlpha = 'halfAlpha',
	fullHangul = 'fullHangul',
	halfHangul = 'halfHangul',
}

// ST_CfType ...
export enum ST_CfType {
	expression = 'expression',
	cellIs = 'cellIs',
	colorScale = 'colorScale',
	dataBar = 'dataBar',
	iconSet = 'iconSet',
	top10 = 'top10',
	uniqueValues = 'uniqueValues',
	duplicateValues = 'duplicateValues',
	containsText = 'containsText',
	notContainsText = 'notContainsText',
	beginsWith = 'beginsWith',
	endsWith = 'endsWith',
	containsBlanks = 'containsBlanks',
	notContainsBlanks = 'notContainsBlanks',
	containsErrors = 'containsErrors',
	notContainsErrors = 'notContainsErrors',
	timePeriod = 'timePeriod',
	aboveAverage = 'aboveAverage',
}

// ST_TimePeriod ...
export enum ST_TimePeriod {
	today = 'today',
	yesterday = 'yesterday',
	tomorrow = 'tomorrow',
	last7Days = 'last7Days',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextMonth = 'nextMonth',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextWeek = 'nextWeek',
}

// ST_ConditionalFormattingOperator ...
export enum ST_ConditionalFormattingOperator {
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	equal = 'equal',
	notEqual = 'notEqual',
	greaterThanOrEqual = 'greaterThanOrEqual',
	greaterThan = 'greaterThan',
	between = 'between',
	notBetween = 'notBetween',
	containsText = 'containsText',
	notContains = 'notContains',
	beginsWith = 'beginsWith',
	endsWith = 'endsWith',
}

// ST_CfvoType ...
export enum ST_CfvoType {
	num = 'num',
	percent = 'percent',
	max = 'max',
	min = 'min',
	formula = 'formula',
	percentile = 'percentile',
}

// CT_ConditionalFormatting ...
export class CT_ConditionalFormatting {
	PivotAttr?: boolean;
	SqrefAttr?: ST_Sqref;
	CfRule: Array<CT_CfRule>;
	ExtLst?: CT_ExtensionList;
}

// CT_CfRule ...
export class CT_CfRule {
	TypeAttr?: string;
	DxfIdAttr?: number;
	PriorityAttr: number;
	StopIfTrueAttr?: boolean;
	AboveAverageAttr?: boolean;
	PercentAttr?: boolean;
	BottomAttr?: boolean;
	OperatorAttr?: string;
	TextAttr?: string;
	TimePeriodAttr?: string;
	RankAttr?: number;
	StdDevAttr?: number;
	EqualAverageAttr?: boolean;
	Formula?: string;
	ColorScale?: CT_ColorScale;
	DataBar?: CT_DataBar;
	IconSet?: CT_IconSet;
	ExtLst?: CT_ExtensionList;
}

// CT_Hyperlinks ...
export class CT_Hyperlinks {
	Hyperlink: Array<CT_Hyperlink>;
}

// CT_Hyperlink ...
export class CT_Hyperlink {
	RefAttr: string;
	RIdAttr?: string;
	LocationAttr?: string;
	TooltipAttr?: string;
	DisplayAttr?: string;
}

// CT_CellFormula ...
export class CT_CellFormula {
	TAttr?: string;
	AcaAttr?: boolean;
	RefAttr?: string;
	Dt2DAttr?: boolean;
	DtrAttr?: boolean;
	Del1Attr?: boolean;
	Del2Attr?: boolean;
	R1Attr?: string;
	R2Attr?: string;
	CaAttr?: boolean;
	SiAttr?: number;
	BxAttr?: boolean;
	Value: string;
}

// CT_ColorScale ...
export class CT_ColorScale {
	Cfvo: Array<CT_Cfvo>;
	Color: Array<CT_Color>;
}

// CT_DataBar ...
export class CT_DataBar {
	MinLengthAttr?: number;
	MaxLengthAttr?: number;
	ShowValueAttr?: boolean;
	Cfvo: Array<CT_Cfvo>;
	Color: CT_Color;
}

// CT_IconSet ...
export class CT_IconSet {
	IconSetAttr?: string;
	ShowValueAttr?: boolean;
	PercentAttr?: boolean;
	ReverseAttr?: boolean;
	Cfvo: Array<CT_Cfvo>;
}

// CT_Cfvo ...
export class CT_Cfvo {
	TypeAttr: string;
	ValAttr?: string;
	GteAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_PageMargins ...
export class CT_PageMargins {
	LeftAttr: number;
	RightAttr: number;
	TopAttr: number;
	BottomAttr: number;
	HeaderAttr: number;
	FooterAttr: number;
}

// CT_PrintOptions ...
export class CT_PrintOptions {
	HorizontalCenteredAttr?: boolean;
	VerticalCenteredAttr?: boolean;
	HeadingsAttr?: boolean;
	GridLinesAttr?: boolean;
	GridLinesSetAttr?: boolean;
}

// CT_PageSetup ...
export class CT_PageSetup {
	PaperSizeAttr?: number;
	PaperHeightAttr?: string;
	PaperWidthAttr?: string;
	ScaleAttr?: number;
	FirstPageNumberAttr?: number;
	FitToWidthAttr?: number;
	FitToHeightAttr?: number;
	PageOrderAttr?: string;
	OrientationAttr?: string;
	UsePrinterDefaultsAttr?: boolean;
	BlackAndWhiteAttr?: boolean;
	DraftAttr?: boolean;
	CellCommentsAttr?: string;
	UseFirstPageNumberAttr?: boolean;
	ErrorsAttr?: string;
	HorizontalDpiAttr?: number;
	VerticalDpiAttr?: number;
	CopiesAttr?: number;
	RIdAttr?: string;
}

// ST_PageOrder ...
export enum ST_PageOrder {
	downThenOver = 'downThenOver',
	overThenDown = 'overThenDown',
}

// ST_Orientation ...
export enum ST_Orientation {
	default = 'default',
	portrait = 'portrait',
	landscape = 'landscape',
}

// ST_CellComments ...
export enum ST_CellComments {
	none = 'none',
	asDisplayed = 'asDisplayed',
	atEnd = 'atEnd',
}

// CT_HeaderFooter ...
export class CT_HeaderFooter {
	DifferentOddEvenAttr?: boolean;
	DifferentFirstAttr?: boolean;
	ScaleWithDocAttr?: boolean;
	AlignWithMarginsAttr?: boolean;
	OddHeader?: string;
	OddFooter?: string;
	EvenHeader?: string;
	EvenFooter?: string;
	FirstHeader?: string;
	FirstFooter?: string;
}

// ST_PrintError ...
export enum ST_PrintError {
	displayed = 'displayed',
	blank = 'blank',
	dash = 'dash',
	NA = 'NA',
}

// CT_Scenarios ...
export class CT_Scenarios {
	CurrentAttr?: number;
	ShowAttr?: number;
	SqrefAttr?: ST_Sqref;
	Scenario: Array<CT_Scenario>;
}

// CT_SheetProtection ...
export class CT_SheetProtection {
	AlgorithmNameAttr?: string;
	HashValueAttr?: Uint8Array;
	SaltValueAttr?: Uint8Array;
	SpinCountAttr?: number;
	SheetAttr?: boolean;
	ObjectsAttr?: boolean;
	ScenariosAttr?: boolean;
	FormatCellsAttr?: boolean;
	FormatColumnsAttr?: boolean;
	FormatRowsAttr?: boolean;
	InsertColumnsAttr?: boolean;
	InsertRowsAttr?: boolean;
	InsertHyperlinksAttr?: boolean;
	DeleteColumnsAttr?: boolean;
	DeleteRowsAttr?: boolean;
	SelectLockedCellsAttr?: boolean;
	SortAttr?: boolean;
	AutoFilterAttr?: boolean;
	PivotTablesAttr?: boolean;
	SelectUnlockedCellsAttr?: boolean;
}

// CT_ProtectedRanges ...
export class CT_ProtectedRanges {
	ProtectedRange: Array<CT_ProtectedRange>;
}

// CT_ProtectedRange ...
export class CT_ProtectedRange {
	SqrefAttr: ST_Sqref;
	NameAttr: string;
	AlgorithmNameAttr?: string;
	HashValueAttr?: Uint8Array;
	SaltValueAttr?: Uint8Array;
	SpinCountAttr?: number;
	SecurityDescriptor?: string;
}

// CT_Scenario ...
export class CT_Scenario {
	NameAttr: string;
	LockedAttr?: boolean;
	HiddenAttr?: boolean;
	CountAttr?: number;
	UserAttr?: string;
	CommentAttr?: string;
	InputCells: Array<CT_InputCells>;
}

// CT_InputCells ...
export class CT_InputCells {
	RAttr: string;
	DeletedAttr?: boolean;
	UndoneAttr?: boolean;
	ValAttr: string;
	NumFmtIdAttr?: number;
}

// CT_CellWatches ...
export class CT_CellWatches {
	CellWatch: Array<CT_CellWatch>;
}

// CT_CellWatch ...
export class CT_CellWatch {
	RAttr: string;
}

// CT_Chartsheet ...
export class CT_Chartsheet {
	SheetPr?: CT_ChartsheetPr;
	SheetViews: CT_ChartsheetViews;
	SheetProtection?: CT_ChartsheetProtection;
	CustomSheetViews?: CT_CustomChartsheetViews;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_CsPageSetup;
	HeaderFooter?: CT_HeaderFooter;
	Drawing: CT_Drawing;
	DrawingHF?: CT_DrawingHF;
	Picture?: CT_SheetBackgroundPicture;
	WebPublishItems?: CT_WebPublishItems;
	ExtLst?: CT_ExtensionList;
}

// CT_ChartsheetPr ...
export class CT_ChartsheetPr {
	PublishedAttr?: boolean;
	CodeNameAttr?: string;
	TabColor?: CT_Color;
}

// CT_ChartsheetViews ...
export class CT_ChartsheetViews {
	SheetView: Array<CT_ChartsheetView>;
	ExtLst?: CT_ExtensionList;
}

// CT_ChartsheetView ...
export class CT_ChartsheetView {
	TabSelectedAttr?: boolean;
	ZoomScaleAttr?: number;
	WorkbookViewIdAttr: number;
	ZoomToFitAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_ChartsheetProtection ...
export class CT_ChartsheetProtection {
	AlgorithmNameAttr?: string;
	HashValueAttr?: Uint8Array;
	SaltValueAttr?: Uint8Array;
	SpinCountAttr?: number;
	ContentAttr?: boolean;
	ObjectsAttr?: boolean;
}

// CT_CsPageSetup ...
export class CT_CsPageSetup {
	PaperSizeAttr?: number;
	PaperHeightAttr?: string;
	PaperWidthAttr?: string;
	FirstPageNumberAttr?: number;
	OrientationAttr?: string;
	UsePrinterDefaultsAttr?: boolean;
	BlackAndWhiteAttr?: boolean;
	DraftAttr?: boolean;
	UseFirstPageNumberAttr?: boolean;
	HorizontalDpiAttr?: number;
	VerticalDpiAttr?: number;
	CopiesAttr?: number;
	RIdAttr?: string;
}

// CT_CustomChartsheetViews ...
export class CT_CustomChartsheetViews {
	CustomSheetView?: Array<CT_CustomChartsheetView>;
}

// CT_CustomChartsheetView ...
export class CT_CustomChartsheetView {
	GuidAttr: string;
	ScaleAttr?: number;
	StateAttr?: string;
	ZoomToFitAttr?: boolean;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_CsPageSetup;
	HeaderFooter?: CT_HeaderFooter;
}

// CT_CustomProperties ...
export class CT_CustomProperties {
	CustomPr: Array<CT_CustomProperty>;
}

// CT_CustomProperty ...
export class CT_CustomProperty {
	NameAttr: string;
	RIdAttr: string;
}

// CT_OleObjects ...
export class CT_OleObjects {
	OleObject: Array<CT_OleObject>;
}

// CT_OleObject ...
export class CT_OleObject {
	ProgIdAttr?: string;
	DvAspectAttr?: string;
	LinkAttr?: string;
	OleUpdateAttr?: string;
	AutoLoadAttr?: boolean;
	ShapeIdAttr: number;
	RIdAttr?: string;
	ObjectPr?: CT_ObjectPr;
}

// CT_ObjectPr ...
export class CT_ObjectPr {
	LockedAttr?: boolean;
	DefaultSizeAttr?: boolean;
	PrintAttr?: boolean;
	DisabledAttr?: boolean;
	UiObjectAttr?: boolean;
	AutoFillAttr?: boolean;
	AutoLineAttr?: boolean;
	AutoPictAttr?: boolean;
	MacroAttr?: string;
	AltTextAttr?: string;
	DdeAttr?: boolean;
	RIdAttr?: string;
	Anchor: CT_ObjectAnchor;
}

// ST_DvAspect ...
export enum ST_DvAspect {
	DVASPECT_CONTENT = 'DVASPECT_CONTENT',
	DVASPECT_ICON = 'DVASPECT_ICON',
}

// ST_OleUpdate ...
export enum ST_OleUpdate {
	OLEUPDATE_ALWAYS = 'OLEUPDATE_ALWAYS',
	OLEUPDATE_ONCALL = 'OLEUPDATE_ONCALL',
}

// CT_WebPublishItems ...
export class CT_WebPublishItems {
	CountAttr?: number;
	WebPublishItem: Array<CT_WebPublishItem>;
}

// CT_WebPublishItem ...
export class CT_WebPublishItem {
	IdAttr: number;
	DivIdAttr: string;
	SourceTypeAttr: string;
	SourceRefAttr?: string;
	SourceObjectAttr?: string;
	DestinationFileAttr: string;
	TitleAttr?: string;
	AutoRepublishAttr?: boolean;
}

// CT_Controls ...
export class CT_Controls {
	Control: Array<CT_Control>;
}

// CT_Control ...
export class CT_Control {
	ShapeIdAttr: number;
	RIdAttr: string;
	NameAttr?: string;
	ControlPr?: CT_ControlPr;
}

// CT_ControlPr ...
export class CT_ControlPr {
	LockedAttr?: boolean;
	DefaultSizeAttr?: boolean;
	PrintAttr?: boolean;
	DisabledAttr?: boolean;
	RecalcAlwaysAttr?: boolean;
	UiObjectAttr?: boolean;
	AutoFillAttr?: boolean;
	AutoLineAttr?: boolean;
	AutoPictAttr?: boolean;
	MacroAttr?: string;
	AltTextAttr?: string;
	LinkedCellAttr?: string;
	ListFillRangeAttr?: string;
	CfAttr?: string;
	RIdAttr?: string;
	Anchor: CT_ObjectAnchor;
}

// ST_WebSourceType ...
export enum ST_WebSourceType {
	sheet = 'sheet',
	printArea = 'printArea',
	autoFilter = 'autoFilter',
	range = 'range',
	chart = 'chart',
	pivotTable = 'pivotTable',
	query = 'query',
	label = 'label',
}

// CT_IgnoredErrors ...
export class CT_IgnoredErrors {
	IgnoredError: Array<CT_IgnoredError>;
	ExtLst?: CT_ExtensionList;
}

// CT_IgnoredError ...
export class CT_IgnoredError {
	SqrefAttr: ST_Sqref;
	EvalErrorAttr?: boolean;
	TwoDigitTextYearAttr?: boolean;
	NumberStoredAsTextAttr?: boolean;
	FormulaAttr?: boolean;
	FormulaRangeAttr?: boolean;
	UnlockedFormulaAttr?: boolean;
	EmptyCellReferenceAttr?: boolean;
	ListDataValidationAttr?: boolean;
	CalculatedColumnAttr?: boolean;
}

// ST_PaneState ...
export enum ST_PaneState {
	split = 'split',
	frozen = 'frozen',
	frozenSplit = 'frozenSplit',
}

// CT_TableParts ...
export class CT_TableParts {
	CountAttr?: number;
	TablePart?: Array<CT_TablePart>;
}

// CT_TablePart ...
export class CT_TablePart {
	RIdAttr: string;
}

// Metadata ...
export type Metadata = CT_Metadata;

// CT_Metadata ...
export class CT_Metadata {
	MetadataTypes?: CT_MetadataTypes;
	MetadataStrings?: CT_MetadataStrings;
	MdxMetadata?: CT_MdxMetadata;
	FutureMetadata?: Array<CT_FutureMetadata>;
	CellMetadata?: CT_MetadataBlocks;
	ValueMetadata?: CT_MetadataBlocks;
	ExtLst?: CT_ExtensionList;
}

// CT_MetadataTypes ...
export class CT_MetadataTypes {
	CountAttr?: number;
	MetadataType: Array<CT_MetadataType>;
}

// CT_MetadataType ...
export class CT_MetadataType {
	NameAttr: string;
	MinSupportedVersionAttr: number;
	GhostRowAttr?: boolean;
	GhostColAttr?: boolean;
	EditAttr?: boolean;
	DeleteAttr?: boolean;
	CopyAttr?: boolean;
	PasteAllAttr?: boolean;
	PasteFormulasAttr?: boolean;
	PasteValuesAttr?: boolean;
	PasteFormatsAttr?: boolean;
	PasteCommentsAttr?: boolean;
	PasteDataValidationAttr?: boolean;
	PasteBordersAttr?: boolean;
	PasteColWidthsAttr?: boolean;
	PasteNumberFormatsAttr?: boolean;
	MergeAttr?: boolean;
	SplitFirstAttr?: boolean;
	SplitAllAttr?: boolean;
	RowColShiftAttr?: boolean;
	ClearAllAttr?: boolean;
	ClearFormatsAttr?: boolean;
	ClearContentsAttr?: boolean;
	ClearCommentsAttr?: boolean;
	AssignAttr?: boolean;
	CoerceAttr?: boolean;
	AdjustAttr?: boolean;
	CellMetaAttr?: boolean;
}

// CT_MetadataBlocks ...
export class CT_MetadataBlocks {
	CountAttr?: number;
	Bk: Array<CT_MetadataBlock>;
}

// CT_MetadataBlock ...
export class CT_MetadataBlock {
	Rc: Array<CT_MetadataRecord>;
}

// CT_MetadataRecord ...
export class CT_MetadataRecord {
	TAttr: number;
	VAttr: number;
}

// CT_FutureMetadata ...
export class CT_FutureMetadata {
	NameAttr: string;
	CountAttr?: number;
	Bk?: Array<CT_FutureMetadataBlock>;
	ExtLst?: CT_ExtensionList;
}

// CT_FutureMetadataBlock ...
export class CT_FutureMetadataBlock {
	ExtLst?: CT_ExtensionList;
}

// CT_MdxMetadata ...
export class CT_MdxMetadata {
	CountAttr?: number;
	Mdx: Array<CT_Mdx>;
}

// CT_Mdx ...
export class CT_Mdx {
	NAttr: number;
	FAttr: string;
	T?: CT_MdxTuple;
	Ms?: CT_MdxSet;
	P?: CT_MdxMemeberProp;
	K?: CT_MdxKPI;
}

// ST_MdxFunctionType ...
export enum ST_MdxFunctionType {
	m = 'm',
	v = 'v',
	s = 's',
	c = 'c',
	r = 'r',
	p = 'p',
	k = 'k',
}

// CT_MdxTuple ...
export class CT_MdxTuple {
	CAttr?: number;
	CtAttr?: string;
	SiAttr?: number;
	FiAttr?: number;
	BcAttr?: Uint8Array;
	FcAttr?: Uint8Array;
	IAttr?: boolean;
	UAttr?: boolean;
	StAttr?: boolean;
	BAttr?: boolean;
	N?: Array<CT_MetadataStringIndex>;
}

// CT_MdxSet ...
export class CT_MdxSet {
	NsAttr: number;
	CAttr?: number;
	OAttr?: string;
	N?: Array<CT_MetadataStringIndex>;
}

// ST_MdxSetOrder ...
export enum ST_MdxSetOrder {
	u = 'u',
	a = 'a',
	d = 'd',
	aa = 'aa',
	ad = 'ad',
	na = 'na',
	nd = 'nd',
}

// CT_MdxMemeberProp ...
export class CT_MdxMemeberProp {
	NAttr: number;
	NpAttr: number;
}

// CT_MdxKPI ...
export class CT_MdxKPI {
	NAttr: number;
	NpAttr: number;
	PAttr: string;
}

// ST_MdxKPIProperty ...
export enum ST_MdxKPIProperty {
	v = 'v',
	g = 'g',
	s = 's',
	t = 't',
	w = 'w',
	m = 'm',
}

// CT_MetadataStringIndex ...
export class CT_MetadataStringIndex {
	XAttr: number;
	SAttr?: boolean;
}

// CT_MetadataStrings ...
export class CT_MetadataStrings {
	CountAttr?: number;
	S: Array<CT_XStringElement>;
}

// SingleXmlCells ...
export type SingleXmlCells = CT_SingleXmlCells;

// CT_SingleXmlCells ...
export class CT_SingleXmlCells {
	SingleXmlCell: Array<CT_SingleXmlCell>;
}

// CT_SingleXmlCell ...
export class CT_SingleXmlCell {
	IdAttr: number;
	RAttr: string;
	ConnectionIdAttr: number;
	XmlCellPr: CT_XmlCellPr;
	ExtLst?: CT_ExtensionList;
}

// CT_XmlCellPr ...
export class CT_XmlCellPr {
	IdAttr: number;
	UniqueNameAttr?: string;
	XmlPr: CT_XmlPr;
	ExtLst?: CT_ExtensionList;
}

// CT_XmlPr ...
export class CT_XmlPr {
	MapIdAttr: number;
	XpathAttr: string;
	XmlDataTypeAttr: string;
	ExtLst?: CT_ExtensionList;
}

// StyleSheet ...
export type StyleSheet = CT_Stylesheet;

// CT_Stylesheet ...
export class CT_Stylesheet {
	NumFmts?: CT_NumFmts;
	Fonts?: CT_Fonts;
	Fills?: CT_Fills;
	Borders?: CT_Borders;
	CellStyleXfs?: CT_CellStyleXfs;
	CellXfs?: CT_CellXfs;
	CellStyles?: CT_CellStyles;
	Dxfs?: CT_Dxfs;
	TableStyles?: CT_TableStyles;
	Colors?: CT_Colors;
	ExtLst?: CT_ExtensionList;
}

// CT_CellAlignment ...
export class CT_CellAlignment {
	HorizontalAttr?: string;
	VerticalAttr?: string;
	TextRotationAttr?: ST_TextRotation;
	WrapTextAttr?: boolean;
	IndentAttr?: number;
	RelativeIndentAttr?: number;
	JustifyLastLineAttr?: boolean;
	ShrinkToFitAttr?: boolean;
	ReadingOrderAttr?: number;
}

// ST_TextRotation ...
export enum ST_TextRotation {
	Enum255 = 255,
}

// ST_BorderStyle ...
export enum ST_BorderStyle {
	none = 'none',
	thin = 'thin',
	medium = 'medium',
	dashed = 'dashed',
	dotted = 'dotted',
	thick = 'thick',
	double = 'double',
	hair = 'hair',
	mediumDashed = 'mediumDashed',
	dashDot = 'dashDot',
	mediumDashDot = 'mediumDashDot',
	dashDotDot = 'dashDotDot',
	mediumDashDotDot = 'mediumDashDotDot',
	slantDashDot = 'slantDashDot',
}

// CT_Borders ...
export class CT_Borders {
	CountAttr?: number;
	Border?: Array<CT_Border>;
}

// CT_Border ...
export class CT_Border {
	DiagonalUpAttr?: boolean;
	DiagonalDownAttr?: boolean;
	OutlineAttr?: boolean;
	Start?: CT_BorderPr;
	End?: CT_BorderPr;
	Top?: CT_BorderPr;
	Bottom?: CT_BorderPr;
	Diagonal?: CT_BorderPr;
	Vertical?: CT_BorderPr;
	Horizontal?: CT_BorderPr;
}

// CT_BorderPr ...
export class CT_BorderPr {
	StyleAttr?: string;
	Color?: CT_Color;
}

// CT_CellProtection ...
export class CT_CellProtection {
	LockedAttr?: boolean;
	HiddenAttr?: boolean;
}

// CT_Fonts ...
export class CT_Fonts {
	CountAttr?: number;
	Font?: Array<CT_Font>;
}

// CT_Fills ...
export class CT_Fills {
	CountAttr?: number;
	Fill?: Array<CT_Fill>;
}

// CT_Fill ...
export class CT_Fill {
	PatternFill?: CT_PatternFill;
	GradientFill?: CT_GradientFill;
}

// CT_PatternFill ...
export class CT_PatternFill {
	PatternTypeAttr?: string;
	FgColor?: CT_Color;
	BgColor?: CT_Color;
}

// CT_Color ...
export class CT_Color {
	AutoAttr?: boolean;
	IndexedAttr?: number;
	RgbAttr?: Uint8Array;
	ThemeAttr?: number;
	TintAttr?: number;
}

// ST_PatternType ...
export enum ST_PatternType {
	none = 'none',
	solid = 'solid',
	mediumGray = 'mediumGray',
	darkGray = 'darkGray',
	lightGray = 'lightGray',
	darkHorizontal = 'darkHorizontal',
	darkVertical = 'darkVertical',
	darkDown = 'darkDown',
	darkUp = 'darkUp',
	darkGrid = 'darkGrid',
	darkTrellis = 'darkTrellis',
	lightHorizontal = 'lightHorizontal',
	lightVertical = 'lightVertical',
	lightDown = 'lightDown',
	lightUp = 'lightUp',
	lightGrid = 'lightGrid',
	lightTrellis = 'lightTrellis',
	gray125 = 'gray125',
	gray0625 = 'gray0625',
}

// CT_GradientFill ...
export class CT_GradientFill {
	TypeAttr?: string;
	DegreeAttr?: number;
	LeftAttr?: number;
	RightAttr?: number;
	TopAttr?: number;
	BottomAttr?: number;
	Stop?: Array<CT_GradientStop>;
}

// CT_GradientStop ...
export class CT_GradientStop {
	PositionAttr: number;
	Color: CT_Color;
}

// ST_GradientType ...
export enum ST_GradientType {
	linear = 'linear',
	path = 'path',
}

// ST_HorizontalAlignment ...
export enum ST_HorizontalAlignment {
	general = 'general',
	left = 'left',
	center = 'center',
	right = 'right',
	fill = 'fill',
	justify = 'justify',
	centerContinuous = 'centerContinuous',
	distributed = 'distributed',
}

// ST_VerticalAlignment ...
export enum ST_VerticalAlignment {
	top = 'top',
	center = 'center',
	bottom = 'bottom',
	justify = 'justify',
	distributed = 'distributed',
}

// CT_NumFmts ...
export class CT_NumFmts {
	CountAttr?: number;
	NumFmt?: Array<CT_NumFmt>;
}

// CT_NumFmt ...
export class CT_NumFmt {
	NumFmtIdAttr: number;
	FormatCodeAttr: string;
}

// CT_CellStyleXfs ...
export class CT_CellStyleXfs {
	CountAttr?: number;
	Xf: Array<CT_Xf>;
}

// CT_CellXfs ...
export class CT_CellXfs {
	CountAttr?: number;
	Xf: Array<CT_Xf>;
}

// CT_Xf ...
export class CT_Xf {
	NumFmtIdAttr?: number;
	FontIdAttr?: number;
	FillIdAttr?: number;
	BorderIdAttr?: number;
	XfIdAttr?: number;
	QuotePrefixAttr?: boolean;
	PivotButtonAttr?: boolean;
	ApplyNumberFormatAttr?: boolean;
	ApplyFontAttr?: boolean;
	ApplyFillAttr?: boolean;
	ApplyBorderAttr?: boolean;
	ApplyAlignmentAttr?: boolean;
	ApplyProtectionAttr?: boolean;
	Alignment?: CT_CellAlignment;
	Protection?: CT_CellProtection;
	ExtLst?: CT_ExtensionList;
}

// CT_CellStyles ...
export class CT_CellStyles {
	CountAttr?: number;
	CellStyle: Array<CT_CellStyle>;
}

// CT_CellStyle ...
export class CT_CellStyle {
	NameAttr?: string;
	XfIdAttr: number;
	BuiltinIdAttr?: number;
	ILevelAttr?: number;
	HiddenAttr?: boolean;
	CustomBuiltinAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_Dxfs ...
export class CT_Dxfs {
	CountAttr?: number;
	Dxf?: Array<CT_Dxf>;
}

// CT_Dxf ...
export class CT_Dxf {
	Font?: CT_Font;
	NumFmt?: CT_NumFmt;
	Fill?: CT_Fill;
	Alignment?: CT_CellAlignment;
	Border?: CT_Border;
	Protection?: CT_CellProtection;
	ExtLst?: CT_ExtensionList;
}

// ST_NumFmtId ...
export type ST_NumFmtId = number;

// ST_FontId ...
export type ST_FontId = number;

// ST_FillId ...
export type ST_FillId = number;

// ST_BorderId ...
export type ST_BorderId = number;

// ST_CellStyleXfId ...
export type ST_CellStyleXfId = number;

// ST_DxfId ...
export type ST_DxfId = number;

// CT_Colors ...
export class CT_Colors {
	IndexedColors?: CT_IndexedColors;
	MruColors?: CT_MRUColors;
}

// CT_IndexedColors ...
export class CT_IndexedColors {
	RgbColor: Array<CT_RgbColor>;
}

// CT_MRUColors ...
export class CT_MRUColors {
	Color: Array<CT_Color>;
}

// CT_RgbColor ...
export class CT_RgbColor {
	RgbAttr?: Uint8Array;
}

// CT_TableStyles ...
export class CT_TableStyles {
	CountAttr?: number;
	DefaultTableStyleAttr?: string;
	DefaultPivotStyleAttr?: string;
	TableStyle?: Array<CT_TableStyle>;
}

// CT_TableStyle ...
export class CT_TableStyle {
	NameAttr: string;
	PivotAttr?: boolean;
	TableAttr?: boolean;
	CountAttr?: number;
	TableStyleElement?: Array<CT_TableStyleElement>;
}

// CT_TableStyleElement ...
export class CT_TableStyleElement {
	TypeAttr: string;
	SizeAttr?: number;
	DxfIdAttr?: number;
}

// ST_TableStyleType ...
export enum ST_TableStyleType {
	wholeTable = 'wholeTable',
	headerRow = 'headerRow',
	totalRow = 'totalRow',
	firstColumn = 'firstColumn',
	lastColumn = 'lastColumn',
	firstRowStripe = 'firstRowStripe',
	secondRowStripe = 'secondRowStripe',
	firstColumnStripe = 'firstColumnStripe',
	secondColumnStripe = 'secondColumnStripe',
	firstHeaderCell = 'firstHeaderCell',
	lastHeaderCell = 'lastHeaderCell',
	firstTotalCell = 'firstTotalCell',
	lastTotalCell = 'lastTotalCell',
	firstSubtotalColumn = 'firstSubtotalColumn',
	secondSubtotalColumn = 'secondSubtotalColumn',
	thirdSubtotalColumn = 'thirdSubtotalColumn',
	firstSubtotalRow = 'firstSubtotalRow',
	secondSubtotalRow = 'secondSubtotalRow',
	thirdSubtotalRow = 'thirdSubtotalRow',
	blankRow = 'blankRow',
	firstColumnSubheading = 'firstColumnSubheading',
	secondColumnSubheading = 'secondColumnSubheading',
	thirdColumnSubheading = 'thirdColumnSubheading',
	firstRowSubheading = 'firstRowSubheading',
	secondRowSubheading = 'secondRowSubheading',
	thirdRowSubheading = 'thirdRowSubheading',
	pageFieldLabels = 'pageFieldLabels',
	pageFieldValues = 'pageFieldValues',
}

// CT_BooleanProperty ...
export class CT_BooleanProperty {
	ValAttr?: boolean;
}

// CT_FontSize ...
export class CT_FontSize {
	ValAttr: number;
}

// CT_IntProperty ...
export class CT_IntProperty {
	ValAttr: number;
}

// CT_FontName ...
export class CT_FontName {
	ValAttr: string;
}

// CT_VerticalAlignFontProperty ...
export class CT_VerticalAlignFontProperty {
	ValAttr: string;
}

// CT_FontScheme ...
export class CT_FontScheme {
	ValAttr: string;
}

// ST_FontScheme ...
export enum ST_FontScheme {
	none = 'none',
	major = 'major',
	minor = 'minor',
}

// CT_UnderlineProperty ...
export class CT_UnderlineProperty {
	ValAttr?: string;
}

// ST_UnderlineValues ...
export enum ST_UnderlineValues {
	single = 'single',
	double = 'double',
	singleAccounting = 'singleAccounting',
	doubleAccounting = 'doubleAccounting',
	none = 'none',
}

// CT_FontFamily ...
export class CT_FontFamily {
	ValAttr: number;
}

// ST_FontFamily ...
export type ST_FontFamily = number;

// CT_Font ...
export class CT_Font {
	Name?: Array<CT_FontName>;
	Charset?: Array<CT_IntProperty>;
	Family?: Array<CT_FontFamily>;
	B?: Array<CT_BooleanProperty>;
	I?: Array<CT_BooleanProperty>;
	Strike?: Array<CT_BooleanProperty>;
	Outline?: Array<CT_BooleanProperty>;
	Shadow?: Array<CT_BooleanProperty>;
	Condense?: Array<CT_BooleanProperty>;
	Extend?: Array<CT_BooleanProperty>;
	Color?: Array<CT_Color>;
	Sz?: Array<CT_FontSize>;
	U?: Array<CT_UnderlineProperty>;
	VertAlign?: Array<CT_VerticalAlignFontProperty>;
	Scheme?: Array<CT_FontScheme>;
}

// AG_AutoFormat ...
export class AG_AutoFormat {
	AutoFormatIdAttr: number | null;
	ApplyNumberFormatsAttr: boolean | null;
	ApplyBorderFormatsAttr: boolean | null;
	ApplyFontFormatsAttr: boolean | null;
	ApplyPatternFormatsAttr: boolean | null;
	ApplyAlignmentFormatsAttr: boolean | null;
	ApplyWidthHeightFormatsAttr: boolean | null;
}

// ExternalLink ...
export type ExternalLink = CT_ExternalLink;

// CT_ExternalLink ...
export class CT_ExternalLink {
	ExternalBook?: CT_ExternalBook;
	DdeLink?: CT_DdeLink;
	OleLink?: CT_OleLink;
	ExtLst?: CT_ExtensionList;
}

// CT_ExternalBook ...
export class CT_ExternalBook {
	RIdAttr: string;
	SheetNames?: CT_ExternalSheetNames;
	DefinedNames?: CT_ExternalDefinedNames;
	SheetDataSet?: CT_ExternalSheetDataSet;
}

// CT_ExternalSheetNames ...
export class CT_ExternalSheetNames {
	SheetName: Array<CT_ExternalSheetName>;
}

// CT_ExternalSheetName ...
export class CT_ExternalSheetName {
	ValAttr?: string;
}

// CT_ExternalDefinedNames ...
export class CT_ExternalDefinedNames {
	DefinedName?: Array<CT_ExternalDefinedName>;
}

// CT_ExternalDefinedName ...
export class CT_ExternalDefinedName {
	NameAttr: string;
	RefersToAttr?: string;
	SheetIdAttr?: number;
}

// CT_ExternalSheetDataSet ...
export class CT_ExternalSheetDataSet {
	SheetData: Array<CT_ExternalSheetData>;
}

// CT_ExternalSheetData ...
export class CT_ExternalSheetData {
	SheetIdAttr: number;
	RefreshErrorAttr?: boolean;
	Row?: Array<CT_ExternalRow>;
}

// CT_ExternalRow ...
export class CT_ExternalRow {
	RAttr: number;
	Cell?: Array<CT_ExternalCell>;
}

// CT_ExternalCell ...
export class CT_ExternalCell {
	RAttr?: string;
	TAttr?: string;
	VmAttr?: number;
	V?: string;
}

// CT_DdeLink ...
export class CT_DdeLink {
	DdeServiceAttr: string;
	DdeTopicAttr: string;
	DdeItems?: CT_DdeItems;
}

// CT_DdeItems ...
export class CT_DdeItems {
	DdeItem?: Array<CT_DdeItem>;
}

// CT_DdeItem ...
export class CT_DdeItem {
	NameAttr?: string;
	OleAttr?: boolean;
	AdviseAttr?: boolean;
	PreferPicAttr?: boolean;
	Values?: CT_DdeValues;
}

// CT_DdeValues ...
export class CT_DdeValues {
	RowsAttr?: number;
	ColsAttr?: number;
	Value: Array<CT_DdeValue>;
}

// CT_DdeValue ...
export class CT_DdeValue {
	TAttr?: string;
	Val: string;
}

// ST_DdeValueType ...
export enum ST_DdeValueType {
	nil = 'nil',
	b = 'b',
	n = 'n',
	e = 'e',
	str = 'str',
}

// CT_OleLink ...
export class CT_OleLink {
	RIdAttr: string;
	ProgIdAttr: string;
	OleItems?: CT_OleItems;
}

// CT_OleItems ...
export class CT_OleItems {
	OleItem?: Array<CT_OleItem>;
}

// CT_OleItem ...
export class CT_OleItem {
	NameAttr: string;
	IconAttr?: boolean;
	AdviseAttr?: boolean;
	PreferPicAttr?: boolean;
}

// Table ...
export type Table = CT_Table;

// CT_Table ...
export class CT_Table {
	IdAttr: number;
	NameAttr?: string;
	DisplayNameAttr: string;
	CommentAttr?: string;
	RefAttr: string;
	TableTypeAttr?: string;
	HeaderRowCountAttr?: number;
	InsertRowAttr?: boolean;
	InsertRowShiftAttr?: boolean;
	TotalsRowCountAttr?: number;
	TotalsRowShownAttr?: boolean;
	PublishedAttr?: boolean;
	HeaderRowDxfIdAttr?: number;
	DataDxfIdAttr?: number;
	TotalsRowDxfIdAttr?: number;
	HeaderRowBorderDxfIdAttr?: number;
	TableBorderDxfIdAttr?: number;
	TotalsRowBorderDxfIdAttr?: number;
	HeaderRowCellStyleAttr?: string;
	DataCellStyleAttr?: string;
	TotalsRowCellStyleAttr?: string;
	ConnectionIdAttr?: number;
	AutoFilter?: CT_AutoFilter;
	SortState?: CT_SortState;
	TableColumns: CT_TableColumns;
	TableStyleInfo?: CT_TableStyleInfo;
	ExtLst?: CT_ExtensionList;
}

// ST_TableType ...
export enum ST_TableType {
	worksheet = 'worksheet',
	xml = 'xml',
	queryTable = 'queryTable',
}

// CT_TableStyleInfo ...
export class CT_TableStyleInfo {
	NameAttr?: string;
	ShowFirstColumnAttr?: boolean;
	ShowLastColumnAttr?: boolean;
	ShowRowStripesAttr?: boolean;
	ShowColumnStripesAttr?: boolean;
}

// CT_TableColumns ...
export class CT_TableColumns {
	CountAttr?: number;
	TableColumn: Array<CT_TableColumn>;
}

// CT_TableColumn ...
export class CT_TableColumn {
	IdAttr: number;
	UniqueNameAttr?: string;
	NameAttr: string;
	TotalsRowFunctionAttr?: string;
	TotalsRowLabelAttr?: string;
	QueryTableFieldIdAttr?: number;
	HeaderRowDxfIdAttr?: number;
	DataDxfIdAttr?: number;
	TotalsRowDxfIdAttr?: number;
	HeaderRowCellStyleAttr?: string;
	DataCellStyleAttr?: string;
	TotalsRowCellStyleAttr?: string;
	CalculatedColumnFormula?: CT_TableFormula;
	TotalsRowFormula?: CT_TableFormula;
	XmlColumnPr?: CT_XmlColumnPr;
	ExtLst?: CT_ExtensionList;
}

// CT_TableFormula ...
export class CT_TableFormula {
	ArrayAttr?: boolean;
	Value: string;
}

// ST_TotalsRowFunction ...
export enum ST_TotalsRowFunction {
	none = 'none',
	sum = 'sum',
	min = 'min',
	max = 'max',
	average = 'average',
	count = 'count',
	countNums = 'countNums',
	stdDev = 'stdDev',
	var = 'var',
	custom = 'custom',
}

// CT_XmlColumnPr ...
export class CT_XmlColumnPr {
	MapIdAttr: number;
	XpathAttr: string;
	DenormalizedAttr?: boolean;
	XmlDataTypeAttr: string;
	ExtLst?: CT_ExtensionList;
}

// ST_XmlDataType ...
export type ST_XmlDataType = string;

// VolTypes ...
export type VolTypes = CT_VolTypes;

// CT_VolTypes ...
export class CT_VolTypes {
	VolType: Array<CT_VolType>;
	ExtLst?: CT_ExtensionList;
}

// CT_VolType ...
export class CT_VolType {
	TypeAttr: string;
	Main: Array<CT_VolMain>;
}

// CT_VolMain ...
export class CT_VolMain {
	FirstAttr: string;
	Tp: Array<CT_VolTopic>;
}

// CT_VolTopic ...
export class CT_VolTopic {
	TAttr?: string;
	V: string;
	Stp?: string;
	Tr: Array<CT_VolTopicRef>;
}

// CT_VolTopicRef ...
export class CT_VolTopicRef {
	RAttr: string;
	SAttr: number;
}

// ST_VolDepType ...
export enum ST_VolDepType {
	realTimeData = 'realTimeData',
	olapFunctions = 'olapFunctions',
}

// ST_VolValueType ...
export enum ST_VolValueType {
	b = 'b',
	n = 'n',
	e = 'e',
	s = 's',
}

// Workbook ...
export type Workbook = CT_Workbook;

// CT_Workbook ...
export class CT_Workbook {
	ConformanceAttr?: string;
	FileVersion?: CT_FileVersion;
	FileSharing?: CT_FileSharing;
	WorkbookPr?: CT_WorkbookPr;
	WorkbookProtection?: CT_WorkbookProtection;
	BookViews?: CT_BookViews;
	Sheets: CT_Sheets;
	FunctionGroups?: CT_FunctionGroups;
	ExternalReferences?: CT_ExternalReferences;
	DefinedNames?: CT_DefinedNames;
	CalcPr?: CT_CalcPr;
	OleSize?: CT_OleSize;
	CustomWorkbookViews?: CT_CustomWorkbookViews;
	PivotCaches?: CT_PivotCaches;
	SmartTagPr?: CT_SmartTagPr;
	SmartTagTypes?: CT_SmartTagTypes;
	WebPublishing?: CT_WebPublishing;
	FileRecoveryPr?: Array<CT_FileRecoveryPr>;
	WebPublishObjects?: CT_WebPublishObjects;
	ExtLst?: CT_ExtensionList;
}

// CT_FileVersion ...
export class CT_FileVersion {
	AppNameAttr?: string;
	LastEditedAttr?: string;
	LowestEditedAttr?: string;
	RupBuildAttr?: string;
	CodeNameAttr?: string;
}

// CT_BookViews ...
export class CT_BookViews {
	WorkbookView: Array<CT_BookView>;
}

// CT_BookView ...
export class CT_BookView {
	VisibilityAttr?: string;
	MinimizedAttr?: boolean;
	ShowHorizontalScrollAttr?: boolean;
	ShowVerticalScrollAttr?: boolean;
	ShowSheetTabsAttr?: boolean;
	XWindowAttr?: number;
	YWindowAttr?: number;
	WindowWidthAttr?: number;
	WindowHeightAttr?: number;
	TabRatioAttr?: number;
	FirstSheetAttr?: number;
	ActiveTabAttr?: number;
	AutoFilterDateGroupingAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// ST_Visibility ...
export enum ST_Visibility {
	visible = 'visible',
	hidden = 'hidden',
	veryHidden = 'veryHidden',
}

// CT_CustomWorkbookViews ...
export class CT_CustomWorkbookViews {
	CustomWorkbookView: Array<CT_CustomWorkbookView>;
}

// CT_CustomWorkbookView ...
export class CT_CustomWorkbookView {
	NameAttr: string;
	GuidAttr: string;
	AutoUpdateAttr?: boolean;
	MergeIntervalAttr?: number;
	ChangesSavedWinAttr?: boolean;
	OnlySyncAttr?: boolean;
	PersonalViewAttr?: boolean;
	IncludePrintSettingsAttr?: boolean;
	IncludeHiddenRowColAttr?: boolean;
	MaximizedAttr?: boolean;
	MinimizedAttr?: boolean;
	ShowHorizontalScrollAttr?: boolean;
	ShowVerticalScrollAttr?: boolean;
	ShowSheetTabsAttr?: boolean;
	XWindowAttr?: number;
	YWindowAttr?: number;
	WindowWidthAttr: number;
	WindowHeightAttr: number;
	TabRatioAttr?: number;
	ActiveSheetIdAttr: number;
	ShowFormulaBarAttr?: boolean;
	ShowStatusbarAttr?: boolean;
	ShowCommentsAttr?: string;
	ShowObjectsAttr?: string;
	ExtLst?: CT_ExtensionList;
}

// ST_Comments ...
export enum ST_Comments {
	commNone = 'commNone',
	commIndicator = 'commIndicator',
	commIndAndComment = 'commIndAndComment',
}

// ST_Objects ...
export enum ST_Objects {
	all = 'all',
	placeholders = 'placeholders',
	none = 'none',
}

// CT_Sheets ...
export class CT_Sheets {
	Sheet: Array<CT_Sheet>;
}

// CT_Sheet ...
export class CT_Sheet {
	NameAttr: string;
	SheetIdAttr: number;
	StateAttr?: string;
	RIdAttr: string;
}

// ST_SheetState ...
export enum ST_SheetState {
	visible = 'visible',
	hidden = 'hidden',
	veryHidden = 'veryHidden',
}

// CT_WorkbookPr ...
export class CT_WorkbookPr {
	Date1904Attr?: boolean;
	ShowObjectsAttr?: string;
	ShowBorderUnselectedTablesAttr?: boolean;
	FilterPrivacyAttr?: boolean;
	PromptedSolutionsAttr?: boolean;
	ShowInkAnnotationAttr?: boolean;
	BackupFileAttr?: boolean;
	SaveExternalLinkValuesAttr?: boolean;
	UpdateLinksAttr?: string;
	CodeNameAttr?: string;
	HidePivotFieldListAttr?: boolean;
	ShowPivotChartFilterAttr?: boolean;
	AllowRefreshQueryAttr?: boolean;
	PublishItemsAttr?: boolean;
	CheckCompatibilityAttr?: boolean;
	AutoCompressPicturesAttr?: boolean;
	RefreshAllConnectionsAttr?: boolean;
	DefaultThemeVersionAttr?: number;
}

// ST_UpdateLinks ...
export enum ST_UpdateLinks {
	userSet = 'userSet',
	never = 'never',
	always = 'always',
}

// CT_SmartTagPr ...
export class CT_SmartTagPr {
	EmbedAttr?: boolean;
	ShowAttr?: string;
}

// ST_SmartTagShow ...
export enum ST_SmartTagShow {
	all = 'all',
	none = 'none',
	noIndicator = 'noIndicator',
}

// CT_SmartTagTypes ...
export class CT_SmartTagTypes {
	SmartTagType?: Array<CT_SmartTagType>;
}

// CT_SmartTagType ...
export class CT_SmartTagType {
	NamespaceUriAttr?: string;
	NameAttr?: string;
	UrlAttr?: string;
}

// CT_FileRecoveryPr ...
export class CT_FileRecoveryPr {
	AutoRecoverAttr?: boolean;
	CrashSaveAttr?: boolean;
	DataExtractLoadAttr?: boolean;
	RepairLoadAttr?: boolean;
}

// CT_CalcPr ...
export class CT_CalcPr {
	CalcIdAttr?: number;
	CalcModeAttr?: string;
	FullCalcOnLoadAttr?: boolean;
	RefModeAttr?: string;
	IterateAttr?: boolean;
	IterateCountAttr?: number;
	IterateDeltaAttr?: number;
	FullPrecisionAttr?: boolean;
	CalcCompletedAttr?: boolean;
	CalcOnSaveAttr?: boolean;
	ConcurrentCalcAttr?: boolean;
	ConcurrentManualCountAttr?: number;
	ForceFullCalcAttr?: boolean;
}

// ST_CalcMode ...
export enum ST_CalcMode {
	manual = 'manual',
	auto = 'auto',
	autoNoTable = 'autoNoTable',
}

// ST_RefMode ...
export enum ST_RefMode {
	A1 = 'A1',
	R1C1 = 'R1C1',
}

// CT_DefinedNames ...
export class CT_DefinedNames {
	DefinedName?: Array<CT_DefinedName>;
}

// CT_DefinedName ...
export class CT_DefinedName {
	NameAttr: string;
	CommentAttr?: string;
	CustomMenuAttr?: string;
	DescriptionAttr?: string;
	HelpAttr?: string;
	StatusBarAttr?: string;
	LocalSheetIdAttr?: number;
	HiddenAttr?: boolean;
	FunctionAttr?: boolean;
	VbProcedureAttr?: boolean;
	XlmAttr?: boolean;
	FunctionGroupIdAttr?: number;
	ShortcutKeyAttr?: string;
	PublishToServerAttr?: boolean;
	WorkbookParameterAttr?: boolean;
	Value: string;
}

// CT_ExternalReferences ...
export class CT_ExternalReferences {
	ExternalReference: Array<CT_ExternalReference>;
}

// CT_ExternalReference ...
export class CT_ExternalReference {
	RIdAttr: string;
}

// CT_SheetBackgroundPicture ...
export class CT_SheetBackgroundPicture {
	RIdAttr: string;
}

// CT_PivotCaches ...
export class CT_PivotCaches {
	PivotCache: Array<CT_PivotCache>;
}

// CT_PivotCache ...
export class CT_PivotCache {
	CacheIdAttr: number;
	RIdAttr: string;
}

// CT_FileSharing ...
export class CT_FileSharing {
	ReadOnlyRecommendedAttr?: boolean;
	UserNameAttr?: string;
	AlgorithmNameAttr?: string;
	HashValueAttr?: Uint8Array;
	SaltValueAttr?: Uint8Array;
	SpinCountAttr?: number;
}

// CT_OleSize ...
export class CT_OleSize {
	RefAttr: string;
}

// CT_WorkbookProtection ...
export class CT_WorkbookProtection {
	LockStructureAttr?: boolean;
	LockWindowsAttr?: boolean;
	LockRevisionAttr?: boolean;
	RevisionsAlgorithmNameAttr?: string;
	RevisionsHashValueAttr?: Uint8Array;
	RevisionsSaltValueAttr?: Uint8Array;
	RevisionsSpinCountAttr?: number;
	WorkbookAlgorithmNameAttr?: string;
	WorkbookHashValueAttr?: Uint8Array;
	WorkbookSaltValueAttr?: Uint8Array;
	WorkbookSpinCountAttr?: number;
}

// CT_WebPublishing ...
export class CT_WebPublishing {
	CssAttr?: boolean;
	ThicketAttr?: boolean;
	LongFileNamesAttr?: boolean;
	VmlAttr?: boolean;
	AllowPngAttr?: boolean;
	TargetScreenSizeAttr?: string;
	DpiAttr?: number;
	CharacterSetAttr?: string;
}

// ST_TargetScreenSize ...
export enum ST_TargetScreenSize {
	544x376 = '544x376',
	640x480 = '640x480',
	720x512 = '720x512',
	800x600 = '800x600',
	1024x768 = '1024x768',
	1152x882 = '1152x882',
	1152x900 = '1152x900',
	1280x1024 = '1280x1024',
	1600x1200 = '1600x1200',
	1800x1440 = '1800x1440',
	1920x1200 = '1920x1200',
}

// CT_FunctionGroups ...
export class CT_FunctionGroups {
	BuiltInGroupCountAttr?: number;
	FunctionGroup?: Array<CT_FunctionGroup>;
}

// CT_FunctionGroup ...
export class CT_FunctionGroup {
	NameAttr?: string;
}

// CT_WebPublishObjects ...
export class CT_WebPublishObjects {
	CountAttr?: number;
	WebPublishObject: Array<CT_WebPublishObject>;
}

// CT_WebPublishObject ...
export class CT_WebPublishObject {
	IdAttr: number;
	DivIdAttr: string;
	SourceObjectAttr?: string;
	DestinationFileAttr: string;
	TitleAttr?: string;
	AutoRepublishAttr?: boolean;
}
