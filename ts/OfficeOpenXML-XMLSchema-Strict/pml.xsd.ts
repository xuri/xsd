// Code generated by xgen. DO NOT EDIT.

// ST_TransitionSideDirectionType ...
export enum ST_TransitionSideDirectionType {
	l = 'l',
	u = 'u',
	r = 'r',
	d = 'd',
}

// ST_TransitionCornerDirectionType ...
export enum ST_TransitionCornerDirectionType {
	lu = 'lu',
	ru = 'ru',
	ld = 'ld',
	rd = 'rd',
}

// ST_TransitionInOutDirectionType ...
export enum ST_TransitionInOutDirectionType {
	out = 'out',
	in = 'in',
}

// CT_SideDirectionTransition ...
export class CT_SideDirectionTransition {
	DirAttr?: string;
}

// CT_CornerDirectionTransition ...
export class CT_CornerDirectionTransition {
	DirAttr?: string;
}

// ST_TransitionEightDirectionType ...
export class ST_TransitionEightDirectionType {
	ST_TransitionSideDirectionType: string;
	ST_TransitionCornerDirectionType: string;
}

// CT_EightDirectionTransition ...
export class CT_EightDirectionTransition {
	DirAttr?: ST_TransitionEightDirectionType;
}

// CT_OrientationTransition ...
export class CT_OrientationTransition {
	DirAttr?: string;
}

// CT_InOutTransition ...
export class CT_InOutTransition {
	DirAttr?: string;
}

// CT_OptionalBlackTransition ...
export class CT_OptionalBlackTransition {
	ThruBlkAttr?: boolean;
}

// CT_SplitTransition ...
export class CT_SplitTransition {
	OrientAttr?: string;
	DirAttr?: string;
}

// CT_WheelTransition ...
export class CT_WheelTransition {
	SpokesAttr?: number;
}

// CT_TransitionStartSoundAction ...
export class CT_TransitionStartSoundAction {
	LoopAttr?: boolean;
	Snd: CT_EmbeddedWAVAudioFile;
}

// CT_TransitionSoundAction ...
export class CT_TransitionSoundAction {
	StSnd: CT_TransitionStartSoundAction;
	EndSnd: CT_Empty;
}

// ST_TransitionSpeed ...
export enum ST_TransitionSpeed {
	slow = 'slow',
	med = 'med',
	fast = 'fast',
}

// CT_SlideTransition ...
export class CT_SlideTransition {
	SpdAttr?: string;
	AdvClickAttr?: boolean;
	AdvTmAttr?: number;
	Blinds: CT_OrientationTransition;
	Checker: CT_OrientationTransition;
	Circle: CT_Empty;
	Dissolve: CT_Empty;
	Comb: CT_OrientationTransition;
	Cover: CT_EightDirectionTransition;
	Cut: CT_OptionalBlackTransition;
	Diamond: CT_Empty;
	Fade: CT_OptionalBlackTransition;
	Newsflash: CT_Empty;
	Plus: CT_Empty;
	Pull: CT_EightDirectionTransition;
	Push: CT_SideDirectionTransition;
	Random: CT_Empty;
	RandomBar: CT_OrientationTransition;
	Split: CT_SplitTransition;
	Strips: CT_CornerDirectionTransition;
	Wedge: CT_Empty;
	Wheel: CT_WheelTransition;
	Wipe: CT_SideDirectionTransition;
	Zoom: CT_InOutTransition;
	SndAc?: CT_TransitionSoundAction;
	ExtLst?: CT_ExtensionListModify;
}

// ST_TLTimeIndefinite ...
export enum ST_TLTimeIndefinite {
	indefinite = 'indefinite',
}

// ST_TLTime ...
export class ST_TLTime {
	UnsignedInt: number;
	ST_TLTimeIndefinite: string;
}

// ST_TLTimeNodeID ...
export type ST_TLTimeNodeID = number;

// CT_TLIterateIntervalTime ...
export class CT_TLIterateIntervalTime {
	ValAttr: ST_TLTime;
}

// CT_TLIterateIntervalPercentage ...
export class CT_TLIterateIntervalPercentage {
	ValAttr: ST_PositivePercentage;
}

// ST_IterateType ...
export enum ST_IterateType {
	el = 'el',
	wd = 'wd',
	lt = 'lt',
}

// CT_TLIterateData ...
export class CT_TLIterateData {
	TypeAttr?: string;
	BackwardsAttr?: boolean;
	TmAbs: CT_TLIterateIntervalTime;
	TmPct: CT_TLIterateIntervalPercentage;
}

// CT_TLSubShapeId ...
export class CT_TLSubShapeId {
	SpidAttr: string;
}

// CT_TLTextTargetElement ...
export class CT_TLTextTargetElement {
	CharRg: CT_IndexRange;
	PRg: CT_IndexRange;
}

// ST_TLChartSubelementType ...
export enum ST_TLChartSubelementType {
	gridLegend = 'gridLegend',
	series = 'series',
	category = 'category',
	ptInSeries = 'ptInSeries',
	ptInCategory = 'ptInCategory',
}

// CT_TLOleChartTargetElement ...
export class CT_TLOleChartTargetElement {
	TypeAttr: string;
	LvlAttr?: number;
}

// CT_TLShapeTargetElement ...
export class CT_TLShapeTargetElement {
	SpidAttr: number;
	Bg: CT_Empty;
	SubSp: CT_TLSubShapeId;
	OleChartEl: CT_TLOleChartTargetElement;
	TxEl: CT_TLTextTargetElement;
	GraphicEl: CT_AnimationElementChoice;
}

// CT_TLTimeTargetElement ...
export class CT_TLTimeTargetElement {
	SldTgt: CT_Empty;
	SndTgt: CT_EmbeddedWAVAudioFile;
	SpTgt: CT_TLShapeTargetElement;
	InkTgt: CT_TLSubShapeId;
}

// CT_TLTriggerTimeNodeID ...
export class CT_TLTriggerTimeNodeID {
	ValAttr: number;
}

// ST_TLTriggerRuntimeNode ...
export enum ST_TLTriggerRuntimeNode {
	first = 'first',
	last = 'last',
	all = 'all',
}

// CT_TLTriggerRuntimeNode ...
export class CT_TLTriggerRuntimeNode {
	ValAttr: string;
}

// ST_TLTriggerEvent ...
export enum ST_TLTriggerEvent {
	onBegin = 'onBegin',
	onEnd = 'onEnd',
	begin = 'begin',
	end = 'end',
	onClick = 'onClick',
	onDblClick = 'onDblClick',
	onMouseOver = 'onMouseOver',
	onMouseOut = 'onMouseOut',
	onNext = 'onNext',
	onPrev = 'onPrev',
	onStopAudio = 'onStopAudio',
}

// CT_TLTimeCondition ...
export class CT_TLTimeCondition {
	EvtAttr?: string;
	DelayAttr?: ST_TLTime;
	TgtEl: CT_TLTimeTargetElement;
	Tn: CT_TLTriggerTimeNodeID;
	Rtn: CT_TLTriggerRuntimeNode;
}

// CT_TLTimeConditionList ...
export class CT_TLTimeConditionList {
	Cond: Array<CT_TLTimeCondition>;
}

// CT_TimeNodeList ...
export class CT_TimeNodeList {
	Par: Array<CT_TLTimeNodeParallel>;
	Seq: Array<CT_TLTimeNodeSequence>;
	Excl: Array<CT_TLTimeNodeExclusive>;
	Anim: Array<CT_TLAnimateBehavior>;
	AnimClr: Array<CT_TLAnimateColorBehavior>;
	AnimEffect: Array<CT_TLAnimateEffectBehavior>;
	AnimMotion: Array<CT_TLAnimateMotionBehavior>;
	AnimRot: Array<CT_TLAnimateRotationBehavior>;
	AnimScale: Array<CT_TLAnimateScaleBehavior>;
	Cmd: Array<CT_TLCommandBehavior>;
	Set: Array<CT_TLSetBehavior>;
	Audio: Array<CT_TLMediaNodeAudio>;
	Video: Array<CT_TLMediaNodeVideo>;
}

// ST_TLTimeNodePresetClassType ...
export enum ST_TLTimeNodePresetClassType {
	entr = 'entr',
	exit = 'exit',
	emph = 'emph',
	path = 'path',
	verb = 'verb',
	mediacall = 'mediacall',
}

// ST_TLTimeNodeRestartType ...
export enum ST_TLTimeNodeRestartType {
	always = 'always',
	whenNotActive = 'whenNotActive',
	never = 'never',
}

// ST_TLTimeNodeFillType ...
export enum ST_TLTimeNodeFillType {
	remove = 'remove',
	freeze = 'freeze',
	hold = 'hold',
	transition = 'transition',
}

// ST_TLTimeNodeSyncType ...
export enum ST_TLTimeNodeSyncType {
	canSlip = 'canSlip',
	locked = 'locked',
}

// ST_TLTimeNodeMasterRelation ...
export enum ST_TLTimeNodeMasterRelation {
	sameClick = 'sameClick',
	lastClick = 'lastClick',
	nextClick = 'nextClick',
}

// ST_TLTimeNodeType ...
export enum ST_TLTimeNodeType {
	clickEffect = 'clickEffect',
	withEffect = 'withEffect',
	afterEffect = 'afterEffect',
	mainSeq = 'mainSeq',
	interactiveSeq = 'interactiveSeq',
	clickPar = 'clickPar',
	withGroup = 'withGroup',
	afterGroup = 'afterGroup',
	tmRoot = 'tmRoot',
}

// CT_TLCommonTimeNodeData ...
export class CT_TLCommonTimeNodeData {
	IdAttr?: number;
	PresetIDAttr?: number;
	PresetClassAttr?: string;
	PresetSubtypeAttr?: number;
	DurAttr?: ST_TLTime;
	RepeatCountAttr?: ST_TLTime;
	RepeatDurAttr?: ST_TLTime;
	SpdAttr?: ST_Percentage;
	AccelAttr?: ST_PositiveFixedPercentage;
	DecelAttr?: ST_PositiveFixedPercentage;
	AutoRevAttr?: boolean;
	RestartAttr?: string;
	FillAttr?: string;
	SyncBehaviorAttr?: string;
	TmFilterAttr?: string;
	EvtFilterAttr?: string;
	DisplayAttr?: boolean;
	MasterRelAttr?: string;
	BldLvlAttr?: number;
	GrpIdAttr?: number;
	AfterEffectAttr?: boolean;
	NodeTypeAttr?: string;
	NodePhAttr?: boolean;
	StCondLst?: CT_TLTimeConditionList;
	EndCondLst?: CT_TLTimeConditionList;
	EndSync?: CT_TLTimeCondition;
	Iterate?: CT_TLIterateData;
	ChildTnLst?: CT_TimeNodeList;
	SubTnLst?: CT_TimeNodeList;
}

// CT_TLTimeNodeParallel ...
export class CT_TLTimeNodeParallel {
	CTn: CT_TLCommonTimeNodeData;
}

// ST_TLNextActionType ...
export enum ST_TLNextActionType {
	none = 'none',
	seek = 'seek',
}

// ST_TLPreviousActionType ...
export enum ST_TLPreviousActionType {
	none = 'none',
	skipTimed = 'skipTimed',
}

// CT_TLTimeNodeSequence ...
export class CT_TLTimeNodeSequence {
	ConcurrentAttr?: boolean;
	PrevAcAttr?: string;
	NextAcAttr?: string;
	CTn: CT_TLCommonTimeNodeData;
	PrevCondLst?: CT_TLTimeConditionList;
	NextCondLst?: CT_TLTimeConditionList;
}

// CT_TLTimeNodeExclusive ...
export class CT_TLTimeNodeExclusive {
	CTn: CT_TLCommonTimeNodeData;
}

// CT_TLBehaviorAttributeNameList ...
export class CT_TLBehaviorAttributeNameList {
	AttrName: string;
}

// ST_TLBehaviorAdditiveType ...
export enum ST_TLBehaviorAdditiveType {
	base = 'base',
	sum = 'sum',
	repl = 'repl',
	mult = 'mult',
	none = 'none',
}

// ST_TLBehaviorAccumulateType ...
export enum ST_TLBehaviorAccumulateType {
	none = 'none',
	always = 'always',
}

// ST_TLBehaviorTransformType ...
export enum ST_TLBehaviorTransformType {
	pt = 'pt',
	img = 'img',
}

// ST_TLBehaviorOverrideType ...
export enum ST_TLBehaviorOverrideType {
	normal = 'normal',
	childStyle = 'childStyle',
}

// CT_TLCommonBehaviorData ...
export class CT_TLCommonBehaviorData {
	AdditiveAttr?: string;
	AccumulateAttr?: string;
	XfrmTypeAttr?: string;
	FromAttr?: string;
	ToAttr?: string;
	ByAttr?: string;
	RctxAttr?: string;
	OverrideAttr?: string;
	CTn: CT_TLCommonTimeNodeData;
	TgtEl: CT_TLTimeTargetElement;
	AttrNameLst?: CT_TLBehaviorAttributeNameList;
}

// CT_TLAnimVariantBooleanVal ...
export class CT_TLAnimVariantBooleanVal {
	ValAttr: boolean;
}

// CT_TLAnimVariantIntegerVal ...
export class CT_TLAnimVariantIntegerVal {
	ValAttr: number;
}

// CT_TLAnimVariantFloatVal ...
export class CT_TLAnimVariantFloatVal {
	ValAttr: number;
}

// CT_TLAnimVariantStringVal ...
export class CT_TLAnimVariantStringVal {
	ValAttr: string;
}

// CT_TLAnimVariant ...
export class CT_TLAnimVariant {
	BoolVal: CT_TLAnimVariantBooleanVal;
	IntVal: CT_TLAnimVariantIntegerVal;
	FltVal: CT_TLAnimVariantFloatVal;
	StrVal: CT_TLAnimVariantStringVal;
	ClrVal: CT_Color;
}

// ST_TLTimeAnimateValueTime ...
export class ST_TLTimeAnimateValueTime {
	ST_PositiveFixedPercentage: ST_PositiveFixedPercentage;
	ST_TLTimeIndefinite: string;
}

// CT_TLTimeAnimateValue ...
export class CT_TLTimeAnimateValue {
	TmAttr?: ST_TLTimeAnimateValueTime;
	FmlaAttr?: string;
	Val?: CT_TLAnimVariant;
}

// CT_TLTimeAnimateValueList ...
export class CT_TLTimeAnimateValueList {
	Tav?: Array<CT_TLTimeAnimateValue>;
}

// ST_TLAnimateBehaviorCalcMode ...
export enum ST_TLAnimateBehaviorCalcMode {
	discrete = 'discrete',
	lin = 'lin',
	fmla = 'fmla',
}

// ST_TLAnimateBehaviorValueType ...
export enum ST_TLAnimateBehaviorValueType {
	str = 'str',
	num = 'num',
	clr = 'clr',
}

// CT_TLAnimateBehavior ...
export class CT_TLAnimateBehavior {
	ByAttr?: string;
	FromAttr?: string;
	ToAttr?: string;
	CalcmodeAttr?: string;
	ValueTypeAttr?: string;
	CBhvr: CT_TLCommonBehaviorData;
	TavLst?: CT_TLTimeAnimateValueList;
}

// CT_TLByRgbColorTransform ...
export class CT_TLByRgbColorTransform {
	RAttr: ST_FixedPercentage;
	GAttr: ST_FixedPercentage;
	BAttr: ST_FixedPercentage;
}

// CT_TLByHslColorTransform ...
export class CT_TLByHslColorTransform {
	HAttr: number;
	SAttr: ST_FixedPercentage;
	LAttr: ST_FixedPercentage;
}

// CT_TLByAnimateColorTransform ...
export class CT_TLByAnimateColorTransform {
	Rgb: CT_TLByRgbColorTransform;
	Hsl: CT_TLByHslColorTransform;
}

// ST_TLAnimateColorSpace ...
export enum ST_TLAnimateColorSpace {
	rgb = 'rgb',
	hsl = 'hsl',
}

// ST_TLAnimateColorDirection ...
export enum ST_TLAnimateColorDirection {
	cw = 'cw',
	ccw = 'ccw',
}

// CT_TLAnimateColorBehavior ...
export class CT_TLAnimateColorBehavior {
	ClrSpcAttr?: string;
	DirAttr?: string;
	CBhvr: CT_TLCommonBehaviorData;
	By?: CT_TLByAnimateColorTransform;
	From?: CT_Color;
	To?: CT_Color;
}

// ST_TLAnimateEffectTransition ...
export enum ST_TLAnimateEffectTransition {
	in = 'in',
	out = 'out',
	none = 'none',
}

// CT_TLAnimateEffectBehavior ...
export class CT_TLAnimateEffectBehavior {
	TransitionAttr?: string;
	FilterAttr?: string;
	PrLstAttr?: string;
	CBhvr: CT_TLCommonBehaviorData;
	Progress?: CT_TLAnimVariant;
}

// ST_TLAnimateMotionBehaviorOrigin ...
export enum ST_TLAnimateMotionBehaviorOrigin {
	parent = 'parent',
	layout = 'layout',
}

// ST_TLAnimateMotionPathEditMode ...
export enum ST_TLAnimateMotionPathEditMode {
	relative = 'relative',
	fixed = 'fixed',
}

// CT_TLPoint ...
export class CT_TLPoint {
	XAttr: ST_Percentage;
	YAttr: ST_Percentage;
}

// CT_TLAnimateMotionBehavior ...
export class CT_TLAnimateMotionBehavior {
	OriginAttr?: string;
	PathAttr?: string;
	PathEditModeAttr?: string;
	RAngAttr?: number;
	PtsTypesAttr?: string;
	CBhvr: CT_TLCommonBehaviorData;
	By?: CT_TLPoint;
	From?: CT_TLPoint;
	To?: CT_TLPoint;
	RCtr?: CT_TLPoint;
}

// CT_TLAnimateRotationBehavior ...
export class CT_TLAnimateRotationBehavior {
	ByAttr?: number;
	FromAttr?: number;
	ToAttr?: number;
	CBhvr: CT_TLCommonBehaviorData;
}

// CT_TLAnimateScaleBehavior ...
export class CT_TLAnimateScaleBehavior {
	ZoomContentsAttr?: boolean;
	CBhvr: CT_TLCommonBehaviorData;
	By?: CT_TLPoint;
	From?: CT_TLPoint;
	To?: CT_TLPoint;
}

// ST_TLCommandType ...
export enum ST_TLCommandType {
	evt = 'evt',
	call = 'call',
	verb = 'verb',
}

// CT_TLCommandBehavior ...
export class CT_TLCommandBehavior {
	TypeAttr?: string;
	CmdAttr?: string;
	CBhvr: CT_TLCommonBehaviorData;
}

// CT_TLSetBehavior ...
export class CT_TLSetBehavior {
	CBhvr: CT_TLCommonBehaviorData;
	To?: CT_TLAnimVariant;
}

// CT_TLCommonMediaNodeData ...
export class CT_TLCommonMediaNodeData {
	VolAttr?: ST_PositiveFixedPercentage;
	MuteAttr?: boolean;
	NumSldAttr?: number;
	ShowWhenStoppedAttr?: boolean;
	CTn: CT_TLCommonTimeNodeData;
	TgtEl: CT_TLTimeTargetElement;
}

// CT_TLMediaNodeAudio ...
export class CT_TLMediaNodeAudio {
	IsNarrationAttr?: boolean;
	CMediaNode: CT_TLCommonMediaNodeData;
}

// CT_TLMediaNodeVideo ...
export class CT_TLMediaNodeVideo {
	FullScrnAttr?: boolean;
	CMediaNode: CT_TLCommonMediaNodeData;
}

// AG_TLBuild ...
export class AG_TLBuild {
	SpidAttr: number;
	GrpIdAttr: number;
	UiExpandAttr: boolean | null;
}

// CT_TLTemplate ...
export class CT_TLTemplate {
	LvlAttr?: number;
	TnLst: CT_TimeNodeList;
}

// CT_TLTemplateList ...
export class CT_TLTemplateList {
	Tmpl?: Array<CT_TLTemplate>;
}

// ST_TLParaBuildType ...
export enum ST_TLParaBuildType {
	allAtOnce = 'allAtOnce',
	p = 'p',
	cust = 'cust',
	whole = 'whole',
}

// CT_TLBuildParagraph ...
export class CT_TLBuildParagraph {
	AG_TLBuild: AG_TLBuild;
	BuildAttr?: string;
	BldLvlAttr?: number;
	AnimBgAttr?: boolean;
	AutoUpdateAnimBgAttr?: boolean;
	RevAttr?: boolean;
	AdvAutoAttr?: ST_TLTime;
	TmplLst?: CT_TLTemplateList;
}

// ST_TLDiagramBuildType ...
export enum ST_TLDiagramBuildType {
	whole = 'whole',
	depthByNode = 'depthByNode',
	depthByBranch = 'depthByBranch',
	breadthByNode = 'breadthByNode',
	breadthByLvl = 'breadthByLvl',
	cw = 'cw',
	cwIn = 'cwIn',
	cwOut = 'cwOut',
	ccw = 'ccw',
	ccwIn = 'ccwIn',
	ccwOut = 'ccwOut',
	inByRing = 'inByRing',
	outByRing = 'outByRing',
	up = 'up',
	down = 'down',
	allAtOnce = 'allAtOnce',
	cust = 'cust',
}

// CT_TLBuildDiagram ...
export class CT_TLBuildDiagram {
	AG_TLBuild: AG_TLBuild;
	BldAttr?: string;
}

// ST_TLOleChartBuildType ...
export enum ST_TLOleChartBuildType {
	allAtOnce = 'allAtOnce',
	series = 'series',
	category = 'category',
	seriesEl = 'seriesEl',
	categoryEl = 'categoryEl',
}

// CT_TLOleBuildChart ...
export class CT_TLOleBuildChart {
	AG_TLBuild: AG_TLBuild;
	BldAttr?: string;
	AnimBgAttr?: boolean;
}

// CT_TLGraphicalObjectBuild ...
export class CT_TLGraphicalObjectBuild {
	AG_TLBuild: AG_TLBuild;
	BldAsOne: CT_Empty;
	BldSub: CT_AnimationGraphicalObjectBuildProperties;
}

// CT_BuildList ...
export class CT_BuildList {
	BldP: Array<CT_TLBuildParagraph>;
	BldDgm: Array<CT_TLBuildDiagram>;
	BldOleChart: Array<CT_TLOleBuildChart>;
	BldGraphic: Array<CT_TLGraphicalObjectBuild>;
}

// CT_SlideTiming ...
export class CT_SlideTiming {
	TnLst?: CT_TimeNodeList;
	BldLst?: CT_BuildList;
	ExtLst?: CT_ExtensionListModify;
}

// CT_Empty ...
export class CT_Empty {
}

// ST_Name ...
export type ST_Name = string;

// ST_Direction ...
export enum ST_Direction {
	horz = 'horz',
	vert = 'vert',
}

// ST_Index ...
export type ST_Index = number;

// CT_IndexRange ...
export class CT_IndexRange {
	StAttr: number;
	EndAttr: number;
}

// CT_SlideRelationshipListEntry ...
export class CT_SlideRelationshipListEntry {
	RIdAttr: string;
}

// CT_SlideRelationshipList ...
export class CT_SlideRelationshipList {
	Sld?: Array<CT_SlideRelationshipListEntry>;
}

// CT_CustomShowId ...
export class CT_CustomShowId {
	IdAttr: number;
}

// EG_SlideListChoice ...
export class EG_SlideListChoice {
	SldAll: CT_Empty;
	SldRg: CT_IndexRange;
	CustShow: CT_CustomShowId;
}

// CT_CustomerData ...
export class CT_CustomerData {
	RIdAttr: string;
}

// CT_TagsData ...
export class CT_TagsData {
	RIdAttr: string;
}

// CT_CustomerDataList ...
export class CT_CustomerDataList {
	CustData?: Array<CT_CustomerData>;
	Tags?: CT_TagsData;
}

// CT_Extension ...
export class CT_Extension {
	UriAttr: string;
}

// EG_ExtensionList ...
export class EG_ExtensionList {
	Ext: Array<CT_Extension>;
}

// CT_ExtensionList ...
export class CT_ExtensionList {
	EG_ExtensionList: Array<EG_ExtensionList>;
}

// CT_ExtensionListModify ...
export class CT_ExtensionListModify {
	ModAttr?: boolean;
	EG_ExtensionList: Array<EG_ExtensionList>;
}

// CT_CommentAuthor ...
export class CT_CommentAuthor {
	IdAttr: number;
	NameAttr: string;
	InitialsAttr: string;
	LastIdxAttr: number;
	ClrIdxAttr: number;
	ExtLst?: CT_ExtensionList;
}

// CT_CommentAuthorList ...
export class CT_CommentAuthorList {
	CmAuthor?: Array<CT_CommentAuthor>;
}

// CmAuthorLst ...
export type CmAuthorLst = CT_CommentAuthorList;

// CT_Comment ...
export class CT_Comment {
	AuthorIdAttr: number;
	DtAttr?: string;
	IdxAttr: number;
	Pos: CT_Point2D;
	Text: string;
	ExtLst?: CT_ExtensionListModify;
}

// CT_CommentList ...
export class CT_CommentList {
	Cm?: Array<CT_Comment>;
}

// CmLst ...
export type CmLst = CT_CommentList;

// AG_Ole ...
export class AG_Ole {
	NameAttr: string | null;
	ShowAsIconAttr: boolean | null;
	RIdAttr: string | null;
	ImgWAttr: number | null;
	ImgHAttr: number | null;
}

// ST_OleObjectFollowColorScheme ...
export enum ST_OleObjectFollowColorScheme {
	none = 'none',
	full = 'full',
	textAndBackground = 'textAndBackground',
}

// CT_OleObjectEmbed ...
export class CT_OleObjectEmbed {
	FollowColorSchemeAttr?: string;
	ExtLst?: CT_ExtensionList;
}

// CT_OleObjectLink ...
export class CT_OleObjectLink {
	UpdateAutomaticAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_OleObject ...
export class CT_OleObject {
	AG_Ole: AG_Ole;
	ProgIdAttr?: string;
	Embed: CT_OleObjectEmbed;
	Link: CT_OleObjectLink;
	Pic: CT_Picture;
}

// OleObj ...
export type OleObj = CT_OleObject;

// CT_Control ...
export class CT_Control {
	AG_Ole: AG_Ole;
	ExtLst?: CT_ExtensionList;
	Pic?: CT_Picture;
}

// CT_ControlList ...
export class CT_ControlList {
	Control?: Array<CT_Control>;
}

// ST_SlideId ...
export type ST_SlideId = number;

// CT_SlideIdListEntry ...
export class CT_SlideIdListEntry {
	IdAttr: number;
	RIdAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_SlideIdList ...
export class CT_SlideIdList {
	SldId?: Array<CT_SlideIdListEntry>;
}

// ST_SlideMasterId ...
export type ST_SlideMasterId = number;

// CT_SlideMasterIdListEntry ...
export class CT_SlideMasterIdListEntry {
	IdAttr?: number;
	RIdAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_SlideMasterIdList ...
export class CT_SlideMasterIdList {
	SldMasterId?: Array<CT_SlideMasterIdListEntry>;
}

// CT_NotesMasterIdListEntry ...
export class CT_NotesMasterIdListEntry {
	RIdAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_NotesMasterIdList ...
export class CT_NotesMasterIdList {
	NotesMasterId?: CT_NotesMasterIdListEntry;
}

// CT_HandoutMasterIdListEntry ...
export class CT_HandoutMasterIdListEntry {
	RIdAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_HandoutMasterIdList ...
export class CT_HandoutMasterIdList {
	HandoutMasterId?: CT_HandoutMasterIdListEntry;
}

// CT_EmbeddedFontDataId ...
export class CT_EmbeddedFontDataId {
	RIdAttr: string;
}

// CT_EmbeddedFontListEntry ...
export class CT_EmbeddedFontListEntry {
	Font: CT_TextFont;
	Regular?: CT_EmbeddedFontDataId;
	Bold?: CT_EmbeddedFontDataId;
	Italic?: CT_EmbeddedFontDataId;
	BoldItalic?: CT_EmbeddedFontDataId;
}

// CT_EmbeddedFontList ...
export class CT_EmbeddedFontList {
	EmbeddedFont?: Array<CT_EmbeddedFontListEntry>;
}

// CT_SmartTags ...
export class CT_SmartTags {
	RIdAttr: string;
}

// CT_CustomShow ...
export class CT_CustomShow {
	NameAttr: string;
	IdAttr: number;
	SldLst: CT_SlideRelationshipList;
	ExtLst?: CT_ExtensionList;
}

// CT_CustomShowList ...
export class CT_CustomShowList {
	CustShow?: Array<CT_CustomShow>;
}

// ST_PhotoAlbumLayout ...
export enum ST_PhotoAlbumLayout {
	fitToSlide = 'fitToSlide',
	1pic = '1pic',
	2pic = '2pic',
	4pic = '4pic',
	1picTitle = '1picTitle',
	2picTitle = '2picTitle',
	4picTitle = '4picTitle',
}

// ST_PhotoAlbumFrameShape ...
export enum ST_PhotoAlbumFrameShape {
	frameStyle1 = 'frameStyle1',
	frameStyle2 = 'frameStyle2',
	frameStyle3 = 'frameStyle3',
	frameStyle4 = 'frameStyle4',
	frameStyle5 = 'frameStyle5',
	frameStyle6 = 'frameStyle6',
	frameStyle7 = 'frameStyle7',
}

// CT_PhotoAlbum ...
export class CT_PhotoAlbum {
	BwAttr?: boolean;
	ShowCaptionsAttr?: boolean;
	LayoutAttr?: string;
	FrameAttr?: string;
	ExtLst?: CT_ExtensionList;
}

// ST_SlideSizeCoordinate ...
export type ST_SlideSizeCoordinate = number;

// ST_SlideSizeType ...
export enum ST_SlideSizeType {
	screen4x3 = 'screen4x3',
	letter = 'letter',
	A4 = 'A4',
	35mm = '35mm',
	overhead = 'overhead',
	banner = 'banner',
	custom = 'custom',
	ledger = 'ledger',
	A3 = 'A3',
	B4ISO = 'B4ISO',
	B5ISO = 'B5ISO',
	B4JIS = 'B4JIS',
	B5JIS = 'B5JIS',
	hagakiCard = 'hagakiCard',
	screen16x9 = 'screen16x9',
	screen16x10 = 'screen16x10',
}

// CT_SlideSize ...
export class CT_SlideSize {
	CxAttr: number;
	CyAttr: number;
	TypeAttr?: string;
}

// CT_Kinsoku ...
export class CT_Kinsoku {
	LangAttr?: string;
	InvalStCharsAttr: string;
	InvalEndCharsAttr: string;
}

// ST_BookmarkIdSeed ...
export type ST_BookmarkIdSeed = number;

// CT_ModifyVerifier ...
export class CT_ModifyVerifier {
	AlgorithmNameAttr?: string;
	HashValueAttr?: Uint8Array;
	SaltValueAttr?: Uint8Array;
	SpinValueAttr?: number;
}

// CT_Presentation ...
export class CT_Presentation {
	ServerZoomAttr?: ST_Percentage;
	FirstSlideNumAttr?: number;
	ShowSpecialPlsOnTitleSldAttr?: boolean;
	RtlAttr?: boolean;
	RemovePersonalInfoOnSaveAttr?: boolean;
	CompatModeAttr?: boolean;
	StrictFirstAndLastCharsAttr?: boolean;
	EmbedTrueTypeFontsAttr?: boolean;
	SaveSubsetFontsAttr?: boolean;
	AutoCompressPicturesAttr?: boolean;
	BookmarkIdSeedAttr?: number;
	ConformanceAttr?: string;
	SldMasterIdLst?: CT_SlideMasterIdList;
	NotesMasterIdLst?: CT_NotesMasterIdList;
	HandoutMasterIdLst?: CT_HandoutMasterIdList;
	SldIdLst?: CT_SlideIdList;
	SldSz?: CT_SlideSize;
	NotesSz: CT_PositiveSize2D;
	SmartTags?: CT_SmartTags;
	EmbeddedFontLst?: CT_EmbeddedFontList;
	CustShowLst?: CT_CustomShowList;
	PhotoAlbum?: CT_PhotoAlbum;
	CustDataLst?: CT_CustomerDataList;
	Kinsoku?: CT_Kinsoku;
	DefaultTextStyle?: CT_TextListStyle;
	ModifyVerifier?: CT_ModifyVerifier;
	ExtLst?: CT_ExtensionList;
}

// Presentation ...
export type Presentation = CT_Presentation;

// CT_HtmlPublishProperties ...
export class CT_HtmlPublishProperties {
	ShowSpeakerNotesAttr?: boolean;
	TargetAttr?: string;
	TitleAttr?: string;
	RIdAttr: string;
	EG_SlideListChoice: Array<EG_SlideListChoice>;
	ExtLst?: CT_ExtensionList;
}

// ST_PrintWhat ...
export enum ST_PrintWhat {
	slides = 'slides',
	handouts1 = 'handouts1',
	handouts2 = 'handouts2',
	handouts3 = 'handouts3',
	handouts4 = 'handouts4',
	handouts6 = 'handouts6',
	handouts9 = 'handouts9',
	notes = 'notes',
	outline = 'outline',
}

// ST_PrintColorMode ...
export enum ST_PrintColorMode {
	bw = 'bw',
	gray = 'gray',
	clr = 'clr',
}

// CT_PrintProperties ...
export class CT_PrintProperties {
	PrnWhatAttr?: string;
	ClrModeAttr?: string;
	HiddenSlidesAttr?: boolean;
	ScaleToFitPaperAttr?: boolean;
	FrameSlidesAttr?: boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_ShowInfoBrowse ...
export class CT_ShowInfoBrowse {
	ShowScrollbarAttr?: boolean;
}

// CT_ShowInfoKiosk ...
export class CT_ShowInfoKiosk {
	RestartAttr?: number;
}

// EG_ShowType ...
export class EG_ShowType {
	Present: CT_Empty;
	Browse: CT_ShowInfoBrowse;
	Kiosk: CT_ShowInfoKiosk;
}

// CT_ShowProperties ...
export class CT_ShowProperties {
	LoopAttr?: boolean;
	ShowNarrationAttr?: boolean;
	ShowAnimationAttr?: boolean;
	UseTimingsAttr?: boolean;
	EG_ShowType: Array<EG_ShowType>;
	EG_SlideListChoice: Array<EG_SlideListChoice>;
	PenClr?: CT_Color;
	ExtLst?: CT_ExtensionList;
}

// CT_PresentationProperties ...
export class CT_PresentationProperties {
	PrnPr?: CT_PrintProperties;
	ShowPr?: CT_ShowProperties;
	ClrMru?: CT_ColorMRU;
	ExtLst?: CT_ExtensionList;
}

// PresentationPr ...
export type PresentationPr = CT_PresentationProperties;

// CT_HeaderFooter ...
export class CT_HeaderFooter {
	SldNumAttr?: boolean;
	HdrAttr?: boolean;
	FtrAttr?: boolean;
	DtAttr?: boolean;
	ExtLst?: CT_ExtensionListModify;
}

// ST_PlaceholderType ...
export enum ST_PlaceholderType {
	title = 'title',
	body = 'body',
	ctrTitle = 'ctrTitle',
	subTitle = 'subTitle',
	dt = 'dt',
	sldNum = 'sldNum',
	ftr = 'ftr',
	hdr = 'hdr',
	obj = 'obj',
	chart = 'chart',
	tbl = 'tbl',
	clipArt = 'clipArt',
	dgm = 'dgm',
	media = 'media',
	sldImg = 'sldImg',
	pic = 'pic',
}

// ST_PlaceholderSize ...
export enum ST_PlaceholderSize {
	full = 'full',
	half = 'half',
	quarter = 'quarter',
}

// CT_Placeholder ...
export class CT_Placeholder {
	TypeAttr?: string;
	OrientAttr?: string;
	SzAttr?: string;
	IdxAttr?: number;
	HasCustomPromptAttr?: boolean;
	ExtLst?: CT_ExtensionListModify;
}

// CT_ApplicationNonVisualDrawingProps ...
export class CT_ApplicationNonVisualDrawingProps {
	IsPhotoAttr?: boolean;
	UserDrawnAttr?: boolean;
	AEG_Media: Array<EG_Media>;
	Ph?: CT_Placeholder;
	CustDataLst?: CT_CustomerDataList;
	ExtLst?: CT_ExtensionList;
}

// CT_ShapeNonVisual ...
export class CT_ShapeNonVisual {
	CNvPr: CT_NonVisualDrawingProps;
	CNvSpPr: CT_NonVisualDrawingShapeProps;
	NvPr: CT_ApplicationNonVisualDrawingProps;
}

// CT_Shape ...
export class CT_Shape {
	UseBgFillAttr?: boolean;
	NvSpPr: CT_ShapeNonVisual;
	SpPr: CT_ShapeProperties;
	Style?: CT_ShapeStyle;
	TxBody?: CT_TextBody;
	ExtLst?: CT_ExtensionListModify;
}

// CT_ConnectorNonVisual ...
export class CT_ConnectorNonVisual {
	CNvPr: CT_NonVisualDrawingProps;
	CNvCxnSpPr: CT_NonVisualConnectorProperties;
	NvPr: CT_ApplicationNonVisualDrawingProps;
}

// CT_Connector ...
export class CT_Connector {
	NvCxnSpPr: CT_ConnectorNonVisual;
	SpPr: CT_ShapeProperties;
	Style?: CT_ShapeStyle;
	ExtLst?: CT_ExtensionListModify;
}

// CT_PictureNonVisual ...
export class CT_PictureNonVisual {
	CNvPr: CT_NonVisualDrawingProps;
	CNvPicPr: CT_NonVisualPictureProperties;
	NvPr: CT_ApplicationNonVisualDrawingProps;
}

// CT_Picture ...
export class CT_Picture {
	NvPicPr: CT_PictureNonVisual;
	BlipFill: CT_BlipFillProperties;
	SpPr: CT_ShapeProperties;
	Style?: CT_ShapeStyle;
	ExtLst?: CT_ExtensionListModify;
}

// CT_GraphicalObjectFrameNonVisual ...
export class CT_GraphicalObjectFrameNonVisual {
	CNvPr: CT_NonVisualDrawingProps;
	CNvGraphicFramePr: CT_NonVisualGraphicFrameProperties;
	NvPr: CT_ApplicationNonVisualDrawingProps;
}

// CT_GraphicalObjectFrame ...
export class CT_GraphicalObjectFrame {
	BwModeAttr?: string;
	NvGraphicFramePr: CT_GraphicalObjectFrameNonVisual;
	Xfrm: CT_Transform2D;
	AGraphic: CT_GraphicalObject;
	ExtLst?: CT_ExtensionListModify;
}

// CT_GroupShapeNonVisual ...
export class CT_GroupShapeNonVisual {
	CNvPr: CT_NonVisualDrawingProps;
	CNvGrpSpPr: CT_NonVisualGroupDrawingShapeProps;
	NvPr: CT_ApplicationNonVisualDrawingProps;
}

// CT_GroupShape ...
export class CT_GroupShape {
	NvGrpSpPr: CT_GroupShapeNonVisual;
	GrpSpPr: CT_GroupShapeProperties;
	Sp: Array<CT_Shape>;
	GrpSp: Array<CT_GroupShape>;
	GraphicFrame: Array<CT_GraphicalObjectFrame>;
	CxnSp: Array<CT_Connector>;
	Pic: Array<CT_Picture>;
	ContentPart: Array<CT_Rel>;
	ExtLst?: CT_ExtensionListModify;
}

// CT_Rel ...
export class CT_Rel {
	RIdAttr: string;
}

// EG_TopLevelSlide ...
export class EG_TopLevelSlide {
	ClrMap: CT_ColorMapping;
}

// EG_ChildSlide ...
export class EG_ChildSlide {
	ClrMapOvr: CT_ColorMappingOverride;
}

// AG_ChildSlide ...
export class AG_ChildSlide {
	ShowMasterSpAttr: boolean | null;
	ShowMasterPhAnimAttr: boolean | null;
}

// CT_BackgroundProperties ...
export class CT_BackgroundProperties {
	ShadeToTitleAttr?: boolean;
	AEG_FillProperties: Array<EG_FillProperties>;
	AEG_EffectProperties: Array<EG_EffectProperties>;
	ExtLst?: CT_ExtensionList;
}

// EG_Background ...
export class EG_Background {
	BgPr: CT_BackgroundProperties;
	BgRef: CT_StyleMatrixReference;
}

// CT_Background ...
export class CT_Background {
	BwModeAttr?: string;
	EG_Background: EG_Background;
}

// CT_CommonSlideData ...
export class CT_CommonSlideData {
	NameAttr?: string;
	Bg?: CT_Background;
	SpTree: CT_GroupShape;
	CustDataLst?: CT_CustomerDataList;
	Controls?: CT_ControlList;
	ExtLst?: CT_ExtensionList;
}

// CT_Slide ...
export class CT_Slide {
	AG_ChildSlide: AG_ChildSlide;
	ShowAttr?: boolean;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: CT_CommonSlideData;
	Transition?: CT_SlideTransition;
	Timing?: CT_SlideTiming;
	ExtLst?: CT_ExtensionListModify;
}

// Sld ...
export type Sld = CT_Slide;

// ST_SlideLayoutType ...
export enum ST_SlideLayoutType {
	title = 'title',
	tx = 'tx',
	twoColTx = 'twoColTx',
	tbl = 'tbl',
	txAndChart = 'txAndChart',
	chartAndTx = 'chartAndTx',
	dgm = 'dgm',
	chart = 'chart',
	txAndClipArt = 'txAndClipArt',
	clipArtAndTx = 'clipArtAndTx',
	titleOnly = 'titleOnly',
	blank = 'blank',
	txAndObj = 'txAndObj',
	objAndTx = 'objAndTx',
	objOnly = 'objOnly',
	obj = 'obj',
	txAndMedia = 'txAndMedia',
	mediaAndTx = 'mediaAndTx',
	objOverTx = 'objOverTx',
	txOverObj = 'txOverObj',
	txAndTwoObj = 'txAndTwoObj',
	twoObjAndTx = 'twoObjAndTx',
	twoObjOverTx = 'twoObjOverTx',
	fourObj = 'fourObj',
	vertTx = 'vertTx',
	clipArtAndVertTx = 'clipArtAndVertTx',
	vertTitleAndTx = 'vertTitleAndTx',
	vertTitleAndTxOverChart = 'vertTitleAndTxOverChart',
	twoObj = 'twoObj',
	objAndTwoObj = 'objAndTwoObj',
	twoObjAndObj = 'twoObjAndObj',
	cust = 'cust',
	secHead = 'secHead',
	twoTxTwoObj = 'twoTxTwoObj',
	objTx = 'objTx',
	picTx = 'picTx',
}

// CT_SlideLayout ...
export class CT_SlideLayout {
	AG_ChildSlide: AG_ChildSlide;
	MatchingNameAttr?: string;
	TypeAttr?: string;
	PreserveAttr?: boolean;
	UserDrawnAttr?: boolean;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: CT_CommonSlideData;
	Transition?: CT_SlideTransition;
	Timing?: CT_SlideTiming;
	Hf?: CT_HeaderFooter;
	ExtLst?: CT_ExtensionListModify;
}

// SldLayout ...
export type SldLayout = CT_SlideLayout;

// CT_SlideMasterTextStyles ...
export class CT_SlideMasterTextStyles {
	TitleStyle?: CT_TextListStyle;
	BodyStyle?: CT_TextListStyle;
	OtherStyle?: CT_TextListStyle;
	ExtLst?: CT_ExtensionList;
}

// ST_SlideLayoutId ...
export type ST_SlideLayoutId = number;

// CT_SlideLayoutIdListEntry ...
export class CT_SlideLayoutIdListEntry {
	IdAttr?: number;
	RIdAttr: string;
	ExtLst?: CT_ExtensionList;
}

// CT_SlideLayoutIdList ...
export class CT_SlideLayoutIdList {
	SldLayoutId?: Array<CT_SlideLayoutIdListEntry>;
}

// CT_SlideMaster ...
export class CT_SlideMaster {
	PreserveAttr?: boolean;
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: CT_CommonSlideData;
	SldLayoutIdLst?: CT_SlideLayoutIdList;
	Transition?: CT_SlideTransition;
	Timing?: CT_SlideTiming;
	Hf?: CT_HeaderFooter;
	TxStyles?: CT_SlideMasterTextStyles;
	ExtLst?: CT_ExtensionListModify;
}

// SldMaster ...
export type SldMaster = CT_SlideMaster;

// CT_HandoutMaster ...
export class CT_HandoutMaster {
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: CT_CommonSlideData;
	Hf?: CT_HeaderFooter;
	ExtLst?: CT_ExtensionListModify;
}

// HandoutMaster ...
export type HandoutMaster = CT_HandoutMaster;

// CT_NotesMaster ...
export class CT_NotesMaster {
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: CT_CommonSlideData;
	Hf?: CT_HeaderFooter;
	NotesStyle?: CT_TextListStyle;
	ExtLst?: CT_ExtensionListModify;
}

// NotesMaster ...
export type NotesMaster = CT_NotesMaster;

// CT_NotesSlide ...
export class CT_NotesSlide {
	AG_ChildSlide: AG_ChildSlide;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: CT_CommonSlideData;
	ExtLst?: CT_ExtensionListModify;
}

// Notes ...
export type Notes = CT_NotesSlide;

// CT_SlideSyncProperties ...
export class CT_SlideSyncProperties {
	ServerSldIdAttr: string;
	ServerSldModifiedTimeAttr: string;
	ClientInsertedTimeAttr: string;
	ExtLst?: CT_ExtensionList;
}

// SldSyncPr ...
export type SldSyncPr = CT_SlideSyncProperties;

// CT_StringTag ...
export class CT_StringTag {
	NameAttr: string;
	ValAttr: string;
}

// CT_TagList ...
export class CT_TagList {
	Tag?: Array<CT_StringTag>;
}

// TagLst ...
export type TagLst = CT_TagList;

// ST_SplitterBarState ...
export enum ST_SplitterBarState {
	minimized = 'minimized',
	restored = 'restored',
	maximized = 'maximized',
}

// ST_ViewType ...
export enum ST_ViewType {
	sldView = 'sldView',
	sldMasterView = 'sldMasterView',
	notesView = 'notesView',
	handoutView = 'handoutView',
	notesMasterView = 'notesMasterView',
	outlineView = 'outlineView',
	sldSorterView = 'sldSorterView',
	sldThumbnailView = 'sldThumbnailView',
}

// CT_NormalViewPortion ...
export class CT_NormalViewPortion {
	SzAttr: ST_PositiveFixedPercentage;
	AutoAdjustAttr?: boolean;
}

// CT_NormalViewProperties ...
export class CT_NormalViewProperties {
	ShowOutlineIconsAttr?: boolean;
	SnapVertSplitterAttr?: boolean;
	VertBarStateAttr?: string;
	HorzBarStateAttr?: string;
	PreferSingleViewAttr?: boolean;
	RestoredLeft: CT_NormalViewPortion;
	RestoredTop: CT_NormalViewPortion;
	ExtLst?: CT_ExtensionList;
}

// CT_CommonViewProperties ...
export class CT_CommonViewProperties {
	VarScaleAttr?: boolean;
	Scale: CT_Scale2D;
	Origin: CT_Point2D;
}

// CT_NotesTextViewProperties ...
export class CT_NotesTextViewProperties {
	CViewPr: CT_CommonViewProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_OutlineViewSlideEntry ...
export class CT_OutlineViewSlideEntry {
	RIdAttr: string;
	CollapseAttr?: boolean;
}

// CT_OutlineViewSlideList ...
export class CT_OutlineViewSlideList {
	Sld?: Array<CT_OutlineViewSlideEntry>;
}

// CT_OutlineViewProperties ...
export class CT_OutlineViewProperties {
	CViewPr: CT_CommonViewProperties;
	SldLst?: CT_OutlineViewSlideList;
	ExtLst?: CT_ExtensionList;
}

// CT_SlideSorterViewProperties ...
export class CT_SlideSorterViewProperties {
	ShowFormattingAttr?: boolean;
	CViewPr: CT_CommonViewProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_Guide ...
export class CT_Guide {
	OrientAttr?: string;
	PosAttr?: ST_Coordinate32;
}

// CT_GuideList ...
export class CT_GuideList {
	Guide?: Array<CT_Guide>;
}

// CT_CommonSlideViewProperties ...
export class CT_CommonSlideViewProperties {
	SnapToGridAttr?: boolean;
	SnapToObjectsAttr?: boolean;
	ShowGuidesAttr?: boolean;
	CViewPr: CT_CommonViewProperties;
	GuideLst?: CT_GuideList;
}

// CT_SlideViewProperties ...
export class CT_SlideViewProperties {
	CSldViewPr: CT_CommonSlideViewProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_NotesViewProperties ...
export class CT_NotesViewProperties {
	CSldViewPr: CT_CommonSlideViewProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_ViewProperties ...
export class CT_ViewProperties {
	LastViewAttr?: string;
	ShowCommentsAttr?: boolean;
	NormalViewPr?: CT_NormalViewProperties;
	SlideViewPr?: CT_SlideViewProperties;
	OutlineViewPr?: CT_OutlineViewProperties;
	NotesTextViewPr?: CT_NotesTextViewProperties;
	SorterViewPr?: CT_SlideSorterViewProperties;
	NotesViewPr?: CT_NotesViewProperties;
	GridSpacing?: CT_PositiveSize2D;
	ExtLst?: CT_ExtensionList;
}

// ViewPr ...
export type ViewPr = CT_ViewProperties;
