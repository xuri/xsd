// Code generated by xgen. DO NOT EDIT.

// CT_Boolean ...
export class CT_Boolean {
	ValAttr?: boolean;
}

// CT_Double ...
export class CT_Double {
	ValAttr: number;
}

// CT_UnsignedInt ...
export class CT_UnsignedInt {
	ValAttr: number;
}

// CT_RelId ...
export class CT_RelId {
	RIdAttr: string;
}

// CT_Extension ...
export class CT_Extension {
	UriAttr?: string;
}

// CT_ExtensionList ...
export class CT_ExtensionList {
	Ext?: Array<CT_Extension>;
}

// CT_NumVal ...
export class CT_NumVal {
	IdxAttr: number;
	FormatCodeAttr?: string;
	V: string;
}

// CT_NumData ...
export class CT_NumData {
	FormatCode?: string;
	PtCount?: CT_UnsignedInt;
	Pt?: Array<CT_NumVal>;
	ExtLst?: CT_ExtensionList;
}

// CT_NumRef ...
export class CT_NumRef {
	F: string;
	NumCache?: CT_NumData;
	ExtLst?: CT_ExtensionList;
}

// CT_NumDataSource ...
export class CT_NumDataSource {
	NumRef: CT_NumRef;
	NumLit: CT_NumData;
}

// CT_StrVal ...
export class CT_StrVal {
	IdxAttr: number;
	V: string;
}

// CT_StrData ...
export class CT_StrData {
	PtCount?: CT_UnsignedInt;
	Pt?: Array<CT_StrVal>;
	ExtLst?: CT_ExtensionList;
}

// CT_StrRef ...
export class CT_StrRef {
	F: string;
	StrCache?: CT_StrData;
	ExtLst?: CT_ExtensionList;
}

// CT_Tx ...
export class CT_Tx {
	StrRef: CT_StrRef;
	Rich: CT_TextBody;
}

// CT_TextLanguageID ...
export class CT_TextLanguageID {
	ValAttr: string;
}

// CT_Lvl ...
export class CT_Lvl {
	Pt?: Array<CT_StrVal>;
}

// CT_MultiLvlStrData ...
export class CT_MultiLvlStrData {
	PtCount?: CT_UnsignedInt;
	Lvl?: Array<CT_Lvl>;
	ExtLst?: CT_ExtensionList;
}

// CT_MultiLvlStrRef ...
export class CT_MultiLvlStrRef {
	F: string;
	MultiLvlStrCache?: CT_MultiLvlStrData;
	ExtLst?: CT_ExtensionList;
}

// CT_AxDataSource ...
export class CT_AxDataSource {
	MultiLvlStrRef: CT_MultiLvlStrRef;
	NumRef: CT_NumRef;
	NumLit: CT_NumData;
	StrRef: CT_StrRef;
	StrLit: CT_StrData;
}

// CT_SerTx ...
export class CT_SerTx {
	StrRef: CT_StrRef;
	V: string;
}

// ST_LayoutTarget ...
export enum ST_LayoutTarget {
	inner = 'inner',
	outer = 'outer',
}

// CT_LayoutTarget ...
export class CT_LayoutTarget {
	ValAttr?: string;
}

// ST_LayoutMode ...
export enum ST_LayoutMode {
	edge = 'edge',
	factor = 'factor',
}

// CT_LayoutMode ...
export class CT_LayoutMode {
	ValAttr?: string;
}

// CT_ManualLayout ...
export class CT_ManualLayout {
	LayoutTarget?: CT_LayoutTarget;
	XMode?: CT_LayoutMode;
	YMode?: CT_LayoutMode;
	WMode?: CT_LayoutMode;
	HMode?: CT_LayoutMode;
	X?: CT_Double;
	Y?: CT_Double;
	W?: CT_Double;
	H?: CT_Double;
	ExtLst?: CT_ExtensionList;
}

// CT_Layout ...
export class CT_Layout {
	ManualLayout?: CT_ManualLayout;
	ExtLst?: CT_ExtensionList;
}

// CT_Title ...
export class CT_Title {
	Tx?: CT_Tx;
	Layout?: CT_Layout;
	Overlay?: CT_Boolean;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	ExtLst?: CT_ExtensionList;
}

// ST_RotX ...
export type ST_RotX = any;

// CT_RotX ...
export class CT_RotX {
	ValAttr?: any;
}

// ST_HPercent ...
export class ST_HPercent {
	ST_HPercentWithSymbol: ST_HPercentWithSymbol;
}

// ST_HPercentWithSymbol ...
export type ST_HPercentWithSymbol = string;

// CT_HPercent ...
export class CT_HPercent {
	ValAttr?: ST_HPercent;
}

// ST_RotY ...
export type ST_RotY = number;

// CT_RotY ...
export class CT_RotY {
	ValAttr?: number;
}

// ST_DepthPercent ...
export class ST_DepthPercent {
	ST_DepthPercentWithSymbol: ST_DepthPercentWithSymbol;
}

// ST_DepthPercentWithSymbol ...
export type ST_DepthPercentWithSymbol = string;

// CT_DepthPercent ...
export class CT_DepthPercent {
	ValAttr?: ST_DepthPercent;
}

// ST_Perspective ...
export type ST_Perspective = any;

// CT_Perspective ...
export class CT_Perspective {
	ValAttr?: any;
}

// CT_View3D ...
export class CT_View3D {
	RotX?: CT_RotX;
	HPercent?: CT_HPercent;
	RotY?: CT_RotY;
	DepthPercent?: CT_DepthPercent;
	RAngAx?: CT_Boolean;
	Perspective?: CT_Perspective;
	ExtLst?: CT_ExtensionList;
}

// CT_Surface ...
export class CT_Surface {
	Thickness?: CT_Thickness;
	SpPr?: CT_ShapeProperties;
	PictureOptions?: CT_PictureOptions;
	ExtLst?: CT_ExtensionList;
}

// ST_Thickness ...
export class ST_Thickness {
	ST_ThicknessPercent: ST_ThicknessPercent;
}

// ST_ThicknessPercent ...
export type ST_ThicknessPercent = string;

// CT_Thickness ...
export class CT_Thickness {
	ValAttr: ST_Thickness;
}

// CT_DTable ...
export class CT_DTable {
	ShowHorzBorder?: CT_Boolean;
	ShowVertBorder?: CT_Boolean;
	ShowOutline?: CT_Boolean;
	ShowKeys?: CT_Boolean;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	ExtLst?: CT_ExtensionList;
}

// ST_GapAmount ...
export class ST_GapAmount {
	ST_GapAmountPercent: ST_GapAmountPercent;
}

// ST_GapAmountPercent ...
export type ST_GapAmountPercent = string;

// CT_GapAmount ...
export class CT_GapAmount {
	ValAttr?: ST_GapAmount;
}

// ST_Overlap ...
export class ST_Overlap {
	ST_OverlapPercent: ST_OverlapPercent;
}

// ST_OverlapPercent ...
export type ST_OverlapPercent = string;

// CT_Overlap ...
export class CT_Overlap {
	ValAttr?: ST_Overlap;
}

// ST_BubbleScale ...
export class ST_BubbleScale {
	ST_BubbleScalePercent: ST_BubbleScalePercent;
}

// ST_BubbleScalePercent ...
export type ST_BubbleScalePercent = string;

// CT_BubbleScale ...
export class CT_BubbleScale {
	ValAttr?: ST_BubbleScale;
}

// ST_SizeRepresents ...
export enum ST_SizeRepresents {
	area = 'area',
	w = 'w',
}

// CT_SizeRepresents ...
export class CT_SizeRepresents {
	ValAttr?: string;
}

// ST_FirstSliceAng ...
export type ST_FirstSliceAng = number;

// CT_FirstSliceAng ...
export class CT_FirstSliceAng {
	ValAttr?: number;
}

// ST_HoleSize ...
export class ST_HoleSize {
	ST_HoleSizePercent: ST_HoleSizePercent;
}

// ST_HoleSizePercent ...
export type ST_HoleSizePercent = string;

// CT_HoleSize ...
export class CT_HoleSize {
	ValAttr?: ST_HoleSize;
}

// ST_SplitType ...
export enum ST_SplitType {
	auto = 'auto',
	cust = 'cust',
	percent = 'percent',
	pos = 'pos',
	val = 'val',
}

// CT_SplitType ...
export class CT_SplitType {
	ValAttr?: string;
}

// CT_CustSplit ...
export class CT_CustSplit {
	SecondPiePt?: Array<CT_UnsignedInt>;
}

// ST_SecondPieSize ...
export class ST_SecondPieSize {
	ST_SecondPieSizePercent: ST_SecondPieSizePercent;
}

// ST_SecondPieSizePercent ...
export type ST_SecondPieSizePercent = string;

// CT_SecondPieSize ...
export class CT_SecondPieSize {
	ValAttr?: ST_SecondPieSize;
}

// CT_NumFmt ...
export class CT_NumFmt {
	FormatCodeAttr: string;
	SourceLinkedAttr?: boolean;
}

// ST_LblAlgn ...
export enum ST_LblAlgn {
	ctr = 'ctr',
	l = 'l',
	r = 'r',
}

// CT_LblAlgn ...
export class CT_LblAlgn {
	ValAttr: string;
}

// ST_DLblPos ...
export enum ST_DLblPos {
	bestFit = 'bestFit',
	b = 'b',
	ctr = 'ctr',
	inBase = 'inBase',
	inEnd = 'inEnd',
	l = 'l',
	outEnd = 'outEnd',
	r = 'r',
	t = 't',
}

// CT_DLblPos ...
export class CT_DLblPos {
	ValAttr: string;
}

// EG_DLblShared ...
export class EG_DLblShared {
	NumFmt: CT_NumFmt;
	SpPr: CT_ShapeProperties;
	TxPr: CT_TextBody;
	DLblPos: CT_DLblPos;
	ShowLegendKey: CT_Boolean;
	ShowVal: CT_Boolean;
	ShowCatName: CT_Boolean;
	ShowSerName: CT_Boolean;
	ShowPercent: CT_Boolean;
	ShowBubbleSize: CT_Boolean;
	Separator: string;
}

// Group_DLbl ...
export class Group_DLbl {
	Layout: CT_Layout;
	Tx: CT_Tx;
	EG_DLblShared: Array<EG_DLblShared>;
}

// CT_DLbl ...
export class CT_DLbl {
	Group_DLbl: Array<Group_DLbl>;
	Idx: CT_UnsignedInt;
	Delete: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// Group_DLbls ...
export class Group_DLbls {
	ShowLeaderLines: CT_Boolean;
	LeaderLines: CT_ChartLines;
	EG_DLblShared: Array<EG_DLblShared>;
}

// CT_DLbls ...
export class CT_DLbls {
	Group_DLbls: Array<Group_DLbls>;
	DLbl?: Array<CT_DLbl>;
	Delete: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// ST_MarkerStyle ...
export enum ST_MarkerStyle {
	circle = 'circle',
	dash = 'dash',
	diamond = 'diamond',
	dot = 'dot',
	none = 'none',
	picture = 'picture',
	plus = 'plus',
	square = 'square',
	star = 'star',
	triangle = 'triangle',
	x = 'x',
	auto = 'auto',
}

// CT_MarkerStyle ...
export class CT_MarkerStyle {
	ValAttr: string;
}

// ST_MarkerSize ...
export type ST_MarkerSize = any;

// CT_MarkerSize ...
export class CT_MarkerSize {
	ValAttr?: any;
}

// CT_Marker ...
export class CT_Marker {
	Symbol?: CT_MarkerStyle;
	Size?: CT_MarkerSize;
	SpPr?: CT_ShapeProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_DPt ...
export class CT_DPt {
	Idx: CT_UnsignedInt;
	InvertIfNegative?: CT_Boolean;
	Marker?: CT_Marker;
	Bubble3D?: CT_Boolean;
	Explosion?: CT_UnsignedInt;
	SpPr?: CT_ShapeProperties;
	PictureOptions?: CT_PictureOptions;
	ExtLst?: CT_ExtensionList;
}

// ST_TrendlineType ...
export enum ST_TrendlineType {
	exp = 'exp',
	linear = 'linear',
	log = 'log',
	movingAvg = 'movingAvg',
	poly = 'poly',
	power = 'power',
}

// CT_TrendlineType ...
export class CT_TrendlineType {
	ValAttr?: string;
}

// ST_Order ...
export type ST_Order = any;

// CT_Order ...
export class CT_Order {
	ValAttr?: any;
}

// ST_Period ...
export type ST_Period = number;

// CT_Period ...
export class CT_Period {
	ValAttr?: number;
}

// CT_TrendlineLbl ...
export class CT_TrendlineLbl {
	Layout?: CT_Layout;
	Tx?: CT_Tx;
	NumFmt?: CT_NumFmt;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	ExtLst?: CT_ExtensionList;
}

// CT_Trendline ...
export class CT_Trendline {
	Name?: string;
	SpPr?: CT_ShapeProperties;
	TrendlineType: CT_TrendlineType;
	Order?: CT_Order;
	Period?: CT_Period;
	Forward?: CT_Double;
	Backward?: CT_Double;
	Intercept?: CT_Double;
	DispRSqr?: CT_Boolean;
	DispEq?: CT_Boolean;
	TrendlineLbl?: CT_TrendlineLbl;
	ExtLst?: CT_ExtensionList;
}

// ST_ErrDir ...
export enum ST_ErrDir {
	x = 'x',
	y = 'y',
}

// CT_ErrDir ...
export class CT_ErrDir {
	ValAttr: string;
}

// ST_ErrBarType ...
export enum ST_ErrBarType {
	both = 'both',
	minus = 'minus',
	plus = 'plus',
}

// CT_ErrBarType ...
export class CT_ErrBarType {
	ValAttr?: string;
}

// ST_ErrValType ...
export enum ST_ErrValType {
	cust = 'cust',
	fixedVal = 'fixedVal',
	percentage = 'percentage',
	stdDev = 'stdDev',
	stdErr = 'stdErr',
}

// CT_ErrValType ...
export class CT_ErrValType {
	ValAttr?: string;
}

// CT_ErrBars ...
export class CT_ErrBars {
	ErrDir?: CT_ErrDir;
	ErrBarType: CT_ErrBarType;
	ErrValType: CT_ErrValType;
	NoEndCap?: CT_Boolean;
	Plus?: CT_NumDataSource;
	Minus?: CT_NumDataSource;
	Val?: CT_Double;
	SpPr?: CT_ShapeProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_UpDownBar ...
export class CT_UpDownBar {
	SpPr?: CT_ShapeProperties;
}

// CT_UpDownBars ...
export class CT_UpDownBars {
	GapWidth?: CT_GapAmount;
	UpBars?: CT_UpDownBar;
	DownBars?: CT_UpDownBar;
	ExtLst?: CT_ExtensionList;
}

// EG_SerShared ...
export class EG_SerShared {
	Idx: CT_UnsignedInt;
	Order: CT_UnsignedInt;
	Tx: CT_SerTx;
	SpPr: CT_ShapeProperties;
}

// CT_LineSer ...
export class CT_LineSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker?: CT_Marker;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Trendline?: Array<CT_Trendline>;
	ErrBars?: CT_ErrBars;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	Smooth?: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_ScatterSer ...
export class CT_ScatterSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker?: CT_Marker;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Trendline?: Array<CT_Trendline>;
	ErrBars?: Array<CT_ErrBars>;
	XVal?: CT_AxDataSource;
	YVal?: CT_NumDataSource;
	Smooth?: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_RadarSer ...
export class CT_RadarSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker?: CT_Marker;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	ExtLst?: CT_ExtensionList;
}

// CT_BarSer ...
export class CT_BarSer {
	EG_SerShared: Array<EG_SerShared>;
	InvertIfNegative?: CT_Boolean;
	PictureOptions?: CT_PictureOptions;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Trendline?: Array<CT_Trendline>;
	ErrBars?: CT_ErrBars;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	Shape?: CT_Shape;
	ExtLst?: CT_ExtensionList;
}

// CT_AreaSer ...
export class CT_AreaSer {
	EG_SerShared: Array<EG_SerShared>;
	PictureOptions?: CT_PictureOptions;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Trendline?: Array<CT_Trendline>;
	ErrBars?: Array<CT_ErrBars>;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	ExtLst?: CT_ExtensionList;
}

// CT_PieSer ...
export class CT_PieSer {
	EG_SerShared: Array<EG_SerShared>;
	Explosion?: CT_UnsignedInt;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	ExtLst?: CT_ExtensionList;
}

// CT_BubbleSer ...
export class CT_BubbleSer {
	EG_SerShared: Array<EG_SerShared>;
	InvertIfNegative?: CT_Boolean;
	DPt?: Array<CT_DPt>;
	DLbls?: CT_DLbls;
	Trendline?: Array<CT_Trendline>;
	ErrBars?: Array<CT_ErrBars>;
	XVal?: CT_AxDataSource;
	YVal?: CT_NumDataSource;
	BubbleSize?: CT_NumDataSource;
	Bubble3D?: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_SurfaceSer ...
export class CT_SurfaceSer {
	EG_SerShared: Array<EG_SerShared>;
	Cat?: CT_AxDataSource;
	Val?: CT_NumDataSource;
	ExtLst?: CT_ExtensionList;
}

// ST_Grouping ...
export enum ST_Grouping {
	percentStacked = 'percentStacked',
	standard = 'standard',
	stacked = 'stacked',
}

// CT_Grouping ...
export class CT_Grouping {
	ValAttr?: string;
}

// CT_ChartLines ...
export class CT_ChartLines {
	SpPr?: CT_ShapeProperties;
}

// EG_LineChartShared ...
export class EG_LineChartShared {
	Grouping: CT_Grouping;
	VaryColors: CT_Boolean;
	Ser: Array<CT_LineSer>;
	DLbls: CT_DLbls;
	DropLines: CT_ChartLines;
}

// CT_LineChart ...
export class CT_LineChart {
	EG_LineChartShared: Array<EG_LineChartShared>;
	HiLowLines?: CT_ChartLines;
	UpDownBars?: CT_UpDownBars;
	Marker?: CT_Boolean;
	Smooth?: CT_Boolean;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_Line3DChart ...
export class CT_Line3DChart {
	EG_LineChartShared: Array<EG_LineChartShared>;
	GapDepth?: CT_GapAmount;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_StockChart ...
export class CT_StockChart {
	Ser: Array<CT_LineSer>;
	DLbls?: CT_DLbls;
	DropLines?: CT_ChartLines;
	HiLowLines?: CT_ChartLines;
	UpDownBars?: CT_UpDownBars;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// ST_ScatterStyle ...
export enum ST_ScatterStyle {
	none = 'none',
	line = 'line',
	lineMarker = 'lineMarker',
	marker = 'marker',
	smooth = 'smooth',
	smoothMarker = 'smoothMarker',
}

// CT_ScatterStyle ...
export class CT_ScatterStyle {
	ValAttr?: string;
}

// CT_ScatterChart ...
export class CT_ScatterChart {
	ScatterStyle: CT_ScatterStyle;
	VaryColors?: CT_Boolean;
	Ser?: Array<CT_ScatterSer>;
	DLbls?: CT_DLbls;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// ST_RadarStyle ...
export enum ST_RadarStyle {
	standard = 'standard',
	marker = 'marker',
	filled = 'filled',
}

// CT_RadarStyle ...
export class CT_RadarStyle {
	ValAttr?: string;
}

// CT_RadarChart ...
export class CT_RadarChart {
	RadarStyle: CT_RadarStyle;
	VaryColors?: CT_Boolean;
	Ser?: Array<CT_RadarSer>;
	DLbls?: CT_DLbls;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// ST_BarGrouping ...
export enum ST_BarGrouping {
	percentStacked = 'percentStacked',
	clustered = 'clustered',
	standard = 'standard',
	stacked = 'stacked',
}

// CT_BarGrouping ...
export class CT_BarGrouping {
	ValAttr?: string;
}

// ST_BarDir ...
export enum ST_BarDir {
	bar = 'bar',
	col = 'col',
}

// CT_BarDir ...
export class CT_BarDir {
	ValAttr?: string;
}

// ST_Shape ...
export enum ST_Shape {
	cone = 'cone',
	coneToMax = 'coneToMax',
	box = 'box',
	cylinder = 'cylinder',
	pyramid = 'pyramid',
	pyramidToMax = 'pyramidToMax',
}

// CT_Shape ...
export class CT_Shape {
	ValAttr?: string;
}

// EG_BarChartShared ...
export class EG_BarChartShared {
	BarDir: CT_BarDir;
	Grouping: CT_BarGrouping;
	VaryColors: CT_Boolean;
	Ser: Array<CT_BarSer>;
	DLbls: CT_DLbls;
}

// CT_BarChart ...
export class CT_BarChart {
	EG_BarChartShared: Array<EG_BarChartShared>;
	GapWidth?: CT_GapAmount;
	Overlap?: CT_Overlap;
	SerLines?: Array<CT_ChartLines>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_Bar3DChart ...
export class CT_Bar3DChart {
	EG_BarChartShared: Array<EG_BarChartShared>;
	GapWidth?: CT_GapAmount;
	GapDepth?: CT_GapAmount;
	Shape?: CT_Shape;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// EG_AreaChartShared ...
export class EG_AreaChartShared {
	Grouping: CT_Grouping;
	VaryColors: CT_Boolean;
	Ser: Array<CT_AreaSer>;
	DLbls: CT_DLbls;
	DropLines: CT_ChartLines;
}

// CT_AreaChart ...
export class CT_AreaChart {
	EG_AreaChartShared: Array<EG_AreaChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_Area3DChart ...
export class CT_Area3DChart {
	EG_AreaChartShared: Array<EG_AreaChartShared>;
	GapDepth?: CT_GapAmount;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// EG_PieChartShared ...
export class EG_PieChartShared {
	VaryColors: CT_Boolean;
	Ser: Array<CT_PieSer>;
	DLbls: CT_DLbls;
}

// CT_PieChart ...
export class CT_PieChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	FirstSliceAng?: CT_FirstSliceAng;
	ExtLst?: CT_ExtensionList;
}

// CT_Pie3DChart ...
export class CT_Pie3DChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	ExtLst?: CT_ExtensionList;
}

// CT_DoughnutChart ...
export class CT_DoughnutChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	FirstSliceAng?: CT_FirstSliceAng;
	HoleSize?: CT_HoleSize;
	ExtLst?: CT_ExtensionList;
}

// ST_OfPieType ...
export enum ST_OfPieType {
	pie = 'pie',
	bar = 'bar',
}

// CT_OfPieType ...
export class CT_OfPieType {
	ValAttr?: string;
}

// CT_OfPieChart ...
export class CT_OfPieChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	OfPieType: CT_OfPieType;
	GapWidth?: CT_GapAmount;
	SplitType?: CT_SplitType;
	SplitPos?: CT_Double;
	CustSplit?: CT_CustSplit;
	SecondPieSize?: CT_SecondPieSize;
	SerLines?: Array<CT_ChartLines>;
	ExtLst?: CT_ExtensionList;
}

// CT_BubbleChart ...
export class CT_BubbleChart {
	VaryColors?: CT_Boolean;
	Ser?: Array<CT_BubbleSer>;
	DLbls?: CT_DLbls;
	Bubble3D?: CT_Boolean;
	BubbleScale?: CT_BubbleScale;
	ShowNegBubbles?: CT_Boolean;
	SizeRepresents?: CT_SizeRepresents;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_BandFmt ...
export class CT_BandFmt {
	Idx: CT_UnsignedInt;
	SpPr?: CT_ShapeProperties;
}

// CT_BandFmts ...
export class CT_BandFmts {
	BandFmt?: Array<CT_BandFmt>;
}

// EG_SurfaceChartShared ...
export class EG_SurfaceChartShared {
	Wireframe: CT_Boolean;
	Ser: Array<CT_SurfaceSer>;
	BandFmts: CT_BandFmts;
}

// CT_SurfaceChart ...
export class CT_SurfaceChart {
	EG_SurfaceChartShared: Array<EG_SurfaceChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// CT_Surface3DChart ...
export class CT_Surface3DChart {
	EG_SurfaceChartShared: Array<EG_SurfaceChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst?: CT_ExtensionList;
}

// ST_AxPos ...
export enum ST_AxPos {
	b = 'b',
	l = 'l',
	r = 'r',
	t = 't',
}

// CT_AxPos ...
export class CT_AxPos {
	ValAttr: string;
}

// ST_Crosses ...
export enum ST_Crosses {
	autoZero = 'autoZero',
	max = 'max',
	min = 'min',
}

// CT_Crosses ...
export class CT_Crosses {
	ValAttr: string;
}

// ST_CrossBetween ...
export enum ST_CrossBetween {
	between = 'between',
	midCat = 'midCat',
}

// CT_CrossBetween ...
export class CT_CrossBetween {
	ValAttr: string;
}

// ST_TickMark ...
export enum ST_TickMark {
	cross = 'cross',
	in = 'in',
	none = 'none',
	out = 'out',
}

// CT_TickMark ...
export class CT_TickMark {
	ValAttr?: string;
}

// ST_TickLblPos ...
export enum ST_TickLblPos {
	high = 'high',
	low = 'low',
	nextTo = 'nextTo',
	none = 'none',
}

// CT_TickLblPos ...
export class CT_TickLblPos {
	ValAttr?: string;
}

// ST_Skip ...
export type ST_Skip = number;

// CT_Skip ...
export class CT_Skip {
	ValAttr: number;
}

// ST_TimeUnit ...
export enum ST_TimeUnit {
	days = 'days',
	months = 'months',
	years = 'years',
}

// CT_TimeUnit ...
export class CT_TimeUnit {
	ValAttr?: string;
}

// ST_AxisUnit ...
export type ST_AxisUnit = number;

// CT_AxisUnit ...
export class CT_AxisUnit {
	ValAttr: number;
}

// ST_BuiltInUnit ...
export enum ST_BuiltInUnit {
	hundreds = 'hundreds',
	thousands = 'thousands',
	tenThousands = 'tenThousands',
	hundredThousands = 'hundredThousands',
	millions = 'millions',
	tenMillions = 'tenMillions',
	hundredMillions = 'hundredMillions',
	billions = 'billions',
	trillions = 'trillions',
}

// CT_BuiltInUnit ...
export class CT_BuiltInUnit {
	ValAttr?: string;
}

// ST_PictureFormat ...
export enum ST_PictureFormat {
	stretch = 'stretch',
	stack = 'stack',
	stackScale = 'stackScale',
}

// CT_PictureFormat ...
export class CT_PictureFormat {
	ValAttr: string;
}

// ST_PictureStackUnit ...
export type ST_PictureStackUnit = number;

// CT_PictureStackUnit ...
export class CT_PictureStackUnit {
	ValAttr: number;
}

// CT_PictureOptions ...
export class CT_PictureOptions {
	ApplyToFront?: CT_Boolean;
	ApplyToSides?: CT_Boolean;
	ApplyToEnd?: CT_Boolean;
	PictureFormat?: CT_PictureFormat;
	PictureStackUnit?: CT_PictureStackUnit;
}

// CT_DispUnitsLbl ...
export class CT_DispUnitsLbl {
	Layout?: CT_Layout;
	Tx?: CT_Tx;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
}

// CT_DispUnits ...
export class CT_DispUnits {
	CustUnit: CT_Double;
	BuiltInUnit: CT_BuiltInUnit;
	DispUnitsLbl?: CT_DispUnitsLbl;
	ExtLst?: CT_ExtensionList;
}

// ST_Orientation ...
export enum ST_Orientation {
	maxMin = 'maxMin',
	minMax = 'minMax',
}

// CT_Orientation ...
export class CT_Orientation {
	ValAttr?: string;
}

// ST_LogBase ...
export type ST_LogBase = number;

// CT_LogBase ...
export class CT_LogBase {
	ValAttr: number;
}

// CT_Scaling ...
export class CT_Scaling {
	LogBase?: CT_LogBase;
	Orientation?: CT_Orientation;
	Max?: CT_Double;
	Min?: CT_Double;
	ExtLst?: CT_ExtensionList;
}

// ST_LblOffset ...
export class ST_LblOffset {
	ST_LblOffsetPercent: ST_LblOffsetPercent;
}

// ST_LblOffsetPercent ...
export type ST_LblOffsetPercent = string;

// CT_LblOffset ...
export class CT_LblOffset {
	ValAttr?: ST_LblOffset;
}

// EG_AxShared ...
export class EG_AxShared {
	AxId: CT_UnsignedInt;
	Scaling: CT_Scaling;
	Delete: CT_Boolean;
	AxPos: CT_AxPos;
	MajorGridlines: CT_ChartLines;
	MinorGridlines: CT_ChartLines;
	Title: CT_Title;
	NumFmt: CT_NumFmt;
	MajorTickMark: CT_TickMark;
	MinorTickMark: CT_TickMark;
	TickLblPos: CT_TickLblPos;
	SpPr: CT_ShapeProperties;
	TxPr: CT_TextBody;
	CrossAx: CT_UnsignedInt;
	Crosses: CT_Crosses;
	CrossesAt: CT_Double;
}

// CT_CatAx ...
export class CT_CatAx {
	EG_AxShared: Array<EG_AxShared>;
	Auto?: CT_Boolean;
	LblAlgn?: CT_LblAlgn;
	LblOffset?: CT_LblOffset;
	TickLblSkip?: CT_Skip;
	TickMarkSkip?: CT_Skip;
	NoMultiLvlLbl?: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_DateAx ...
export class CT_DateAx {
	EG_AxShared: Array<EG_AxShared>;
	Auto?: CT_Boolean;
	LblOffset?: CT_LblOffset;
	BaseTimeUnit?: CT_TimeUnit;
	MajorUnit?: CT_AxisUnit;
	MajorTimeUnit?: CT_TimeUnit;
	MinorUnit?: CT_AxisUnit;
	MinorTimeUnit?: CT_TimeUnit;
	ExtLst?: CT_ExtensionList;
}

// CT_SerAx ...
export class CT_SerAx {
	EG_AxShared: Array<EG_AxShared>;
	TickLblSkip?: CT_Skip;
	TickMarkSkip?: CT_Skip;
	ExtLst?: CT_ExtensionList;
}

// CT_ValAx ...
export class CT_ValAx {
	EG_AxShared: Array<EG_AxShared>;
	CrossBetween?: CT_CrossBetween;
	MajorUnit?: CT_AxisUnit;
	MinorUnit?: CT_AxisUnit;
	DispUnits?: CT_DispUnits;
	ExtLst?: CT_ExtensionList;
}

// CT_PlotArea ...
export class CT_PlotArea {
	Layout?: CT_Layout;
	AreaChart: Array<CT_AreaChart>;
	Area3DChart: Array<CT_Area3DChart>;
	LineChart: Array<CT_LineChart>;
	Line3DChart: Array<CT_Line3DChart>;
	StockChart: Array<CT_StockChart>;
	RadarChart: Array<CT_RadarChart>;
	ScatterChart: Array<CT_ScatterChart>;
	PieChart: Array<CT_PieChart>;
	Pie3DChart: Array<CT_Pie3DChart>;
	DoughnutChart: Array<CT_DoughnutChart>;
	BarChart: Array<CT_BarChart>;
	Bar3DChart: Array<CT_Bar3DChart>;
	OfPieChart: Array<CT_OfPieChart>;
	SurfaceChart: Array<CT_SurfaceChart>;
	Surface3DChart: Array<CT_Surface3DChart>;
	BubbleChart: Array<CT_BubbleChart>;
	ValAx: Array<CT_ValAx>;
	CatAx: Array<CT_CatAx>;
	DateAx: Array<CT_DateAx>;
	SerAx: Array<CT_SerAx>;
	DTable?: CT_DTable;
	SpPr?: CT_ShapeProperties;
	ExtLst?: CT_ExtensionList;
}

// CT_PivotFmt ...
export class CT_PivotFmt {
	Idx: CT_UnsignedInt;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	Marker?: CT_Marker;
	DLbl?: CT_DLbl;
	ExtLst?: CT_ExtensionList;
}

// CT_PivotFmts ...
export class CT_PivotFmts {
	PivotFmt?: Array<CT_PivotFmt>;
}

// ST_LegendPos ...
export enum ST_LegendPos {
	b = 'b',
	tr = 'tr',
	l = 'l',
	r = 'r',
	t = 't',
}

// CT_LegendPos ...
export class CT_LegendPos {
	ValAttr?: string;
}

// EG_LegendEntryData ...
export class EG_LegendEntryData {
	TxPr: CT_TextBody;
}

// CT_LegendEntry ...
export class CT_LegendEntry {
	EG_LegendEntryData: Array<EG_LegendEntryData>;
	Idx: CT_UnsignedInt;
	Delete: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// CT_Legend ...
export class CT_Legend {
	LegendPos?: CT_LegendPos;
	LegendEntry?: Array<CT_LegendEntry>;
	Layout?: CT_Layout;
	Overlay?: CT_Boolean;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	ExtLst?: CT_ExtensionList;
}

// ST_DispBlanksAs ...
export enum ST_DispBlanksAs {
	span = 'span',
	gap = 'gap',
	zero = 'zero',
}

// CT_DispBlanksAs ...
export class CT_DispBlanksAs {
	ValAttr?: string;
}

// CT_Chart ...
export class CT_Chart {
	Title?: CT_Title;
	AutoTitleDeleted?: CT_Boolean;
	PivotFmts?: CT_PivotFmts;
	View3D?: CT_View3D;
	Floor?: CT_Surface;
	SideWall?: CT_Surface;
	BackWall?: CT_Surface;
	PlotArea: CT_PlotArea;
	Legend?: CT_Legend;
	PlotVisOnly?: CT_Boolean;
	DispBlanksAs?: CT_DispBlanksAs;
	ShowDLblsOverMax?: CT_Boolean;
	ExtLst?: CT_ExtensionList;
}

// ST_Style ...
export type ST_Style = any;

// CT_Style ...
export class CT_Style {
	ValAttr: any;
}

// CT_PivotSource ...
export class CT_PivotSource {
	Name: string;
	FmtId: CT_UnsignedInt;
	ExtLst?: Array<CT_ExtensionList>;
}

// CT_Protection ...
export class CT_Protection {
	ChartObject?: CT_Boolean;
	Data?: CT_Boolean;
	Formatting?: CT_Boolean;
	Selection?: CT_Boolean;
	UserInterface?: CT_Boolean;
}

// CT_HeaderFooter ...
export class CT_HeaderFooter {
	AlignWithMarginsAttr?: boolean;
	DifferentOddEvenAttr?: boolean;
	DifferentFirstAttr?: boolean;
	OddHeader?: string;
	OddFooter?: string;
	EvenHeader?: string;
	EvenFooter?: string;
	FirstHeader?: string;
	FirstFooter?: string;
}

// CT_PageMargins ...
export class CT_PageMargins {
	LAttr: number;
	RAttr: number;
	TAttr: number;
	BAttr: number;
	HeaderAttr: number;
	FooterAttr: number;
}

// ST_PageSetupOrientation ...
export enum ST_PageSetupOrientation {
	default = 'default',
	portrait = 'portrait',
	landscape = 'landscape',
}

// CT_ExternalData ...
export class CT_ExternalData {
	RIdAttr: string;
	AutoUpdate?: CT_Boolean;
}

// CT_PageSetup ...
export class CT_PageSetup {
	PaperSizeAttr?: number;
	PaperHeightAttr?: string;
	PaperWidthAttr?: string;
	FirstPageNumberAttr?: number;
	OrientationAttr?: string;
	BlackAndWhiteAttr?: boolean;
	DraftAttr?: boolean;
	UseFirstPageNumberAttr?: boolean;
	HorizontalDpiAttr?: number;
	VerticalDpiAttr?: number;
	CopiesAttr?: number;
}

// CT_PrintSettings ...
export class CT_PrintSettings {
	HeaderFooter?: CT_HeaderFooter;
	PageMargins?: CT_PageMargins;
	PageSetup?: CT_PageSetup;
}

// CT_ChartSpace ...
export class CT_ChartSpace {
	Date1904?: CT_Boolean;
	Lang?: CT_TextLanguageID;
	RoundedCorners?: CT_Boolean;
	Style?: CT_Style;
	ClrMapOvr?: CT_ColorMapping;
	PivotSource?: CT_PivotSource;
	Protection?: CT_Protection;
	Chart: CT_Chart;
	SpPr?: CT_ShapeProperties;
	TxPr?: CT_TextBody;
	ExternalData?: CT_ExternalData;
	PrintSettings?: CT_PrintSettings;
	UserShapes?: CT_RelId;
	ExtLst?: CT_ExtensionList;
}

// ChartSpace ...
export type ChartSpace = CT_ChartSpace;

// UserShapes ...
export type UserShapes = CT_Drawing;

// Chart ...
export type Chart = CT_RelId;
