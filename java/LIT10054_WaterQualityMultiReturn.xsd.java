// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// DepthValueRecorded is An optional collection of elements relating to recorded sample depth.
public class DepthValueRecorded {
	@XmlElement(required = true, name = "DepthValue")
	protected Float DepthValue;
	@XmlElement(required = true, name = "DepthValueUnits")
	protected void DepthValueUnits;
	@XmlElement(required = true, name = "DepthRelativeTo")
	protected void DepthRelativeTo;
}

// PurgedVolumeRecorded is An optional collection of elements relating to recorded sample volume.
public class PurgedVolumeRecorded {
	@XmlElement(required = true, name = "PurgedVolume")
	protected Float PurgedVolume;
	@XmlElement(required = true, name = "PurgedVolumeUnits")
	protected void PurgedVolumeUnits;
}

// Measurement is This repeating element contains the structure of a Water Quality measurement.
public class Measurement {
	@XmlElement(required = true, name = "DeterminandName")
	protected void DeterminandName;
	@XmlElement(required = true, name = "ResultType")
	protected void ResultType;
	@XmlElement(name = "ResultValue")
	protected Float ResultValue;
	@XmlElement(name = "ResultUnits")
	protected void ResultUnits;
	@XmlElement(name = "Qualifier")
	protected void Qualifier;
	@XmlElement(name = "Comment")
	protected void Comment;
}

// Sample is This element contains the structure of a collection of samples.
public class Sample {
	@XmlElement(name = "Sampler")
	protected void Sampler;
	@XmlElement(required = true, name = "SampleType")
	protected void SampleType;
	@XmlElement(required = true, name = "CustomerSamplePointName")
	protected void CustomerSamplePointName;
	@XmlElement(required = true, name = "SampleDateTime")
	protected String SampleDateTime;
	@XmlElement(required = true, name = "PurposeTypeName")
	protected void PurposeTypeName;
	@XmlElement(required = true, name = "MaterialName")
	protected void MaterialName;
	@XmlElement(required = true, name = "Mechanism")
	protected void Mechanism;
	@XmlElement(required = true, name = "CustomersLabSampleRef")
	protected void CustomersLabSampleRef;
	@XmlElement(name = "CustomersLabSampleRefSecondary")
	protected List<void> CustomersLabSampleRefSecondary;
	@XmlElement(name = "Comment")
	protected void Comment;
	@XmlElement(required = true, name = "LabName")
	protected void LabName;
	@XmlElement(required = true, name = "AnalysisCompleteDateTime")
	protected String AnalysisCompleteDateTime;
	@XmlElement(name = "DepthValueRecorded")
	protected DepthValueRecorded DepthValueRecorded;
	@XmlElement(name = "PurgedVolumeRecorded")
	protected PurgedVolumeRecorded PurgedVolumeRecorded;
	@XmlElement(required = true, name = "Measurement")
	protected List<Measurement> Measurement;
}

// FileUpload ...
public class FileUpload {
	@XmlElement(required = true, name = "Source")
	protected void Source;
	@XmlElement(required = true, name = "Sample")
	protected List<Sample> Sample;
	@XmlElement(required = true, name = "RegulatedCustomerIdentifier")
	protected void RegulatedCustomerIdentifier;
	@XmlElement(name = "CustomerReference")
	protected void CustomerReference;
}

// MandatoryStringType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MandatoryStringType")
public class MandatoryStringType {
	protected String MandatoryStringType;
}

// EmailFieldType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "EmailFieldType")
public class EmailFieldType {
	protected String EmailFieldType;
}
