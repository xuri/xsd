// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// CT_CTName ...
public class CT_CTName {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_CTDescription ...
public class CT_CTDescription {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_CTCategory ...
public class CT_CTCategory {
	@XmlAttribute(required = true, name = "type")
	protected QName TypeAttr;
	@XmlAttribute(required = true, name = "pri")
	protected Integer PriAttr;
}

// CT_CTCategories ...
public class CT_CTCategories {
	@XmlElement(name = "cat")
	protected List<CT_CTCategory> Cat;
}

// ST_ClrAppMethod ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ClrAppMethod")
public class ST_ClrAppMethod {
	protected String ST_ClrAppMethod;
}

// ST_HueDir ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HueDir")
public class ST_HueDir {
	protected String ST_HueDir;
}

// CT_Colors ...
public class CT_Colors {
	@XmlAttribute(name = "meth")
	protected String MethAttr;
	@XmlAttribute(name = "hueDir")
	protected String HueDirAttr;
	protected List<EG_ColorChoice> AEG_ColorChoice;
}

// CT_CTStyleLabel ...
public class CT_CTStyleLabel {
	@XmlAttribute(required = true, name = "name")
	protected String NameAttr;
	@XmlElement(name = "fillClrLst")
	protected CT_Colors FillClrLst;
	@XmlElement(name = "linClrLst")
	protected CT_Colors LinClrLst;
	@XmlElement(name = "effectClrLst")
	protected CT_Colors EffectClrLst;
	@XmlElement(name = "txLinClrLst")
	protected CT_Colors TxLinClrLst;
	@XmlElement(name = "txFillClrLst")
	protected CT_Colors TxFillClrLst;
	@XmlElement(name = "txEffectClrLst")
	protected CT_Colors TxEffectClrLst;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_ColorTransform ...
public class CT_ColorTransform {
	@XmlAttribute(name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlElement(name = "title")
	protected List<CT_CTName> Title;
	@XmlElement(name = "desc")
	protected List<CT_CTDescription> Desc;
	@XmlElement(name = "catLst")
	protected CT_CTCategories CatLst;
	@XmlElement(name = "styleLbl")
	protected List<CT_CTStyleLabel> StyleLbl;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "colorsDef")
public class ColorsDef {
	protected CT_ColorTransform ColorsDef;
}

// CT_ColorTransformHeader ...
public class CT_ColorTransformHeader {
	@XmlAttribute(required = true, name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlAttribute(name = "resId")
	protected Integer ResIdAttr;
	@XmlElement(required = true, name = "title")
	protected List<CT_CTName> Title;
	@XmlElement(required = true, name = "desc")
	protected List<CT_CTDescription> Desc;
	@XmlElement(name = "catLst")
	protected CT_CTCategories CatLst;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "colorsDefHdr")
public class ColorsDefHdr {
	protected CT_ColorTransformHeader ColorsDefHdr;
}

// CT_ColorTransformHeaderLst ...
public class CT_ColorTransformHeaderLst {
	@XmlElement(name = "colorsDefHdr")
	protected List<CT_ColorTransformHeader> ColorsDefHdr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "colorsDefHdrLst")
public class ColorsDefHdrLst {
	protected CT_ColorTransformHeaderLst ColorsDefHdrLst;
}

// ST_PtType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PtType")
public class ST_PtType {
	protected String ST_PtType;
}

// CT_Pt ...
public class CT_Pt {
	@XmlAttribute(required = true, name = "modelId")
	protected ST_ModelId ModelIdAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "cxnId")
	protected ST_ModelId CxnIdAttr;
	@XmlElement(name = "prSet")
	protected CT_ElemPropSet PrSet;
	@XmlElement(name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(name = "t")
	protected CT_TextBody T;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_PtList ...
public class CT_PtList {
	@XmlElement(name = "pt")
	protected List<CT_Pt> Pt;
}

// ST_CxnType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CxnType")
public class ST_CxnType {
	protected String ST_CxnType;
}

// CT_Cxn ...
public class CT_Cxn {
	@XmlAttribute(required = true, name = "modelId")
	protected ST_ModelId ModelIdAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(required = true, name = "srcId")
	protected ST_ModelId SrcIdAttr;
	@XmlAttribute(required = true, name = "destId")
	protected ST_ModelId DestIdAttr;
	@XmlAttribute(required = true, name = "srcOrd")
	protected Integer SrcOrdAttr;
	@XmlAttribute(required = true, name = "destOrd")
	protected Integer DestOrdAttr;
	@XmlAttribute(name = "parTransId")
	protected ST_ModelId ParTransIdAttr;
	@XmlAttribute(name = "sibTransId")
	protected ST_ModelId SibTransIdAttr;
	@XmlAttribute(name = "presId")
	protected String PresIdAttr;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_CxnList ...
public class CT_CxnList {
	@XmlElement(name = "cxn")
	protected List<CT_Cxn> Cxn;
}

// CT_DataModel ...
public class CT_DataModel {
	@XmlElement(required = true, name = "ptLst")
	protected CT_PtList PtLst;
	@XmlElement(name = "cxnLst")
	protected CT_CxnList CxnLst;
	@XmlElement(name = "bg")
	protected CT_BackgroundFormatting Bg;
	@XmlElement(name = "whole")
	protected CT_WholeE2oFormatting Whole;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "dataModel")
public class DataModel {
	protected CT_DataModel DataModel;
}

// AG_IteratorAttributes ...
public class AG_IteratorAttributes {
	@XmlAttribute(name = "axis")
	protected ST_AxisTypesAttr Axis;
	@XmlAttribute(name = "ptType")
	protected ST_ElementTypesAttr PtType;
	@XmlAttribute(name = "hideLastTrans")
	protected ST_BooleansAttr HideLastTrans;
	@XmlAttribute(name = "st")
	protected ST_IntsAttr St;
	@XmlAttribute(name = "cnt")
	protected ST_UnsignedIntsAttr Cnt;
	@XmlAttribute(name = "step")
	protected ST_IntsAttr Step;
}

// AG_ConstraintAttributes ...
public class AG_ConstraintAttributes {
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "for")
	protected StringAttr For;
	@XmlAttribute(name = "forName")
	protected StringAttr ForName;
	@XmlAttribute(name = "ptType")
	protected StringAttr PtType;
}

// AG_ConstraintRefAttributes ...
public class AG_ConstraintRefAttributes {
	@XmlAttribute(name = "refType")
	protected StringAttr RefType;
	@XmlAttribute(name = "refFor")
	protected StringAttr RefFor;
	@XmlAttribute(name = "refForName")
	protected StringAttr RefForName;
	@XmlAttribute(name = "refPtType")
	protected StringAttr RefPtType;
}

// CT_Constraint ...
public class CT_Constraint {
	@XmlElement(required = true)
	protected AG_ConstraintAttributes AG_ConstraintAttributes;
	@XmlElement(required = true)
	protected AG_ConstraintRefAttributes AG_ConstraintRefAttributes;
	@XmlAttribute(name = "op")
	protected String OpAttr;
	@XmlAttribute(name = "val")
	protected Float ValAttr;
	@XmlAttribute(name = "fact")
	protected Float FactAttr;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Constraints ...
public class CT_Constraints {
	@XmlElement(name = "constr")
	protected List<CT_Constraint> Constr;
}

// CT_NumericRule ...
public class CT_NumericRule {
	@XmlElement(required = true)
	protected AG_ConstraintAttributes AG_ConstraintAttributes;
	@XmlAttribute(name = "val")
	protected Float ValAttr;
	@XmlAttribute(name = "fact")
	protected Float FactAttr;
	@XmlAttribute(name = "max")
	protected Float MaxAttr;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Rules ...
public class CT_Rules {
	@XmlElement(name = "rule")
	protected List<CT_NumericRule> Rule;
}

// CT_PresentationOf ...
public class CT_PresentationOf {
	@XmlElement(required = true)
	protected AG_IteratorAttributes AG_IteratorAttributes;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_LayoutShapeType ...
public class ST_LayoutShapeType {
	@XmlElement(required = true)
	protected ST_OutputShapeType ST_OutputShapeType;
	@XmlElement(required = true)
	protected String ST_ShapeType;
}

// ST_Index1 ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Index1")
public class ST_Index1 {
	protected Integer ST_Index1;
}

// CT_Adj ...
public class CT_Adj {
	@XmlAttribute(required = true, name = "idx")
	protected Integer IdxAttr;
	@XmlAttribute(required = true, name = "val")
	protected Float ValAttr;
}

// CT_AdjLst ...
public class CT_AdjLst {
	@XmlElement(name = "adj")
	protected List<CT_Adj> Adj;
}

// CT_Shape ...
public class CT_Shape {
	@XmlAttribute(name = "rot")
	protected Float RotAttr;
	@XmlAttribute(name = "type")
	protected ST_LayoutShapeType TypeAttr;
	@XmlAttribute(name = "r:blip")
	protected String RBlipAttr;
	@XmlAttribute(name = "zOrderOff")
	protected Integer ZOrderOffAttr;
	@XmlAttribute(name = "hideGeom")
	protected Boolean HideGeomAttr;
	@XmlAttribute(name = "lkTxEntry")
	protected Boolean LkTxEntryAttr;
	@XmlAttribute(name = "blipPhldr")
	protected Boolean BlipPhldrAttr;
	@XmlElement(name = "adjLst")
	protected CT_AdjLst AdjLst;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Parameter ...
public class CT_Parameter {
	@XmlAttribute(required = true, name = "type")
	protected String TypeAttr;
	@XmlAttribute(required = true, name = "val")
	protected ST_ParameterVal ValAttr;
}

// CT_Algorithm ...
public class CT_Algorithm {
	@XmlAttribute(required = true, name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "rev")
	protected Integer RevAttr;
	@XmlElement(name = "param")
	protected List<CT_Parameter> Param;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_LayoutNode ...
public class CT_LayoutNode {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "styleLbl")
	protected String StyleLblAttr;
	@XmlAttribute(name = "chOrder")
	protected String ChOrderAttr;
	@XmlAttribute(name = "moveWith")
	protected String MoveWithAttr;
	@XmlElement(name = "alg")
	protected List<CT_Algorithm> Alg;
	@XmlElement(name = "shape")
	protected List<CT_Shape> Shape;
	@XmlElement(name = "presOf")
	protected List<CT_PresentationOf> PresOf;
	@XmlElement(name = "constrLst")
	protected List<CT_Constraints> ConstrLst;
	@XmlElement(name = "ruleLst")
	protected List<CT_Rules> RuleLst;
	@XmlElement(name = "varLst")
	protected List<CT_LayoutVariablePropertySet> VarLst;
	@XmlElement(name = "forEach")
	protected List<CT_ForEach> ForEach;
	@XmlElement(name = "layoutNode")
	protected List<CT_LayoutNode> LayoutNode;
	@XmlElement(name = "choose")
	protected List<CT_Choose> Choose;
	@XmlElement(name = "extLst")
	protected List<CT_OfficeArtExtensionList> ExtLst;
}

// CT_ForEach ...
public class CT_ForEach {
	@XmlElement(required = true)
	protected AG_IteratorAttributes AG_IteratorAttributes;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlElement(name = "alg")
	protected List<CT_Algorithm> Alg;
	@XmlElement(name = "shape")
	protected List<CT_Shape> Shape;
	@XmlElement(name = "presOf")
	protected List<CT_PresentationOf> PresOf;
	@XmlElement(name = "constrLst")
	protected List<CT_Constraints> ConstrLst;
	@XmlElement(name = "ruleLst")
	protected List<CT_Rules> RuleLst;
	@XmlElement(name = "forEach")
	protected List<CT_ForEach> ForEach;
	@XmlElement(name = "layoutNode")
	protected List<CT_LayoutNode> LayoutNode;
	@XmlElement(name = "choose")
	protected List<CT_Choose> Choose;
	@XmlElement(name = "extLst")
	protected List<CT_OfficeArtExtensionList> ExtLst;
}

// CT_When ...
public class CT_When {
	@XmlElement(required = true)
	protected AG_IteratorAttributes AG_IteratorAttributes;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(required = true, name = "func")
	protected String FuncAttr;
	@XmlAttribute(name = "arg")
	protected ST_FunctionArgument ArgAttr;
	@XmlAttribute(required = true, name = "op")
	protected String OpAttr;
	@XmlAttribute(required = true, name = "val")
	protected ST_FunctionValue ValAttr;
	@XmlElement(name = "alg")
	protected List<CT_Algorithm> Alg;
	@XmlElement(name = "shape")
	protected List<CT_Shape> Shape;
	@XmlElement(name = "presOf")
	protected List<CT_PresentationOf> PresOf;
	@XmlElement(name = "constrLst")
	protected List<CT_Constraints> ConstrLst;
	@XmlElement(name = "ruleLst")
	protected List<CT_Rules> RuleLst;
	@XmlElement(name = "forEach")
	protected List<CT_ForEach> ForEach;
	@XmlElement(name = "layoutNode")
	protected List<CT_LayoutNode> LayoutNode;
	@XmlElement(name = "choose")
	protected List<CT_Choose> Choose;
	@XmlElement(name = "extLst")
	protected List<CT_OfficeArtExtensionList> ExtLst;
}

// CT_Otherwise ...
public class CT_Otherwise {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlElement(name = "alg")
	protected List<CT_Algorithm> Alg;
	@XmlElement(name = "shape")
	protected List<CT_Shape> Shape;
	@XmlElement(name = "presOf")
	protected List<CT_PresentationOf> PresOf;
	@XmlElement(name = "constrLst")
	protected List<CT_Constraints> ConstrLst;
	@XmlElement(name = "ruleLst")
	protected List<CT_Rules> RuleLst;
	@XmlElement(name = "forEach")
	protected List<CT_ForEach> ForEach;
	@XmlElement(name = "layoutNode")
	protected List<CT_LayoutNode> LayoutNode;
	@XmlElement(name = "choose")
	protected List<CT_Choose> Choose;
	@XmlElement(name = "extLst")
	protected List<CT_OfficeArtExtensionList> ExtLst;
}

// CT_Choose ...
public class CT_Choose {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlElement(required = true, name = "if")
	protected List<CT_When> If;
	@XmlElement(name = "else")
	protected CT_Otherwise Else;
}

// CT_SampleData ...
public class CT_SampleData {
	@XmlAttribute(name = "useDef")
	protected Boolean UseDefAttr;
	@XmlElement(name = "dataModel")
	protected CT_DataModel DataModel;
}

// CT_Category ...
public class CT_Category {
	@XmlAttribute(required = true, name = "type")
	protected QName TypeAttr;
	@XmlAttribute(required = true, name = "pri")
	protected Integer PriAttr;
}

// CT_Categories ...
public class CT_Categories {
	@XmlElement(name = "cat")
	protected List<CT_Category> Cat;
}

// CT_Name ...
public class CT_Name {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_Description ...
public class CT_Description {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_DiagramDefinition ...
public class CT_DiagramDefinition {
	@XmlAttribute(name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlAttribute(name = "defStyle")
	protected String DefStyleAttr;
	@XmlElement(name = "title")
	protected List<CT_Name> Title;
	@XmlElement(name = "desc")
	protected List<CT_Description> Desc;
	@XmlElement(name = "catLst")
	protected CT_Categories CatLst;
	@XmlElement(name = "sampData")
	protected CT_SampleData SampData;
	@XmlElement(name = "styleData")
	protected CT_SampleData StyleData;
	@XmlElement(name = "clrData")
	protected CT_SampleData ClrData;
	@XmlElement(required = true, name = "layoutNode")
	protected CT_LayoutNode LayoutNode;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "layoutDef")
public class LayoutDef {
	protected CT_DiagramDefinition LayoutDef;
}

// CT_DiagramDefinitionHeader ...
public class CT_DiagramDefinitionHeader {
	@XmlAttribute(required = true, name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlAttribute(name = "defStyle")
	protected String DefStyleAttr;
	@XmlAttribute(name = "resId")
	protected Integer ResIdAttr;
	@XmlElement(required = true, name = "title")
	protected List<CT_Name> Title;
	@XmlElement(required = true, name = "desc")
	protected List<CT_Description> Desc;
	@XmlElement(name = "catLst")
	protected CT_Categories CatLst;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "layoutDefHdr")
public class LayoutDefHdr {
	protected CT_DiagramDefinitionHeader LayoutDefHdr;
}

// CT_DiagramDefinitionHeaderLst ...
public class CT_DiagramDefinitionHeaderLst {
	@XmlElement(name = "layoutDefHdr")
	protected List<CT_DiagramDefinitionHeader> LayoutDefHdr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "layoutDefHdrLst")
public class LayoutDefHdrLst {
	protected CT_DiagramDefinitionHeaderLst LayoutDefHdrLst;
}

// CT_RelIds ...
public class CT_RelIds {
	@XmlAttribute(required = true, name = "r:dm")
	protected String RDmAttr;
	@XmlAttribute(required = true, name = "r:lo")
	protected String RLoAttr;
	@XmlAttribute(required = true, name = "r:qs")
	protected String RQsAttr;
	@XmlAttribute(required = true, name = "r:cs")
	protected String RCsAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "relIds")
public class RelIds {
	protected CT_RelIds RelIds;
}

// ST_ParameterVal ...
public class ST_ParameterVal {
	@XmlElement(required = true)
	protected Boolean Boolean;
	@XmlElement(required = true)
	protected Float Double;
	@XmlElement(required = true)
	protected Integer Int;
	@XmlElement(required = true)
	protected ST_ArrowheadStyle ST_ArrowheadStyle;
	@XmlElement(required = true)
	protected ST_AutoTextRotation ST_AutoTextRotation;
	@XmlElement(required = true)
	protected ST_BendPoint ST_BendPoint;
	@XmlElement(required = true)
	protected ST_Breakpoint ST_Breakpoint;
	@XmlElement(required = true)
	protected ST_CenterShapeMapping ST_CenterShapeMapping;
	@XmlElement(required = true)
	protected ST_ChildAlignment ST_ChildAlignment;
	@XmlElement(required = true)
	protected ST_ChildDirection ST_ChildDirection;
	@XmlElement(required = true)
	protected ST_ConnectorDimension ST_ConnectorDimension;
	@XmlElement(required = true)
	protected ST_ConnectorPoint ST_ConnectorPoint;
	@XmlElement(required = true)
	protected ST_ConnectorRouting ST_ConnectorRouting;
	@XmlElement(required = true)
	protected ST_ContinueDirection ST_ContinueDirection;
	@XmlElement(required = true)
	protected ST_DiagramHorizontalAlignment ST_DiagramHorizontalAlignment;
	@XmlElement(required = true)
	protected ST_DiagramTextAlignment ST_DiagramTextAlignment;
	@XmlElement(required = true)
	protected ST_FallbackDimension ST_FallbackDimension;
	@XmlElement(required = true)
	protected ST_FlowDirection ST_FlowDirection;
	@XmlElement(required = true)
	protected ST_GrowDirection ST_GrowDirection;
	@XmlElement(required = true)
	protected ST_HierarchyAlignment ST_HierarchyAlignment;
	@XmlElement(required = true)
	protected ST_LinearDirection ST_LinearDirection;
	@XmlElement(required = true)
	protected ST_NodeHorizontalAlignment ST_NodeHorizontalAlignment;
	@XmlElement(required = true)
	protected ST_NodeVerticalAlignment ST_NodeVerticalAlignment;
	@XmlElement(required = true)
	protected ST_Offset ST_Offset;
	@XmlElement(required = true)
	protected ST_PyramidAccentPosition ST_PyramidAccentPosition;
	@XmlElement(required = true)
	protected ST_PyramidAccentTextMargin ST_PyramidAccentTextMargin;
	@XmlElement(required = true)
	protected ST_RotationPath ST_RotationPath;
	@XmlElement(required = true)
	protected ST_SecondaryChildAlignment ST_SecondaryChildAlignment;
	@XmlElement(required = true)
	protected ST_SecondaryLinearDirection ST_SecondaryLinearDirection;
	@XmlElement(required = true)
	protected ST_StartingElement ST_StartingElement;
	@XmlElement(required = true)
	protected ST_TextAnchorHorizontal ST_TextAnchorHorizontal;
	@XmlElement(required = true)
	protected ST_TextAnchorVertical ST_TextAnchorVertical;
	@XmlElement(required = true)
	protected ST_TextBlockDirection ST_TextBlockDirection;
	@XmlElement(required = true)
	protected ST_TextDirection ST_TextDirection;
	@XmlElement(required = true)
	protected ST_VerticalAlignment ST_VerticalAlignment;
	@XmlElement(required = true)
	protected String String;
}

// ST_ModelId ...
public class ST_ModelId {
	@XmlElement(required = true)
	protected Integer Int;
	@XmlElement(required = true)
	protected String ST_Guid;
}

// ST_PrSetCustVal ...
public class ST_PrSetCustVal {
	@XmlElement(required = true)
	protected String ST_Percentage;
}

// CT_ElemPropSet ...
public class CT_ElemPropSet {
	@XmlAttribute(name = "presAssocID")
	protected ST_ModelId PresAssocIDAttr;
	@XmlAttribute(name = "presName")
	protected String PresNameAttr;
	@XmlAttribute(name = "presStyleLbl")
	protected String PresStyleLblAttr;
	@XmlAttribute(name = "presStyleIdx")
	protected Integer PresStyleIdxAttr;
	@XmlAttribute(name = "presStyleCnt")
	protected Integer PresStyleCntAttr;
	@XmlAttribute(name = "loTypeId")
	protected String LoTypeIdAttr;
	@XmlAttribute(name = "loCatId")
	protected String LoCatIdAttr;
	@XmlAttribute(name = "qsTypeId")
	protected String QsTypeIdAttr;
	@XmlAttribute(name = "qsCatId")
	protected String QsCatIdAttr;
	@XmlAttribute(name = "csTypeId")
	protected String CsTypeIdAttr;
	@XmlAttribute(name = "csCatId")
	protected String CsCatIdAttr;
	@XmlAttribute(name = "coherent3DOff")
	protected Boolean Coherent3DOffAttr;
	@XmlAttribute(name = "phldrT")
	protected String PhldrTAttr;
	@XmlAttribute(name = "phldr")
	protected Boolean PhldrAttr;
	@XmlAttribute(name = "custAng")
	protected Integer CustAngAttr;
	@XmlAttribute(name = "custFlipVert")
	protected Boolean CustFlipVertAttr;
	@XmlAttribute(name = "custFlipHor")
	protected Boolean CustFlipHorAttr;
	@XmlAttribute(name = "custSzX")
	protected Integer CustSzXAttr;
	@XmlAttribute(name = "custSzY")
	protected Integer CustSzYAttr;
	@XmlAttribute(name = "custScaleX")
	protected ST_PrSetCustVal CustScaleXAttr;
	@XmlAttribute(name = "custScaleY")
	protected ST_PrSetCustVal CustScaleYAttr;
	@XmlAttribute(name = "custT")
	protected Boolean CustTAttr;
	@XmlAttribute(name = "custLinFactX")
	protected ST_PrSetCustVal CustLinFactXAttr;
	@XmlAttribute(name = "custLinFactY")
	protected ST_PrSetCustVal CustLinFactYAttr;
	@XmlAttribute(name = "custLinFactNeighborX")
	protected ST_PrSetCustVal CustLinFactNeighborXAttr;
	@XmlAttribute(name = "custLinFactNeighborY")
	protected ST_PrSetCustVal CustLinFactNeighborYAttr;
	@XmlAttribute(name = "custRadScaleRad")
	protected ST_PrSetCustVal CustRadScaleRadAttr;
	@XmlAttribute(name = "custRadScaleInc")
	protected ST_PrSetCustVal CustRadScaleIncAttr;
	@XmlElement(name = "presLayoutVars")
	protected CT_LayoutVariablePropertySet PresLayoutVars;
	@XmlElement(name = "style")
	protected CT_ShapeStyle Style;
}

// ST_Direction ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Direction")
public class ST_Direction {
	protected String ST_Direction;
}

// ST_HierBranchStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HierBranchStyle")
public class ST_HierBranchStyle {
	protected String ST_HierBranchStyle;
}

// ST_AnimOneStr ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnimOneStr")
public class ST_AnimOneStr {
	protected String ST_AnimOneStr;
}

// ST_AnimLvlStr ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnimLvlStr")
public class ST_AnimLvlStr {
	protected String ST_AnimLvlStr;
}

// CT_OrgChart ...
public class CT_OrgChart {
	@XmlAttribute(name = "val")
	protected Boolean ValAttr;
}

// ST_NodeCount ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_NodeCount")
public class ST_NodeCount {
	protected Integer ST_NodeCount;
}

// CT_ChildMax ...
public class CT_ChildMax {
	@XmlAttribute(name = "val")
	protected Integer ValAttr;
}

// CT_ChildPref ...
public class CT_ChildPref {
	@XmlAttribute(name = "val")
	protected Integer ValAttr;
}

// CT_BulletEnabled ...
public class CT_BulletEnabled {
	@XmlAttribute(name = "val")
	protected Boolean ValAttr;
}

// CT_Direction ...
public class CT_Direction {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_HierBranchStyle ...
public class CT_HierBranchStyle {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_AnimOne ...
public class CT_AnimOne {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_AnimLvl ...
public class CT_AnimLvl {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_ResizeHandlesStr ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ResizeHandlesStr")
public class ST_ResizeHandlesStr {
	protected String ST_ResizeHandlesStr;
}

// CT_ResizeHandles ...
public class CT_ResizeHandles {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_LayoutVariablePropertySet ...
public class CT_LayoutVariablePropertySet {
	@XmlElement(name = "orgChart")
	protected CT_OrgChart OrgChart;
	@XmlElement(name = "chMax")
	protected CT_ChildMax ChMax;
	@XmlElement(name = "chPref")
	protected CT_ChildPref ChPref;
	@XmlElement(name = "bulletEnabled")
	protected CT_BulletEnabled BulletEnabled;
	@XmlElement(name = "dir")
	protected CT_Direction Dir;
	@XmlElement(name = "hierBranch")
	protected CT_HierBranchStyle HierBranch;
	@XmlElement(name = "animOne")
	protected CT_AnimOne AnimOne;
	@XmlElement(name = "animLvl")
	protected CT_AnimLvl AnimLvl;
	@XmlElement(name = "resizeHandles")
	protected CT_ResizeHandles ResizeHandles;
}

// CT_SDName ...
public class CT_SDName {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_SDDescription ...
public class CT_SDDescription {
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(required = true, name = "val")
	protected String ValAttr;
}

// CT_SDCategory ...
public class CT_SDCategory {
	@XmlAttribute(required = true, name = "type")
	protected QName TypeAttr;
	@XmlAttribute(required = true, name = "pri")
	protected Integer PriAttr;
}

// CT_SDCategories ...
public class CT_SDCategories {
	@XmlElement(name = "cat")
	protected List<CT_SDCategory> Cat;
}

// CT_TextProps ...
public class CT_TextProps {
	protected List<EG_Text3D> AEG_Text3D;
}

// CT_StyleLabel ...
public class CT_StyleLabel {
	@XmlAttribute(required = true, name = "name")
	protected String NameAttr;
	@XmlElement(name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(name = "sp3d")
	protected CT_Shape3D Sp3d;
	@XmlElement(name = "txPr")
	protected CT_TextProps TxPr;
	@XmlElement(name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_StyleDefinition ...
public class CT_StyleDefinition {
	@XmlAttribute(name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlElement(name = "title")
	protected List<CT_SDName> Title;
	@XmlElement(name = "desc")
	protected List<CT_SDDescription> Desc;
	@XmlElement(name = "catLst")
	protected CT_SDCategories CatLst;
	@XmlElement(name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(required = true, name = "styleLbl")
	protected List<CT_StyleLabel> StyleLbl;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "styleDef")
public class StyleDef {
	protected CT_StyleDefinition StyleDef;
}

// CT_StyleDefinitionHeader ...
public class CT_StyleDefinitionHeader {
	@XmlAttribute(required = true, name = "uniqueId")
	protected String UniqueIdAttr;
	@XmlAttribute(name = "minVer")
	protected String MinVerAttr;
	@XmlAttribute(name = "resId")
	protected Integer ResIdAttr;
	@XmlElement(required = true, name = "title")
	protected List<CT_SDName> Title;
	@XmlElement(required = true, name = "desc")
	protected List<CT_SDDescription> Desc;
	@XmlElement(name = "catLst")
	protected CT_SDCategories CatLst;
	@XmlElement(name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "styleDefHdr")
public class StyleDefHdr {
	protected CT_StyleDefinitionHeader StyleDefHdr;
}

// CT_StyleDefinitionHeaderLst ...
public class CT_StyleDefinitionHeaderLst {
	@XmlElement(name = "styleDefHdr")
	protected List<CT_StyleDefinitionHeader> StyleDefHdr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "styleDefHdrLst")
public class StyleDefHdrLst {
	protected CT_StyleDefinitionHeaderLst StyleDefHdrLst;
}

// ST_AlgorithmType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AlgorithmType")
public class ST_AlgorithmType {
	protected String ST_AlgorithmType;
}

// ST_AxisType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AxisType")
public class ST_AxisType {
	protected String ST_AxisType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AxisTypes")
public class ST_AxisTypes {
	protected List<String> ST_AxisTypes;
}

// ST_BoolOperator ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BoolOperator")
public class ST_BoolOperator {
	protected String ST_BoolOperator;
}

// ST_ChildOrderType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ChildOrderType")
public class ST_ChildOrderType {
	protected String ST_ChildOrderType;
}

// ST_ConstraintType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConstraintType")
public class ST_ConstraintType {
	protected String ST_ConstraintType;
}

// ST_ConstraintRelationship ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConstraintRelationship")
public class ST_ConstraintRelationship {
	protected String ST_ConstraintRelationship;
}

// ST_ElementType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ElementType")
public class ST_ElementType {
	protected String ST_ElementType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ElementTypes")
public class ST_ElementTypes {
	protected List<String> ST_ElementTypes;
}

// ST_ParameterId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ParameterId")
public class ST_ParameterId {
	protected String ST_ParameterId;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Ints")
public class ST_Ints {
	protected List<Integer> ST_Ints;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_UnsignedInts")
public class ST_UnsignedInts {
	protected List<Integer> ST_UnsignedInts;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Booleans")
public class ST_Booleans {
	protected List<Boolean> ST_Booleans;
}

// ST_FunctionType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FunctionType")
public class ST_FunctionType {
	protected String ST_FunctionType;
}

// ST_FunctionOperator ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FunctionOperator")
public class ST_FunctionOperator {
	protected String ST_FunctionOperator;
}

// ST_DiagramHorizontalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DiagramHorizontalAlignment")
public class ST_DiagramHorizontalAlignment {
	protected String ST_DiagramHorizontalAlignment;
}

// ST_VerticalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VerticalAlignment")
public class ST_VerticalAlignment {
	protected String ST_VerticalAlignment;
}

// ST_ChildDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ChildDirection")
public class ST_ChildDirection {
	protected String ST_ChildDirection;
}

// ST_ChildAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ChildAlignment")
public class ST_ChildAlignment {
	protected String ST_ChildAlignment;
}

// ST_SecondaryChildAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SecondaryChildAlignment")
public class ST_SecondaryChildAlignment {
	protected String ST_SecondaryChildAlignment;
}

// ST_LinearDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LinearDirection")
public class ST_LinearDirection {
	protected String ST_LinearDirection;
}

// ST_SecondaryLinearDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SecondaryLinearDirection")
public class ST_SecondaryLinearDirection {
	protected String ST_SecondaryLinearDirection;
}

// ST_StartingElement ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_StartingElement")
public class ST_StartingElement {
	protected String ST_StartingElement;
}

// ST_RotationPath ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RotationPath")
public class ST_RotationPath {
	protected String ST_RotationPath;
}

// ST_CenterShapeMapping ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CenterShapeMapping")
public class ST_CenterShapeMapping {
	protected String ST_CenterShapeMapping;
}

// ST_BendPoint ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BendPoint")
public class ST_BendPoint {
	protected String ST_BendPoint;
}

// ST_ConnectorRouting ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConnectorRouting")
public class ST_ConnectorRouting {
	protected String ST_ConnectorRouting;
}

// ST_ArrowheadStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ArrowheadStyle")
public class ST_ArrowheadStyle {
	protected String ST_ArrowheadStyle;
}

// ST_ConnectorDimension ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConnectorDimension")
public class ST_ConnectorDimension {
	protected String ST_ConnectorDimension;
}

// ST_ConnectorPoint ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConnectorPoint")
public class ST_ConnectorPoint {
	protected String ST_ConnectorPoint;
}

// ST_NodeHorizontalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_NodeHorizontalAlignment")
public class ST_NodeHorizontalAlignment {
	protected String ST_NodeHorizontalAlignment;
}

// ST_NodeVerticalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_NodeVerticalAlignment")
public class ST_NodeVerticalAlignment {
	protected String ST_NodeVerticalAlignment;
}

// ST_FallbackDimension ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FallbackDimension")
public class ST_FallbackDimension {
	protected String ST_FallbackDimension;
}

// ST_TextDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextDirection")
public class ST_TextDirection {
	protected String ST_TextDirection;
}

// ST_PyramidAccentPosition ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PyramidAccentPosition")
public class ST_PyramidAccentPosition {
	protected String ST_PyramidAccentPosition;
}

// ST_PyramidAccentTextMargin ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PyramidAccentTextMargin")
public class ST_PyramidAccentTextMargin {
	protected String ST_PyramidAccentTextMargin;
}

// ST_TextBlockDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextBlockDirection")
public class ST_TextBlockDirection {
	protected String ST_TextBlockDirection;
}

// ST_TextAnchorHorizontal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAnchorHorizontal")
public class ST_TextAnchorHorizontal {
	protected String ST_TextAnchorHorizontal;
}

// ST_TextAnchorVertical ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAnchorVertical")
public class ST_TextAnchorVertical {
	protected String ST_TextAnchorVertical;
}

// ST_DiagramTextAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DiagramTextAlignment")
public class ST_DiagramTextAlignment {
	protected String ST_DiagramTextAlignment;
}

// ST_AutoTextRotation ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AutoTextRotation")
public class ST_AutoTextRotation {
	protected String ST_AutoTextRotation;
}

// ST_GrowDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GrowDirection")
public class ST_GrowDirection {
	protected String ST_GrowDirection;
}

// ST_FlowDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FlowDirection")
public class ST_FlowDirection {
	protected String ST_FlowDirection;
}

// ST_ContinueDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ContinueDirection")
public class ST_ContinueDirection {
	protected String ST_ContinueDirection;
}

// ST_Breakpoint ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Breakpoint")
public class ST_Breakpoint {
	protected String ST_Breakpoint;
}

// ST_Offset ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Offset")
public class ST_Offset {
	protected String ST_Offset;
}

// ST_HierarchyAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HierarchyAlignment")
public class ST_HierarchyAlignment {
	protected String ST_HierarchyAlignment;
}

// ST_FunctionValue ...
public class ST_FunctionValue {
	@XmlElement(required = true)
	protected Boolean Boolean;
	@XmlElement(required = true)
	protected Integer Int;
	@XmlElement(required = true)
	protected String ST_ResizeHandlesStr;
	@XmlElement(required = true)
	protected String ST_HierBranchStyle;
	@XmlElement(required = true)
	protected String ST_Direction;
	@XmlElement(required = true)
	protected String ST_AnimOneStr;
	@XmlElement(required = true)
	protected String ST_AnimLvlStr;
}

// ST_VariableType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VariableType")
public class ST_VariableType {
	protected String ST_VariableType;
}

// ST_FunctionArgument ...
public class ST_FunctionArgument {
	@XmlElement(required = true)
	protected String ST_VariableType;
}

// ST_OutputShapeType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_OutputShapeType")
public class ST_OutputShapeType {
	protected String ST_OutputShapeType;
}
