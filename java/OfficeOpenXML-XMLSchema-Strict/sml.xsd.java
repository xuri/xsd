// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// CT_AutoFilter ...
public class CT_AutoFilter {
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlElement(name = "filterColumn")
	protected List<CT_FilterColumn> FilterColumn;
	@XmlElement(name = "sortState")
	protected CT_SortState SortState;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_FilterColumn ...
public class CT_FilterColumn {
	@XmlAttribute(name = "colId", required = true)
	protected Integer ColIdAttr;
	@XmlAttribute(name = "hiddenButton")
	protected Boolean HiddenButtonAttr;
	@XmlAttribute(name = "showButton")
	protected Boolean ShowButtonAttr;
	@XmlElement(name = "filters")
	protected CT_Filters Filters;
	@XmlElement(name = "top10")
	protected CT_Top10 Top10;
	@XmlElement(name = "customFilters")
	protected CT_CustomFilters CustomFilters;
	@XmlElement(name = "dynamicFilter")
	protected CT_DynamicFilter DynamicFilter;
	@XmlElement(name = "colorFilter")
	protected CT_ColorFilter ColorFilter;
	@XmlElement(name = "iconFilter")
	protected CT_IconFilter IconFilter;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Filters ...
public class CT_Filters {
	@XmlAttribute(name = "blank")
	protected Boolean BlankAttr;
	@XmlAttribute(name = "calendarType")
	protected String CalendarTypeAttr;
	@XmlElement(name = "filter")
	protected List<CT_Filter> Filter;
	@XmlElement(name = "dateGroupItem")
	protected List<CT_DateGroupItem> DateGroupItem;
}

// CT_Filter ...
public class CT_Filter {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_CustomFilters ...
public class CT_CustomFilters {
	@XmlAttribute(name = "and")
	protected Boolean AndAttr;
	@XmlElement(required = true, name = "customFilter")
	protected List<CT_CustomFilter> CustomFilter;
}

// CT_CustomFilter ...
public class CT_CustomFilter {
	@XmlAttribute(name = "operator")
	protected String OperatorAttr;
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_Top10 ...
public class CT_Top10 {
	@XmlAttribute(name = "top")
	protected Boolean TopAttr;
	@XmlAttribute(name = "percent")
	protected Boolean PercentAttr;
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
	@XmlAttribute(name = "filterVal")
	protected Float FilterValAttr;
}

// CT_ColorFilter ...
public class CT_ColorFilter {
	@XmlAttribute(name = "dxfId")
	protected Integer DxfIdAttr;
	@XmlAttribute(name = "cellColor")
	protected Boolean CellColorAttr;
}

// CT_IconFilter ...
public class CT_IconFilter {
	@XmlAttribute(name = "iconSet", required = true)
	protected String IconSetAttr;
	@XmlAttribute(name = "iconId")
	protected Integer IconIdAttr;
}

// ST_FilterOperator ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FilterOperator")
public class ST_FilterOperator {
	protected String ST_FilterOperator;
}

// CT_DynamicFilter ...
public class CT_DynamicFilter {
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "val")
	protected Float ValAttr;
	@XmlAttribute(name = "valIso")
	protected String ValIsoAttr;
	@XmlAttribute(name = "maxValIso")
	protected String MaxValIsoAttr;
}

// ST_DynamicFilterType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DynamicFilterType")
public class ST_DynamicFilterType {
	protected String ST_DynamicFilterType;
}

// ST_IconSetType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_IconSetType")
public class ST_IconSetType {
	protected String ST_IconSetType;
}

// CT_SortState ...
public class CT_SortState {
	@XmlAttribute(name = "columnSort")
	protected Boolean ColumnSortAttr;
	@XmlAttribute(name = "caseSensitive")
	protected Boolean CaseSensitiveAttr;
	@XmlAttribute(name = "sortMethod")
	protected String SortMethodAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlElement(name = "sortCondition")
	protected List<CT_SortCondition> SortCondition;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SortCondition ...
public class CT_SortCondition {
	@XmlAttribute(name = "descending")
	protected Boolean DescendingAttr;
	@XmlAttribute(name = "sortBy")
	protected String SortByAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "customList")
	protected String CustomListAttr;
	@XmlAttribute(name = "dxfId")
	protected Integer DxfIdAttr;
	@XmlAttribute(name = "iconSet")
	protected String IconSetAttr;
	@XmlAttribute(name = "iconId")
	protected Integer IconIdAttr;
}

// ST_SortBy ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SortBy")
public class ST_SortBy {
	protected String ST_SortBy;
}

// ST_SortMethod ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SortMethod")
public class ST_SortMethod {
	protected String ST_SortMethod;
}

// CT_DateGroupItem ...
public class CT_DateGroupItem {
	@XmlAttribute(name = "year", required = true)
	protected Short YearAttr;
	@XmlAttribute(name = "month")
	protected Short MonthAttr;
	@XmlAttribute(name = "day")
	protected Short DayAttr;
	@XmlAttribute(name = "hour")
	protected Short HourAttr;
	@XmlAttribute(name = "minute")
	protected Short MinuteAttr;
	@XmlAttribute(name = "second")
	protected Short SecondAttr;
	@XmlAttribute(name = "dateTimeGrouping", required = true)
	protected String DateTimeGroupingAttr;
}

// ST_DateTimeGrouping ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DateTimeGrouping")
public class ST_DateTimeGrouping {
	protected String ST_DateTimeGrouping;
}

// ST_CellRef ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellRef")
public class ST_CellRef {
	protected String ST_CellRef;
}

// ST_Ref ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Ref")
public class ST_Ref {
	protected String ST_Ref;
}

// ST_RefA ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RefA")
public class ST_RefA {
	protected String ST_RefA;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Sqref")
public class ST_Sqref {
	protected List<String> ST_Sqref;
}

// ST_Formula ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Formula")
public class ST_Formula {
	protected String ST_Formula;
}

// ST_UnsignedIntHex ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_UnsignedIntHex")
public class ST_UnsignedIntHex {
	protected List<Byte> ST_UnsignedIntHex;
}

// CT_XStringElement ...
public class CT_XStringElement {
	@XmlAttribute(name = "v", required = true)
	protected String VAttr;
}

// CT_Extension ...
public class CT_Extension {
	@XmlAttribute(name = "uri")
	protected String UriAttr;
}

// CT_ObjectAnchor ...
public class CT_ObjectAnchor {
	@XmlAttribute(name = "moveWithCells")
	protected Boolean MoveWithCellsAttr;
	@XmlAttribute(name = "sizeWithCells")
	protected Boolean SizeWithCellsAttr;
	@XmlElement(required = true, name = "xdr:from")
	protected CT_Marker XdrFrom;
	@XmlElement(required = true, name = "xdr:to")
	protected CT_Marker XdrTo;
}

// EG_ExtensionList ...
public class EG_ExtensionList {
	@XmlElement(required = true, name = "ext")
	protected List<CT_Extension> Ext;
}

// CT_ExtensionList ...
public class CT_ExtensionList {
	protected EG_ExtensionList EG_ExtensionList;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "calcChain")
public class CalcChain {
	protected CT_CalcChain CalcChain;
}

// CT_CalcChain ...
public class CT_CalcChain {
	@XmlElement(required = true, name = "c")
	protected List<CT_CalcCell> C;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CalcCell ...
public class CT_CalcCell {
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
	@XmlAttribute(name = "i")
	protected Integer IAttr;
	@XmlAttribute(name = "s")
	protected Boolean SAttr;
	@XmlAttribute(name = "l")
	protected Boolean LAttr;
	@XmlAttribute(name = "t")
	protected Boolean TAttr;
	@XmlAttribute(name = "a")
	protected Boolean AAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "comments")
public class Comments {
	protected CT_Comments Comments;
}

// CT_Comments ...
public class CT_Comments {
	@XmlElement(required = true, name = "authors")
	protected CT_Authors Authors;
	@XmlElement(required = true, name = "commentList")
	protected CT_CommentList CommentList;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Authors ...
public class CT_Authors {
	@XmlElement(name = "author")
	protected List<String> Author;
}

// CT_CommentList ...
public class CT_CommentList {
	@XmlElement(name = "comment")
	protected List<CT_Comment> Comment;
}

// CT_Comment ...
public class CT_Comment {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "authorId", required = true)
	protected Integer AuthorIdAttr;
	@XmlAttribute(name = "guid")
	protected String GuidAttr;
	@XmlAttribute(name = "shapeId")
	protected Integer ShapeIdAttr;
	@XmlElement(required = true, name = "text")
	protected CT_Rst Text;
	@XmlElement(name = "commentPr")
	protected CT_CommentPr CommentPr;
}

// CT_CommentPr ...
public class CT_CommentPr {
	@XmlAttribute(name = "locked")
	protected Boolean LockedAttr;
	@XmlAttribute(name = "defaultSize")
	protected Boolean DefaultSizeAttr;
	@XmlAttribute(name = "print")
	protected Boolean PrintAttr;
	@XmlAttribute(name = "disabled")
	protected Boolean DisabledAttr;
	@XmlAttribute(name = "autoFill")
	protected Boolean AutoFillAttr;
	@XmlAttribute(name = "autoLine")
	protected Boolean AutoLineAttr;
	@XmlAttribute(name = "altText")
	protected String AltTextAttr;
	@XmlAttribute(name = "textHAlign")
	protected String TextHAlignAttr;
	@XmlAttribute(name = "textVAlign")
	protected String TextVAlignAttr;
	@XmlAttribute(name = "lockText")
	protected Boolean LockTextAttr;
	@XmlAttribute(name = "justLastX")
	protected Boolean JustLastXAttr;
	@XmlAttribute(name = "autoScale")
	protected Boolean AutoScaleAttr;
	@XmlElement(required = true, name = "anchor")
	protected CT_ObjectAnchor Anchor;
}

// ST_TextHAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextHAlign")
public class ST_TextHAlign {
	protected String ST_TextHAlign;
}

// ST_TextVAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextVAlign")
public class ST_TextVAlign {
	protected String ST_TextVAlign;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "MapInfo")
public class MapInfo {
	protected CT_MapInfo MapInfo;
}

// CT_MapInfo ...
public class CT_MapInfo {
	@XmlAttribute(name = "SelectionNamespaces", required = true)
	protected String SelectionNamespacesAttr;
	@XmlElement(required = true, name = "Schema")
	protected List<CT_Schema> Schema;
	@XmlElement(required = true, name = "Map")
	protected List<CT_Map> Map;
}

// CT_Schema ...
public class CT_Schema {
	@XmlAttribute(name = "ID", required = true)
	protected String IDAttr;
	@XmlAttribute(name = "SchemaRef")
	protected String SchemaRefAttr;
	@XmlAttribute(name = "Namespace")
	protected String NamespaceAttr;
	@XmlAttribute(name = "SchemaLanguage")
	protected String SchemaLanguageAttr;
}

// CT_Map ...
public class CT_Map {
	@XmlAttribute(name = "ID", required = true)
	protected Integer IDAttr;
	@XmlAttribute(name = "Name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "RootElement", required = true)
	protected String RootElementAttr;
	@XmlAttribute(name = "SchemaID", required = true)
	protected String SchemaIDAttr;
	@XmlAttribute(name = "ShowImportExportValidationErrors", required = true)
	protected Boolean ShowImportExportValidationErrorsAttr;
	@XmlAttribute(name = "AutoFit", required = true)
	protected Boolean AutoFitAttr;
	@XmlAttribute(name = "Append", required = true)
	protected Boolean AppendAttr;
	@XmlAttribute(name = "PreserveSortAFLayout", required = true)
	protected Boolean PreserveSortAFLayoutAttr;
	@XmlAttribute(name = "PreserveFormat", required = true)
	protected Boolean PreserveFormatAttr;
	@XmlElement(name = "DataBinding")
	protected CT_DataBinding DataBinding;
}

// CT_DataBinding ...
public class CT_DataBinding {
	@XmlAttribute(name = "DataBindingName")
	protected String DataBindingNameAttr;
	@XmlAttribute(name = "FileBinding")
	protected Boolean FileBindingAttr;
	@XmlAttribute(name = "ConnectionID")
	protected Integer ConnectionIDAttr;
	@XmlAttribute(name = "FileBindingName")
	protected String FileBindingNameAttr;
	@XmlAttribute(name = "DataBindingLoadMode", required = true)
	protected Integer DataBindingLoadModeAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "connections")
public class Connections {
	protected CT_Connections Connections;
}

// CT_Connections ...
public class CT_Connections {
	@XmlElement(required = true, name = "connection")
	protected List<CT_Connection> Connection;
}

// CT_Connection ...
public class CT_Connection {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "sourceFile")
	protected String SourceFileAttr;
	@XmlAttribute(name = "odcFile")
	protected String OdcFileAttr;
	@XmlAttribute(name = "keepAlive")
	protected Boolean KeepAliveAttr;
	@XmlAttribute(name = "interval")
	protected Integer IntervalAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "description")
	protected String DescriptionAttr;
	@XmlAttribute(name = "type")
	protected Integer TypeAttr;
	@XmlAttribute(name = "reconnectionMethod")
	protected Integer ReconnectionMethodAttr;
	@XmlAttribute(name = "refreshedVersion", required = true)
	protected Byte RefreshedVersionAttr;
	@XmlAttribute(name = "minRefreshableVersion")
	protected Byte MinRefreshableVersionAttr;
	@XmlAttribute(name = "savePassword")
	protected Boolean SavePasswordAttr;
	@XmlAttribute(name = "new")
	protected Boolean NewAttr;
	@XmlAttribute(name = "deleted")
	protected Boolean DeletedAttr;
	@XmlAttribute(name = "onlyUseConnectionFile")
	protected Boolean OnlyUseConnectionFileAttr;
	@XmlAttribute(name = "background")
	protected Boolean BackgroundAttr;
	@XmlAttribute(name = "refreshOnLoad")
	protected Boolean RefreshOnLoadAttr;
	@XmlAttribute(name = "saveData")
	protected Boolean SaveDataAttr;
	@XmlAttribute(name = "credentials")
	protected String CredentialsAttr;
	@XmlAttribute(name = "singleSignOnId")
	protected String SingleSignOnIdAttr;
	@XmlElement(name = "dbPr")
	protected CT_DbPr DbPr;
	@XmlElement(name = "olapPr")
	protected CT_OlapPr OlapPr;
	@XmlElement(name = "webPr")
	protected CT_WebPr WebPr;
	@XmlElement(name = "textPr")
	protected CT_TextPr TextPr;
	@XmlElement(name = "parameters")
	protected CT_Parameters Parameters;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_CredMethod ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CredMethod")
public class ST_CredMethod {
	protected String ST_CredMethod;
}

// CT_DbPr ...
public class CT_DbPr {
	@XmlAttribute(name = "connection", required = true)
	protected String ConnectionAttr;
	@XmlAttribute(name = "command")
	protected String CommandAttr;
	@XmlAttribute(name = "serverCommand")
	protected String ServerCommandAttr;
	@XmlAttribute(name = "commandType")
	protected Integer CommandTypeAttr;
}

// CT_OlapPr ...
public class CT_OlapPr {
	@XmlAttribute(name = "local")
	protected Boolean LocalAttr;
	@XmlAttribute(name = "localConnection")
	protected String LocalConnectionAttr;
	@XmlAttribute(name = "localRefresh")
	protected Boolean LocalRefreshAttr;
	@XmlAttribute(name = "sendLocale")
	protected Boolean SendLocaleAttr;
	@XmlAttribute(name = "rowDrillCount")
	protected Integer RowDrillCountAttr;
	@XmlAttribute(name = "serverFill")
	protected Boolean ServerFillAttr;
	@XmlAttribute(name = "serverNumberFormat")
	protected Boolean ServerNumberFormatAttr;
	@XmlAttribute(name = "serverFont")
	protected Boolean ServerFontAttr;
	@XmlAttribute(name = "serverFontColor")
	protected Boolean ServerFontColorAttr;
}

// CT_WebPr ...
public class CT_WebPr {
	@XmlAttribute(name = "xml")
	protected Boolean XmlAttr;
	@XmlAttribute(name = "sourceData")
	protected Boolean SourceDataAttr;
	@XmlAttribute(name = "parsePre")
	protected Boolean ParsePreAttr;
	@XmlAttribute(name = "consecutive")
	protected Boolean ConsecutiveAttr;
	@XmlAttribute(name = "firstRow")
	protected Boolean FirstRowAttr;
	@XmlAttribute(name = "xl97")
	protected Boolean Xl97Attr;
	@XmlAttribute(name = "textDates")
	protected Boolean TextDatesAttr;
	@XmlAttribute(name = "xl2000")
	protected Boolean Xl2000Attr;
	@XmlAttribute(name = "url")
	protected String UrlAttr;
	@XmlAttribute(name = "post")
	protected String PostAttr;
	@XmlAttribute(name = "htmlTables")
	protected Boolean HtmlTablesAttr;
	@XmlAttribute(name = "htmlFormat")
	protected String HtmlFormatAttr;
	@XmlAttribute(name = "editPage")
	protected String EditPageAttr;
	@XmlElement(name = "tables")
	protected CT_Tables Tables;
}

// ST_HtmlFmt ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HtmlFmt")
public class ST_HtmlFmt {
	protected String ST_HtmlFmt;
}

// CT_Parameters ...
public class CT_Parameters {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "parameter")
	protected List<CT_Parameter> Parameter;
}

// CT_Parameter ...
public class CT_Parameter {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "sqlType")
	protected Integer SqlTypeAttr;
	@XmlAttribute(name = "parameterType")
	protected String ParameterTypeAttr;
	@XmlAttribute(name = "refreshOnChange")
	protected Boolean RefreshOnChangeAttr;
	@XmlAttribute(name = "prompt")
	protected String PromptAttr;
	@XmlAttribute(name = "boolean")
	protected Boolean BooleanAttr;
	@XmlAttribute(name = "double")
	protected Float DoubleAttr;
	@XmlAttribute(name = "integer")
	protected Integer IntegerAttr;
	@XmlAttribute(name = "string")
	protected String StringAttr;
	@XmlAttribute(name = "cell")
	protected String CellAttr;
}

// ST_ParameterType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ParameterType")
public class ST_ParameterType {
	protected String ST_ParameterType;
}

// CT_Tables ...
public class CT_Tables {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "m")
	protected List<CT_TableMissing> M;
	@XmlElement(required = true, name = "s")
	protected List<CT_XStringElement> S;
	@XmlElement(required = true, name = "x")
	protected List<CT_Index> X;
}

// CT_TableMissing ...
public class CT_TableMissing {
}

// CT_TextPr ...
public class CT_TextPr {
	@XmlAttribute(name = "prompt")
	protected Boolean PromptAttr;
	@XmlAttribute(name = "fileType")
	protected String FileTypeAttr;
	@XmlAttribute(name = "characterSet")
	protected String CharacterSetAttr;
	@XmlAttribute(name = "firstRow")
	protected Integer FirstRowAttr;
	@XmlAttribute(name = "sourceFile")
	protected String SourceFileAttr;
	@XmlAttribute(name = "delimited")
	protected Boolean DelimitedAttr;
	@XmlAttribute(name = "decimal")
	protected String DecimalAttr;
	@XmlAttribute(name = "thousands")
	protected String ThousandsAttr;
	@XmlAttribute(name = "tab")
	protected Boolean TabAttr;
	@XmlAttribute(name = "space")
	protected Boolean SpaceAttr;
	@XmlAttribute(name = "comma")
	protected Boolean CommaAttr;
	@XmlAttribute(name = "semicolon")
	protected Boolean SemicolonAttr;
	@XmlAttribute(name = "consecutive")
	protected Boolean ConsecutiveAttr;
	@XmlAttribute(name = "qualifier")
	protected String QualifierAttr;
	@XmlAttribute(name = "delimiter")
	protected String DelimiterAttr;
	@XmlElement(name = "textFields")
	protected CT_TextFields TextFields;
}

// ST_FileType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FileType")
public class ST_FileType {
	protected String ST_FileType;
}

// ST_Qualifier ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Qualifier")
public class ST_Qualifier {
	protected String ST_Qualifier;
}

// CT_TextFields ...
public class CT_TextFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "textField")
	protected List<CT_TextField> TextField;
}

// CT_TextField ...
public class CT_TextField {
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "position")
	protected Integer PositionAttr;
}

// ST_ExternalConnectionType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ExternalConnectionType")
public class ST_ExternalConnectionType {
	protected String ST_ExternalConnectionType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "pivotCacheDefinition")
public class PivotCacheDefinition {
	protected CT_PivotCacheDefinition PivotCacheDefinition;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "pivotCacheRecords")
public class PivotCacheRecords {
	protected CT_PivotCacheRecords PivotCacheRecords;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "pivotTableDefinition")
public class PivotTableDefinition {
	protected CT_pivotTableDefinition PivotTableDefinition;
}

// CT_PivotCacheDefinition ...
public class CT_PivotCacheDefinition {
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlAttribute(name = "invalid")
	protected Boolean InvalidAttr;
	@XmlAttribute(name = "saveData")
	protected Boolean SaveDataAttr;
	@XmlAttribute(name = "refreshOnLoad")
	protected Boolean RefreshOnLoadAttr;
	@XmlAttribute(name = "optimizeMemory")
	protected Boolean OptimizeMemoryAttr;
	@XmlAttribute(name = "enableRefresh")
	protected Boolean EnableRefreshAttr;
	@XmlAttribute(name = "refreshedBy")
	protected String RefreshedByAttr;
	@XmlAttribute(name = "refreshedDateIso")
	protected String RefreshedDateIsoAttr;
	@XmlAttribute(name = "backgroundQuery")
	protected Boolean BackgroundQueryAttr;
	@XmlAttribute(name = "missingItemsLimit")
	protected Integer MissingItemsLimitAttr;
	@XmlAttribute(name = "createdVersion")
	protected Byte CreatedVersionAttr;
	@XmlAttribute(name = "refreshedVersion")
	protected Byte RefreshedVersionAttr;
	@XmlAttribute(name = "minRefreshableVersion")
	protected Byte MinRefreshableVersionAttr;
	@XmlAttribute(name = "recordCount")
	protected Integer RecordCountAttr;
	@XmlAttribute(name = "upgradeOnRefresh")
	protected Boolean UpgradeOnRefreshAttr;
	@XmlAttribute(name = "tupleCache")
	protected Boolean TupleCacheAttr;
	@XmlAttribute(name = "supportSubquery")
	protected Boolean SupportSubqueryAttr;
	@XmlAttribute(name = "supportAdvancedDrill")
	protected Boolean SupportAdvancedDrillAttr;
	@XmlElement(required = true, name = "cacheSource")
	protected CT_CacheSource CacheSource;
	@XmlElement(required = true, name = "cacheFields")
	protected CT_CacheFields CacheFields;
	@XmlElement(name = "cacheHierarchies")
	protected CT_CacheHierarchies CacheHierarchies;
	@XmlElement(name = "kpis")
	protected CT_PCDKPIs Kpis;
	@XmlElement(name = "tupleCache")
	protected CT_TupleCache TupleCache;
	@XmlElement(name = "calculatedItems")
	protected CT_CalculatedItems CalculatedItems;
	@XmlElement(name = "calculatedMembers")
	protected CT_CalculatedMembers CalculatedMembers;
	@XmlElement(name = "dimensions")
	protected CT_Dimensions Dimensions;
	@XmlElement(name = "measureGroups")
	protected CT_MeasureGroups MeasureGroups;
	@XmlElement(name = "maps")
	protected CT_MeasureDimensionMaps Maps;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CacheFields ...
public class CT_CacheFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "cacheField")
	protected List<CT_CacheField> CacheField;
}

// CT_CacheField ...
public class CT_CacheField {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "caption")
	protected String CaptionAttr;
	@XmlAttribute(name = "propertyName")
	protected String PropertyNameAttr;
	@XmlAttribute(name = "serverField")
	protected Boolean ServerFieldAttr;
	@XmlAttribute(name = "uniqueList")
	protected Boolean UniqueListAttr;
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
	@XmlAttribute(name = "formula")
	protected String FormulaAttr;
	@XmlAttribute(name = "sqlType")
	protected Integer SqlTypeAttr;
	@XmlAttribute(name = "hierarchy")
	protected Integer HierarchyAttr;
	@XmlAttribute(name = "level")
	protected Integer LevelAttr;
	@XmlAttribute(name = "databaseField")
	protected Boolean DatabaseFieldAttr;
	@XmlAttribute(name = "mappingCount")
	protected Integer MappingCountAttr;
	@XmlAttribute(name = "memberPropertyField")
	protected Boolean MemberPropertyFieldAttr;
	@XmlElement(name = "sharedItems")
	protected CT_SharedItems SharedItems;
	@XmlElement(name = "fieldGroup")
	protected CT_FieldGroup FieldGroup;
	@XmlElement(name = "mpMap")
	protected List<CT_X> MpMap;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CacheSource ...
public class CT_CacheSource {
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "connectionId")
	protected Integer ConnectionIdAttr;
	@XmlElement(required = true, name = "worksheetSource")
	protected CT_WorksheetSource WorksheetSource;
	@XmlElement(required = true, name = "consolidation")
	protected CT_Consolidation Consolidation;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_SourceType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SourceType")
public class ST_SourceType {
	protected String ST_SourceType;
}

// CT_WorksheetSource ...
public class CT_WorksheetSource {
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "sheet")
	protected String SheetAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
}

// CT_Consolidation ...
public class CT_Consolidation {
	@XmlAttribute(name = "autoPage")
	protected Boolean AutoPageAttr;
	@XmlElement(name = "pages")
	protected CT_Pages Pages;
	@XmlElement(required = true, name = "rangeSets")
	protected CT_RangeSets RangeSets;
}

// CT_Pages ...
public class CT_Pages {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "page")
	protected List<CT_PCDSCPage> Page;
}

// CT_PCDSCPage ...
public class CT_PCDSCPage {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "pageItem")
	protected List<CT_PageItem> PageItem;
}

// CT_PageItem ...
public class CT_PageItem {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
}

// CT_RangeSets ...
public class CT_RangeSets {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "rangeSet")
	protected List<CT_RangeSet> RangeSet;
}

// CT_RangeSet ...
public class CT_RangeSet {
	@XmlAttribute(name = "i1")
	protected Integer I1Attr;
	@XmlAttribute(name = "i2")
	protected Integer I2Attr;
	@XmlAttribute(name = "i3")
	protected Integer I3Attr;
	@XmlAttribute(name = "i4")
	protected Integer I4Attr;
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "sheet")
	protected String SheetAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
}

// CT_SharedItems ...
public class CT_SharedItems {
	@XmlAttribute(name = "containsSemiMixedTypes")
	protected Boolean ContainsSemiMixedTypesAttr;
	@XmlAttribute(name = "containsNonDate")
	protected Boolean ContainsNonDateAttr;
	@XmlAttribute(name = "containsDate")
	protected Boolean ContainsDateAttr;
	@XmlAttribute(name = "containsString")
	protected Boolean ContainsStringAttr;
	@XmlAttribute(name = "containsBlank")
	protected Boolean ContainsBlankAttr;
	@XmlAttribute(name = "containsMixedTypes")
	protected Boolean ContainsMixedTypesAttr;
	@XmlAttribute(name = "containsNumber")
	protected Boolean ContainsNumberAttr;
	@XmlAttribute(name = "containsInteger")
	protected Boolean ContainsIntegerAttr;
	@XmlAttribute(name = "minValue")
	protected Float MinValueAttr;
	@XmlAttribute(name = "maxValue")
	protected Float MaxValueAttr;
	@XmlAttribute(name = "minDate")
	protected String MinDateAttr;
	@XmlAttribute(name = "maxDate")
	protected String MaxDateAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "longText")
	protected Boolean LongTextAttr;
	@XmlElement(required = true, name = "m")
	protected List<CT_Missing> M;
	@XmlElement(required = true, name = "n")
	protected List<CT_Number> N;
	@XmlElement(required = true, name = "b")
	protected List<CT_Boolean> B;
	@XmlElement(required = true, name = "e")
	protected List<CT_Error> E;
	@XmlElement(required = true, name = "s")
	protected List<CT_String> S;
	@XmlElement(required = true, name = "d")
	protected List<CT_DateTime> D;
}

// CT_Missing ...
public class CT_Missing {
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlAttribute(name = "in")
	protected Integer InAttr;
	@XmlAttribute(name = "bc")
	protected List<Byte> BcAttr;
	@XmlAttribute(name = "fc")
	protected List<Byte> FcAttr;
	@XmlAttribute(name = "i")
	protected Boolean IAttr;
	@XmlAttribute(name = "un")
	protected Boolean UnAttr;
	@XmlAttribute(name = "st")
	protected Boolean StAttr;
	@XmlAttribute(name = "b")
	protected Boolean BAttr;
	@XmlElement(name = "tpls")
	protected List<CT_Tuples> Tpls;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_Number ...
public class CT_Number {
	@XmlAttribute(name = "v", required = true)
	protected Float VAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlAttribute(name = "in")
	protected Integer InAttr;
	@XmlAttribute(name = "bc")
	protected List<Byte> BcAttr;
	@XmlAttribute(name = "fc")
	protected List<Byte> FcAttr;
	@XmlAttribute(name = "i")
	protected Boolean IAttr;
	@XmlAttribute(name = "un")
	protected Boolean UnAttr;
	@XmlAttribute(name = "st")
	protected Boolean StAttr;
	@XmlAttribute(name = "b")
	protected Boolean BAttr;
	@XmlElement(name = "tpls")
	protected List<CT_Tuples> Tpls;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_Boolean ...
public class CT_Boolean {
	@XmlAttribute(name = "v", required = true)
	protected Boolean VAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_Error ...
public class CT_Error {
	@XmlAttribute(name = "v", required = true)
	protected String VAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlAttribute(name = "in")
	protected Integer InAttr;
	@XmlAttribute(name = "bc")
	protected List<Byte> BcAttr;
	@XmlAttribute(name = "fc")
	protected List<Byte> FcAttr;
	@XmlAttribute(name = "i")
	protected Boolean IAttr;
	@XmlAttribute(name = "un")
	protected Boolean UnAttr;
	@XmlAttribute(name = "st")
	protected Boolean StAttr;
	@XmlAttribute(name = "b")
	protected Boolean BAttr;
	@XmlElement(name = "tpls")
	protected CT_Tuples Tpls;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_String ...
public class CT_String {
	@XmlAttribute(name = "v", required = true)
	protected String VAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlAttribute(name = "in")
	protected Integer InAttr;
	@XmlAttribute(name = "bc")
	protected List<Byte> BcAttr;
	@XmlAttribute(name = "fc")
	protected List<Byte> FcAttr;
	@XmlAttribute(name = "i")
	protected Boolean IAttr;
	@XmlAttribute(name = "un")
	protected Boolean UnAttr;
	@XmlAttribute(name = "st")
	protected Boolean StAttr;
	@XmlAttribute(name = "b")
	protected Boolean BAttr;
	@XmlElement(name = "tpls")
	protected List<CT_Tuples> Tpls;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_DateTime ...
public class CT_DateTime {
	@XmlAttribute(name = "v", required = true)
	protected String VAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "c")
	protected String CAttr;
	@XmlAttribute(name = "cp")
	protected Integer CpAttr;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_FieldGroup ...
public class CT_FieldGroup {
	@XmlAttribute(name = "par")
	protected Integer ParAttr;
	@XmlAttribute(name = "base")
	protected Integer BaseAttr;
	@XmlElement(name = "rangePr")
	protected CT_RangePr RangePr;
	@XmlElement(name = "discretePr")
	protected CT_DiscretePr DiscretePr;
	@XmlElement(name = "groupItems")
	protected CT_GroupItems GroupItems;
}

// CT_RangePr ...
public class CT_RangePr {
	@XmlAttribute(name = "autoStart")
	protected Boolean AutoStartAttr;
	@XmlAttribute(name = "autoEnd")
	protected Boolean AutoEndAttr;
	@XmlAttribute(name = "groupBy")
	protected String GroupByAttr;
	@XmlAttribute(name = "startNum")
	protected Float StartNumAttr;
	@XmlAttribute(name = "endNum")
	protected Float EndNumAttr;
	@XmlAttribute(name = "startDate")
	protected String StartDateAttr;
	@XmlAttribute(name = "endDate")
	protected String EndDateAttr;
	@XmlAttribute(name = "groupInterval")
	protected Float GroupIntervalAttr;
}

// ST_GroupBy ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GroupBy")
public class ST_GroupBy {
	protected String ST_GroupBy;
}

// CT_DiscretePr ...
public class CT_DiscretePr {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "x")
	protected List<CT_Index> X;
}

// CT_GroupItems ...
public class CT_GroupItems {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "m")
	protected List<CT_Missing> M;
	@XmlElement(required = true, name = "n")
	protected List<CT_Number> N;
	@XmlElement(required = true, name = "b")
	protected List<CT_Boolean> B;
	@XmlElement(required = true, name = "e")
	protected List<CT_Error> E;
	@XmlElement(required = true, name = "s")
	protected List<CT_String> S;
	@XmlElement(required = true, name = "d")
	protected List<CT_DateTime> D;
}

// CT_PivotCacheRecords ...
public class CT_PivotCacheRecords {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "r")
	protected List<CT_Record> R;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Record ...
public class CT_Record {
	@XmlElement(required = true, name = "m")
	protected List<CT_Missing> M;
	@XmlElement(required = true, name = "n")
	protected List<CT_Number> N;
	@XmlElement(required = true, name = "b")
	protected List<CT_Boolean> B;
	@XmlElement(required = true, name = "e")
	protected List<CT_Error> E;
	@XmlElement(required = true, name = "s")
	protected List<CT_String> S;
	@XmlElement(required = true, name = "d")
	protected List<CT_DateTime> D;
	@XmlElement(required = true, name = "x")
	protected List<CT_Index> X;
}

// CT_PCDKPIs ...
public class CT_PCDKPIs {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "kpi")
	protected List<CT_PCDKPI> Kpi;
}

// CT_PCDKPI ...
public class CT_PCDKPI {
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "caption")
	protected String CaptionAttr;
	@XmlAttribute(name = "displayFolder")
	protected String DisplayFolderAttr;
	@XmlAttribute(name = "measureGroup")
	protected String MeasureGroupAttr;
	@XmlAttribute(name = "parent")
	protected String ParentAttr;
	@XmlAttribute(name = "value", required = true)
	protected String ValueAttr;
	@XmlAttribute(name = "goal")
	protected String GoalAttr;
	@XmlAttribute(name = "status")
	protected String StatusAttr;
	@XmlAttribute(name = "trend")
	protected String TrendAttr;
	@XmlAttribute(name = "weight")
	protected String WeightAttr;
	@XmlAttribute(name = "time")
	protected String TimeAttr;
}

// CT_CacheHierarchies ...
public class CT_CacheHierarchies {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "cacheHierarchy")
	protected List<CT_CacheHierarchy> CacheHierarchy;
}

// CT_CacheHierarchy ...
public class CT_CacheHierarchy {
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "caption")
	protected String CaptionAttr;
	@XmlAttribute(name = "measure")
	protected Boolean MeasureAttr;
	@XmlAttribute(name = "set")
	protected Boolean SetAttr;
	@XmlAttribute(name = "parentSet")
	protected Integer ParentSetAttr;
	@XmlAttribute(name = "iconSet")
	protected Integer IconSetAttr;
	@XmlAttribute(name = "attribute")
	protected Boolean AttributeAttr;
	@XmlAttribute(name = "time")
	protected Boolean TimeAttr;
	@XmlAttribute(name = "keyAttribute")
	protected Boolean KeyAttributeAttr;
	@XmlAttribute(name = "defaultMemberUniqueName")
	protected String DefaultMemberUniqueNameAttr;
	@XmlAttribute(name = "allUniqueName")
	protected String AllUniqueNameAttr;
	@XmlAttribute(name = "allCaption")
	protected String AllCaptionAttr;
	@XmlAttribute(name = "dimensionUniqueName")
	protected String DimensionUniqueNameAttr;
	@XmlAttribute(name = "displayFolder")
	protected String DisplayFolderAttr;
	@XmlAttribute(name = "measureGroup")
	protected String MeasureGroupAttr;
	@XmlAttribute(name = "measures")
	protected Boolean MeasuresAttr;
	@XmlAttribute(name = "count", required = true)
	protected Integer CountAttr;
	@XmlAttribute(name = "oneField")
	protected Boolean OneFieldAttr;
	@XmlAttribute(name = "memberValueDatatype")
	protected Short MemberValueDatatypeAttr;
	@XmlAttribute(name = "unbalanced")
	protected Boolean UnbalancedAttr;
	@XmlAttribute(name = "unbalancedGroup")
	protected Boolean UnbalancedGroupAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlElement(name = "fieldsUsage")
	protected CT_FieldsUsage FieldsUsage;
	@XmlElement(name = "groupLevels")
	protected CT_GroupLevels GroupLevels;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_FieldsUsage ...
public class CT_FieldsUsage {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "fieldUsage")
	protected List<CT_FieldUsage> FieldUsage;
}

// CT_FieldUsage ...
public class CT_FieldUsage {
	@XmlAttribute(name = "x", required = true)
	protected Integer XAttr;
}

// CT_GroupLevels ...
public class CT_GroupLevels {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "groupLevel")
	protected List<CT_GroupLevel> GroupLevel;
}

// CT_GroupLevel ...
public class CT_GroupLevel {
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "caption", required = true)
	protected String CaptionAttr;
	@XmlAttribute(name = "user")
	protected Boolean UserAttr;
	@XmlAttribute(name = "customRollUp")
	protected Boolean CustomRollUpAttr;
	@XmlElement(name = "groups")
	protected CT_Groups Groups;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Groups ...
public class CT_Groups {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "group")
	protected List<CT_LevelGroup> Group;
}

// CT_LevelGroup ...
public class CT_LevelGroup {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "caption", required = true)
	protected String CaptionAttr;
	@XmlAttribute(name = "uniqueParent")
	protected String UniqueParentAttr;
	@XmlAttribute(name = "id")
	protected Integer IdAttr;
	@XmlElement(required = true, name = "groupMembers")
	protected CT_GroupMembers GroupMembers;
}

// CT_GroupMembers ...
public class CT_GroupMembers {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "groupMember")
	protected List<CT_GroupMember> GroupMember;
}

// CT_GroupMember ...
public class CT_GroupMember {
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "group")
	protected Boolean GroupAttr;
}

// CT_TupleCache ...
public class CT_TupleCache {
	@XmlElement(name = "entries")
	protected CT_PCDSDTCEntries Entries;
	@XmlElement(name = "sets")
	protected CT_Sets Sets;
	@XmlElement(name = "queryCache")
	protected CT_QueryCache QueryCache;
	@XmlElement(name = "serverFormats")
	protected CT_ServerFormats ServerFormats;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ServerFormat ...
public class CT_ServerFormat {
	@XmlAttribute(name = "culture")
	protected String CultureAttr;
	@XmlAttribute(name = "format")
	protected String FormatAttr;
}

// CT_ServerFormats ...
public class CT_ServerFormats {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "serverFormat")
	protected List<CT_ServerFormat> ServerFormat;
}

// CT_PCDSDTCEntries ...
public class CT_PCDSDTCEntries {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "m")
	protected List<CT_Missing> M;
	@XmlElement(required = true, name = "n")
	protected List<CT_Number> N;
	@XmlElement(required = true, name = "e")
	protected List<CT_Error> E;
	@XmlElement(required = true, name = "s")
	protected List<CT_String> S;
}

// CT_Tuples ...
public class CT_Tuples {
	@XmlAttribute(name = "c")
	protected Integer CAttr;
	@XmlElement(required = true, name = "tpl")
	protected List<CT_Tuple> Tpl;
}

// CT_Tuple ...
public class CT_Tuple {
	@XmlAttribute(name = "fld")
	protected Integer FldAttr;
	@XmlAttribute(name = "hier")
	protected Integer HierAttr;
	@XmlAttribute(name = "item", required = true)
	protected Integer ItemAttr;
}

// CT_Sets ...
public class CT_Sets {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "set")
	protected List<CT_Set> Set;
}

// CT_Set ...
public class CT_Set {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "maxRank", required = true)
	protected Integer MaxRankAttr;
	@XmlAttribute(name = "setDefinition", required = true)
	protected String SetDefinitionAttr;
	@XmlAttribute(name = "sortType")
	protected String SortTypeAttr;
	@XmlAttribute(name = "queryFailed")
	protected Boolean QueryFailedAttr;
	@XmlElement(name = "tpls")
	protected List<CT_Tuples> Tpls;
	@XmlElement(name = "sortByTuple")
	protected CT_Tuples SortByTuple;
}

// ST_SortType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SortType")
public class ST_SortType {
	protected String ST_SortType;
}

// CT_QueryCache ...
public class CT_QueryCache {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "query")
	protected List<CT_Query> Query;
}

// CT_Query ...
public class CT_Query {
	@XmlAttribute(name = "mdx", required = true)
	protected String MdxAttr;
	@XmlElement(name = "tpls")
	protected CT_Tuples Tpls;
}

// CT_CalculatedItems ...
public class CT_CalculatedItems {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "calculatedItem")
	protected List<CT_CalculatedItem> CalculatedItem;
}

// CT_CalculatedItem ...
public class CT_CalculatedItem {
	@XmlAttribute(name = "field")
	protected Integer FieldAttr;
	@XmlAttribute(name = "formula")
	protected String FormulaAttr;
	@XmlElement(required = true, name = "pivotArea")
	protected CT_PivotArea PivotArea;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CalculatedMembers ...
public class CT_CalculatedMembers {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "calculatedMember")
	protected List<CT_CalculatedMember> CalculatedMember;
}

// CT_CalculatedMember ...
public class CT_CalculatedMember {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "mdx", required = true)
	protected String MdxAttr;
	@XmlAttribute(name = "memberName")
	protected String MemberNameAttr;
	@XmlAttribute(name = "hierarchy")
	protected String HierarchyAttr;
	@XmlAttribute(name = "parent")
	protected String ParentAttr;
	@XmlAttribute(name = "solveOrder")
	protected Integer SolveOrderAttr;
	@XmlAttribute(name = "set")
	protected Boolean SetAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_pivotTableDefinition ...
public class CT_pivotTableDefinition {
	@XmlElement(required = true)
	protected AG_AutoFormat AG_AutoFormat;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "cacheId", required = true)
	protected Integer CacheIdAttr;
	@XmlAttribute(name = "dataOnRows")
	protected Boolean DataOnRowsAttr;
	@XmlAttribute(name = "dataPosition")
	protected Integer DataPositionAttr;
	@XmlAttribute(name = "dataCaption", required = true)
	protected String DataCaptionAttr;
	@XmlAttribute(name = "grandTotalCaption")
	protected String GrandTotalCaptionAttr;
	@XmlAttribute(name = "errorCaption")
	protected String ErrorCaptionAttr;
	@XmlAttribute(name = "showError")
	protected Boolean ShowErrorAttr;
	@XmlAttribute(name = "missingCaption")
	protected String MissingCaptionAttr;
	@XmlAttribute(name = "showMissing")
	protected Boolean ShowMissingAttr;
	@XmlAttribute(name = "pageStyle")
	protected String PageStyleAttr;
	@XmlAttribute(name = "pivotTableStyle")
	protected String PivotTableStyleAttr;
	@XmlAttribute(name = "vacatedStyle")
	protected String VacatedStyleAttr;
	@XmlAttribute(name = "tag")
	protected String TagAttr;
	@XmlAttribute(name = "updatedVersion")
	protected Byte UpdatedVersionAttr;
	@XmlAttribute(name = "minRefreshableVersion")
	protected Byte MinRefreshableVersionAttr;
	@XmlAttribute(name = "asteriskTotals")
	protected Boolean AsteriskTotalsAttr;
	@XmlAttribute(name = "showItems")
	protected Boolean ShowItemsAttr;
	@XmlAttribute(name = "editData")
	protected Boolean EditDataAttr;
	@XmlAttribute(name = "disableFieldList")
	protected Boolean DisableFieldListAttr;
	@XmlAttribute(name = "showCalcMbrs")
	protected Boolean ShowCalcMbrsAttr;
	@XmlAttribute(name = "visualTotals")
	protected Boolean VisualTotalsAttr;
	@XmlAttribute(name = "showMultipleLabel")
	protected Boolean ShowMultipleLabelAttr;
	@XmlAttribute(name = "showDataDropDown")
	protected Boolean ShowDataDropDownAttr;
	@XmlAttribute(name = "showDrill")
	protected Boolean ShowDrillAttr;
	@XmlAttribute(name = "printDrill")
	protected Boolean PrintDrillAttr;
	@XmlAttribute(name = "showMemberPropertyTips")
	protected Boolean ShowMemberPropertyTipsAttr;
	@XmlAttribute(name = "showDataTips")
	protected Boolean ShowDataTipsAttr;
	@XmlAttribute(name = "enableWizard")
	protected Boolean EnableWizardAttr;
	@XmlAttribute(name = "enableDrill")
	protected Boolean EnableDrillAttr;
	@XmlAttribute(name = "enableFieldProperties")
	protected Boolean EnableFieldPropertiesAttr;
	@XmlAttribute(name = "preserveFormatting")
	protected Boolean PreserveFormattingAttr;
	@XmlAttribute(name = "useAutoFormatting")
	protected Boolean UseAutoFormattingAttr;
	@XmlAttribute(name = "pageWrap")
	protected Integer PageWrapAttr;
	@XmlAttribute(name = "pageOverThenDown")
	protected Boolean PageOverThenDownAttr;
	@XmlAttribute(name = "subtotalHiddenItems")
	protected Boolean SubtotalHiddenItemsAttr;
	@XmlAttribute(name = "rowGrandTotals")
	protected Boolean RowGrandTotalsAttr;
	@XmlAttribute(name = "colGrandTotals")
	protected Boolean ColGrandTotalsAttr;
	@XmlAttribute(name = "fieldPrintTitles")
	protected Boolean FieldPrintTitlesAttr;
	@XmlAttribute(name = "itemPrintTitles")
	protected Boolean ItemPrintTitlesAttr;
	@XmlAttribute(name = "mergeItem")
	protected Boolean MergeItemAttr;
	@XmlAttribute(name = "showDropZones")
	protected Boolean ShowDropZonesAttr;
	@XmlAttribute(name = "createdVersion")
	protected Byte CreatedVersionAttr;
	@XmlAttribute(name = "indent")
	protected Integer IndentAttr;
	@XmlAttribute(name = "showEmptyRow")
	protected Boolean ShowEmptyRowAttr;
	@XmlAttribute(name = "showEmptyCol")
	protected Boolean ShowEmptyColAttr;
	@XmlAttribute(name = "showHeaders")
	protected Boolean ShowHeadersAttr;
	@XmlAttribute(name = "compact")
	protected Boolean CompactAttr;
	@XmlAttribute(name = "outline")
	protected Boolean OutlineAttr;
	@XmlAttribute(name = "outlineData")
	protected Boolean OutlineDataAttr;
	@XmlAttribute(name = "compactData")
	protected Boolean CompactDataAttr;
	@XmlAttribute(name = "published")
	protected Boolean PublishedAttr;
	@XmlAttribute(name = "gridDropZones")
	protected Boolean GridDropZonesAttr;
	@XmlAttribute(name = "immersive")
	protected Boolean ImmersiveAttr;
	@XmlAttribute(name = "multipleFieldFilters")
	protected Boolean MultipleFieldFiltersAttr;
	@XmlAttribute(name = "chartFormat")
	protected Integer ChartFormatAttr;
	@XmlAttribute(name = "rowHeaderCaption")
	protected String RowHeaderCaptionAttr;
	@XmlAttribute(name = "colHeaderCaption")
	protected String ColHeaderCaptionAttr;
	@XmlAttribute(name = "fieldListSortAscending")
	protected Boolean FieldListSortAscendingAttr;
	@XmlAttribute(name = "mdxSubqueries")
	protected Boolean MdxSubqueriesAttr;
	@XmlAttribute(name = "customListSort")
	protected Boolean CustomListSortAttr;
	@XmlElement(required = true, name = "location")
	protected CT_Location Location;
	@XmlElement(name = "pivotFields")
	protected CT_PivotFields PivotFields;
	@XmlElement(name = "rowFields")
	protected CT_RowFields RowFields;
	@XmlElement(name = "rowItems")
	protected CT_rowItems RowItems;
	@XmlElement(name = "colFields")
	protected CT_ColFields ColFields;
	@XmlElement(name = "colItems")
	protected CT_colItems ColItems;
	@XmlElement(name = "pageFields")
	protected CT_PageFields PageFields;
	@XmlElement(name = "dataFields")
	protected CT_DataFields DataFields;
	@XmlElement(name = "formats")
	protected CT_Formats Formats;
	@XmlElement(name = "conditionalFormats")
	protected CT_ConditionalFormats ConditionalFormats;
	@XmlElement(name = "chartFormats")
	protected CT_ChartFormats ChartFormats;
	@XmlElement(name = "pivotHierarchies")
	protected CT_PivotHierarchies PivotHierarchies;
	@XmlElement(name = "pivotTableStyleInfo")
	protected CT_PivotTableStyle PivotTableStyleInfo;
	@XmlElement(name = "filters")
	protected CT_PivotFilters Filters;
	@XmlElement(name = "rowHierarchiesUsage")
	protected CT_RowHierarchiesUsage RowHierarchiesUsage;
	@XmlElement(name = "colHierarchiesUsage")
	protected CT_ColHierarchiesUsage ColHierarchiesUsage;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Location ...
public class CT_Location {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "firstHeaderRow", required = true)
	protected Integer FirstHeaderRowAttr;
	@XmlAttribute(name = "firstDataRow", required = true)
	protected Integer FirstDataRowAttr;
	@XmlAttribute(name = "firstDataCol", required = true)
	protected Integer FirstDataColAttr;
	@XmlAttribute(name = "rowPageCount")
	protected Integer RowPageCountAttr;
	@XmlAttribute(name = "colPageCount")
	protected Integer ColPageCountAttr;
}

// CT_PivotFields ...
public class CT_PivotFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "pivotField")
	protected List<CT_PivotField> PivotField;
}

// CT_PivotField ...
public class CT_PivotField {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "axis")
	protected String AxisAttr;
	@XmlAttribute(name = "dataField")
	protected Boolean DataFieldAttr;
	@XmlAttribute(name = "subtotalCaption")
	protected String SubtotalCaptionAttr;
	@XmlAttribute(name = "showDropDowns")
	protected Boolean ShowDropDownsAttr;
	@XmlAttribute(name = "hiddenLevel")
	protected Boolean HiddenLevelAttr;
	@XmlAttribute(name = "uniqueMemberProperty")
	protected String UniqueMemberPropertyAttr;
	@XmlAttribute(name = "compact")
	protected Boolean CompactAttr;
	@XmlAttribute(name = "allDrilled")
	protected Boolean AllDrilledAttr;
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
	@XmlAttribute(name = "outline")
	protected Boolean OutlineAttr;
	@XmlAttribute(name = "subtotalTop")
	protected Boolean SubtotalTopAttr;
	@XmlAttribute(name = "dragToRow")
	protected Boolean DragToRowAttr;
	@XmlAttribute(name = "dragToCol")
	protected Boolean DragToColAttr;
	@XmlAttribute(name = "multipleItemSelectionAllowed")
	protected Boolean MultipleItemSelectionAllowedAttr;
	@XmlAttribute(name = "dragToPage")
	protected Boolean DragToPageAttr;
	@XmlAttribute(name = "dragToData")
	protected Boolean DragToDataAttr;
	@XmlAttribute(name = "dragOff")
	protected Boolean DragOffAttr;
	@XmlAttribute(name = "showAll")
	protected Boolean ShowAllAttr;
	@XmlAttribute(name = "insertBlankRow")
	protected Boolean InsertBlankRowAttr;
	@XmlAttribute(name = "serverField")
	protected Boolean ServerFieldAttr;
	@XmlAttribute(name = "insertPageBreak")
	protected Boolean InsertPageBreakAttr;
	@XmlAttribute(name = "autoShow")
	protected Boolean AutoShowAttr;
	@XmlAttribute(name = "topAutoShow")
	protected Boolean TopAutoShowAttr;
	@XmlAttribute(name = "hideNewItems")
	protected Boolean HideNewItemsAttr;
	@XmlAttribute(name = "measureFilter")
	protected Boolean MeasureFilterAttr;
	@XmlAttribute(name = "includeNewItemsInFilter")
	protected Boolean IncludeNewItemsInFilterAttr;
	@XmlAttribute(name = "itemPageCount")
	protected Integer ItemPageCountAttr;
	@XmlAttribute(name = "sortType")
	protected String SortTypeAttr;
	@XmlAttribute(name = "dataSourceSort")
	protected Boolean DataSourceSortAttr;
	@XmlAttribute(name = "nonAutoSortDefault")
	protected Boolean NonAutoSortDefaultAttr;
	@XmlAttribute(name = "rankBy")
	protected Integer RankByAttr;
	@XmlAttribute(name = "defaultSubtotal")
	protected Boolean DefaultSubtotalAttr;
	@XmlAttribute(name = "sumSubtotal")
	protected Boolean SumSubtotalAttr;
	@XmlAttribute(name = "countASubtotal")
	protected Boolean CountASubtotalAttr;
	@XmlAttribute(name = "avgSubtotal")
	protected Boolean AvgSubtotalAttr;
	@XmlAttribute(name = "maxSubtotal")
	protected Boolean MaxSubtotalAttr;
	@XmlAttribute(name = "minSubtotal")
	protected Boolean MinSubtotalAttr;
	@XmlAttribute(name = "productSubtotal")
	protected Boolean ProductSubtotalAttr;
	@XmlAttribute(name = "countSubtotal")
	protected Boolean CountSubtotalAttr;
	@XmlAttribute(name = "stdDevSubtotal")
	protected Boolean StdDevSubtotalAttr;
	@XmlAttribute(name = "stdDevPSubtotal")
	protected Boolean StdDevPSubtotalAttr;
	@XmlAttribute(name = "varSubtotal")
	protected Boolean VarSubtotalAttr;
	@XmlAttribute(name = "varPSubtotal")
	protected Boolean VarPSubtotalAttr;
	@XmlAttribute(name = "showPropCell")
	protected Boolean ShowPropCellAttr;
	@XmlAttribute(name = "showPropTip")
	protected Boolean ShowPropTipAttr;
	@XmlAttribute(name = "showPropAsCaption")
	protected Boolean ShowPropAsCaptionAttr;
	@XmlAttribute(name = "defaultAttributeDrillState")
	protected Boolean DefaultAttributeDrillStateAttr;
	@XmlElement(name = "items")
	protected CT_Items Items;
	@XmlElement(name = "autoSortScope")
	protected CT_AutoSortScope AutoSortScope;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_AutoSortScope ...
public class CT_AutoSortScope {
	@XmlElement(required = true, name = "pivotArea")
	protected CT_PivotArea PivotArea;
}

// CT_Items ...
public class CT_Items {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "item")
	protected List<CT_Item> Item;
}

// CT_Item ...
public class CT_Item {
	@XmlAttribute(name = "n")
	protected String NAttr;
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlAttribute(name = "h")
	protected Boolean HAttr;
	@XmlAttribute(name = "s")
	protected Boolean SAttr;
	@XmlAttribute(name = "sd")
	protected Boolean SdAttr;
	@XmlAttribute(name = "f")
	protected Boolean FAttr;
	@XmlAttribute(name = "m")
	protected Boolean MAttr;
	@XmlAttribute(name = "c")
	protected Boolean CAttr;
	@XmlAttribute(name = "x")
	protected Integer XAttr;
	@XmlAttribute(name = "d")
	protected Boolean DAttr;
	@XmlAttribute(name = "e")
	protected Boolean EAttr;
}

// CT_PageFields ...
public class CT_PageFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "pageField")
	protected List<CT_PageField> PageField;
}

// CT_PageField ...
public class CT_PageField {
	@XmlAttribute(name = "fld", required = true)
	protected Integer FldAttr;
	@XmlAttribute(name = "item")
	protected Integer ItemAttr;
	@XmlAttribute(name = "hier")
	protected Integer HierAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "cap")
	protected String CapAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_DataFields ...
public class CT_DataFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "dataField")
	protected List<CT_DataField> DataField;
}

// CT_DataField ...
public class CT_DataField {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "fld", required = true)
	protected Integer FldAttr;
	@XmlAttribute(name = "subtotal")
	protected String SubtotalAttr;
	@XmlAttribute(name = "showDataAs")
	protected String ShowDataAsAttr;
	@XmlAttribute(name = "baseField")
	protected Integer BaseFieldAttr;
	@XmlAttribute(name = "baseItem")
	protected Integer BaseItemAttr;
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_rowItems ...
public class CT_rowItems {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "i")
	protected List<CT_I> I;
}

// CT_colItems ...
public class CT_colItems {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "i")
	protected List<CT_I> I;
}

// CT_I ...
public class CT_I {
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlAttribute(name = "r")
	protected Integer RAttr;
	@XmlAttribute(name = "i")
	protected Integer IAttr;
	@XmlElement(name = "x")
	protected List<CT_X> X;
}

// CT_X ...
public class CT_X {
	@XmlAttribute(name = "v")
	protected Integer VAttr;
}

// CT_RowFields ...
public class CT_RowFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "field")
	protected List<CT_Field> Field;
}

// CT_ColFields ...
public class CT_ColFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "field")
	protected List<CT_Field> Field;
}

// CT_Field ...
public class CT_Field {
	@XmlAttribute(name = "x", required = true)
	protected Integer XAttr;
}

// CT_Formats ...
public class CT_Formats {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "format")
	protected List<CT_Format> Format;
}

// CT_Format ...
public class CT_Format {
	@XmlAttribute(name = "action")
	protected String ActionAttr;
	@XmlAttribute(name = "dxfId")
	protected Integer DxfIdAttr;
	@XmlElement(required = true, name = "pivotArea")
	protected CT_PivotArea PivotArea;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ConditionalFormats ...
public class CT_ConditionalFormats {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "conditionalFormat")
	protected List<CT_ConditionalFormat> ConditionalFormat;
}

// CT_ConditionalFormat ...
public class CT_ConditionalFormat {
	@XmlAttribute(name = "scope")
	protected String ScopeAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "priority", required = true)
	protected Integer PriorityAttr;
	@XmlElement(required = true, name = "pivotAreas")
	protected CT_PivotAreas PivotAreas;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PivotAreas ...
public class CT_PivotAreas {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "pivotArea")
	protected List<CT_PivotArea> PivotArea;
}

// ST_Scope ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Scope")
public class ST_Scope {
	protected String ST_Scope;
}

// ST_Type ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Type")
public class ST_Type {
	protected String ST_Type;
}

// CT_ChartFormats ...
public class CT_ChartFormats {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "chartFormat")
	protected List<CT_ChartFormat> ChartFormat;
}

// CT_ChartFormat ...
public class CT_ChartFormat {
	@XmlAttribute(name = "chart", required = true)
	protected Integer ChartAttr;
	@XmlAttribute(name = "format", required = true)
	protected Integer FormatAttr;
	@XmlAttribute(name = "series")
	protected Boolean SeriesAttr;
	@XmlElement(required = true, name = "pivotArea")
	protected CT_PivotArea PivotArea;
}

// CT_PivotHierarchies ...
public class CT_PivotHierarchies {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "pivotHierarchy")
	protected List<CT_PivotHierarchy> PivotHierarchy;
}

// CT_PivotHierarchy ...
public class CT_PivotHierarchy {
	@XmlAttribute(name = "outline")
	protected Boolean OutlineAttr;
	@XmlAttribute(name = "multipleItemSelectionAllowed")
	protected Boolean MultipleItemSelectionAllowedAttr;
	@XmlAttribute(name = "subtotalTop")
	protected Boolean SubtotalTopAttr;
	@XmlAttribute(name = "showInFieldList")
	protected Boolean ShowInFieldListAttr;
	@XmlAttribute(name = "dragToRow")
	protected Boolean DragToRowAttr;
	@XmlAttribute(name = "dragToCol")
	protected Boolean DragToColAttr;
	@XmlAttribute(name = "dragToPage")
	protected Boolean DragToPageAttr;
	@XmlAttribute(name = "dragToData")
	protected Boolean DragToDataAttr;
	@XmlAttribute(name = "dragOff")
	protected Boolean DragOffAttr;
	@XmlAttribute(name = "includeNewItemsInFilter")
	protected Boolean IncludeNewItemsInFilterAttr;
	@XmlAttribute(name = "caption")
	protected String CaptionAttr;
	@XmlElement(name = "mps")
	protected CT_MemberProperties Mps;
	@XmlElement(name = "members")
	protected List<CT_Members> Members;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RowHierarchiesUsage ...
public class CT_RowHierarchiesUsage {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "rowHierarchyUsage")
	protected List<CT_HierarchyUsage> RowHierarchyUsage;
}

// CT_ColHierarchiesUsage ...
public class CT_ColHierarchiesUsage {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "colHierarchyUsage")
	protected List<CT_HierarchyUsage> ColHierarchyUsage;
}

// CT_HierarchyUsage ...
public class CT_HierarchyUsage {
	@XmlAttribute(name = "hierarchyUsage", required = true)
	protected Integer HierarchyUsageAttr;
}

// CT_MemberProperties ...
public class CT_MemberProperties {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "mp")
	protected List<CT_MemberProperty> Mp;
}

// CT_MemberProperty ...
public class CT_MemberProperty {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "showCell")
	protected Boolean ShowCellAttr;
	@XmlAttribute(name = "showTip")
	protected Boolean ShowTipAttr;
	@XmlAttribute(name = "showAsCaption")
	protected Boolean ShowAsCaptionAttr;
	@XmlAttribute(name = "nameLen")
	protected Integer NameLenAttr;
	@XmlAttribute(name = "pPos")
	protected Integer PPosAttr;
	@XmlAttribute(name = "pLen")
	protected Integer PLenAttr;
	@XmlAttribute(name = "level")
	protected Integer LevelAttr;
	@XmlAttribute(name = "field", required = true)
	protected Integer FieldAttr;
}

// CT_Members ...
public class CT_Members {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "level")
	protected Integer LevelAttr;
	@XmlElement(required = true, name = "member")
	protected List<CT_Member> Member;
}

// CT_Member ...
public class CT_Member {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
}

// CT_Dimensions ...
public class CT_Dimensions {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "dimension")
	protected List<CT_PivotDimension> Dimension;
}

// CT_PivotDimension ...
public class CT_PivotDimension {
	@XmlAttribute(name = "measure")
	protected Boolean MeasureAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "uniqueName", required = true)
	protected String UniqueNameAttr;
	@XmlAttribute(name = "caption", required = true)
	protected String CaptionAttr;
}

// CT_MeasureGroups ...
public class CT_MeasureGroups {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "measureGroup")
	protected List<CT_MeasureGroup> MeasureGroup;
}

// CT_MeasureDimensionMaps ...
public class CT_MeasureDimensionMaps {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "map")
	protected List<CT_MeasureDimensionMap> Map;
}

// CT_MeasureGroup ...
public class CT_MeasureGroup {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "caption", required = true)
	protected String CaptionAttr;
}

// CT_MeasureDimensionMap ...
public class CT_MeasureDimensionMap {
	@XmlAttribute(name = "measureGroup")
	protected Integer MeasureGroupAttr;
	@XmlAttribute(name = "dimension")
	protected Integer DimensionAttr;
}

// CT_PivotTableStyle ...
public class CT_PivotTableStyle {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "showRowHeaders")
	protected Boolean ShowRowHeadersAttr;
	@XmlAttribute(name = "showColHeaders")
	protected Boolean ShowColHeadersAttr;
	@XmlAttribute(name = "showRowStripes")
	protected Boolean ShowRowStripesAttr;
	@XmlAttribute(name = "showColStripes")
	protected Boolean ShowColStripesAttr;
	@XmlAttribute(name = "showLastColumn")
	protected Boolean ShowLastColumnAttr;
}

// CT_PivotFilters ...
public class CT_PivotFilters {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "filter")
	protected List<CT_PivotFilter> Filter;
}

// CT_PivotFilter ...
public class CT_PivotFilter {
	@XmlAttribute(name = "fld", required = true)
	protected Integer FldAttr;
	@XmlAttribute(name = "mpFld")
	protected Integer MpFldAttr;
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "evalOrder")
	protected Integer EvalOrderAttr;
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "iMeasureHier")
	protected Integer IMeasureHierAttr;
	@XmlAttribute(name = "iMeasureFld")
	protected Integer IMeasureFldAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "description")
	protected String DescriptionAttr;
	@XmlAttribute(name = "stringValue1")
	protected String StringValue1Attr;
	@XmlAttribute(name = "stringValue2")
	protected String StringValue2Attr;
	@XmlElement(required = true, name = "autoFilter")
	protected CT_AutoFilter AutoFilter;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_ShowDataAs ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ShowDataAs")
public class ST_ShowDataAs {
	protected String ST_ShowDataAs;
}

// ST_ItemType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ItemType")
public class ST_ItemType {
	protected String ST_ItemType;
}

// ST_FormatAction ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FormatAction")
public class ST_FormatAction {
	protected String ST_FormatAction;
}

// ST_FieldSortType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FieldSortType")
public class ST_FieldSortType {
	protected String ST_FieldSortType;
}

// ST_PivotFilterType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PivotFilterType")
public class ST_PivotFilterType {
	protected String ST_PivotFilterType;
}

// CT_PivotArea ...
public class CT_PivotArea {
	@XmlAttribute(name = "field")
	protected Integer FieldAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "dataOnly")
	protected Boolean DataOnlyAttr;
	@XmlAttribute(name = "labelOnly")
	protected Boolean LabelOnlyAttr;
	@XmlAttribute(name = "grandRow")
	protected Boolean GrandRowAttr;
	@XmlAttribute(name = "grandCol")
	protected Boolean GrandColAttr;
	@XmlAttribute(name = "cacheIndex")
	protected Boolean CacheIndexAttr;
	@XmlAttribute(name = "outline")
	protected Boolean OutlineAttr;
	@XmlAttribute(name = "offset")
	protected String OffsetAttr;
	@XmlAttribute(name = "collapsedLevelsAreSubtotals")
	protected Boolean CollapsedLevelsAreSubtotalsAttr;
	@XmlAttribute(name = "axis")
	protected String AxisAttr;
	@XmlAttribute(name = "fieldPosition")
	protected Integer FieldPositionAttr;
	@XmlElement(name = "references")
	protected CT_PivotAreaReferences References;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_PivotAreaType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PivotAreaType")
public class ST_PivotAreaType {
	protected String ST_PivotAreaType;
}

// CT_PivotAreaReferences ...
public class CT_PivotAreaReferences {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "reference")
	protected List<CT_PivotAreaReference> Reference;
}

// CT_PivotAreaReference ...
public class CT_PivotAreaReference {
	@XmlAttribute(name = "field")
	protected Integer FieldAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "selected")
	protected Boolean SelectedAttr;
	@XmlAttribute(name = "byPosition")
	protected Boolean ByPositionAttr;
	@XmlAttribute(name = "relative")
	protected Boolean RelativeAttr;
	@XmlAttribute(name = "defaultSubtotal")
	protected Boolean DefaultSubtotalAttr;
	@XmlAttribute(name = "sumSubtotal")
	protected Boolean SumSubtotalAttr;
	@XmlAttribute(name = "countASubtotal")
	protected Boolean CountASubtotalAttr;
	@XmlAttribute(name = "avgSubtotal")
	protected Boolean AvgSubtotalAttr;
	@XmlAttribute(name = "maxSubtotal")
	protected Boolean MaxSubtotalAttr;
	@XmlAttribute(name = "minSubtotal")
	protected Boolean MinSubtotalAttr;
	@XmlAttribute(name = "productSubtotal")
	protected Boolean ProductSubtotalAttr;
	@XmlAttribute(name = "countSubtotal")
	protected Boolean CountSubtotalAttr;
	@XmlAttribute(name = "stdDevSubtotal")
	protected Boolean StdDevSubtotalAttr;
	@XmlAttribute(name = "stdDevPSubtotal")
	protected Boolean StdDevPSubtotalAttr;
	@XmlAttribute(name = "varSubtotal")
	protected Boolean VarSubtotalAttr;
	@XmlAttribute(name = "varPSubtotal")
	protected Boolean VarPSubtotalAttr;
	@XmlElement(name = "x")
	protected List<CT_Index> X;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Index ...
public class CT_Index {
	@XmlAttribute(name = "v", required = true)
	protected Integer VAttr;
}

// ST_Axis ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Axis")
public class ST_Axis {
	protected String ST_Axis;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "queryTable")
public class QueryTable {
	protected CT_QueryTable QueryTable;
}

// CT_QueryTable ...
public class CT_QueryTable {
	@XmlElement(required = true)
	protected AG_AutoFormat AG_AutoFormat;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "headers")
	protected Boolean HeadersAttr;
	@XmlAttribute(name = "rowNumbers")
	protected Boolean RowNumbersAttr;
	@XmlAttribute(name = "disableRefresh")
	protected Boolean DisableRefreshAttr;
	@XmlAttribute(name = "backgroundRefresh")
	protected Boolean BackgroundRefreshAttr;
	@XmlAttribute(name = "firstBackgroundRefresh")
	protected Boolean FirstBackgroundRefreshAttr;
	@XmlAttribute(name = "refreshOnLoad")
	protected Boolean RefreshOnLoadAttr;
	@XmlAttribute(name = "growShrinkType")
	protected String GrowShrinkTypeAttr;
	@XmlAttribute(name = "fillFormulas")
	protected Boolean FillFormulasAttr;
	@XmlAttribute(name = "removeDataOnSave")
	protected Boolean RemoveDataOnSaveAttr;
	@XmlAttribute(name = "disableEdit")
	protected Boolean DisableEditAttr;
	@XmlAttribute(name = "preserveFormatting")
	protected Boolean PreserveFormattingAttr;
	@XmlAttribute(name = "adjustColumnWidth")
	protected Boolean AdjustColumnWidthAttr;
	@XmlAttribute(name = "intermediate")
	protected Boolean IntermediateAttr;
	@XmlAttribute(name = "connectionId", required = true)
	protected Integer ConnectionIdAttr;
	@XmlElement(name = "queryTableRefresh")
	protected CT_QueryTableRefresh QueryTableRefresh;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_QueryTableRefresh ...
public class CT_QueryTableRefresh {
	@XmlAttribute(name = "preserveSortFilterLayout")
	protected Boolean PreserveSortFilterLayoutAttr;
	@XmlAttribute(name = "fieldIdWrapped")
	protected Boolean FieldIdWrappedAttr;
	@XmlAttribute(name = "headersInLastRefresh")
	protected Boolean HeadersInLastRefreshAttr;
	@XmlAttribute(name = "minimumVersion")
	protected Byte MinimumVersionAttr;
	@XmlAttribute(name = "nextId")
	protected Integer NextIdAttr;
	@XmlAttribute(name = "unboundColumnsLeft")
	protected Integer UnboundColumnsLeftAttr;
	@XmlAttribute(name = "unboundColumnsRight")
	protected Integer UnboundColumnsRightAttr;
	@XmlElement(required = true, name = "queryTableFields")
	protected CT_QueryTableFields QueryTableFields;
	@XmlElement(name = "queryTableDeletedFields")
	protected CT_QueryTableDeletedFields QueryTableDeletedFields;
	@XmlElement(name = "sortState")
	protected CT_SortState SortState;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_QueryTableDeletedFields ...
public class CT_QueryTableDeletedFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "deletedField")
	protected List<CT_DeletedField> DeletedField;
}

// CT_DeletedField ...
public class CT_DeletedField {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
}

// CT_QueryTableFields ...
public class CT_QueryTableFields {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "queryTableField")
	protected List<CT_QueryTableField> QueryTableField;
}

// CT_QueryTableField ...
public class CT_QueryTableField {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "dataBound")
	protected Boolean DataBoundAttr;
	@XmlAttribute(name = "rowNumbers")
	protected Boolean RowNumbersAttr;
	@XmlAttribute(name = "fillFormulas")
	protected Boolean FillFormulasAttr;
	@XmlAttribute(name = "clipped")
	protected Boolean ClippedAttr;
	@XmlAttribute(name = "tableColumnId")
	protected Integer TableColumnIdAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_GrowShrinkType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GrowShrinkType")
public class ST_GrowShrinkType {
	protected String ST_GrowShrinkType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "sst")
public class Sst {
	protected CT_Sst Sst;
}

// CT_Sst ...
public class CT_Sst {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "uniqueCount")
	protected Integer UniqueCountAttr;
	@XmlElement(name = "si")
	protected List<CT_Rst> Si;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_PhoneticType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PhoneticType")
public class ST_PhoneticType {
	protected String ST_PhoneticType;
}

// ST_PhoneticAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PhoneticAlignment")
public class ST_PhoneticAlignment {
	protected String ST_PhoneticAlignment;
}

// CT_PhoneticRun ...
public class CT_PhoneticRun {
	@XmlAttribute(name = "sb", required = true)
	protected Integer SbAttr;
	@XmlAttribute(name = "eb", required = true)
	protected Integer EbAttr;
	@XmlElement(required = true, name = "t")
	protected String T;
}

// CT_RElt ...
public class CT_RElt {
	@XmlElement(name = "rPr")
	protected CT_RPrElt RPr;
	@XmlElement(required = true, name = "t")
	protected String T;
}

// CT_RPrElt ...
public class CT_RPrElt {
	@XmlElement(name = "rFont")
	protected List<CT_FontName> RFont;
	@XmlElement(name = "charset")
	protected List<CT_IntProperty> Charset;
	@XmlElement(name = "family")
	protected List<CT_IntProperty> Family;
	@XmlElement(name = "b")
	protected List<CT_BooleanProperty> B;
	@XmlElement(name = "i")
	protected List<CT_BooleanProperty> I;
	@XmlElement(name = "strike")
	protected List<CT_BooleanProperty> Strike;
	@XmlElement(name = "outline")
	protected List<CT_BooleanProperty> Outline;
	@XmlElement(name = "shadow")
	protected List<CT_BooleanProperty> Shadow;
	@XmlElement(name = "condense")
	protected List<CT_BooleanProperty> Condense;
	@XmlElement(name = "extend")
	protected List<CT_BooleanProperty> Extend;
	@XmlElement(name = "color")
	protected List<CT_Color> Color;
	@XmlElement(name = "sz")
	protected List<CT_FontSize> Sz;
	@XmlElement(name = "u")
	protected List<CT_UnderlineProperty> U;
	@XmlElement(name = "vertAlign")
	protected List<CT_VerticalAlignFontProperty> VertAlign;
	@XmlElement(name = "scheme")
	protected List<CT_FontScheme> Scheme;
}

// CT_Rst ...
public class CT_Rst {
	@XmlElement(name = "t")
	protected String T;
	@XmlElement(name = "r")
	protected List<CT_RElt> R;
	@XmlElement(name = "rPh")
	protected List<CT_PhoneticRun> RPh;
	@XmlElement(name = "phoneticPr")
	protected CT_PhoneticPr PhoneticPr;
}

// CT_PhoneticPr ...
public class CT_PhoneticPr {
	@XmlAttribute(name = "fontId", required = true)
	protected Integer FontIdAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "alignment")
	protected String AlignmentAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "headers")
public class Headers {
	protected CT_RevisionHeaders Headers;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "revisions")
public class Revisions {
	protected CT_Revisions Revisions;
}

// CT_RevisionHeaders ...
public class CT_RevisionHeaders {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "lastGuid")
	protected String LastGuidAttr;
	@XmlAttribute(name = "shared")
	protected Boolean SharedAttr;
	@XmlAttribute(name = "diskRevisions")
	protected Boolean DiskRevisionsAttr;
	@XmlAttribute(name = "history")
	protected Boolean HistoryAttr;
	@XmlAttribute(name = "trackRevisions")
	protected Boolean TrackRevisionsAttr;
	@XmlAttribute(name = "exclusive")
	protected Boolean ExclusiveAttr;
	@XmlAttribute(name = "revisionId")
	protected Integer RevisionIdAttr;
	@XmlAttribute(name = "version")
	protected Integer VersionAttr;
	@XmlAttribute(name = "keepChangeHistory")
	protected Boolean KeepChangeHistoryAttr;
	@XmlAttribute(name = "protected")
	protected Boolean ProtectedAttr;
	@XmlAttribute(name = "preserveHistory")
	protected Integer PreserveHistoryAttr;
	@XmlElement(required = true, name = "header")
	protected List<CT_RevisionHeader> Header;
}

// CT_Revisions ...
public class CT_Revisions {
	@XmlElement(name = "rrc")
	protected List<CT_RevisionRowColumn> Rrc;
	@XmlElement(name = "rm")
	protected List<CT_RevisionMove> Rm;
	@XmlElement(name = "rcv")
	protected List<CT_RevisionCustomView> Rcv;
	@XmlElement(name = "rsnm")
	protected List<CT_RevisionSheetRename> Rsnm;
	@XmlElement(name = "ris")
	protected List<CT_RevisionInsertSheet> Ris;
	@XmlElement(name = "rcc")
	protected List<CT_RevisionCellChange> Rcc;
	@XmlElement(name = "rfmt")
	protected List<CT_RevisionFormatting> Rfmt;
	@XmlElement(name = "raf")
	protected List<CT_RevisionAutoFormatting> Raf;
	@XmlElement(name = "rdn")
	protected List<CT_RevisionDefinedName> Rdn;
	@XmlElement(name = "rcmt")
	protected List<CT_RevisionComment> Rcmt;
	@XmlElement(name = "rqt")
	protected List<CT_RevisionQueryTableField> Rqt;
	@XmlElement(name = "rcft")
	protected List<CT_RevisionConflict> Rcft;
}

// AG_RevData ...
public class AG_RevData {
	@XmlAttribute(name = "rId", required = true)
	protected IntegerAttr RId;
	@XmlAttribute(name = "ua")
	protected BooleanAttr Ua;
	@XmlAttribute(name = "ra")
	protected BooleanAttr Ra;
}

// CT_RevisionHeader ...
public class CT_RevisionHeader {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "dateTime", required = true)
	protected String DateTimeAttr;
	@XmlAttribute(name = "maxSheetId", required = true)
	protected Integer MaxSheetIdAttr;
	@XmlAttribute(name = "userName", required = true)
	protected String UserNameAttr;
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlAttribute(name = "minRId")
	protected Integer MinRIdAttr;
	@XmlAttribute(name = "maxRId")
	protected Integer MaxRIdAttr;
	@XmlElement(required = true, name = "sheetIdMap")
	protected CT_SheetIdMap SheetIdMap;
	@XmlElement(name = "reviewedList")
	protected CT_ReviewedRevisions ReviewedList;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SheetIdMap ...
public class CT_SheetIdMap {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "sheetId")
	protected List<CT_SheetId> SheetId;
}

// CT_SheetId ...
public class CT_SheetId {
	@XmlAttribute(name = "val", required = true)
	protected Integer ValAttr;
}

// CT_ReviewedRevisions ...
public class CT_ReviewedRevisions {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "reviewed")
	protected List<CT_Reviewed> Reviewed;
}

// CT_Reviewed ...
public class CT_Reviewed {
	@XmlAttribute(name = "rId", required = true)
	protected Integer RIdAttr;
}

// CT_UndoInfo ...
public class CT_UndoInfo {
	@XmlAttribute(name = "index", required = true)
	protected Integer IndexAttr;
	@XmlAttribute(name = "exp", required = true)
	protected String ExpAttr;
	@XmlAttribute(name = "ref3D")
	protected Boolean Ref3DAttr;
	@XmlAttribute(name = "array")
	protected Boolean ArrayAttr;
	@XmlAttribute(name = "v")
	protected Boolean VAttr;
	@XmlAttribute(name = "nf")
	protected Boolean NfAttr;
	@XmlAttribute(name = "cs")
	protected Boolean CsAttr;
	@XmlAttribute(name = "dr", required = true)
	protected String DrAttr;
	@XmlAttribute(name = "dn")
	protected String DnAttr;
	@XmlAttribute(name = "r")
	protected String RAttr;
	@XmlAttribute(name = "sId")
	protected Integer SIdAttr;
}

// CT_RevisionRowColumn ...
public class CT_RevisionRowColumn {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sId", required = true)
	protected Integer SIdAttr;
	@XmlAttribute(name = "eol")
	protected Boolean EolAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "action", required = true)
	protected String ActionAttr;
	@XmlAttribute(name = "edge")
	protected Boolean EdgeAttr;
	@XmlElement(name = "undo")
	protected List<CT_UndoInfo> Undo;
	@XmlElement(name = "rcc")
	protected List<CT_RevisionCellChange> Rcc;
	@XmlElement(name = "rfmt")
	protected List<CT_RevisionFormatting> Rfmt;
}

// CT_RevisionMove ...
public class CT_RevisionMove {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "source", required = true)
	protected String SourceAttr;
	@XmlAttribute(name = "destination", required = true)
	protected String DestinationAttr;
	@XmlAttribute(name = "sourceSheetId")
	protected Integer SourceSheetIdAttr;
	@XmlElement(name = "undo")
	protected List<CT_UndoInfo> Undo;
	@XmlElement(name = "rcc")
	protected List<CT_RevisionCellChange> Rcc;
	@XmlElement(name = "rfmt")
	protected List<CT_RevisionFormatting> Rfmt;
}

// CT_RevisionCustomView ...
public class CT_RevisionCustomView {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "action", required = true)
	protected String ActionAttr;
}

// CT_RevisionSheetRename ...
public class CT_RevisionSheetRename {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "oldName", required = true)
	protected String OldNameAttr;
	@XmlAttribute(name = "newName", required = true)
	protected String NewNameAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RevisionInsertSheet ...
public class CT_RevisionInsertSheet {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "sheetPosition", required = true)
	protected Integer SheetPositionAttr;
}

// CT_RevisionCellChange ...
public class CT_RevisionCellChange {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sId", required = true)
	protected Integer SIdAttr;
	@XmlAttribute(name = "odxf")
	protected Boolean OdxfAttr;
	@XmlAttribute(name = "xfDxf")
	protected Boolean XfDxfAttr;
	@XmlAttribute(name = "s")
	protected Boolean SAttr;
	@XmlAttribute(name = "dxf")
	protected Boolean DxfAttr;
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
	@XmlAttribute(name = "quotePrefix")
	protected Boolean QuotePrefixAttr;
	@XmlAttribute(name = "oldQuotePrefix")
	protected Boolean OldQuotePrefixAttr;
	@XmlAttribute(name = "ph")
	protected Boolean PhAttr;
	@XmlAttribute(name = "oldPh")
	protected Boolean OldPhAttr;
	@XmlAttribute(name = "endOfListFormulaUpdate")
	protected Boolean EndOfListFormulaUpdateAttr;
	@XmlElement(name = "oc")
	protected CT_Cell Oc;
	@XmlElement(required = true, name = "nc")
	protected CT_Cell Nc;
	@XmlElement(name = "odxf")
	protected CT_Dxf Odxf;
	@XmlElement(name = "ndxf")
	protected CT_Dxf Ndxf;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RevisionFormatting ...
public class CT_RevisionFormatting {
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "xfDxf")
	protected Boolean XfDxfAttr;
	@XmlAttribute(name = "s")
	protected Boolean SAttr;
	@XmlAttribute(name = "sqref", required = true)
	protected ST_Sqref SqrefAttr;
	@XmlAttribute(name = "start")
	protected Integer StartAttr;
	@XmlAttribute(name = "length")
	protected Integer LengthAttr;
	@XmlElement(name = "dxf")
	protected CT_Dxf Dxf;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RevisionAutoFormatting ...
public class CT_RevisionAutoFormatting {
	@XmlElement(required = true)
	protected AG_AutoFormat AG_AutoFormat;
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
}

// CT_RevisionComment ...
public class CT_RevisionComment {
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "cell", required = true)
	protected String CellAttr;
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "action")
	protected String ActionAttr;
	@XmlAttribute(name = "alwaysShow")
	protected Boolean AlwaysShowAttr;
	@XmlAttribute(name = "old")
	protected Boolean OldAttr;
	@XmlAttribute(name = "hiddenRow")
	protected Boolean HiddenRowAttr;
	@XmlAttribute(name = "hiddenColumn")
	protected Boolean HiddenColumnAttr;
	@XmlAttribute(name = "author", required = true)
	protected String AuthorAttr;
	@XmlAttribute(name = "oldLength")
	protected Integer OldLengthAttr;
	@XmlAttribute(name = "newLength")
	protected Integer NewLengthAttr;
}

// CT_RevisionDefinedName ...
public class CT_RevisionDefinedName {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "localSheetId")
	protected Integer LocalSheetIdAttr;
	@XmlAttribute(name = "customView")
	protected Boolean CustomViewAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "function")
	protected Boolean FunctionAttr;
	@XmlAttribute(name = "oldFunction")
	protected Boolean OldFunctionAttr;
	@XmlAttribute(name = "functionGroupId")
	protected Byte FunctionGroupIdAttr;
	@XmlAttribute(name = "oldFunctionGroupId")
	protected Byte OldFunctionGroupIdAttr;
	@XmlAttribute(name = "shortcutKey")
	protected Byte ShortcutKeyAttr;
	@XmlAttribute(name = "oldShortcutKey")
	protected Byte OldShortcutKeyAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "oldHidden")
	protected Boolean OldHiddenAttr;
	@XmlAttribute(name = "customMenu")
	protected String CustomMenuAttr;
	@XmlAttribute(name = "oldCustomMenu")
	protected String OldCustomMenuAttr;
	@XmlAttribute(name = "description")
	protected String DescriptionAttr;
	@XmlAttribute(name = "oldDescription")
	protected String OldDescriptionAttr;
	@XmlAttribute(name = "help")
	protected String HelpAttr;
	@XmlAttribute(name = "oldHelp")
	protected String OldHelpAttr;
	@XmlAttribute(name = "statusBar")
	protected String StatusBarAttr;
	@XmlAttribute(name = "oldStatusBar")
	protected String OldStatusBarAttr;
	@XmlAttribute(name = "comment")
	protected String CommentAttr;
	@XmlAttribute(name = "oldComment")
	protected String OldCommentAttr;
	@XmlElement(name = "formula")
	protected String Formula;
	@XmlElement(name = "oldFormula")
	protected String OldFormula;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RevisionConflict ...
public class CT_RevisionConflict {
	@XmlElement(required = true)
	protected AG_RevData AG_RevData;
	@XmlAttribute(name = "sheetId")
	protected Integer SheetIdAttr;
}

// CT_RevisionQueryTableField ...
public class CT_RevisionQueryTableField {
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "fieldId", required = true)
	protected Integer FieldIdAttr;
}

// ST_rwColActionType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_rwColActionType")
public class ST_rwColActionType {
	protected String ST_rwColActionType;
}

// ST_RevisionAction ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RevisionAction")
public class ST_RevisionAction {
	protected String ST_RevisionAction;
}

// ST_FormulaExpression ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FormulaExpression")
public class ST_FormulaExpression {
	protected String ST_FormulaExpression;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "users")
public class Users {
	protected CT_Users Users;
}

// CT_Users ...
public class CT_Users {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "userInfo")
	protected List<CT_SharedUser> UserInfo;
}

// CT_SharedUser ...
public class CT_SharedUser {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "dateTime", required = true)
	protected String DateTimeAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "worksheet")
public class Worksheet {
	protected CT_Worksheet Worksheet;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "chartsheet")
public class Chartsheet {
	protected CT_Chartsheet Chartsheet;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "dialogsheet")
public class Dialogsheet {
	protected CT_Dialogsheet Dialogsheet;
}

// CT_Macrosheet ...
public class CT_Macrosheet {
	@XmlElement(name = "sheetPr")
	protected CT_SheetPr SheetPr;
	@XmlElement(name = "dimension")
	protected CT_SheetDimension Dimension;
	@XmlElement(name = "sheetViews")
	protected CT_SheetViews SheetViews;
	@XmlElement(name = "sheetFormatPr")
	protected CT_SheetFormatPr SheetFormatPr;
	@XmlElement(name = "cols")
	protected List<CT_Cols> Cols;
	@XmlElement(required = true, name = "sheetData")
	protected CT_SheetData SheetData;
	@XmlElement(name = "sheetProtection")
	protected CT_SheetProtection SheetProtection;
	@XmlElement(name = "autoFilter")
	protected CT_AutoFilter AutoFilter;
	@XmlElement(name = "sortState")
	protected CT_SortState SortState;
	@XmlElement(name = "dataConsolidate")
	protected CT_DataConsolidate DataConsolidate;
	@XmlElement(name = "customSheetViews")
	protected CT_CustomSheetViews CustomSheetViews;
	@XmlElement(name = "phoneticPr")
	protected CT_PhoneticPr PhoneticPr;
	@XmlElement(name = "conditionalFormatting")
	protected List<CT_ConditionalFormatting> ConditionalFormatting;
	@XmlElement(name = "printOptions")
	protected CT_PrintOptions PrintOptions;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "pageSetup")
	protected CT_PageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(name = "rowBreaks")
	protected CT_PageBreak RowBreaks;
	@XmlElement(name = "colBreaks")
	protected CT_PageBreak ColBreaks;
	@XmlElement(name = "customProperties")
	protected CT_CustomProperties CustomProperties;
	@XmlElement(name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(name = "drawingHF")
	protected CT_DrawingHF DrawingHF;
	@XmlElement(name = "picture")
	protected CT_SheetBackgroundPicture Picture;
	@XmlElement(name = "oleObjects")
	protected CT_OleObjects OleObjects;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Dialogsheet ...
public class CT_Dialogsheet {
	@XmlElement(name = "sheetPr")
	protected CT_SheetPr SheetPr;
	@XmlElement(name = "sheetViews")
	protected CT_SheetViews SheetViews;
	@XmlElement(name = "sheetFormatPr")
	protected CT_SheetFormatPr SheetFormatPr;
	@XmlElement(name = "sheetProtection")
	protected CT_SheetProtection SheetProtection;
	@XmlElement(name = "customSheetViews")
	protected CT_CustomSheetViews CustomSheetViews;
	@XmlElement(name = "printOptions")
	protected CT_PrintOptions PrintOptions;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "pageSetup")
	protected CT_PageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(name = "drawingHF")
	protected CT_DrawingHF DrawingHF;
	@XmlElement(name = "oleObjects")
	protected CT_OleObjects OleObjects;
	@XmlElement(name = "controls")
	protected CT_Controls Controls;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Worksheet ...
public class CT_Worksheet {
	@XmlElement(name = "sheetPr")
	protected CT_SheetPr SheetPr;
	@XmlElement(name = "dimension")
	protected CT_SheetDimension Dimension;
	@XmlElement(name = "sheetViews")
	protected CT_SheetViews SheetViews;
	@XmlElement(name = "sheetFormatPr")
	protected CT_SheetFormatPr SheetFormatPr;
	@XmlElement(name = "cols")
	protected List<CT_Cols> Cols;
	@XmlElement(required = true, name = "sheetData")
	protected CT_SheetData SheetData;
	@XmlElement(name = "sheetCalcPr")
	protected CT_SheetCalcPr SheetCalcPr;
	@XmlElement(name = "sheetProtection")
	protected CT_SheetProtection SheetProtection;
	@XmlElement(name = "protectedRanges")
	protected CT_ProtectedRanges ProtectedRanges;
	@XmlElement(name = "scenarios")
	protected CT_Scenarios Scenarios;
	@XmlElement(name = "autoFilter")
	protected CT_AutoFilter AutoFilter;
	@XmlElement(name = "sortState")
	protected CT_SortState SortState;
	@XmlElement(name = "dataConsolidate")
	protected CT_DataConsolidate DataConsolidate;
	@XmlElement(name = "customSheetViews")
	protected CT_CustomSheetViews CustomSheetViews;
	@XmlElement(name = "mergeCells")
	protected CT_MergeCells MergeCells;
	@XmlElement(name = "phoneticPr")
	protected CT_PhoneticPr PhoneticPr;
	@XmlElement(name = "conditionalFormatting")
	protected List<CT_ConditionalFormatting> ConditionalFormatting;
	@XmlElement(name = "dataValidations")
	protected CT_DataValidations DataValidations;
	@XmlElement(name = "hyperlinks")
	protected CT_Hyperlinks Hyperlinks;
	@XmlElement(name = "printOptions")
	protected CT_PrintOptions PrintOptions;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "pageSetup")
	protected CT_PageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(name = "rowBreaks")
	protected CT_PageBreak RowBreaks;
	@XmlElement(name = "colBreaks")
	protected CT_PageBreak ColBreaks;
	@XmlElement(name = "customProperties")
	protected CT_CustomProperties CustomProperties;
	@XmlElement(name = "cellWatches")
	protected CT_CellWatches CellWatches;
	@XmlElement(name = "ignoredErrors")
	protected CT_IgnoredErrors IgnoredErrors;
	@XmlElement(name = "smartTags")
	protected CT_SmartTags SmartTags;
	@XmlElement(name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(name = "drawingHF")
	protected CT_DrawingHF DrawingHF;
	@XmlElement(name = "picture")
	protected CT_SheetBackgroundPicture Picture;
	@XmlElement(name = "oleObjects")
	protected CT_OleObjects OleObjects;
	@XmlElement(name = "controls")
	protected CT_Controls Controls;
	@XmlElement(name = "webPublishItems")
	protected CT_WebPublishItems WebPublishItems;
	@XmlElement(name = "tableParts")
	protected CT_TableParts TableParts;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SheetData ...
public class CT_SheetData {
	@XmlElement(name = "row")
	protected List<CT_Row> Row;
}

// CT_SheetCalcPr ...
public class CT_SheetCalcPr {
	@XmlAttribute(name = "fullCalcOnLoad")
	protected Boolean FullCalcOnLoadAttr;
}

// CT_SheetFormatPr ...
public class CT_SheetFormatPr {
	@XmlAttribute(name = "baseColWidth")
	protected Integer BaseColWidthAttr;
	@XmlAttribute(name = "defaultColWidth")
	protected Float DefaultColWidthAttr;
	@XmlAttribute(name = "defaultRowHeight", required = true)
	protected Float DefaultRowHeightAttr;
	@XmlAttribute(name = "customHeight")
	protected Boolean CustomHeightAttr;
	@XmlAttribute(name = "zeroHeight")
	protected Boolean ZeroHeightAttr;
	@XmlAttribute(name = "thickTop")
	protected Boolean ThickTopAttr;
	@XmlAttribute(name = "thickBottom")
	protected Boolean ThickBottomAttr;
	@XmlAttribute(name = "outlineLevelRow")
	protected Byte OutlineLevelRowAttr;
	@XmlAttribute(name = "outlineLevelCol")
	protected Byte OutlineLevelColAttr;
}

// CT_Cols ...
public class CT_Cols {
	@XmlElement(required = true, name = "col")
	protected List<CT_Col> Col;
}

// CT_Col ...
public class CT_Col {
	@XmlAttribute(name = "min", required = true)
	protected Integer MinAttr;
	@XmlAttribute(name = "max", required = true)
	protected Integer MaxAttr;
	@XmlAttribute(name = "width")
	protected Float WidthAttr;
	@XmlAttribute(name = "style")
	protected Integer StyleAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "bestFit")
	protected Boolean BestFitAttr;
	@XmlAttribute(name = "customWidth")
	protected Boolean CustomWidthAttr;
	@XmlAttribute(name = "phonetic")
	protected Boolean PhoneticAttr;
	@XmlAttribute(name = "outlineLevel")
	protected Byte OutlineLevelAttr;
	@XmlAttribute(name = "collapsed")
	protected Boolean CollapsedAttr;
}

// ST_CellSpan ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellSpan")
public class ST_CellSpan {
	protected String ST_CellSpan;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellSpans")
public class ST_CellSpans {
	protected List<String> ST_CellSpans;
}

// CT_Row ...
public class CT_Row {
	@XmlAttribute(name = "r")
	protected Integer RAttr;
	@XmlAttribute(name = "spans")
	protected ST_CellSpans SpansAttr;
	@XmlAttribute(name = "s")
	protected Integer SAttr;
	@XmlAttribute(name = "customFormat")
	protected Boolean CustomFormatAttr;
	@XmlAttribute(name = "ht")
	protected Float HtAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "customHeight")
	protected Boolean CustomHeightAttr;
	@XmlAttribute(name = "outlineLevel")
	protected Byte OutlineLevelAttr;
	@XmlAttribute(name = "collapsed")
	protected Boolean CollapsedAttr;
	@XmlAttribute(name = "thickTop")
	protected Boolean ThickTopAttr;
	@XmlAttribute(name = "thickBot")
	protected Boolean ThickBotAttr;
	@XmlAttribute(name = "ph")
	protected Boolean PhAttr;
	@XmlElement(name = "c")
	protected List<CT_Cell> C;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Cell ...
public class CT_Cell {
	@XmlAttribute(name = "r")
	protected String RAttr;
	@XmlAttribute(name = "s")
	protected Integer SAttr;
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlAttribute(name = "cm")
	protected Integer CmAttr;
	@XmlAttribute(name = "vm")
	protected Integer VmAttr;
	@XmlAttribute(name = "ph")
	protected Boolean PhAttr;
	@XmlElement(name = "f")
	protected CT_CellFormula F;
	@XmlElement(name = "v")
	protected String V;
	@XmlElement(name = "is")
	protected CT_Rst Is;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_CellType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellType")
public class ST_CellType {
	protected String ST_CellType;
}

// ST_CellFormulaType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellFormulaType")
public class ST_CellFormulaType {
	protected String ST_CellFormulaType;
}

// CT_SheetPr ...
public class CT_SheetPr {
	@XmlAttribute(name = "syncHorizontal")
	protected Boolean SyncHorizontalAttr;
	@XmlAttribute(name = "syncVertical")
	protected Boolean SyncVerticalAttr;
	@XmlAttribute(name = "syncRef")
	protected String SyncRefAttr;
	@XmlAttribute(name = "transitionEvaluation")
	protected Boolean TransitionEvaluationAttr;
	@XmlAttribute(name = "transitionEntry")
	protected Boolean TransitionEntryAttr;
	@XmlAttribute(name = "published")
	protected Boolean PublishedAttr;
	@XmlAttribute(name = "codeName")
	protected String CodeNameAttr;
	@XmlAttribute(name = "filterMode")
	protected Boolean FilterModeAttr;
	@XmlAttribute(name = "enableFormatConditionsCalculation")
	protected Boolean EnableFormatConditionsCalculationAttr;
	@XmlElement(name = "tabColor")
	protected CT_Color TabColor;
	@XmlElement(name = "outlinePr")
	protected CT_OutlinePr OutlinePr;
	@XmlElement(name = "pageSetUpPr")
	protected CT_PageSetUpPr PageSetUpPr;
}

// CT_SheetDimension ...
public class CT_SheetDimension {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
}

// CT_SheetViews ...
public class CT_SheetViews {
	@XmlElement(required = true, name = "sheetView")
	protected List<CT_SheetView> SheetView;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SheetView ...
public class CT_SheetView {
	@XmlAttribute(name = "windowProtection")
	protected Boolean WindowProtectionAttr;
	@XmlAttribute(name = "showFormulas")
	protected Boolean ShowFormulasAttr;
	@XmlAttribute(name = "showGridLines")
	protected Boolean ShowGridLinesAttr;
	@XmlAttribute(name = "showRowColHeaders")
	protected Boolean ShowRowColHeadersAttr;
	@XmlAttribute(name = "showZeros")
	protected Boolean ShowZerosAttr;
	@XmlAttribute(name = "rightToLeft")
	protected Boolean RightToLeftAttr;
	@XmlAttribute(name = "tabSelected")
	protected Boolean TabSelectedAttr;
	@XmlAttribute(name = "showRuler")
	protected Boolean ShowRulerAttr;
	@XmlAttribute(name = "showOutlineSymbols")
	protected Boolean ShowOutlineSymbolsAttr;
	@XmlAttribute(name = "defaultGridColor")
	protected Boolean DefaultGridColorAttr;
	@XmlAttribute(name = "showWhiteSpace")
	protected Boolean ShowWhiteSpaceAttr;
	@XmlAttribute(name = "view")
	protected String ViewAttr;
	@XmlAttribute(name = "topLeftCell")
	protected String TopLeftCellAttr;
	@XmlAttribute(name = "colorId")
	protected Integer ColorIdAttr;
	@XmlAttribute(name = "zoomScale")
	protected Integer ZoomScaleAttr;
	@XmlAttribute(name = "zoomScaleNormal")
	protected Integer ZoomScaleNormalAttr;
	@XmlAttribute(name = "zoomScaleSheetLayoutView")
	protected Integer ZoomScaleSheetLayoutViewAttr;
	@XmlAttribute(name = "zoomScalePageLayoutView")
	protected Integer ZoomScalePageLayoutViewAttr;
	@XmlAttribute(name = "workbookViewId", required = true)
	protected Integer WorkbookViewIdAttr;
	@XmlElement(name = "pane")
	protected CT_Pane Pane;
	@XmlElement(name = "selection")
	protected List<CT_Selection> Selection;
	@XmlElement(name = "pivotSelection")
	protected List<CT_PivotSelection> PivotSelection;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Pane ...
public class CT_Pane {
	@XmlAttribute(name = "xSplit")
	protected Float XSplitAttr;
	@XmlAttribute(name = "ySplit")
	protected Float YSplitAttr;
	@XmlAttribute(name = "topLeftCell")
	protected String TopLeftCellAttr;
	@XmlAttribute(name = "activePane")
	protected String ActivePaneAttr;
	@XmlAttribute(name = "state")
	protected String StateAttr;
}

// CT_PivotSelection ...
public class CT_PivotSelection {
	@XmlAttribute(name = "pane")
	protected String PaneAttr;
	@XmlAttribute(name = "showHeader")
	protected Boolean ShowHeaderAttr;
	@XmlAttribute(name = "label")
	protected Boolean LabelAttr;
	@XmlAttribute(name = "data")
	protected Boolean DataAttr;
	@XmlAttribute(name = "extendable")
	protected Boolean ExtendableAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "axis")
	protected String AxisAttr;
	@XmlAttribute(name = "dimension")
	protected Integer DimensionAttr;
	@XmlAttribute(name = "start")
	protected Integer StartAttr;
	@XmlAttribute(name = "min")
	protected Integer MinAttr;
	@XmlAttribute(name = "max")
	protected Integer MaxAttr;
	@XmlAttribute(name = "activeRow")
	protected Integer ActiveRowAttr;
	@XmlAttribute(name = "activeCol")
	protected Integer ActiveColAttr;
	@XmlAttribute(name = "previousRow")
	protected Integer PreviousRowAttr;
	@XmlAttribute(name = "previousCol")
	protected Integer PreviousColAttr;
	@XmlAttribute(name = "click")
	protected Integer ClickAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlElement(required = true, name = "pivotArea")
	protected CT_PivotArea PivotArea;
}

// CT_Selection ...
public class CT_Selection {
	@XmlAttribute(name = "pane")
	protected String PaneAttr;
	@XmlAttribute(name = "activeCell")
	protected String ActiveCellAttr;
	@XmlAttribute(name = "activeCellId")
	protected Integer ActiveCellIdAttr;
	@XmlAttribute(name = "sqref")
	protected ST_Sqref SqrefAttr;
}

// ST_Pane ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Pane")
public class ST_Pane {
	protected String ST_Pane;
}

// CT_PageBreak ...
public class CT_PageBreak {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "manualBreakCount")
	protected Integer ManualBreakCountAttr;
	@XmlElement(name = "brk")
	protected List<CT_Break> Brk;
}

// CT_Break ...
public class CT_Break {
	@XmlAttribute(name = "id")
	protected Integer IdAttr;
	@XmlAttribute(name = "min")
	protected Integer MinAttr;
	@XmlAttribute(name = "max")
	protected Integer MaxAttr;
	@XmlAttribute(name = "man")
	protected Boolean ManAttr;
	@XmlAttribute(name = "pt")
	protected Boolean PtAttr;
}

// ST_SheetViewType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SheetViewType")
public class ST_SheetViewType {
	protected String ST_SheetViewType;
}

// CT_OutlinePr ...
public class CT_OutlinePr {
	@XmlAttribute(name = "applyStyles")
	protected Boolean ApplyStylesAttr;
	@XmlAttribute(name = "summaryBelow")
	protected Boolean SummaryBelowAttr;
	@XmlAttribute(name = "summaryRight")
	protected Boolean SummaryRightAttr;
	@XmlAttribute(name = "showOutlineSymbols")
	protected Boolean ShowOutlineSymbolsAttr;
}

// CT_PageSetUpPr ...
public class CT_PageSetUpPr {
	@XmlAttribute(name = "autoPageBreaks")
	protected Boolean AutoPageBreaksAttr;
	@XmlAttribute(name = "fitToPage")
	protected Boolean FitToPageAttr;
}

// CT_DataConsolidate ...
public class CT_DataConsolidate {
	@XmlAttribute(name = "function")
	protected String FunctionAttr;
	@XmlAttribute(name = "startLabels")
	protected Boolean StartLabelsAttr;
	@XmlAttribute(name = "topLabels")
	protected Boolean TopLabelsAttr;
	@XmlAttribute(name = "link")
	protected Boolean LinkAttr;
	@XmlElement(name = "dataRefs")
	protected CT_DataRefs DataRefs;
}

// ST_DataConsolidateFunction ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DataConsolidateFunction")
public class ST_DataConsolidateFunction {
	protected String ST_DataConsolidateFunction;
}

// CT_DataRefs ...
public class CT_DataRefs {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "dataRef")
	protected List<CT_DataRef> DataRef;
}

// CT_DataRef ...
public class CT_DataRef {
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "sheet")
	protected String SheetAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
}

// CT_MergeCells ...
public class CT_MergeCells {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "mergeCell")
	protected List<CT_MergeCell> MergeCell;
}

// CT_MergeCell ...
public class CT_MergeCell {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
}

// CT_SmartTags ...
public class CT_SmartTags {
	@XmlElement(required = true, name = "cellSmartTags")
	protected List<CT_CellSmartTags> CellSmartTags;
}

// CT_CellSmartTags ...
public class CT_CellSmartTags {
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
	@XmlElement(required = true, name = "cellSmartTag")
	protected List<CT_CellSmartTag> CellSmartTag;
}

// CT_CellSmartTag ...
public class CT_CellSmartTag {
	@XmlAttribute(name = "type", required = true)
	protected Integer TypeAttr;
	@XmlAttribute(name = "deleted")
	protected Boolean DeletedAttr;
	@XmlAttribute(name = "xmlBased")
	protected Boolean XmlBasedAttr;
	@XmlElement(name = "cellSmartTagPr")
	protected List<CT_CellSmartTagPr> CellSmartTagPr;
}

// CT_CellSmartTagPr ...
public class CT_CellSmartTagPr {
	@XmlAttribute(name = "key", required = true)
	protected String KeyAttr;
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// CT_Drawing ...
public class CT_Drawing {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_DrawingHF ...
public class CT_DrawingHF {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlAttribute(name = "lho")
	protected Integer LhoAttr;
	@XmlAttribute(name = "lhe")
	protected Integer LheAttr;
	@XmlAttribute(name = "lhf")
	protected Integer LhfAttr;
	@XmlAttribute(name = "cho")
	protected Integer ChoAttr;
	@XmlAttribute(name = "che")
	protected Integer CheAttr;
	@XmlAttribute(name = "chf")
	protected Integer ChfAttr;
	@XmlAttribute(name = "rho")
	protected Integer RhoAttr;
	@XmlAttribute(name = "rhe")
	protected Integer RheAttr;
	@XmlAttribute(name = "rhf")
	protected Integer RhfAttr;
	@XmlAttribute(name = "lfo")
	protected Integer LfoAttr;
	@XmlAttribute(name = "lfe")
	protected Integer LfeAttr;
	@XmlAttribute(name = "lff")
	protected Integer LffAttr;
	@XmlAttribute(name = "cfo")
	protected Integer CfoAttr;
	@XmlAttribute(name = "cfe")
	protected Integer CfeAttr;
	@XmlAttribute(name = "cff")
	protected Integer CffAttr;
	@XmlAttribute(name = "rfo")
	protected Integer RfoAttr;
	@XmlAttribute(name = "rfe")
	protected Integer RfeAttr;
	@XmlAttribute(name = "rff")
	protected Integer RffAttr;
}

// CT_CustomSheetViews ...
public class CT_CustomSheetViews {
	@XmlElement(required = true, name = "customSheetView")
	protected List<CT_CustomSheetView> CustomSheetView;
}

// CT_CustomSheetView ...
public class CT_CustomSheetView {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "scale")
	protected Integer ScaleAttr;
	@XmlAttribute(name = "colorId")
	protected Integer ColorIdAttr;
	@XmlAttribute(name = "showPageBreaks")
	protected Boolean ShowPageBreaksAttr;
	@XmlAttribute(name = "showFormulas")
	protected Boolean ShowFormulasAttr;
	@XmlAttribute(name = "showGridLines")
	protected Boolean ShowGridLinesAttr;
	@XmlAttribute(name = "showRowCol")
	protected Boolean ShowRowColAttr;
	@XmlAttribute(name = "outlineSymbols")
	protected Boolean OutlineSymbolsAttr;
	@XmlAttribute(name = "zeroValues")
	protected Boolean ZeroValuesAttr;
	@XmlAttribute(name = "fitToPage")
	protected Boolean FitToPageAttr;
	@XmlAttribute(name = "printArea")
	protected Boolean PrintAreaAttr;
	@XmlAttribute(name = "filter")
	protected Boolean FilterAttr;
	@XmlAttribute(name = "showAutoFilter")
	protected Boolean ShowAutoFilterAttr;
	@XmlAttribute(name = "hiddenRows")
	protected Boolean HiddenRowsAttr;
	@XmlAttribute(name = "hiddenColumns")
	protected Boolean HiddenColumnsAttr;
	@XmlAttribute(name = "state")
	protected String StateAttr;
	@XmlAttribute(name = "filterUnique")
	protected Boolean FilterUniqueAttr;
	@XmlAttribute(name = "view")
	protected String ViewAttr;
	@XmlAttribute(name = "showRuler")
	protected Boolean ShowRulerAttr;
	@XmlAttribute(name = "topLeftCell")
	protected String TopLeftCellAttr;
	@XmlElement(name = "pane")
	protected CT_Pane Pane;
	@XmlElement(name = "selection")
	protected CT_Selection Selection;
	@XmlElement(name = "rowBreaks")
	protected CT_PageBreak RowBreaks;
	@XmlElement(name = "colBreaks")
	protected CT_PageBreak ColBreaks;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "printOptions")
	protected CT_PrintOptions PrintOptions;
	@XmlElement(name = "pageSetup")
	protected CT_PageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(name = "autoFilter")
	protected CT_AutoFilter AutoFilter;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_DataValidations ...
public class CT_DataValidations {
	@XmlAttribute(name = "disablePrompts")
	protected Boolean DisablePromptsAttr;
	@XmlAttribute(name = "xWindow")
	protected Integer XWindowAttr;
	@XmlAttribute(name = "yWindow")
	protected Integer YWindowAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "dataValidation")
	protected List<CT_DataValidation> DataValidation;
}

// CT_DataValidation ...
public class CT_DataValidation {
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "errorStyle")
	protected String ErrorStyleAttr;
	@XmlAttribute(name = "imeMode")
	protected String ImeModeAttr;
	@XmlAttribute(name = "operator")
	protected String OperatorAttr;
	@XmlAttribute(name = "allowBlank")
	protected Boolean AllowBlankAttr;
	@XmlAttribute(name = "showDropDown")
	protected Boolean ShowDropDownAttr;
	@XmlAttribute(name = "showInputMessage")
	protected Boolean ShowInputMessageAttr;
	@XmlAttribute(name = "showErrorMessage")
	protected Boolean ShowErrorMessageAttr;
	@XmlAttribute(name = "errorTitle")
	protected String ErrorTitleAttr;
	@XmlAttribute(name = "error")
	protected String ErrorAttr;
	@XmlAttribute(name = "promptTitle")
	protected String PromptTitleAttr;
	@XmlAttribute(name = "prompt")
	protected String PromptAttr;
	@XmlAttribute(name = "sqref", required = true)
	protected ST_Sqref SqrefAttr;
	@XmlElement(name = "formula1")
	protected String Formula1;
	@XmlElement(name = "formula2")
	protected String Formula2;
}

// ST_DataValidationType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DataValidationType")
public class ST_DataValidationType {
	protected String ST_DataValidationType;
}

// ST_DataValidationOperator ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DataValidationOperator")
public class ST_DataValidationOperator {
	protected String ST_DataValidationOperator;
}

// ST_DataValidationErrorStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DataValidationErrorStyle")
public class ST_DataValidationErrorStyle {
	protected String ST_DataValidationErrorStyle;
}

// ST_DataValidationImeMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DataValidationImeMode")
public class ST_DataValidationImeMode {
	protected String ST_DataValidationImeMode;
}

// ST_CfType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CfType")
public class ST_CfType {
	protected String ST_CfType;
}

// ST_TimePeriod ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TimePeriod")
public class ST_TimePeriod {
	protected String ST_TimePeriod;
}

// ST_ConditionalFormattingOperator ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ConditionalFormattingOperator")
public class ST_ConditionalFormattingOperator {
	protected String ST_ConditionalFormattingOperator;
}

// ST_CfvoType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CfvoType")
public class ST_CfvoType {
	protected String ST_CfvoType;
}

// CT_ConditionalFormatting ...
public class CT_ConditionalFormatting {
	@XmlAttribute(name = "pivot")
	protected Boolean PivotAttr;
	@XmlAttribute(name = "sqref")
	protected ST_Sqref SqrefAttr;
	@XmlElement(required = true, name = "cfRule")
	protected List<CT_CfRule> CfRule;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CfRule ...
public class CT_CfRule {
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "dxfId")
	protected Integer DxfIdAttr;
	@XmlAttribute(name = "priority", required = true)
	protected Integer PriorityAttr;
	@XmlAttribute(name = "stopIfTrue")
	protected Boolean StopIfTrueAttr;
	@XmlAttribute(name = "aboveAverage")
	protected Boolean AboveAverageAttr;
	@XmlAttribute(name = "percent")
	protected Boolean PercentAttr;
	@XmlAttribute(name = "bottom")
	protected Boolean BottomAttr;
	@XmlAttribute(name = "operator")
	protected String OperatorAttr;
	@XmlAttribute(name = "text")
	protected String TextAttr;
	@XmlAttribute(name = "timePeriod")
	protected String TimePeriodAttr;
	@XmlAttribute(name = "rank")
	protected Integer RankAttr;
	@XmlAttribute(name = "stdDev")
	protected Integer StdDevAttr;
	@XmlAttribute(name = "equalAverage")
	protected Boolean EqualAverageAttr;
	@XmlElement(name = "formula")
	protected List<String> Formula;
	@XmlElement(name = "colorScale")
	protected CT_ColorScale ColorScale;
	@XmlElement(name = "dataBar")
	protected CT_DataBar DataBar;
	@XmlElement(name = "iconSet")
	protected CT_IconSet IconSet;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Hyperlinks ...
public class CT_Hyperlinks {
	@XmlElement(required = true, name = "hyperlink")
	protected List<CT_Hyperlink> Hyperlink;
}

// CT_Hyperlink ...
public class CT_Hyperlink {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlAttribute(name = "location")
	protected String LocationAttr;
	@XmlAttribute(name = "tooltip")
	protected String TooltipAttr;
	@XmlAttribute(name = "display")
	protected String DisplayAttr;
}

// CT_CellFormula ...
public class CT_CellFormula {
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlAttribute(name = "aca")
	protected Boolean AcaAttr;
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlAttribute(name = "dt2D")
	protected Boolean Dt2DAttr;
	@XmlAttribute(name = "dtr")
	protected Boolean DtrAttr;
	@XmlAttribute(name = "del1")
	protected Boolean Del1Attr;
	@XmlAttribute(name = "del2")
	protected Boolean Del2Attr;
	@XmlAttribute(name = "r1")
	protected String R1Attr;
	@XmlAttribute(name = "r2")
	protected String R2Attr;
	@XmlAttribute(name = "ca")
	protected Boolean CaAttr;
	@XmlAttribute(name = "si")
	protected Integer SiAttr;
	@XmlAttribute(name = "bx")
	protected Boolean BxAttr;
	@XmlValue
	protected String value;
}

// CT_ColorScale ...
public class CT_ColorScale {
	@XmlElement(required = true, name = "cfvo")
	protected List<CT_Cfvo> Cfvo;
	@XmlElement(required = true, name = "color")
	protected List<CT_Color> Color;
}

// CT_DataBar ...
public class CT_DataBar {
	@XmlAttribute(name = "minLength")
	protected Integer MinLengthAttr;
	@XmlAttribute(name = "maxLength")
	protected Integer MaxLengthAttr;
	@XmlAttribute(name = "showValue")
	protected Boolean ShowValueAttr;
	@XmlElement(required = true, name = "cfvo")
	protected List<CT_Cfvo> Cfvo;
	@XmlElement(required = true, name = "color")
	protected CT_Color Color;
}

// CT_IconSet ...
public class CT_IconSet {
	@XmlAttribute(name = "iconSet")
	protected String IconSetAttr;
	@XmlAttribute(name = "showValue")
	protected Boolean ShowValueAttr;
	@XmlAttribute(name = "percent")
	protected Boolean PercentAttr;
	@XmlAttribute(name = "reverse")
	protected Boolean ReverseAttr;
	@XmlElement(required = true, name = "cfvo")
	protected List<CT_Cfvo> Cfvo;
}

// CT_Cfvo ...
public class CT_Cfvo {
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "val")
	protected String ValAttr;
	@XmlAttribute(name = "gte")
	protected Boolean GteAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PageMargins ...
public class CT_PageMargins {
	@XmlAttribute(name = "left", required = true)
	protected Float LeftAttr;
	@XmlAttribute(name = "right", required = true)
	protected Float RightAttr;
	@XmlAttribute(name = "top", required = true)
	protected Float TopAttr;
	@XmlAttribute(name = "bottom", required = true)
	protected Float BottomAttr;
	@XmlAttribute(name = "header", required = true)
	protected Float HeaderAttr;
	@XmlAttribute(name = "footer", required = true)
	protected Float FooterAttr;
}

// CT_PrintOptions ...
public class CT_PrintOptions {
	@XmlAttribute(name = "horizontalCentered")
	protected Boolean HorizontalCenteredAttr;
	@XmlAttribute(name = "verticalCentered")
	protected Boolean VerticalCenteredAttr;
	@XmlAttribute(name = "headings")
	protected Boolean HeadingsAttr;
	@XmlAttribute(name = "gridLines")
	protected Boolean GridLinesAttr;
	@XmlAttribute(name = "gridLinesSet")
	protected Boolean GridLinesSetAttr;
}

// CT_PageSetup ...
public class CT_PageSetup {
	@XmlAttribute(name = "paperSize")
	protected Integer PaperSizeAttr;
	@XmlAttribute(name = "paperHeight")
	protected String PaperHeightAttr;
	@XmlAttribute(name = "paperWidth")
	protected String PaperWidthAttr;
	@XmlAttribute(name = "scale")
	protected Integer ScaleAttr;
	@XmlAttribute(name = "firstPageNumber")
	protected Integer FirstPageNumberAttr;
	@XmlAttribute(name = "fitToWidth")
	protected Integer FitToWidthAttr;
	@XmlAttribute(name = "fitToHeight")
	protected Integer FitToHeightAttr;
	@XmlAttribute(name = "pageOrder")
	protected String PageOrderAttr;
	@XmlAttribute(name = "orientation")
	protected String OrientationAttr;
	@XmlAttribute(name = "usePrinterDefaults")
	protected Boolean UsePrinterDefaultsAttr;
	@XmlAttribute(name = "blackAndWhite")
	protected Boolean BlackAndWhiteAttr;
	@XmlAttribute(name = "draft")
	protected Boolean DraftAttr;
	@XmlAttribute(name = "cellComments")
	protected String CellCommentsAttr;
	@XmlAttribute(name = "useFirstPageNumber")
	protected Boolean UseFirstPageNumberAttr;
	@XmlAttribute(name = "errors")
	protected String ErrorsAttr;
	@XmlAttribute(name = "horizontalDpi")
	protected Integer HorizontalDpiAttr;
	@XmlAttribute(name = "verticalDpi")
	protected Integer VerticalDpiAttr;
	@XmlAttribute(name = "copies")
	protected Integer CopiesAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
}

// ST_PageOrder ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageOrder")
public class ST_PageOrder {
	protected String ST_PageOrder;
}

// ST_Orientation ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Orientation")
public class ST_Orientation {
	protected String ST_Orientation;
}

// ST_CellComments ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellComments")
public class ST_CellComments {
	protected String ST_CellComments;
}

// CT_HeaderFooter ...
public class CT_HeaderFooter {
	@XmlAttribute(name = "differentOddEven")
	protected Boolean DifferentOddEvenAttr;
	@XmlAttribute(name = "differentFirst")
	protected Boolean DifferentFirstAttr;
	@XmlAttribute(name = "scaleWithDoc")
	protected Boolean ScaleWithDocAttr;
	@XmlAttribute(name = "alignWithMargins")
	protected Boolean AlignWithMarginsAttr;
	@XmlElement(name = "oddHeader")
	protected String OddHeader;
	@XmlElement(name = "oddFooter")
	protected String OddFooter;
	@XmlElement(name = "evenHeader")
	protected String EvenHeader;
	@XmlElement(name = "evenFooter")
	protected String EvenFooter;
	@XmlElement(name = "firstHeader")
	protected String FirstHeader;
	@XmlElement(name = "firstFooter")
	protected String FirstFooter;
}

// ST_PrintError ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PrintError")
public class ST_PrintError {
	protected String ST_PrintError;
}

// CT_Scenarios ...
public class CT_Scenarios {
	@XmlAttribute(name = "current")
	protected Integer CurrentAttr;
	@XmlAttribute(name = "show")
	protected Integer ShowAttr;
	@XmlAttribute(name = "sqref")
	protected ST_Sqref SqrefAttr;
	@XmlElement(required = true, name = "scenario")
	protected List<CT_Scenario> Scenario;
}

// CT_SheetProtection ...
public class CT_SheetProtection {
	@XmlAttribute(name = "algorithmName")
	protected String AlgorithmNameAttr;
	@XmlAttribute(name = "hashValue")
	protected List<Byte> HashValueAttr;
	@XmlAttribute(name = "saltValue")
	protected List<Byte> SaltValueAttr;
	@XmlAttribute(name = "spinCount")
	protected Integer SpinCountAttr;
	@XmlAttribute(name = "sheet")
	protected Boolean SheetAttr;
	@XmlAttribute(name = "objects")
	protected Boolean ObjectsAttr;
	@XmlAttribute(name = "scenarios")
	protected Boolean ScenariosAttr;
	@XmlAttribute(name = "formatCells")
	protected Boolean FormatCellsAttr;
	@XmlAttribute(name = "formatColumns")
	protected Boolean FormatColumnsAttr;
	@XmlAttribute(name = "formatRows")
	protected Boolean FormatRowsAttr;
	@XmlAttribute(name = "insertColumns")
	protected Boolean InsertColumnsAttr;
	@XmlAttribute(name = "insertRows")
	protected Boolean InsertRowsAttr;
	@XmlAttribute(name = "insertHyperlinks")
	protected Boolean InsertHyperlinksAttr;
	@XmlAttribute(name = "deleteColumns")
	protected Boolean DeleteColumnsAttr;
	@XmlAttribute(name = "deleteRows")
	protected Boolean DeleteRowsAttr;
	@XmlAttribute(name = "selectLockedCells")
	protected Boolean SelectLockedCellsAttr;
	@XmlAttribute(name = "sort")
	protected Boolean SortAttr;
	@XmlAttribute(name = "autoFilter")
	protected Boolean AutoFilterAttr;
	@XmlAttribute(name = "pivotTables")
	protected Boolean PivotTablesAttr;
	@XmlAttribute(name = "selectUnlockedCells")
	protected Boolean SelectUnlockedCellsAttr;
}

// CT_ProtectedRanges ...
public class CT_ProtectedRanges {
	@XmlElement(required = true, name = "protectedRange")
	protected List<CT_ProtectedRange> ProtectedRange;
}

// CT_ProtectedRange ...
public class CT_ProtectedRange {
	@XmlAttribute(name = "sqref", required = true)
	protected ST_Sqref SqrefAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "algorithmName")
	protected String AlgorithmNameAttr;
	@XmlAttribute(name = "hashValue")
	protected List<Byte> HashValueAttr;
	@XmlAttribute(name = "saltValue")
	protected List<Byte> SaltValueAttr;
	@XmlAttribute(name = "spinCount")
	protected Integer SpinCountAttr;
	@XmlElement(name = "securityDescriptor")
	protected List<String> SecurityDescriptor;
}

// CT_Scenario ...
public class CT_Scenario {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "locked")
	protected Boolean LockedAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "user")
	protected String UserAttr;
	@XmlAttribute(name = "comment")
	protected String CommentAttr;
	@XmlElement(required = true, name = "inputCells")
	protected List<CT_InputCells> InputCells;
}

// CT_InputCells ...
public class CT_InputCells {
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
	@XmlAttribute(name = "deleted")
	protected Boolean DeletedAttr;
	@XmlAttribute(name = "undone")
	protected Boolean UndoneAttr;
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
}

// CT_CellWatches ...
public class CT_CellWatches {
	@XmlElement(required = true, name = "cellWatch")
	protected List<CT_CellWatch> CellWatch;
}

// CT_CellWatch ...
public class CT_CellWatch {
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
}

// CT_Chartsheet ...
public class CT_Chartsheet {
	@XmlElement(name = "sheetPr")
	protected CT_ChartsheetPr SheetPr;
	@XmlElement(required = true, name = "sheetViews")
	protected CT_ChartsheetViews SheetViews;
	@XmlElement(name = "sheetProtection")
	protected CT_ChartsheetProtection SheetProtection;
	@XmlElement(name = "customSheetViews")
	protected CT_CustomChartsheetViews CustomSheetViews;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "pageSetup")
	protected CT_CsPageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(required = true, name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(name = "drawingHF")
	protected CT_DrawingHF DrawingHF;
	@XmlElement(name = "picture")
	protected CT_SheetBackgroundPicture Picture;
	@XmlElement(name = "webPublishItems")
	protected CT_WebPublishItems WebPublishItems;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ChartsheetPr ...
public class CT_ChartsheetPr {
	@XmlAttribute(name = "published")
	protected Boolean PublishedAttr;
	@XmlAttribute(name = "codeName")
	protected String CodeNameAttr;
	@XmlElement(name = "tabColor")
	protected CT_Color TabColor;
}

// CT_ChartsheetViews ...
public class CT_ChartsheetViews {
	@XmlElement(required = true, name = "sheetView")
	protected List<CT_ChartsheetView> SheetView;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ChartsheetView ...
public class CT_ChartsheetView {
	@XmlAttribute(name = "tabSelected")
	protected Boolean TabSelectedAttr;
	@XmlAttribute(name = "zoomScale")
	protected Integer ZoomScaleAttr;
	@XmlAttribute(name = "workbookViewId", required = true)
	protected Integer WorkbookViewIdAttr;
	@XmlAttribute(name = "zoomToFit")
	protected Boolean ZoomToFitAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ChartsheetProtection ...
public class CT_ChartsheetProtection {
	@XmlAttribute(name = "algorithmName")
	protected String AlgorithmNameAttr;
	@XmlAttribute(name = "hashValue")
	protected List<Byte> HashValueAttr;
	@XmlAttribute(name = "saltValue")
	protected List<Byte> SaltValueAttr;
	@XmlAttribute(name = "spinCount")
	protected Integer SpinCountAttr;
	@XmlAttribute(name = "content")
	protected Boolean ContentAttr;
	@XmlAttribute(name = "objects")
	protected Boolean ObjectsAttr;
}

// CT_CsPageSetup ...
public class CT_CsPageSetup {
	@XmlAttribute(name = "paperSize")
	protected Integer PaperSizeAttr;
	@XmlAttribute(name = "paperHeight")
	protected String PaperHeightAttr;
	@XmlAttribute(name = "paperWidth")
	protected String PaperWidthAttr;
	@XmlAttribute(name = "firstPageNumber")
	protected Integer FirstPageNumberAttr;
	@XmlAttribute(name = "orientation")
	protected String OrientationAttr;
	@XmlAttribute(name = "usePrinterDefaults")
	protected Boolean UsePrinterDefaultsAttr;
	@XmlAttribute(name = "blackAndWhite")
	protected Boolean BlackAndWhiteAttr;
	@XmlAttribute(name = "draft")
	protected Boolean DraftAttr;
	@XmlAttribute(name = "useFirstPageNumber")
	protected Boolean UseFirstPageNumberAttr;
	@XmlAttribute(name = "horizontalDpi")
	protected Integer HorizontalDpiAttr;
	@XmlAttribute(name = "verticalDpi")
	protected Integer VerticalDpiAttr;
	@XmlAttribute(name = "copies")
	protected Integer CopiesAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
}

// CT_CustomChartsheetViews ...
public class CT_CustomChartsheetViews {
	@XmlElement(name = "customSheetView")
	protected List<CT_CustomChartsheetView> CustomSheetView;
}

// CT_CustomChartsheetView ...
public class CT_CustomChartsheetView {
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "scale")
	protected Integer ScaleAttr;
	@XmlAttribute(name = "state")
	protected String StateAttr;
	@XmlAttribute(name = "zoomToFit")
	protected Boolean ZoomToFitAttr;
	@XmlElement(name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(name = "pageSetup")
	protected CT_CsPageSetup PageSetup;
	@XmlElement(name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
}

// CT_CustomProperties ...
public class CT_CustomProperties {
	@XmlElement(required = true, name = "customPr")
	protected List<CT_CustomProperty> CustomPr;
}

// CT_CustomProperty ...
public class CT_CustomProperty {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_OleObjects ...
public class CT_OleObjects {
	@XmlElement(required = true, name = "oleObject")
	protected List<CT_OleObject> OleObject;
}

// CT_OleObject ...
public class CT_OleObject {
	@XmlAttribute(name = "progId")
	protected String ProgIdAttr;
	@XmlAttribute(name = "dvAspect")
	protected String DvAspectAttr;
	@XmlAttribute(name = "link")
	protected String LinkAttr;
	@XmlAttribute(name = "oleUpdate")
	protected String OleUpdateAttr;
	@XmlAttribute(name = "autoLoad")
	protected Boolean AutoLoadAttr;
	@XmlAttribute(name = "shapeId", required = true)
	protected Integer ShapeIdAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlElement(name = "objectPr")
	protected CT_ObjectPr ObjectPr;
}

// CT_ObjectPr ...
public class CT_ObjectPr {
	@XmlAttribute(name = "locked")
	protected Boolean LockedAttr;
	@XmlAttribute(name = "defaultSize")
	protected Boolean DefaultSizeAttr;
	@XmlAttribute(name = "print")
	protected Boolean PrintAttr;
	@XmlAttribute(name = "disabled")
	protected Boolean DisabledAttr;
	@XmlAttribute(name = "uiObject")
	protected Boolean UiObjectAttr;
	@XmlAttribute(name = "autoFill")
	protected Boolean AutoFillAttr;
	@XmlAttribute(name = "autoLine")
	protected Boolean AutoLineAttr;
	@XmlAttribute(name = "autoPict")
	protected Boolean AutoPictAttr;
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "altText")
	protected String AltTextAttr;
	@XmlAttribute(name = "dde")
	protected Boolean DdeAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlElement(required = true, name = "anchor")
	protected CT_ObjectAnchor Anchor;
}

// ST_DvAspect ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DvAspect")
public class ST_DvAspect {
	protected String ST_DvAspect;
}

// ST_OleUpdate ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_OleUpdate")
public class ST_OleUpdate {
	protected String ST_OleUpdate;
}

// CT_WebPublishItems ...
public class CT_WebPublishItems {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "webPublishItem")
	protected List<CT_WebPublishItem> WebPublishItem;
}

// CT_WebPublishItem ...
public class CT_WebPublishItem {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "divId", required = true)
	protected String DivIdAttr;
	@XmlAttribute(name = "sourceType", required = true)
	protected String SourceTypeAttr;
	@XmlAttribute(name = "sourceRef")
	protected String SourceRefAttr;
	@XmlAttribute(name = "sourceObject")
	protected String SourceObjectAttr;
	@XmlAttribute(name = "destinationFile", required = true)
	protected String DestinationFileAttr;
	@XmlAttribute(name = "title")
	protected String TitleAttr;
	@XmlAttribute(name = "autoRepublish")
	protected Boolean AutoRepublishAttr;
}

// CT_Controls ...
public class CT_Controls {
	@XmlElement(required = true, name = "control")
	protected List<CT_Control> Control;
}

// CT_Control ...
public class CT_Control {
	@XmlAttribute(name = "shapeId", required = true)
	protected Integer ShapeIdAttr;
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlElement(name = "controlPr")
	protected CT_ControlPr ControlPr;
}

// CT_ControlPr ...
public class CT_ControlPr {
	@XmlAttribute(name = "locked")
	protected Boolean LockedAttr;
	@XmlAttribute(name = "defaultSize")
	protected Boolean DefaultSizeAttr;
	@XmlAttribute(name = "print")
	protected Boolean PrintAttr;
	@XmlAttribute(name = "disabled")
	protected Boolean DisabledAttr;
	@XmlAttribute(name = "recalcAlways")
	protected Boolean RecalcAlwaysAttr;
	@XmlAttribute(name = "uiObject")
	protected Boolean UiObjectAttr;
	@XmlAttribute(name = "autoFill")
	protected Boolean AutoFillAttr;
	@XmlAttribute(name = "autoLine")
	protected Boolean AutoLineAttr;
	@XmlAttribute(name = "autoPict")
	protected Boolean AutoPictAttr;
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "altText")
	protected String AltTextAttr;
	@XmlAttribute(name = "linkedCell")
	protected String LinkedCellAttr;
	@XmlAttribute(name = "listFillRange")
	protected String ListFillRangeAttr;
	@XmlAttribute(name = "cf")
	protected String CfAttr;
	@XmlAttribute(name = "r:id")
	protected String RIdAttr;
	@XmlElement(required = true, name = "anchor")
	protected CT_ObjectAnchor Anchor;
}

// ST_WebSourceType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_WebSourceType")
public class ST_WebSourceType {
	protected String ST_WebSourceType;
}

// CT_IgnoredErrors ...
public class CT_IgnoredErrors {
	@XmlElement(required = true, name = "ignoredError")
	protected List<CT_IgnoredError> IgnoredError;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_IgnoredError ...
public class CT_IgnoredError {
	@XmlAttribute(name = "sqref", required = true)
	protected ST_Sqref SqrefAttr;
	@XmlAttribute(name = "evalError")
	protected Boolean EvalErrorAttr;
	@XmlAttribute(name = "twoDigitTextYear")
	protected Boolean TwoDigitTextYearAttr;
	@XmlAttribute(name = "numberStoredAsText")
	protected Boolean NumberStoredAsTextAttr;
	@XmlAttribute(name = "formula")
	protected Boolean FormulaAttr;
	@XmlAttribute(name = "formulaRange")
	protected Boolean FormulaRangeAttr;
	@XmlAttribute(name = "unlockedFormula")
	protected Boolean UnlockedFormulaAttr;
	@XmlAttribute(name = "emptyCellReference")
	protected Boolean EmptyCellReferenceAttr;
	@XmlAttribute(name = "listDataValidation")
	protected Boolean ListDataValidationAttr;
	@XmlAttribute(name = "calculatedColumn")
	protected Boolean CalculatedColumnAttr;
}

// ST_PaneState ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PaneState")
public class ST_PaneState {
	protected String ST_PaneState;
}

// CT_TableParts ...
public class CT_TableParts {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "tablePart")
	protected List<CT_TablePart> TablePart;
}

// CT_TablePart ...
public class CT_TablePart {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "metadata")
public class Metadata {
	protected CT_Metadata Metadata;
}

// CT_Metadata ...
public class CT_Metadata {
	@XmlElement(name = "metadataTypes")
	protected CT_MetadataTypes MetadataTypes;
	@XmlElement(name = "metadataStrings")
	protected CT_MetadataStrings MetadataStrings;
	@XmlElement(name = "mdxMetadata")
	protected CT_MdxMetadata MdxMetadata;
	@XmlElement(name = "futureMetadata")
	protected List<CT_FutureMetadata> FutureMetadata;
	@XmlElement(name = "cellMetadata")
	protected CT_MetadataBlocks CellMetadata;
	@XmlElement(name = "valueMetadata")
	protected CT_MetadataBlocks ValueMetadata;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_MetadataTypes ...
public class CT_MetadataTypes {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "metadataType")
	protected List<CT_MetadataType> MetadataType;
}

// CT_MetadataType ...
public class CT_MetadataType {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "minSupportedVersion", required = true)
	protected Integer MinSupportedVersionAttr;
	@XmlAttribute(name = "ghostRow")
	protected Boolean GhostRowAttr;
	@XmlAttribute(name = "ghostCol")
	protected Boolean GhostColAttr;
	@XmlAttribute(name = "edit")
	protected Boolean EditAttr;
	@XmlAttribute(name = "delete")
	protected Boolean DeleteAttr;
	@XmlAttribute(name = "copy")
	protected Boolean CopyAttr;
	@XmlAttribute(name = "pasteAll")
	protected Boolean PasteAllAttr;
	@XmlAttribute(name = "pasteFormulas")
	protected Boolean PasteFormulasAttr;
	@XmlAttribute(name = "pasteValues")
	protected Boolean PasteValuesAttr;
	@XmlAttribute(name = "pasteFormats")
	protected Boolean PasteFormatsAttr;
	@XmlAttribute(name = "pasteComments")
	protected Boolean PasteCommentsAttr;
	@XmlAttribute(name = "pasteDataValidation")
	protected Boolean PasteDataValidationAttr;
	@XmlAttribute(name = "pasteBorders")
	protected Boolean PasteBordersAttr;
	@XmlAttribute(name = "pasteColWidths")
	protected Boolean PasteColWidthsAttr;
	@XmlAttribute(name = "pasteNumberFormats")
	protected Boolean PasteNumberFormatsAttr;
	@XmlAttribute(name = "merge")
	protected Boolean MergeAttr;
	@XmlAttribute(name = "splitFirst")
	protected Boolean SplitFirstAttr;
	@XmlAttribute(name = "splitAll")
	protected Boolean SplitAllAttr;
	@XmlAttribute(name = "rowColShift")
	protected Boolean RowColShiftAttr;
	@XmlAttribute(name = "clearAll")
	protected Boolean ClearAllAttr;
	@XmlAttribute(name = "clearFormats")
	protected Boolean ClearFormatsAttr;
	@XmlAttribute(name = "clearContents")
	protected Boolean ClearContentsAttr;
	@XmlAttribute(name = "clearComments")
	protected Boolean ClearCommentsAttr;
	@XmlAttribute(name = "assign")
	protected Boolean AssignAttr;
	@XmlAttribute(name = "coerce")
	protected Boolean CoerceAttr;
	@XmlAttribute(name = "adjust")
	protected Boolean AdjustAttr;
	@XmlAttribute(name = "cellMeta")
	protected Boolean CellMetaAttr;
}

// CT_MetadataBlocks ...
public class CT_MetadataBlocks {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "bk")
	protected List<CT_MetadataBlock> Bk;
}

// CT_MetadataBlock ...
public class CT_MetadataBlock {
	@XmlElement(required = true, name = "rc")
	protected List<CT_MetadataRecord> Rc;
}

// CT_MetadataRecord ...
public class CT_MetadataRecord {
	@XmlAttribute(name = "t", required = true)
	protected Integer TAttr;
	@XmlAttribute(name = "v", required = true)
	protected Integer VAttr;
}

// CT_FutureMetadata ...
public class CT_FutureMetadata {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "bk")
	protected List<CT_FutureMetadataBlock> Bk;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_FutureMetadataBlock ...
public class CT_FutureMetadataBlock {
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_MdxMetadata ...
public class CT_MdxMetadata {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "mdx")
	protected List<CT_Mdx> Mdx;
}

// CT_Mdx ...
public class CT_Mdx {
	@XmlAttribute(name = "n", required = true)
	protected Integer NAttr;
	@XmlAttribute(name = "f", required = true)
	protected String FAttr;
	@XmlElement(required = true, name = "t")
	protected CT_MdxTuple T;
	@XmlElement(required = true, name = "ms")
	protected CT_MdxSet Ms;
	@XmlElement(required = true, name = "p")
	protected CT_MdxMemeberProp P;
	@XmlElement(required = true, name = "k")
	protected CT_MdxKPI K;
}

// ST_MdxFunctionType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MdxFunctionType")
public class ST_MdxFunctionType {
	protected String ST_MdxFunctionType;
}

// CT_MdxTuple ...
public class CT_MdxTuple {
	@XmlAttribute(name = "c")
	protected Integer CAttr;
	@XmlAttribute(name = "ct")
	protected String CtAttr;
	@XmlAttribute(name = "si")
	protected Integer SiAttr;
	@XmlAttribute(name = "fi")
	protected Integer FiAttr;
	@XmlAttribute(name = "bc")
	protected List<Byte> BcAttr;
	@XmlAttribute(name = "fc")
	protected List<Byte> FcAttr;
	@XmlAttribute(name = "i")
	protected Boolean IAttr;
	@XmlAttribute(name = "u")
	protected Boolean UAttr;
	@XmlAttribute(name = "st")
	protected Boolean StAttr;
	@XmlAttribute(name = "b")
	protected Boolean BAttr;
	@XmlElement(name = "n")
	protected List<CT_MetadataStringIndex> N;
}

// CT_MdxSet ...
public class CT_MdxSet {
	@XmlAttribute(name = "ns", required = true)
	protected Integer NsAttr;
	@XmlAttribute(name = "c")
	protected Integer CAttr;
	@XmlAttribute(name = "o")
	protected String OAttr;
	@XmlElement(name = "n")
	protected List<CT_MetadataStringIndex> N;
}

// ST_MdxSetOrder ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MdxSetOrder")
public class ST_MdxSetOrder {
	protected String ST_MdxSetOrder;
}

// CT_MdxMemeberProp ...
public class CT_MdxMemeberProp {
	@XmlAttribute(name = "n", required = true)
	protected Integer NAttr;
	@XmlAttribute(name = "np", required = true)
	protected Integer NpAttr;
}

// CT_MdxKPI ...
public class CT_MdxKPI {
	@XmlAttribute(name = "n", required = true)
	protected Integer NAttr;
	@XmlAttribute(name = "np", required = true)
	protected Integer NpAttr;
	@XmlAttribute(name = "p", required = true)
	protected String PAttr;
}

// ST_MdxKPIProperty ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MdxKPIProperty")
public class ST_MdxKPIProperty {
	protected String ST_MdxKPIProperty;
}

// CT_MetadataStringIndex ...
public class CT_MetadataStringIndex {
	@XmlAttribute(name = "x", required = true)
	protected Integer XAttr;
	@XmlAttribute(name = "s")
	protected Boolean SAttr;
}

// CT_MetadataStrings ...
public class CT_MetadataStrings {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "s")
	protected List<CT_XStringElement> S;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "singleXmlCells")
public class SingleXmlCells {
	protected CT_SingleXmlCells SingleXmlCells;
}

// CT_SingleXmlCells ...
public class CT_SingleXmlCells {
	@XmlElement(required = true, name = "singleXmlCell")
	protected List<CT_SingleXmlCell> SingleXmlCell;
}

// CT_SingleXmlCell ...
public class CT_SingleXmlCell {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
	@XmlAttribute(name = "connectionId", required = true)
	protected Integer ConnectionIdAttr;
	@XmlElement(required = true, name = "xmlCellPr")
	protected CT_XmlCellPr XmlCellPr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_XmlCellPr ...
public class CT_XmlCellPr {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "uniqueName")
	protected String UniqueNameAttr;
	@XmlElement(required = true, name = "xmlPr")
	protected CT_XmlPr XmlPr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_XmlPr ...
public class CT_XmlPr {
	@XmlAttribute(name = "mapId", required = true)
	protected Integer MapIdAttr;
	@XmlAttribute(name = "xpath", required = true)
	protected String XpathAttr;
	@XmlAttribute(name = "xmlDataType", required = true)
	protected String XmlDataTypeAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "styleSheet")
public class StyleSheet {
	protected CT_Stylesheet StyleSheet;
}

// CT_Stylesheet ...
public class CT_Stylesheet {
	@XmlElement(name = "numFmts")
	protected CT_NumFmts NumFmts;
	@XmlElement(name = "fonts")
	protected CT_Fonts Fonts;
	@XmlElement(name = "fills")
	protected CT_Fills Fills;
	@XmlElement(name = "borders")
	protected CT_Borders Borders;
	@XmlElement(name = "cellStyleXfs")
	protected CT_CellStyleXfs CellStyleXfs;
	@XmlElement(name = "cellXfs")
	protected CT_CellXfs CellXfs;
	@XmlElement(name = "cellStyles")
	protected CT_CellStyles CellStyles;
	@XmlElement(name = "dxfs")
	protected CT_Dxfs Dxfs;
	@XmlElement(name = "tableStyles")
	protected CT_TableStyles TableStyles;
	@XmlElement(name = "colors")
	protected CT_Colors Colors;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CellAlignment ...
public class CT_CellAlignment {
	@XmlAttribute(name = "horizontal")
	protected String HorizontalAttr;
	@XmlAttribute(name = "vertical")
	protected String VerticalAttr;
	@XmlAttribute(name = "textRotation")
	protected ST_TextRotation TextRotationAttr;
	@XmlAttribute(name = "wrapText")
	protected Boolean WrapTextAttr;
	@XmlAttribute(name = "indent")
	protected Integer IndentAttr;
	@XmlAttribute(name = "relativeIndent")
	protected Integer RelativeIndentAttr;
	@XmlAttribute(name = "justifyLastLine")
	protected Boolean JustifyLastLineAttr;
	@XmlAttribute(name = "shrinkToFit")
	protected Boolean ShrinkToFitAttr;
	@XmlAttribute(name = "readingOrder")
	protected Integer ReadingOrderAttr;
}

// ST_TextRotation ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextRotation")
public class ST_TextRotation {
	protected Integer ST_TextRotation;
}

// ST_BorderStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BorderStyle")
public class ST_BorderStyle {
	protected String ST_BorderStyle;
}

// CT_Borders ...
public class CT_Borders {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "border")
	protected List<CT_Border> Border;
}

// CT_Border ...
public class CT_Border {
	@XmlAttribute(name = "diagonalUp")
	protected Boolean DiagonalUpAttr;
	@XmlAttribute(name = "diagonalDown")
	protected Boolean DiagonalDownAttr;
	@XmlAttribute(name = "outline")
	protected Boolean OutlineAttr;
	@XmlElement(name = "start")
	protected CT_BorderPr Start;
	@XmlElement(name = "end")
	protected CT_BorderPr End;
	@XmlElement(name = "top")
	protected CT_BorderPr Top;
	@XmlElement(name = "bottom")
	protected CT_BorderPr Bottom;
	@XmlElement(name = "diagonal")
	protected CT_BorderPr Diagonal;
	@XmlElement(name = "vertical")
	protected CT_BorderPr Vertical;
	@XmlElement(name = "horizontal")
	protected CT_BorderPr Horizontal;
}

// CT_BorderPr ...
public class CT_BorderPr {
	@XmlAttribute(name = "style")
	protected String StyleAttr;
	@XmlElement(name = "color")
	protected CT_Color Color;
}

// CT_CellProtection ...
public class CT_CellProtection {
	@XmlAttribute(name = "locked")
	protected Boolean LockedAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
}

// CT_Fonts ...
public class CT_Fonts {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "font")
	protected List<CT_Font> Font;
}

// CT_Fills ...
public class CT_Fills {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "fill")
	protected List<CT_Fill> Fill;
}

// CT_Fill ...
public class CT_Fill {
	@XmlElement(name = "patternFill")
	protected CT_PatternFill PatternFill;
	@XmlElement(name = "gradientFill")
	protected CT_GradientFill GradientFill;
}

// CT_PatternFill ...
public class CT_PatternFill {
	@XmlAttribute(name = "patternType")
	protected String PatternTypeAttr;
	@XmlElement(name = "fgColor")
	protected CT_Color FgColor;
	@XmlElement(name = "bgColor")
	protected CT_Color BgColor;
}

// CT_Color ...
public class CT_Color {
	@XmlAttribute(name = "auto")
	protected Boolean AutoAttr;
	@XmlAttribute(name = "indexed")
	protected Integer IndexedAttr;
	@XmlAttribute(name = "rgb")
	protected List<Byte> RgbAttr;
	@XmlAttribute(name = "theme")
	protected Integer ThemeAttr;
	@XmlAttribute(name = "tint")
	protected Float TintAttr;
}

// ST_PatternType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PatternType")
public class ST_PatternType {
	protected String ST_PatternType;
}

// CT_GradientFill ...
public class CT_GradientFill {
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "degree")
	protected Float DegreeAttr;
	@XmlAttribute(name = "left")
	protected Float LeftAttr;
	@XmlAttribute(name = "right")
	protected Float RightAttr;
	@XmlAttribute(name = "top")
	protected Float TopAttr;
	@XmlAttribute(name = "bottom")
	protected Float BottomAttr;
	@XmlElement(name = "stop")
	protected List<CT_GradientStop> Stop;
}

// CT_GradientStop ...
public class CT_GradientStop {
	@XmlAttribute(name = "position", required = true)
	protected Float PositionAttr;
	@XmlElement(required = true, name = "color")
	protected CT_Color Color;
}

// ST_GradientType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GradientType")
public class ST_GradientType {
	protected String ST_GradientType;
}

// ST_HorizontalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HorizontalAlignment")
public class ST_HorizontalAlignment {
	protected String ST_HorizontalAlignment;
}

// ST_VerticalAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VerticalAlignment")
public class ST_VerticalAlignment {
	protected String ST_VerticalAlignment;
}

// CT_NumFmts ...
public class CT_NumFmts {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "numFmt")
	protected List<CT_NumFmt> NumFmt;
}

// CT_NumFmt ...
public class CT_NumFmt {
	@XmlAttribute(name = "numFmtId", required = true)
	protected Integer NumFmtIdAttr;
	@XmlAttribute(name = "formatCode", required = true)
	protected String FormatCodeAttr;
}

// CT_CellStyleXfs ...
public class CT_CellStyleXfs {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "xf")
	protected List<CT_Xf> Xf;
}

// CT_CellXfs ...
public class CT_CellXfs {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "xf")
	protected List<CT_Xf> Xf;
}

// CT_Xf ...
public class CT_Xf {
	@XmlAttribute(name = "numFmtId")
	protected Integer NumFmtIdAttr;
	@XmlAttribute(name = "fontId")
	protected Integer FontIdAttr;
	@XmlAttribute(name = "fillId")
	protected Integer FillIdAttr;
	@XmlAttribute(name = "borderId")
	protected Integer BorderIdAttr;
	@XmlAttribute(name = "xfId")
	protected Integer XfIdAttr;
	@XmlAttribute(name = "quotePrefix")
	protected Boolean QuotePrefixAttr;
	@XmlAttribute(name = "pivotButton")
	protected Boolean PivotButtonAttr;
	@XmlAttribute(name = "applyNumberFormat")
	protected Boolean ApplyNumberFormatAttr;
	@XmlAttribute(name = "applyFont")
	protected Boolean ApplyFontAttr;
	@XmlAttribute(name = "applyFill")
	protected Boolean ApplyFillAttr;
	@XmlAttribute(name = "applyBorder")
	protected Boolean ApplyBorderAttr;
	@XmlAttribute(name = "applyAlignment")
	protected Boolean ApplyAlignmentAttr;
	@XmlAttribute(name = "applyProtection")
	protected Boolean ApplyProtectionAttr;
	@XmlElement(name = "alignment")
	protected CT_CellAlignment Alignment;
	@XmlElement(name = "protection")
	protected CT_CellProtection Protection;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_CellStyles ...
public class CT_CellStyles {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "cellStyle")
	protected List<CT_CellStyle> CellStyle;
}

// CT_CellStyle ...
public class CT_CellStyle {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "xfId", required = true)
	protected Integer XfIdAttr;
	@XmlAttribute(name = "builtinId")
	protected Integer BuiltinIdAttr;
	@XmlAttribute(name = "iLevel")
	protected Integer ILevelAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "customBuiltin")
	protected Boolean CustomBuiltinAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Dxfs ...
public class CT_Dxfs {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "dxf")
	protected List<CT_Dxf> Dxf;
}

// CT_Dxf ...
public class CT_Dxf {
	@XmlElement(name = "font")
	protected CT_Font Font;
	@XmlElement(name = "numFmt")
	protected CT_NumFmt NumFmt;
	@XmlElement(name = "fill")
	protected CT_Fill Fill;
	@XmlElement(name = "alignment")
	protected CT_CellAlignment Alignment;
	@XmlElement(name = "border")
	protected CT_Border Border;
	@XmlElement(name = "protection")
	protected CT_CellProtection Protection;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_NumFmtId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_NumFmtId")
public class ST_NumFmtId {
	protected Integer ST_NumFmtId;
}

// ST_FontId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FontId")
public class ST_FontId {
	protected Integer ST_FontId;
}

// ST_FillId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FillId")
public class ST_FillId {
	protected Integer ST_FillId;
}

// ST_BorderId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BorderId")
public class ST_BorderId {
	protected Integer ST_BorderId;
}

// ST_CellStyleXfId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CellStyleXfId")
public class ST_CellStyleXfId {
	protected Integer ST_CellStyleXfId;
}

// ST_DxfId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DxfId")
public class ST_DxfId {
	protected Integer ST_DxfId;
}

// CT_Colors ...
public class CT_Colors {
	@XmlElement(name = "indexedColors")
	protected CT_IndexedColors IndexedColors;
	@XmlElement(name = "mruColors")
	protected CT_MRUColors MruColors;
}

// CT_IndexedColors ...
public class CT_IndexedColors {
	@XmlElement(required = true, name = "rgbColor")
	protected List<CT_RgbColor> RgbColor;
}

// CT_MRUColors ...
public class CT_MRUColors {
	@XmlElement(required = true, name = "color")
	protected List<CT_Color> Color;
}

// CT_RgbColor ...
public class CT_RgbColor {
	@XmlAttribute(name = "rgb")
	protected List<Byte> RgbAttr;
}

// CT_TableStyles ...
public class CT_TableStyles {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlAttribute(name = "defaultTableStyle")
	protected String DefaultTableStyleAttr;
	@XmlAttribute(name = "defaultPivotStyle")
	protected String DefaultPivotStyleAttr;
	@XmlElement(name = "tableStyle")
	protected List<CT_TableStyle> TableStyle;
}

// CT_TableStyle ...
public class CT_TableStyle {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "pivot")
	protected Boolean PivotAttr;
	@XmlAttribute(name = "table")
	protected Boolean TableAttr;
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(name = "tableStyleElement")
	protected List<CT_TableStyleElement> TableStyleElement;
}

// CT_TableStyleElement ...
public class CT_TableStyleElement {
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "size")
	protected Integer SizeAttr;
	@XmlAttribute(name = "dxfId")
	protected Integer DxfIdAttr;
}

// ST_TableStyleType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TableStyleType")
public class ST_TableStyleType {
	protected String ST_TableStyleType;
}

// CT_BooleanProperty ...
public class CT_BooleanProperty {
	@XmlAttribute(name = "val")
	protected Boolean ValAttr;
}

// CT_FontSize ...
public class CT_FontSize {
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
}

// CT_IntProperty ...
public class CT_IntProperty {
	@XmlAttribute(name = "val", required = true)
	protected Integer ValAttr;
}

// CT_FontName ...
public class CT_FontName {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// CT_VerticalAlignFontProperty ...
public class CT_VerticalAlignFontProperty {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// CT_FontScheme ...
public class CT_FontScheme {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_FontScheme ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FontScheme")
public class ST_FontScheme {
	protected String ST_FontScheme;
}

// CT_UnderlineProperty ...
public class CT_UnderlineProperty {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_UnderlineValues ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_UnderlineValues")
public class ST_UnderlineValues {
	protected String ST_UnderlineValues;
}

// CT_FontFamily ...
public class CT_FontFamily {
	@XmlAttribute(name = "val", required = true)
	protected Integer ValAttr;
}

// ST_FontFamily ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FontFamily")
public class ST_FontFamily {
	protected Integer ST_FontFamily;
}

// CT_Font ...
public class CT_Font {
	@XmlElement(name = "name")
	protected List<CT_FontName> Name;
	@XmlElement(name = "charset")
	protected List<CT_IntProperty> Charset;
	@XmlElement(name = "family")
	protected List<CT_FontFamily> Family;
	@XmlElement(name = "b")
	protected List<CT_BooleanProperty> B;
	@XmlElement(name = "i")
	protected List<CT_BooleanProperty> I;
	@XmlElement(name = "strike")
	protected List<CT_BooleanProperty> Strike;
	@XmlElement(name = "outline")
	protected List<CT_BooleanProperty> Outline;
	@XmlElement(name = "shadow")
	protected List<CT_BooleanProperty> Shadow;
	@XmlElement(name = "condense")
	protected List<CT_BooleanProperty> Condense;
	@XmlElement(name = "extend")
	protected List<CT_BooleanProperty> Extend;
	@XmlElement(name = "color")
	protected List<CT_Color> Color;
	@XmlElement(name = "sz")
	protected List<CT_FontSize> Sz;
	@XmlElement(name = "u")
	protected List<CT_UnderlineProperty> U;
	@XmlElement(name = "vertAlign")
	protected List<CT_VerticalAlignFontProperty> VertAlign;
	@XmlElement(name = "scheme")
	protected List<CT_FontScheme> Scheme;
}

// AG_AutoFormat ...
public class AG_AutoFormat {
	@XmlAttribute(name = "autoFormatId")
	protected IntegerAttr AutoFormatId;
	@XmlAttribute(name = "applyNumberFormats")
	protected BooleanAttr ApplyNumberFormats;
	@XmlAttribute(name = "applyBorderFormats")
	protected BooleanAttr ApplyBorderFormats;
	@XmlAttribute(name = "applyFontFormats")
	protected BooleanAttr ApplyFontFormats;
	@XmlAttribute(name = "applyPatternFormats")
	protected BooleanAttr ApplyPatternFormats;
	@XmlAttribute(name = "applyAlignmentFormats")
	protected BooleanAttr ApplyAlignmentFormats;
	@XmlAttribute(name = "applyWidthHeightFormats")
	protected BooleanAttr ApplyWidthHeightFormats;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "externalLink")
public class ExternalLink {
	protected CT_ExternalLink ExternalLink;
}

// CT_ExternalLink ...
public class CT_ExternalLink {
	@XmlElement(name = "externalBook")
	protected CT_ExternalBook ExternalBook;
	@XmlElement(name = "ddeLink")
	protected CT_DdeLink DdeLink;
	@XmlElement(name = "oleLink")
	protected CT_OleLink OleLink;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ExternalBook ...
public class CT_ExternalBook {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlElement(name = "sheetNames")
	protected CT_ExternalSheetNames SheetNames;
	@XmlElement(name = "definedNames")
	protected CT_ExternalDefinedNames DefinedNames;
	@XmlElement(name = "sheetDataSet")
	protected CT_ExternalSheetDataSet SheetDataSet;
}

// CT_ExternalSheetNames ...
public class CT_ExternalSheetNames {
	@XmlElement(required = true, name = "sheetName")
	protected List<CT_ExternalSheetName> SheetName;
}

// CT_ExternalSheetName ...
public class CT_ExternalSheetName {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_ExternalDefinedNames ...
public class CT_ExternalDefinedNames {
	@XmlElement(name = "definedName")
	protected List<CT_ExternalDefinedName> DefinedName;
}

// CT_ExternalDefinedName ...
public class CT_ExternalDefinedName {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "refersTo")
	protected String RefersToAttr;
	@XmlAttribute(name = "sheetId")
	protected Integer SheetIdAttr;
}

// CT_ExternalSheetDataSet ...
public class CT_ExternalSheetDataSet {
	@XmlElement(required = true, name = "sheetData")
	protected List<CT_ExternalSheetData> SheetData;
}

// CT_ExternalSheetData ...
public class CT_ExternalSheetData {
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "refreshError")
	protected Boolean RefreshErrorAttr;
	@XmlElement(name = "row")
	protected List<CT_ExternalRow> Row;
}

// CT_ExternalRow ...
public class CT_ExternalRow {
	@XmlAttribute(name = "r", required = true)
	protected Integer RAttr;
	@XmlElement(name = "cell")
	protected List<CT_ExternalCell> Cell;
}

// CT_ExternalCell ...
public class CT_ExternalCell {
	@XmlAttribute(name = "r")
	protected String RAttr;
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlAttribute(name = "vm")
	protected Integer VmAttr;
	@XmlElement(name = "v")
	protected String V;
}

// CT_DdeLink ...
public class CT_DdeLink {
	@XmlAttribute(name = "ddeService", required = true)
	protected String DdeServiceAttr;
	@XmlAttribute(name = "ddeTopic", required = true)
	protected String DdeTopicAttr;
	@XmlElement(name = "ddeItems")
	protected CT_DdeItems DdeItems;
}

// CT_DdeItems ...
public class CT_DdeItems {
	@XmlElement(name = "ddeItem")
	protected List<CT_DdeItem> DdeItem;
}

// CT_DdeItem ...
public class CT_DdeItem {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "ole")
	protected Boolean OleAttr;
	@XmlAttribute(name = "advise")
	protected Boolean AdviseAttr;
	@XmlAttribute(name = "preferPic")
	protected Boolean PreferPicAttr;
	@XmlElement(name = "values")
	protected CT_DdeValues Values;
}

// CT_DdeValues ...
public class CT_DdeValues {
	@XmlAttribute(name = "rows")
	protected Integer RowsAttr;
	@XmlAttribute(name = "cols")
	protected Integer ColsAttr;
	@XmlElement(required = true, name = "value")
	protected List<CT_DdeValue> Value;
}

// CT_DdeValue ...
public class CT_DdeValue {
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlElement(required = true, name = "val")
	protected String Val;
}

// ST_DdeValueType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DdeValueType")
public class ST_DdeValueType {
	protected String ST_DdeValueType;
}

// CT_OleLink ...
public class CT_OleLink {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlAttribute(name = "progId", required = true)
	protected String ProgIdAttr;
	@XmlElement(name = "oleItems")
	protected CT_OleItems OleItems;
}

// CT_OleItems ...
public class CT_OleItems {
	@XmlElement(name = "oleItem")
	protected List<CT_OleItem> OleItem;
}

// CT_OleItem ...
public class CT_OleItem {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "icon")
	protected Boolean IconAttr;
	@XmlAttribute(name = "advise")
	protected Boolean AdviseAttr;
	@XmlAttribute(name = "preferPic")
	protected Boolean PreferPicAttr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "table")
public class Table {
	protected CT_Table Table;
}

// CT_Table ...
public class CT_Table {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "displayName", required = true)
	protected String DisplayNameAttr;
	@XmlAttribute(name = "comment")
	protected String CommentAttr;
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
	@XmlAttribute(name = "tableType")
	protected String TableTypeAttr;
	@XmlAttribute(name = "headerRowCount")
	protected Integer HeaderRowCountAttr;
	@XmlAttribute(name = "insertRow")
	protected Boolean InsertRowAttr;
	@XmlAttribute(name = "insertRowShift")
	protected Boolean InsertRowShiftAttr;
	@XmlAttribute(name = "totalsRowCount")
	protected Integer TotalsRowCountAttr;
	@XmlAttribute(name = "totalsRowShown")
	protected Boolean TotalsRowShownAttr;
	@XmlAttribute(name = "published")
	protected Boolean PublishedAttr;
	@XmlAttribute(name = "headerRowDxfId")
	protected Integer HeaderRowDxfIdAttr;
	@XmlAttribute(name = "dataDxfId")
	protected Integer DataDxfIdAttr;
	@XmlAttribute(name = "totalsRowDxfId")
	protected Integer TotalsRowDxfIdAttr;
	@XmlAttribute(name = "headerRowBorderDxfId")
	protected Integer HeaderRowBorderDxfIdAttr;
	@XmlAttribute(name = "tableBorderDxfId")
	protected Integer TableBorderDxfIdAttr;
	@XmlAttribute(name = "totalsRowBorderDxfId")
	protected Integer TotalsRowBorderDxfIdAttr;
	@XmlAttribute(name = "headerRowCellStyle")
	protected String HeaderRowCellStyleAttr;
	@XmlAttribute(name = "dataCellStyle")
	protected String DataCellStyleAttr;
	@XmlAttribute(name = "totalsRowCellStyle")
	protected String TotalsRowCellStyleAttr;
	@XmlAttribute(name = "connectionId")
	protected Integer ConnectionIdAttr;
	@XmlElement(name = "autoFilter")
	protected CT_AutoFilter AutoFilter;
	@XmlElement(name = "sortState")
	protected CT_SortState SortState;
	@XmlElement(required = true, name = "tableColumns")
	protected CT_TableColumns TableColumns;
	@XmlElement(name = "tableStyleInfo")
	protected CT_TableStyleInfo TableStyleInfo;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_TableType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TableType")
public class ST_TableType {
	protected String ST_TableType;
}

// CT_TableStyleInfo ...
public class CT_TableStyleInfo {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "showFirstColumn")
	protected Boolean ShowFirstColumnAttr;
	@XmlAttribute(name = "showLastColumn")
	protected Boolean ShowLastColumnAttr;
	@XmlAttribute(name = "showRowStripes")
	protected Boolean ShowRowStripesAttr;
	@XmlAttribute(name = "showColumnStripes")
	protected Boolean ShowColumnStripesAttr;
}

// CT_TableColumns ...
public class CT_TableColumns {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "tableColumn")
	protected List<CT_TableColumn> TableColumn;
}

// CT_TableColumn ...
public class CT_TableColumn {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "uniqueName")
	protected String UniqueNameAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "totalsRowFunction")
	protected String TotalsRowFunctionAttr;
	@XmlAttribute(name = "totalsRowLabel")
	protected String TotalsRowLabelAttr;
	@XmlAttribute(name = "queryTableFieldId")
	protected Integer QueryTableFieldIdAttr;
	@XmlAttribute(name = "headerRowDxfId")
	protected Integer HeaderRowDxfIdAttr;
	@XmlAttribute(name = "dataDxfId")
	protected Integer DataDxfIdAttr;
	@XmlAttribute(name = "totalsRowDxfId")
	protected Integer TotalsRowDxfIdAttr;
	@XmlAttribute(name = "headerRowCellStyle")
	protected String HeaderRowCellStyleAttr;
	@XmlAttribute(name = "dataCellStyle")
	protected String DataCellStyleAttr;
	@XmlAttribute(name = "totalsRowCellStyle")
	protected String TotalsRowCellStyleAttr;
	@XmlElement(name = "calculatedColumnFormula")
	protected CT_TableFormula CalculatedColumnFormula;
	@XmlElement(name = "totalsRowFormula")
	protected CT_TableFormula TotalsRowFormula;
	@XmlElement(name = "xmlColumnPr")
	protected CT_XmlColumnPr XmlColumnPr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_TableFormula ...
public class CT_TableFormula {
	@XmlAttribute(name = "array")
	protected Boolean ArrayAttr;
	@XmlValue
	protected String value;
}

// ST_TotalsRowFunction ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TotalsRowFunction")
public class ST_TotalsRowFunction {
	protected String ST_TotalsRowFunction;
}

// CT_XmlColumnPr ...
public class CT_XmlColumnPr {
	@XmlAttribute(name = "mapId", required = true)
	protected Integer MapIdAttr;
	@XmlAttribute(name = "xpath", required = true)
	protected String XpathAttr;
	@XmlAttribute(name = "denormalized")
	protected Boolean DenormalizedAttr;
	@XmlAttribute(name = "xmlDataType", required = true)
	protected String XmlDataTypeAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_XmlDataType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_XmlDataType")
public class ST_XmlDataType {
	protected String ST_XmlDataType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "volTypes")
public class VolTypes {
	protected CT_VolTypes VolTypes;
}

// CT_VolTypes ...
public class CT_VolTypes {
	@XmlElement(required = true, name = "volType")
	protected List<CT_VolType> VolType;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_VolType ...
public class CT_VolType {
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlElement(required = true, name = "main")
	protected List<CT_VolMain> Main;
}

// CT_VolMain ...
public class CT_VolMain {
	@XmlAttribute(name = "first", required = true)
	protected String FirstAttr;
	@XmlElement(required = true, name = "tp")
	protected List<CT_VolTopic> Tp;
}

// CT_VolTopic ...
public class CT_VolTopic {
	@XmlAttribute(name = "t")
	protected String TAttr;
	@XmlElement(required = true, name = "v")
	protected String V;
	@XmlElement(name = "stp")
	protected List<String> Stp;
	@XmlElement(required = true, name = "tr")
	protected List<CT_VolTopicRef> Tr;
}

// CT_VolTopicRef ...
public class CT_VolTopicRef {
	@XmlAttribute(name = "r", required = true)
	protected String RAttr;
	@XmlAttribute(name = "s", required = true)
	protected Integer SAttr;
}

// ST_VolDepType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VolDepType")
public class ST_VolDepType {
	protected String ST_VolDepType;
}

// ST_VolValueType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VolValueType")
public class ST_VolValueType {
	protected String ST_VolValueType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "workbook")
public class Workbook {
	protected CT_Workbook Workbook;
}

// CT_Workbook ...
public class CT_Workbook {
	@XmlAttribute(name = "conformance")
	protected String ConformanceAttr;
	@XmlElement(name = "fileVersion")
	protected CT_FileVersion FileVersion;
	@XmlElement(name = "fileSharing")
	protected CT_FileSharing FileSharing;
	@XmlElement(name = "workbookPr")
	protected CT_WorkbookPr WorkbookPr;
	@XmlElement(name = "workbookProtection")
	protected CT_WorkbookProtection WorkbookProtection;
	@XmlElement(name = "bookViews")
	protected CT_BookViews BookViews;
	@XmlElement(required = true, name = "sheets")
	protected CT_Sheets Sheets;
	@XmlElement(name = "functionGroups")
	protected CT_FunctionGroups FunctionGroups;
	@XmlElement(name = "externalReferences")
	protected CT_ExternalReferences ExternalReferences;
	@XmlElement(name = "definedNames")
	protected CT_DefinedNames DefinedNames;
	@XmlElement(name = "calcPr")
	protected CT_CalcPr CalcPr;
	@XmlElement(name = "oleSize")
	protected CT_OleSize OleSize;
	@XmlElement(name = "customWorkbookViews")
	protected CT_CustomWorkbookViews CustomWorkbookViews;
	@XmlElement(name = "pivotCaches")
	protected CT_PivotCaches PivotCaches;
	@XmlElement(name = "smartTagPr")
	protected CT_SmartTagPr SmartTagPr;
	@XmlElement(name = "smartTagTypes")
	protected CT_SmartTagTypes SmartTagTypes;
	@XmlElement(name = "webPublishing")
	protected CT_WebPublishing WebPublishing;
	@XmlElement(name = "fileRecoveryPr")
	protected List<CT_FileRecoveryPr> FileRecoveryPr;
	@XmlElement(name = "webPublishObjects")
	protected CT_WebPublishObjects WebPublishObjects;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_FileVersion ...
public class CT_FileVersion {
	@XmlAttribute(name = "appName")
	protected String AppNameAttr;
	@XmlAttribute(name = "lastEdited")
	protected String LastEditedAttr;
	@XmlAttribute(name = "lowestEdited")
	protected String LowestEditedAttr;
	@XmlAttribute(name = "rupBuild")
	protected String RupBuildAttr;
	@XmlAttribute(name = "codeName")
	protected String CodeNameAttr;
}

// CT_BookViews ...
public class CT_BookViews {
	@XmlElement(required = true, name = "workbookView")
	protected List<CT_BookView> WorkbookView;
}

// CT_BookView ...
public class CT_BookView {
	@XmlAttribute(name = "visibility")
	protected String VisibilityAttr;
	@XmlAttribute(name = "minimized")
	protected Boolean MinimizedAttr;
	@XmlAttribute(name = "showHorizontalScroll")
	protected Boolean ShowHorizontalScrollAttr;
	@XmlAttribute(name = "showVerticalScroll")
	protected Boolean ShowVerticalScrollAttr;
	@XmlAttribute(name = "showSheetTabs")
	protected Boolean ShowSheetTabsAttr;
	@XmlAttribute(name = "xWindow")
	protected Integer XWindowAttr;
	@XmlAttribute(name = "yWindow")
	protected Integer YWindowAttr;
	@XmlAttribute(name = "windowWidth")
	protected Integer WindowWidthAttr;
	@XmlAttribute(name = "windowHeight")
	protected Integer WindowHeightAttr;
	@XmlAttribute(name = "tabRatio")
	protected Integer TabRatioAttr;
	@XmlAttribute(name = "firstSheet")
	protected Integer FirstSheetAttr;
	@XmlAttribute(name = "activeTab")
	protected Integer ActiveTabAttr;
	@XmlAttribute(name = "autoFilterDateGrouping")
	protected Boolean AutoFilterDateGroupingAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Visibility ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Visibility")
public class ST_Visibility {
	protected String ST_Visibility;
}

// CT_CustomWorkbookViews ...
public class CT_CustomWorkbookViews {
	@XmlElement(required = true, name = "customWorkbookView")
	protected List<CT_CustomWorkbookView> CustomWorkbookView;
}

// CT_CustomWorkbookView ...
public class CT_CustomWorkbookView {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "guid", required = true)
	protected String GuidAttr;
	@XmlAttribute(name = "autoUpdate")
	protected Boolean AutoUpdateAttr;
	@XmlAttribute(name = "mergeInterval")
	protected Integer MergeIntervalAttr;
	@XmlAttribute(name = "changesSavedWin")
	protected Boolean ChangesSavedWinAttr;
	@XmlAttribute(name = "onlySync")
	protected Boolean OnlySyncAttr;
	@XmlAttribute(name = "personalView")
	protected Boolean PersonalViewAttr;
	@XmlAttribute(name = "includePrintSettings")
	protected Boolean IncludePrintSettingsAttr;
	@XmlAttribute(name = "includeHiddenRowCol")
	protected Boolean IncludeHiddenRowColAttr;
	@XmlAttribute(name = "maximized")
	protected Boolean MaximizedAttr;
	@XmlAttribute(name = "minimized")
	protected Boolean MinimizedAttr;
	@XmlAttribute(name = "showHorizontalScroll")
	protected Boolean ShowHorizontalScrollAttr;
	@XmlAttribute(name = "showVerticalScroll")
	protected Boolean ShowVerticalScrollAttr;
	@XmlAttribute(name = "showSheetTabs")
	protected Boolean ShowSheetTabsAttr;
	@XmlAttribute(name = "xWindow")
	protected Integer XWindowAttr;
	@XmlAttribute(name = "yWindow")
	protected Integer YWindowAttr;
	@XmlAttribute(name = "windowWidth", required = true)
	protected Integer WindowWidthAttr;
	@XmlAttribute(name = "windowHeight", required = true)
	protected Integer WindowHeightAttr;
	@XmlAttribute(name = "tabRatio")
	protected Integer TabRatioAttr;
	@XmlAttribute(name = "activeSheetId", required = true)
	protected Integer ActiveSheetIdAttr;
	@XmlAttribute(name = "showFormulaBar")
	protected Boolean ShowFormulaBarAttr;
	@XmlAttribute(name = "showStatusbar")
	protected Boolean ShowStatusbarAttr;
	@XmlAttribute(name = "showComments")
	protected String ShowCommentsAttr;
	@XmlAttribute(name = "showObjects")
	protected String ShowObjectsAttr;
	@XmlElement(name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Comments ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Comments")
public class ST_Comments {
	protected String ST_Comments;
}

// ST_Objects ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Objects")
public class ST_Objects {
	protected String ST_Objects;
}

// CT_Sheets ...
public class CT_Sheets {
	@XmlElement(required = true, name = "sheet")
	protected List<CT_Sheet> Sheet;
}

// CT_Sheet ...
public class CT_Sheet {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "sheetId", required = true)
	protected Integer SheetIdAttr;
	@XmlAttribute(name = "state")
	protected String StateAttr;
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// ST_SheetState ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SheetState")
public class ST_SheetState {
	protected String ST_SheetState;
}

// CT_WorkbookPr ...
public class CT_WorkbookPr {
	@XmlAttribute(name = "date1904")
	protected Boolean Date1904Attr;
	@XmlAttribute(name = "showObjects")
	protected String ShowObjectsAttr;
	@XmlAttribute(name = "showBorderUnselectedTables")
	protected Boolean ShowBorderUnselectedTablesAttr;
	@XmlAttribute(name = "filterPrivacy")
	protected Boolean FilterPrivacyAttr;
	@XmlAttribute(name = "promptedSolutions")
	protected Boolean PromptedSolutionsAttr;
	@XmlAttribute(name = "showInkAnnotation")
	protected Boolean ShowInkAnnotationAttr;
	@XmlAttribute(name = "backupFile")
	protected Boolean BackupFileAttr;
	@XmlAttribute(name = "saveExternalLinkValues")
	protected Boolean SaveExternalLinkValuesAttr;
	@XmlAttribute(name = "updateLinks")
	protected String UpdateLinksAttr;
	@XmlAttribute(name = "codeName")
	protected String CodeNameAttr;
	@XmlAttribute(name = "hidePivotFieldList")
	protected Boolean HidePivotFieldListAttr;
	@XmlAttribute(name = "showPivotChartFilter")
	protected Boolean ShowPivotChartFilterAttr;
	@XmlAttribute(name = "allowRefreshQuery")
	protected Boolean AllowRefreshQueryAttr;
	@XmlAttribute(name = "publishItems")
	protected Boolean PublishItemsAttr;
	@XmlAttribute(name = "checkCompatibility")
	protected Boolean CheckCompatibilityAttr;
	@XmlAttribute(name = "autoCompressPictures")
	protected Boolean AutoCompressPicturesAttr;
	@XmlAttribute(name = "refreshAllConnections")
	protected Boolean RefreshAllConnectionsAttr;
	@XmlAttribute(name = "defaultThemeVersion")
	protected Integer DefaultThemeVersionAttr;
}

// ST_UpdateLinks ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_UpdateLinks")
public class ST_UpdateLinks {
	protected String ST_UpdateLinks;
}

// CT_SmartTagPr ...
public class CT_SmartTagPr {
	@XmlAttribute(name = "embed")
	protected Boolean EmbedAttr;
	@XmlAttribute(name = "show")
	protected String ShowAttr;
}

// ST_SmartTagShow ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SmartTagShow")
public class ST_SmartTagShow {
	protected String ST_SmartTagShow;
}

// CT_SmartTagTypes ...
public class CT_SmartTagTypes {
	@XmlElement(name = "smartTagType")
	protected List<CT_SmartTagType> SmartTagType;
}

// CT_SmartTagType ...
public class CT_SmartTagType {
	@XmlAttribute(name = "namespaceUri")
	protected String NamespaceUriAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "url")
	protected String UrlAttr;
}

// CT_FileRecoveryPr ...
public class CT_FileRecoveryPr {
	@XmlAttribute(name = "autoRecover")
	protected Boolean AutoRecoverAttr;
	@XmlAttribute(name = "crashSave")
	protected Boolean CrashSaveAttr;
	@XmlAttribute(name = "dataExtractLoad")
	protected Boolean DataExtractLoadAttr;
	@XmlAttribute(name = "repairLoad")
	protected Boolean RepairLoadAttr;
}

// CT_CalcPr ...
public class CT_CalcPr {
	@XmlAttribute(name = "calcId")
	protected Integer CalcIdAttr;
	@XmlAttribute(name = "calcMode")
	protected String CalcModeAttr;
	@XmlAttribute(name = "fullCalcOnLoad")
	protected Boolean FullCalcOnLoadAttr;
	@XmlAttribute(name = "refMode")
	protected String RefModeAttr;
	@XmlAttribute(name = "iterate")
	protected Boolean IterateAttr;
	@XmlAttribute(name = "iterateCount")
	protected Integer IterateCountAttr;
	@XmlAttribute(name = "iterateDelta")
	protected Float IterateDeltaAttr;
	@XmlAttribute(name = "fullPrecision")
	protected Boolean FullPrecisionAttr;
	@XmlAttribute(name = "calcCompleted")
	protected Boolean CalcCompletedAttr;
	@XmlAttribute(name = "calcOnSave")
	protected Boolean CalcOnSaveAttr;
	@XmlAttribute(name = "concurrentCalc")
	protected Boolean ConcurrentCalcAttr;
	@XmlAttribute(name = "concurrentManualCount")
	protected Integer ConcurrentManualCountAttr;
	@XmlAttribute(name = "forceFullCalc")
	protected Boolean ForceFullCalcAttr;
}

// ST_CalcMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CalcMode")
public class ST_CalcMode {
	protected String ST_CalcMode;
}

// ST_RefMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RefMode")
public class ST_RefMode {
	protected String ST_RefMode;
}

// CT_DefinedNames ...
public class CT_DefinedNames {
	@XmlElement(name = "definedName")
	protected List<CT_DefinedName> DefinedName;
}

// CT_DefinedName ...
public class CT_DefinedName {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "comment")
	protected String CommentAttr;
	@XmlAttribute(name = "customMenu")
	protected String CustomMenuAttr;
	@XmlAttribute(name = "description")
	protected String DescriptionAttr;
	@XmlAttribute(name = "help")
	protected String HelpAttr;
	@XmlAttribute(name = "statusBar")
	protected String StatusBarAttr;
	@XmlAttribute(name = "localSheetId")
	protected Integer LocalSheetIdAttr;
	@XmlAttribute(name = "hidden")
	protected Boolean HiddenAttr;
	@XmlAttribute(name = "function")
	protected Boolean FunctionAttr;
	@XmlAttribute(name = "vbProcedure")
	protected Boolean VbProcedureAttr;
	@XmlAttribute(name = "xlm")
	protected Boolean XlmAttr;
	@XmlAttribute(name = "functionGroupId")
	protected Integer FunctionGroupIdAttr;
	@XmlAttribute(name = "shortcutKey")
	protected String ShortcutKeyAttr;
	@XmlAttribute(name = "publishToServer")
	protected Boolean PublishToServerAttr;
	@XmlAttribute(name = "workbookParameter")
	protected Boolean WorkbookParameterAttr;
	@XmlValue
	protected String value;
}

// CT_ExternalReferences ...
public class CT_ExternalReferences {
	@XmlElement(required = true, name = "externalReference")
	protected List<CT_ExternalReference> ExternalReference;
}

// CT_ExternalReference ...
public class CT_ExternalReference {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_SheetBackgroundPicture ...
public class CT_SheetBackgroundPicture {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_PivotCaches ...
public class CT_PivotCaches {
	@XmlElement(required = true, name = "pivotCache")
	protected List<CT_PivotCache> PivotCache;
}

// CT_PivotCache ...
public class CT_PivotCache {
	@XmlAttribute(name = "cacheId", required = true)
	protected Integer CacheIdAttr;
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_FileSharing ...
public class CT_FileSharing {
	@XmlAttribute(name = "readOnlyRecommended")
	protected Boolean ReadOnlyRecommendedAttr;
	@XmlAttribute(name = "userName")
	protected String UserNameAttr;
	@XmlAttribute(name = "algorithmName")
	protected String AlgorithmNameAttr;
	@XmlAttribute(name = "hashValue")
	protected List<Byte> HashValueAttr;
	@XmlAttribute(name = "saltValue")
	protected List<Byte> SaltValueAttr;
	@XmlAttribute(name = "spinCount")
	protected Integer SpinCountAttr;
}

// CT_OleSize ...
public class CT_OleSize {
	@XmlAttribute(name = "ref", required = true)
	protected String RefAttr;
}

// CT_WorkbookProtection ...
public class CT_WorkbookProtection {
	@XmlAttribute(name = "lockStructure")
	protected Boolean LockStructureAttr;
	@XmlAttribute(name = "lockWindows")
	protected Boolean LockWindowsAttr;
	@XmlAttribute(name = "lockRevision")
	protected Boolean LockRevisionAttr;
	@XmlAttribute(name = "revisionsAlgorithmName")
	protected String RevisionsAlgorithmNameAttr;
	@XmlAttribute(name = "revisionsHashValue")
	protected List<Byte> RevisionsHashValueAttr;
	@XmlAttribute(name = "revisionsSaltValue")
	protected List<Byte> RevisionsSaltValueAttr;
	@XmlAttribute(name = "revisionsSpinCount")
	protected Integer RevisionsSpinCountAttr;
	@XmlAttribute(name = "workbookAlgorithmName")
	protected String WorkbookAlgorithmNameAttr;
	@XmlAttribute(name = "workbookHashValue")
	protected List<Byte> WorkbookHashValueAttr;
	@XmlAttribute(name = "workbookSaltValue")
	protected List<Byte> WorkbookSaltValueAttr;
	@XmlAttribute(name = "workbookSpinCount")
	protected Integer WorkbookSpinCountAttr;
}

// CT_WebPublishing ...
public class CT_WebPublishing {
	@XmlAttribute(name = "css")
	protected Boolean CssAttr;
	@XmlAttribute(name = "thicket")
	protected Boolean ThicketAttr;
	@XmlAttribute(name = "longFileNames")
	protected Boolean LongFileNamesAttr;
	@XmlAttribute(name = "vml")
	protected Boolean VmlAttr;
	@XmlAttribute(name = "allowPng")
	protected Boolean AllowPngAttr;
	@XmlAttribute(name = "targetScreenSize")
	protected String TargetScreenSizeAttr;
	@XmlAttribute(name = "dpi")
	protected Integer DpiAttr;
	@XmlAttribute(name = "characterSet")
	protected String CharacterSetAttr;
}

// ST_TargetScreenSize ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TargetScreenSize")
public class ST_TargetScreenSize {
	protected String ST_TargetScreenSize;
}

// CT_FunctionGroups ...
public class CT_FunctionGroups {
	@XmlAttribute(name = "builtInGroupCount")
	protected Integer BuiltInGroupCountAttr;
	@XmlElement(name = "functionGroup")
	protected List<CT_FunctionGroup> FunctionGroup;
}

// CT_FunctionGroup ...
public class CT_FunctionGroup {
	@XmlAttribute(name = "name")
	protected String NameAttr;
}

// CT_WebPublishObjects ...
public class CT_WebPublishObjects {
	@XmlAttribute(name = "count")
	protected Integer CountAttr;
	@XmlElement(required = true, name = "webPublishObject")
	protected List<CT_WebPublishObject> WebPublishObject;
}

// CT_WebPublishObject ...
public class CT_WebPublishObject {
	@XmlAttribute(name = "id", required = true)
	protected Integer IdAttr;
	@XmlAttribute(name = "divId", required = true)
	protected String DivIdAttr;
	@XmlAttribute(name = "sourceObject")
	protected String SourceObjectAttr;
	@XmlAttribute(name = "destinationFile", required = true)
	protected String DestinationFileAttr;
	@XmlAttribute(name = "title")
	protected String TitleAttr;
	@XmlAttribute(name = "autoRepublish")
	protected Boolean AutoRepublishAttr;
}
