// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "from")
public class From {
	protected CT_Marker From;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "to")
public class To {
	protected CT_Marker To;
}

// CT_AnchorClientData ...
public class CT_AnchorClientData {
	@XmlAttribute(name = "fLocksWithSheet")
	protected Boolean FLocksWithSheetAttr;
	@XmlAttribute(name = "fPrintsWithSheet")
	protected Boolean FPrintsWithSheetAttr;
}

// CT_ShapeNonVisual ...
public class CT_ShapeNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvSpPr")
	protected CT_NonVisualDrawingShapeProps CNvSpPr;
}

// CT_Shape ...
public class CT_Shape {
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "textlink")
	protected String TextlinkAttr;
	@XmlAttribute(name = "fLocksText")
	protected Boolean FLocksTextAttr;
	@XmlAttribute(name = "fPublished")
	protected Boolean FPublishedAttr;
	@XmlElement(required = true, name = "nvSpPr")
	protected CT_ShapeNonVisual NvSpPr;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(name = "txBody")
	protected CT_TextBody TxBody;
}

// CT_ConnectorNonVisual ...
public class CT_ConnectorNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvCxnSpPr")
	protected CT_NonVisualConnectorProperties CNvCxnSpPr;
}

// CT_Connector ...
public class CT_Connector {
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "fPublished")
	protected Boolean FPublishedAttr;
	@XmlElement(required = true, name = "nvCxnSpPr")
	protected CT_ConnectorNonVisual NvCxnSpPr;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(name = "style")
	protected CT_ShapeStyle Style;
}

// CT_PictureNonVisual ...
public class CT_PictureNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvPicPr")
	protected CT_NonVisualPictureProperties CNvPicPr;
}

// CT_Picture ...
public class CT_Picture {
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "fPublished")
	protected Boolean FPublishedAttr;
	@XmlElement(required = true, name = "nvPicPr")
	protected CT_PictureNonVisual NvPicPr;
	@XmlElement(required = true, name = "blipFill")
	protected CT_BlipFillProperties BlipFill;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(name = "style")
	protected CT_ShapeStyle Style;
}

// CT_GraphicalObjectFrameNonVisual ...
public class CT_GraphicalObjectFrameNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvGraphicFramePr")
	protected CT_NonVisualGraphicFrameProperties CNvGraphicFramePr;
}

// CT_GraphicalObjectFrame ...
public class CT_GraphicalObjectFrame {
	@XmlAttribute(name = "macro")
	protected String MacroAttr;
	@XmlAttribute(name = "fPublished")
	protected Boolean FPublishedAttr;
	@XmlElement(required = true, name = "nvGraphicFramePr")
	protected CT_GraphicalObjectFrameNonVisual NvGraphicFramePr;
	@XmlElement(required = true, name = "xfrm")
	protected CT_Transform2D Xfrm;
	@XmlElement(required = true, name = "a:graphic")
	protected CT_GraphicalObject AGraphic;
}

// CT_GroupShapeNonVisual ...
public class CT_GroupShapeNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvGrpSpPr")
	protected CT_NonVisualGroupDrawingShapeProps CNvGrpSpPr;
}

// CT_GroupShape ...
public class CT_GroupShape {
	@XmlElement(required = true, name = "nvGrpSpPr")
	protected CT_GroupShapeNonVisual NvGrpSpPr;
	@XmlElement(required = true, name = "grpSpPr")
	protected CT_GroupShapeProperties GrpSpPr;
	@XmlElement(name = "sp")
	protected List<CT_Shape> Sp;
	@XmlElement(name = "grpSp")
	protected List<CT_GroupShape> GrpSp;
	@XmlElement(name = "graphicFrame")
	protected List<CT_GraphicalObjectFrame> GraphicFrame;
	@XmlElement(name = "cxnSp")
	protected List<CT_Connector> CxnSp;
	@XmlElement(name = "pic")
	protected List<CT_Picture> Pic;
}

// EG_ObjectChoices ...
public class EG_ObjectChoices {
	@XmlElement(required = true, name = "sp")
	protected CT_Shape Sp;
	@XmlElement(required = true, name = "grpSp")
	protected CT_GroupShape GrpSp;
	@XmlElement(required = true, name = "graphicFrame")
	protected CT_GraphicalObjectFrame GraphicFrame;
	@XmlElement(required = true, name = "cxnSp")
	protected CT_Connector CxnSp;
	@XmlElement(required = true, name = "pic")
	protected CT_Picture Pic;
	@XmlElement(required = true, name = "contentPart")
	protected CT_Rel ContentPart;
}

// CT_Rel ...
public class CT_Rel {
	@XmlAttribute(required = true, name = "r:id")
	protected String RIdAttr;
}

// ST_ColID ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ColID")
public class ST_ColID {
	protected Integer ST_ColID;
}

// ST_RowID ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RowID")
public class ST_RowID {
	protected Integer ST_RowID;
}

// CT_Marker ...
public class CT_Marker {
	@XmlElement(required = true, name = "col")
	protected Integer Col;
	@XmlElement(required = true, name = "colOff")
	protected ST_Coordinate ColOff;
	@XmlElement(required = true, name = "row")
	protected Integer Row;
	@XmlElement(required = true, name = "rowOff")
	protected ST_Coordinate RowOff;
}

// ST_EditAs ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_EditAs")
public class ST_EditAs {
	protected String ST_EditAs;
}

// CT_TwoCellAnchor ...
public class CT_TwoCellAnchor {
	@XmlAttribute(name = "editAs")
	protected String EditAsAttr;
	protected EG_ObjectChoices EG_ObjectChoices;
	@XmlElement(required = true, name = "from")
	protected CT_Marker From;
	@XmlElement(required = true, name = "to")
	protected CT_Marker To;
	@XmlElement(required = true, name = "clientData")
	protected CT_AnchorClientData ClientData;
}

// CT_OneCellAnchor ...
public class CT_OneCellAnchor {
	protected EG_ObjectChoices EG_ObjectChoices;
	@XmlElement(required = true, name = "from")
	protected CT_Marker From;
	@XmlElement(required = true, name = "ext")
	protected CT_PositiveSize2D Ext;
	@XmlElement(required = true, name = "clientData")
	protected CT_AnchorClientData ClientData;
}

// CT_AbsoluteAnchor ...
public class CT_AbsoluteAnchor {
	protected EG_ObjectChoices EG_ObjectChoices;
	@XmlElement(required = true, name = "pos")
	protected CT_Point2D Pos;
	@XmlElement(required = true, name = "ext")
	protected CT_PositiveSize2D Ext;
	@XmlElement(required = true, name = "clientData")
	protected CT_AnchorClientData ClientData;
}

// EG_Anchor ...
public class EG_Anchor {
	@XmlElement(required = true, name = "twoCellAnchor")
	protected CT_TwoCellAnchor TwoCellAnchor;
	@XmlElement(required = true, name = "oneCellAnchor")
	protected CT_OneCellAnchor OneCellAnchor;
	@XmlElement(required = true, name = "absoluteAnchor")
	protected CT_AbsoluteAnchor AbsoluteAnchor;
}

// CT_Drawing ...
public class CT_Drawing {
	protected List<EG_Anchor> EG_Anchor;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "wsDr")
public class WsDr {
	protected CT_Drawing WsDr;
}
