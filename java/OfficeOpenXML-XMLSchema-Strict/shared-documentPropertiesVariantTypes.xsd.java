// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// ST_VectorBaseType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VectorBaseType")
public class ST_VectorBaseType {
	protected String ST_VectorBaseType;
}

// ST_ArrayBaseType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ArrayBaseType")
public class ST_ArrayBaseType {
	protected String ST_ArrayBaseType;
}

// ST_Cy ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Cy")
public class ST_Cy {
	protected String ST_Cy;
}

// ST_Error ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Error")
public class ST_Error {
	protected String ST_Error;
}

// CT_Empty ...
public class CT_Empty {
}

// CT_Null ...
public class CT_Null {
}

// CT_Vector ...
public class CT_Vector {
	@XmlAttribute(required = true, name = "baseType")
	protected String BaseTypeAttr;
	@XmlAttribute(required = true, name = "size")
	protected Integer SizeAttr;
	@XmlElement(name = "variant")
	protected List<CT_Variant> Variant;
	@XmlElement(name = "i1")
	protected List<Byte> I1;
	@XmlElement(name = "i2")
	protected List<Integer> I2;
	@XmlElement(name = "i4")
	protected List<Integer> I4;
	@XmlElement(name = "i8")
	protected List<Long> I8;
	@XmlElement(name = "ui1")
	protected List<Byte> Ui1;
	@XmlElement(name = "ui2")
	protected List<Short> Ui2;
	@XmlElement(name = "ui4")
	protected List<Integer> Ui4;
	@XmlElement(name = "ui8")
	protected List<Long> Ui8;
	@XmlElement(name = "r4")
	protected List<Float> R4;
	@XmlElement(name = "r8")
	protected List<Float> R8;
	@XmlElement(name = "lpstr")
	protected List<String> Lpstr;
	@XmlElement(name = "lpwstr")
	protected List<String> Lpwstr;
	@XmlElement(name = "bstr")
	protected List<String> Bstr;
	@XmlElement(name = "date")
	protected List<String> Date;
	@XmlElement(name = "filetime")
	protected List<String> Filetime;
	@XmlElement(name = "bool")
	protected List<Boolean> Bool;
	@XmlElement(name = "cy")
	protected List<String> Cy;
	@XmlElement(name = "error")
	protected List<String> Error;
	@XmlElement(name = "clsid")
	protected List<String> Clsid;
}

// CT_Array ...
public class CT_Array {
	@XmlAttribute(required = true, name = "lBounds")
	protected Integer LBoundsAttr;
	@XmlAttribute(required = true, name = "uBounds")
	protected Integer UBoundsAttr;
	@XmlAttribute(required = true, name = "baseType")
	protected String BaseTypeAttr;
	@XmlElement(name = "variant")
	protected List<CT_Variant> Variant;
	@XmlElement(name = "i1")
	protected List<Byte> I1;
	@XmlElement(name = "i2")
	protected List<Integer> I2;
	@XmlElement(name = "i4")
	protected List<Integer> I4;
	@XmlElement(name = "int")
	protected List<Integer> Int;
	@XmlElement(name = "ui1")
	protected List<Byte> Ui1;
	@XmlElement(name = "ui2")
	protected List<Short> Ui2;
	@XmlElement(name = "ui4")
	protected List<Integer> Ui4;
	@XmlElement(name = "uint")
	protected List<Integer> Uint;
	@XmlElement(name = "r4")
	protected List<Float> R4;
	@XmlElement(name = "r8")
	protected List<Float> R8;
	@XmlElement(name = "decimal")
	protected List<Float> Decimal;
	@XmlElement(name = "bstr")
	protected List<String> Bstr;
	@XmlElement(name = "date")
	protected List<String> Date;
	@XmlElement(name = "bool")
	protected List<Boolean> Bool;
	@XmlElement(name = "error")
	protected List<String> Error;
	@XmlElement(name = "cy")
	protected List<String> Cy;
}

// CT_Variant ...
public class CT_Variant {
	@XmlElement(name = "variant")
	protected CT_Variant Variant;
	@XmlElement(name = "vector")
	protected CT_Vector Vector;
	@XmlElement(name = "array")
	protected CT_Array Array;
	@XmlElement(name = "blob")
	protected List<Byte> Blob;
	@XmlElement(name = "oblob")
	protected List<Byte> Oblob;
	@XmlElement(name = "empty")
	protected CT_Empty Empty;
	@XmlElement(name = "null")
	protected CT_Null Null;
	@XmlElement(name = "i1")
	protected Byte I1;
	@XmlElement(name = "i2")
	protected Integer I2;
	@XmlElement(name = "i4")
	protected Integer I4;
	@XmlElement(name = "i8")
	protected Long I8;
	@XmlElement(name = "int")
	protected Integer Int;
	@XmlElement(name = "ui1")
	protected Byte Ui1;
	@XmlElement(name = "ui2")
	protected Short Ui2;
	@XmlElement(name = "ui4")
	protected Integer Ui4;
	@XmlElement(name = "ui8")
	protected Long Ui8;
	@XmlElement(name = "uint")
	protected Integer Uint;
	@XmlElement(name = "r4")
	protected Float R4;
	@XmlElement(name = "r8")
	protected Float R8;
	@XmlElement(name = "decimal")
	protected Float Decimal;
	@XmlElement(name = "lpstr")
	protected String Lpstr;
	@XmlElement(name = "lpwstr")
	protected String Lpwstr;
	@XmlElement(name = "bstr")
	protected String Bstr;
	@XmlElement(name = "date")
	protected String Date;
	@XmlElement(name = "filetime")
	protected String Filetime;
	@XmlElement(name = "bool")
	protected Boolean Bool;
	@XmlElement(name = "cy")
	protected String Cy;
	@XmlElement(name = "error")
	protected String Error;
	@XmlElement(name = "stream")
	protected List<Byte> Stream;
	@XmlElement(name = "ostream")
	protected List<Byte> Ostream;
	@XmlElement(name = "storage")
	protected List<Byte> Storage;
	@XmlElement(name = "ostorage")
	protected List<Byte> Ostorage;
	@XmlElement(name = "vstream")
	protected CT_Vstream Vstream;
	@XmlElement(name = "clsid")
	protected String Clsid;
}

// CT_Vstream ...
public class CT_Vstream {
	@XmlAttribute(name = "version")
	protected String VersionAttr;
	@XmlValue
	protected List<Byte> value;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "variant")
public class Variant {
	protected CT_Variant Variant;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "vector")
public class Vector {
	protected CT_Vector Vector;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "array")
public class Array {
	protected CT_Array Array;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "blob")
public class Blob {
	protected List<Byte> Blob;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "oblob")
public class Oblob {
	protected List<Byte> Oblob;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "empty")
public class Empty {
	protected CT_Empty Empty;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "null")
public class Null {
	protected CT_Null Null;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "i1")
public class I1 {
	protected Byte I1;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "i2")
public class I2 {
	protected Integer I2;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "i4")
public class I4 {
	protected Integer I4;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "i8")
public class I8 {
	protected Long I8;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "int")
public class Int {
	protected Integer Int;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ui1")
public class Ui1 {
	protected Byte Ui1;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ui2")
public class Ui2 {
	protected Short Ui2;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ui4")
public class Ui4 {
	protected Integer Ui4;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ui8")
public class Ui8 {
	protected Long Ui8;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "uint")
public class Uint {
	protected Integer Uint;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "r4")
public class R4 {
	protected Float R4;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "r8")
public class R8 {
	protected Float R8;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "decimal")
public class Decimal {
	protected Float Decimal;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "lpstr")
public class Lpstr {
	protected String Lpstr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "lpwstr")
public class Lpwstr {
	protected String Lpwstr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "bstr")
public class Bstr {
	protected String Bstr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "date")
public class Date {
	protected String Date;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "filetime")
public class Filetime {
	protected String Filetime;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "bool")
public class Bool {
	protected Boolean Bool;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "cy")
public class Cy {
	protected String Cy;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "error")
public class Error {
	protected String Error;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "stream")
public class Stream {
	protected List<Byte> Stream;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ostream")
public class Ostream {
	protected List<Byte> Ostream;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "storage")
public class Storage {
	protected List<Byte> Storage;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ostorage")
public class Ostorage {
	protected List<Byte> Ostorage;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "vstream")
public class Vstream {
	protected CT_Vstream Vstream;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "clsid")
public class Clsid {
	protected String Clsid;
}
