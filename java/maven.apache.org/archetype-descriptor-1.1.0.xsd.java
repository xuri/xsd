// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "archetype-descriptor")
public class Archetypedescriptor {
	protected ArchetypeDescriptor Archetypedescriptor;
}

// RequiredProperties is List of required properties to generate a project from this archetype.
public class RequiredProperties {
	@XmlElement(required = true, name = "requiredProperty")
	protected List<RequiredProperty> RequiredProperty;
}

// FileSets is File sets definition.
public class FileSets {
	@XmlElement(required = true, name = "fileSet")
	protected List<FileSet> FileSet;
}

// Modules is Modules definition.
public class Modules {
	@XmlElement(required = true, name = "module")
	protected List<ModuleDescriptor> Module;
}

// ArchetypeDescriptor is 1.0.0+
public class ArchetypeDescriptor {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlAttribute(name = "partial")
	protected Boolean PartialAttr;
	@XmlElement(required = true, name = "requiredProperties")
	protected RequiredProperties RequiredProperties;
	@XmlElement(required = true, name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(required = true, name = "modules")
	protected Modules Modules;
}

// RequiredProperty is A regular expression used to validate the property.
public class RequiredProperty {
	@XmlAttribute(name = "key", required = true)
	protected String KeyAttr;
	@XmlElement(required = true, name = "defaultValue")
	protected String DefaultValue;
	@XmlElement(required = true, name = "validationRegex")
	protected String ValidationRegex;
}

// ModuleDescriptor is 1.0.0+
public class ModuleDescriptor {
	@XmlAttribute(name = "id", required = true)
	protected String IdAttr;
	@XmlAttribute(name = "dir", required = true)
	protected String DirAttr;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlElement(required = true, name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(required = true, name = "modules")
	protected Modules Modules;
}

// Includes is Inclusion definition "à la" Ant.
public class Includes {
	@XmlElement(required = true, name = "include")
	protected List<String> Include;
}

// Excludes is Exclusion definition "à la" Ant.
public class Excludes {
	@XmlElement(required = true, name = "exclude")
	protected List<String> Exclude;
}

// FileSet is The directory where the files will be searched for, which is also the directory where the
//            project's files will be generated.
public class FileSet {
	@XmlAttribute(name = "filtered")
	protected Boolean FilteredAttr;
	@XmlAttribute(name = "packaged")
	protected Boolean PackagedAttr;
	@XmlAttribute(name = "encoding")
	protected String EncodingAttr;
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
}
