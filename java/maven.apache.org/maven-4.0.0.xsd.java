// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "project")
public class Project {
	protected Model Project;
}

// Licenses is This element describes all of the licenses for this project.
//             Each license is described by a <code>license</code> element, which
//             is then described by additional elements.
//             Projects should only list the license(s) that applies to the project
//             and not the licenses that apply to dependencies.
//             If multiple licenses are listed, it is assumed that the user can select
//             any of them, not that they must accept all.
public class Licenses {
	@XmlElement(required = true, name = "license")
	protected List<License> License;
}

// Developers is Describes the committers of a project.
public class Developers {
	@XmlElement(required = true, name = "developer")
	protected List<Developer> Developer;
}

// Contributors is Describes the contributors to a project that are not yet committers.
public class Contributors {
	@XmlElement(required = true, name = "contributor")
	protected List<Contributor> Contributor;
}

// MailingLists is Contains information about a project's mailing lists.
public class MailingLists {
	@XmlElement(required = true, name = "mailingList")
	protected List<MailingList> MailingList;
}

// Modules is The modules (sometimes called subprojects) to build as a part of this
//             project. Each module listed is a relative path to the directory containing the module.
//             To be consistent with the way default urls are calculated from parent, it is recommended
//             to have module names match artifact ids.
public class Modules {
	@XmlElement(required = true, name = "module")
	protected List<String> Module;
}

// Properties is Properties that can be used throughout the POM as a substitution, and
//             are used as filters in resources if enabled.
//             The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.
public class Properties {
}

// Dependencies is This element describes all of the dependencies associated with a
//             project.
//             These dependencies are used to construct a classpath for your
//             project during the build process. They are automatically downloaded from the
//             repositories defined in this project.
//             See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
//             dependency mechanism</a> for more information.
public class Dependencies {
	@XmlElement(required = true, name = "dependency")
	protected List<Dependency> Dependency;
}

// Repositories is The lists of the remote repositories for discovering dependencies and
//             extensions.
public class Repositories {
	@XmlElement(required = true, name = "repository")
	protected List<Repository> Repository;
}

// PluginRepositories is The lists of the remote repositories for discovering plugins for builds and
//             reports.
public class PluginRepositories {
	@XmlElement(required = true, name = "pluginRepository")
	protected List<Repository> PluginRepository;
}

// Reports is <b>Deprecated</b>. Now ignored by Maven.
public class Reports {
}

// Profiles is A listing of project-local build profiles which will modify the build process
//             when activated.
public class Profiles {
	@XmlElement(required = true, name = "profile")
	protected List<Profile> Profile;
}

// Model is This element describes various attributes of the organization to which the
//             project belongs. These attributes are utilized when documentation is created (for
//             copyright notices and links).
public class Model {
	@XmlAttribute(name = "child.project.url.inherit.append.path")
	protected String ChildProjectUrlInheritAppendPathAttr;
	@XmlElement(required = true, name = "modelVersion")
	protected String ModelVersion;
	@XmlElement(required = true, name = "parent")
	protected Parent Parent;
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "packaging")
	protected String Packaging;
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "description")
	protected String Description;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "inceptionYear")
	protected String InceptionYear;
	@XmlElement(required = true, name = "organization")
	protected Organization Organization;
	@XmlElement(required = true, name = "licenses")
	protected Licenses Licenses;
	@XmlElement(required = true, name = "developers")
	protected Developers Developers;
	@XmlElement(required = true, name = "contributors")
	protected Contributors Contributors;
	@XmlElement(required = true, name = "mailingLists")
	protected MailingLists MailingLists;
	@XmlElement(required = true, name = "prerequisites")
	protected Prerequisites Prerequisites;
	@XmlElement(required = true, name = "modules")
	protected Modules Modules;
	@XmlElement(required = true, name = "scm")
	protected Scm Scm;
	@XmlElement(required = true, name = "issueManagement")
	protected IssueManagement IssueManagement;
	@XmlElement(required = true, name = "ciManagement")
	protected CiManagement CiManagement;
	@XmlElement(required = true, name = "distributionManagement")
	protected DistributionManagement DistributionManagement;
	@XmlElement(required = true, name = "properties")
	protected Properties Properties;
	@XmlElement(required = true, name = "dependencyManagement")
	protected DependencyManagement DependencyManagement;
	@XmlElement(required = true, name = "dependencies")
	protected Dependencies Dependencies;
	@XmlElement(required = true, name = "repositories")
	protected Repositories Repositories;
	@XmlElement(required = true, name = "pluginRepositories")
	protected PluginRepositories PluginRepositories;
	@XmlElement(required = true, name = "build")
	protected Build Build;
	@XmlElement(required = true, name = "reports")
	protected Reports Reports;
	@XmlElement(required = true, name = "reporting")
	protected Reporting Reporting;
	@XmlElement(required = true, name = "profiles")
	protected Profiles Profiles;
}

// License is Addendum information pertaining to this license.
public class License {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "distribution")
	protected String Distribution;
	@XmlElement(required = true, name = "comments")
	protected String Comments;
}

// Notifiers is Configuration for notifying developers/users when a build is unsuccessful,
//             including user information and notification mode.
public class Notifiers {
	@XmlElement(required = true, name = "notifier")
	protected List<Notifier> Notifier;
}

// CiManagement is URL for the continuous integration system used by the project if it has a web
//             interface.
public class CiManagement {
	@XmlElement(required = true, name = "system")
	protected String System;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "notifiers")
	protected Notifiers Notifiers;
}

// Configuration is Extended configuration specific to this notifier goes here.
public class Configuration {
}

// Notifier is <b>Deprecated</b>. Where to send the notification to - eg email address.
public class Notifier {
	@XmlElement(required = true, name = "type")
	protected String Type;
	@XmlElement(required = true, name = "sendOnError")
	protected Boolean SendOnError;
	@XmlElement(required = true, name = "sendOnFailure")
	protected Boolean SendOnFailure;
	@XmlElement(required = true, name = "sendOnSuccess")
	protected Boolean SendOnSuccess;
	@XmlElement(required = true, name = "sendOnWarning")
	protected Boolean SendOnWarning;
	@XmlElement(required = true, name = "address")
	protected String Address;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// Scm is The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             scm's <code>child.scm.url.inherit.append.path="false"</code>
public class Scm {
	@XmlAttribute(name = "child.scm.connection.inherit.append.path")
	protected String ChildScmConnectionInheritAppendPathAttr;
	@XmlAttribute(name = "child.scm.developerConnection.inherit.append.path")
	protected String ChildScmDeveloperConnectionInheritAppendPathAttr;
	@XmlAttribute(name = "child.scm.url.inherit.append.path")
	protected String ChildScmUrlInheritAppendPathAttr;
	@XmlElement(required = true, name = "connection")
	protected String Connection;
	@XmlElement(required = true, name = "developerConnection")
	protected String DeveloperConnection;
	@XmlElement(required = true, name = "tag")
	protected String Tag;
	@XmlElement(required = true, name = "url")
	protected String Url;
}

// IssueManagement is URL for the issue management system used by the project.
public class IssueManagement {
	@XmlElement(required = true, name = "system")
	protected String System;
	@XmlElement(required = true, name = "url")
	protected String Url;
}

// DependencyManagement is Section for management of default dependency information for use in a group of
//         POMs.
public class DependencyManagement {
	@XmlElement(required = true, name = "dependencies")
	protected Dependencies Dependencies;
}

// Exclusions is Lists a set of artifacts that should be excluded from this dependency's
//             artifact list when it comes to calculating transitive dependencies.
public class Exclusions {
	@XmlElement(required = true, name = "exclusion")
	protected List<Exclusion> Exclusion;
}

// Dependency is FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
//             and may be replaced in later versions. This specifies the path on the filesystem
//             for this dependency.
//             Requires an absolute path for the value, not relative.
//             Use a property that gives the machine specific absolute path,
//             e.g. <code>${java.home}</code>.
public class Dependency {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "type")
	protected String Type;
	@XmlElement(required = true, name = "classifier")
	protected String Classifier;
	@XmlElement(required = true, name = "scope")
	protected String Scope;
	@XmlElement(required = true, name = "systemPath")
	protected String SystemPath;
	@XmlElement(required = true, name = "exclusions")
	protected Exclusions Exclusions;
	@XmlElement(required = true, name = "optional")
	protected String Optional;
}

// Exclusion is The group ID of the project to exclude.
public class Exclusion {
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
}

// Parent is The relative path of the parent <code>pom.xml</code> file within the check out.
//             If not specified, it defaults to <code>../pom.xml</code>.
//             Maven looks for the parent POM first in this location on
//             the filesystem, then the local repository, and lastly in the remote repo.
//             <code>relativePath</code> allows you to select a different location,
//             for example when your structure is flat, or deeper without an intermediate parent POM.
//             However, the group ID, artifact ID and version are still required,
//             and must match the file in the location given or it will revert to the repository for the POM.
//             This feature is only for enhancing the development in a local checkout of that project.
//             Set the value to an empty string in case you want to disable the feature and always resolve
//             the parent POM from the repositories.
public class Parent {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "relativePath")
	protected String RelativePath;
}

// Roles is The roles the contributor plays in the project. Each role is described by a
//             <code>role</code> element, the body of which is a role name. This can also be used to
//             describe the contribution.
public class Roles {
	@XmlElement(required = true, name = "role")
	protected List<String> Role;
}

// Developer is The URL of the organization.
public class Developer {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "email")
	protected String Email;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "organization")
	protected String Organization;
	@XmlElement(required = true, name = "organizationUrl")
	protected String OrganizationUrl;
	@XmlElement(required = true, name = "roles")
	protected Roles Roles;
	@XmlElement(required = true, name = "timezone")
	protected String Timezone;
	@XmlElement(required = true, name = "properties")
	protected Properties Properties;
}

// OtherArchives is The link to alternate URLs where you can browse the list archive.
public class OtherArchives {
	@XmlElement(required = true, name = "otherArchive")
	protected List<String> OtherArchive;
}

// MailingList is The link to a URL where you can browse the mailing list archive.
public class MailingList {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "subscribe")
	protected String Subscribe;
	@XmlElement(required = true, name = "unsubscribe")
	protected String Unsubscribe;
	@XmlElement(required = true, name = "post")
	protected String Post;
	@XmlElement(required = true, name = "archive")
	protected String Archive;
	@XmlElement(required = true, name = "otherArchives")
	protected OtherArchives OtherArchives;
}

// Contributor is The URL of the organization.
public class Contributor {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "email")
	protected String Email;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "organization")
	protected String Organization;
	@XmlElement(required = true, name = "organizationUrl")
	protected String OrganizationUrl;
	@XmlElement(required = true, name = "roles")
	protected Roles Roles;
	@XmlElement(required = true, name = "timezone")
	protected String Timezone;
	@XmlElement(required = true, name = "properties")
	protected Properties Properties;
}

// Organization is The URL to the organization's home page.
public class Organization {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "url")
	protected String Url;
}

// DistributionManagement is Gives the status of this artifact in the remote repository.
//             This must not be set in your local project, as it is updated by
//             tools placing it in the reposiory. Valid values are: <code>none</code> (default),
//             <code>converted</code> (repository manager converted this from an Maven 1 POM),
//             <code>partner</code>
//             (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
//             instance), <code>verified</code> (has been hand verified as correct and final).
public class DistributionManagement {
	@XmlElement(required = true, name = "repository")
	protected DeploymentRepository Repository;
	@XmlElement(required = true, name = "snapshotRepository")
	protected DeploymentRepository SnapshotRepository;
	@XmlElement(required = true, name = "site")
	protected Site Site;
	@XmlElement(required = true, name = "downloadUrl")
	protected String DownloadUrl;
	@XmlElement(required = true, name = "relocation")
	protected Relocation Relocation;
	@XmlElement(required = true, name = "status")
	protected String Status;
}

// DeploymentRepository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
public class DeploymentRepository {
	@XmlElement(required = true, name = "uniqueVersion")
	protected Boolean UniqueVersion;
	@XmlElement(required = true, name = "releases")
	protected RepositoryPolicy Releases;
	@XmlElement(required = true, name = "snapshots")
	protected RepositoryPolicy Snapshots;
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "layout")
	protected String Layout;
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails. Valid values are
//             <code>ignore</code>
//             ,
//             <code>fail</code>
//             or
//             <code>warn</code>
//             (the default).
public class RepositoryPolicy {
	@XmlElement(required = true, name = "enabled")
	protected String Enabled;
	@XmlElement(required = true, name = "updatePolicy")
	protected String UpdatePolicy;
	@XmlElement(required = true, name = "checksumPolicy")
	protected String ChecksumPolicy;
}

// Relocation is An additional message to show the user about the move, such as the reason.
public class Relocation {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "message")
	protected String Message;
}

// Site is The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             site's <code>child.site.url.inherit.append.path="false"</code>
public class Site {
	@XmlAttribute(name = "child.site.url.inherit.append.path")
	protected String ChildSiteUrlInheritAppendPathAttr;
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "url")
	protected String Url;
}

// Plugins is The reporting plugins to use and their configuration.
public class Plugins {
	@XmlElement(required = true, name = "plugin")
	protected List<ReportPlugin> Plugin;
}

// Reporting is Where to store all of the generated reports. The default is
//             <code>${project.build.directory}/site</code>.
public class Reporting {
	@XmlElement(required = true, name = "excludeDefaults")
	protected String ExcludeDefaults;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "plugins")
	protected Plugins Plugins;
}

// ReportSets is Multiple specifications of a set of reports, each having (possibly) different
//             configuration. This is the reporting parallel to an <code>execution</code> in the build.
public class ReportSets {
	@XmlElement(required = true, name = "reportSet")
	protected List<ReportSet> ReportSet;
}

// ReportPlugin is The version of the reporting plugin to be used.
public class ReportPlugin {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "reportSets")
	protected ReportSets ReportSets;
	@XmlElement(required = true, name = "inherited")
	protected String Inherited;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// ReportSet is The unique id for this report set, to be used during POM inheritance and profile injection
//             for merging of report sets.
public class ReportSet {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "reports")
	protected Reports Reports;
	@XmlElement(required = true, name = "inherited")
	protected String Inherited;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// Profile is Information required to build the project.
public class Profile {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "activation")
	protected Activation Activation;
	@XmlElement(required = true, name = "build")
	protected BuildBase Build;
	@XmlElement(required = true, name = "modules")
	protected Modules Modules;
	@XmlElement(required = true, name = "distributionManagement")
	protected DistributionManagement DistributionManagement;
	@XmlElement(required = true, name = "properties")
	protected Properties Properties;
	@XmlElement(required = true, name = "dependencyManagement")
	protected DependencyManagement DependencyManagement;
	@XmlElement(required = true, name = "dependencies")
	protected Dependencies Dependencies;
	@XmlElement(required = true, name = "repositories")
	protected Repositories Repositories;
	@XmlElement(required = true, name = "pluginRepositories")
	protected PluginRepositories PluginRepositories;
	@XmlElement(required = true, name = "reports")
	protected Reports Reports;
	@XmlElement(required = true, name = "reporting")
	protected Reporting Reporting;
}

// Activation is Specifies that this profile will be activated based on existence of a file.
public class Activation {
	@XmlElement(required = true, name = "activeByDefault")
	protected Boolean ActiveByDefault;
	@XmlElement(required = true, name = "jdk")
	protected String Jdk;
	@XmlElement(required = true, name = "os")
	protected ActivationOS Os;
	@XmlElement(required = true, name = "property")
	protected ActivationProperty Property;
	@XmlElement(required = true, name = "file")
	protected ActivationFile File;
}

// ActivationProperty is The value of the property required to activate a profile.
public class ActivationProperty {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "value")
	protected String Value;
}

// ActivationFile is The name of the file that must exist to activate the profile.
public class ActivationFile {
	@XmlElement(required = true, name = "missing")
	protected String Missing;
	@XmlElement(required = true, name = "exists")
	protected String Exists;
}

// ActivationOS is The version of the operating system to be used to activate the
//           profile.
public class ActivationOS {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "family")
	protected String Family;
	@XmlElement(required = true, name = "arch")
	protected String Arch;
	@XmlElement(required = true, name = "version")
	protected String Version;
}

// Repository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
public class Repository {
	@XmlElement(required = true, name = "releases")
	protected RepositoryPolicy Releases;
	@XmlElement(required = true, name = "snapshots")
	protected RepositoryPolicy Snapshots;
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "url")
	protected String Url;
	@XmlElement(required = true, name = "layout")
	protected String Layout;
}

// Resources is This element describes all of the classpath resources such as properties
//             files associated with a project. These resources are often included in the final
//             package.
//             The default value is <code>src/main/resources</code>.
public class Resources {
	@XmlElement(required = true, name = "resource")
	protected List<Resource> Resource;
}

// TestResources is This element describes all of the classpath resources such as properties
//             files associated with a project's unit tests.
//             The default value is <code>src/test/resources</code>.
public class TestResources {
	@XmlElement(required = true, name = "testResource")
	protected List<Resource> TestResource;
}

// Filters is The list of filter properties files that are used when filtering is enabled.
public class Filters {
	@XmlElement(required = true, name = "filter")
	protected List<String> Filter;
}

// BuildBase is The default goal (or phase in Maven 2) to execute when none is specified for
//             the project. Note that in case of a multi-module build, only the default goal of the top-level
//             project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
//             multiple goals/phases can be separated by whitespace.
public class BuildBase {
	@XmlElement(required = true, name = "defaultGoal")
	protected String DefaultGoal;
	@XmlElement(required = true, name = "resources")
	protected Resources Resources;
	@XmlElement(required = true, name = "testResources")
	protected TestResources TestResources;
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "finalName")
	protected String FinalName;
	@XmlElement(required = true, name = "filters")
	protected Filters Filters;
	@XmlElement(required = true, name = "pluginManagement")
	protected PluginManagement PluginManagement;
	@XmlElement(required = true, name = "plugins")
	protected Plugins Plugins;
}

// Executions is Multiple specifications of a set of goals to execute during the build
//             lifecycle, each having (possibly) a different configuration.
public class Executions {
	@XmlElement(required = true, name = "execution")
	protected List<PluginExecution> Execution;
}

// Goals is <b>Deprecated</b>. Unused by Maven.
public class Goals {
}

// Plugin is Whether to load Maven extensions (such as packaging and type handlers) from
//             this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
//             of this field is <code>String</code> for technical reasons, the semantic type is actually
//             <code>Boolean</code>. Default value is <code>false</code>.
public class Plugin {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "extensions")
	protected String Extensions;
	@XmlElement(required = true, name = "executions")
	protected Executions Executions;
	@XmlElement(required = true, name = "dependencies")
	protected Dependencies Dependencies;
	@XmlElement(required = true, name = "goals")
	protected Goals Goals;
	@XmlElement(required = true, name = "inherited")
	protected String Inherited;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// PluginExecution is The build lifecycle phase to bind the goals in this execution to. If omitted,
//             the goals will be bound to the default phase specified by the plugin.
public class PluginExecution {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "phase")
	protected String Phase;
	@XmlElement(required = true, name = "goals")
	protected Goals Goals;
	@XmlElement(required = true, name = "inherited")
	protected String Inherited;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// Includes is A list of patterns to include, e.g. <code>**&#47;*.xml</code>.
public class Includes {
	@XmlElement(required = true, name = "include")
	protected List<String> Include;
}

// Excludes is A list of patterns to exclude, e.g. <code>**&#47;*.xml</code>
public class Excludes {
	@XmlElement(required = true, name = "exclude")
	protected List<String> Exclude;
}

// Resource is Describe the directory where the resources are stored. The path is relative
//             to the POM.
public class Resource {
	@XmlElement(required = true, name = "targetPath")
	protected String TargetPath;
	@XmlElement(required = true, name = "filtering")
	protected String Filtering;
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
}

// PluginManagement is Section for management of default plugin information for use in a group of POMs.
public class PluginManagement {
	@XmlElement(required = true, name = "plugins")
	protected Plugins Plugins;
}

// Prerequisites is For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
//             Maven required to use the resulting plugin.<br>
public class Prerequisites {
	@XmlElement(required = true, name = "maven")
	protected String Maven;
}

// Extensions is A set of build extensions to use from this project.
public class Extensions {
	@XmlElement(required = true, name = "extension")
	protected List<Extension> Extension;
}

// Build is The directory where compiled test classes are placed.
//             The default value is <code>target/test-classes</code>.
public class Build {
	@XmlElement(required = true, name = "sourceDirectory")
	protected String SourceDirectory;
	@XmlElement(required = true, name = "scriptSourceDirectory")
	protected String ScriptSourceDirectory;
	@XmlElement(required = true, name = "testSourceDirectory")
	protected String TestSourceDirectory;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "testOutputDirectory")
	protected String TestOutputDirectory;
	@XmlElement(required = true, name = "extensions")
	protected Extensions Extensions;
	@XmlElement(required = true, name = "defaultGoal")
	protected String DefaultGoal;
	@XmlElement(required = true, name = "resources")
	protected Resources Resources;
	@XmlElement(required = true, name = "testResources")
	protected TestResources TestResources;
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "finalName")
	protected String FinalName;
	@XmlElement(required = true, name = "filters")
	protected Filters Filters;
	@XmlElement(required = true, name = "pluginManagement")
	protected PluginManagement PluginManagement;
	@XmlElement(required = true, name = "plugins")
	protected Plugins Plugins;
}

// Extension is The version of the extension.
public class Extension {
	@XmlElement(required = true, name = "groupId")
	protected String GroupId;
	@XmlElement(required = true, name = "artifactId")
	protected String ArtifactId;
	@XmlElement(required = true, name = "version")
	protected String Version;
}
