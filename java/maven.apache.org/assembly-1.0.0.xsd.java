// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "assembly")
public class Assembly {
	protected Assembly Assembly;
}

// Formats is Specify the formats of the assembly.  A format is specified by 
//             supplying one of the following values in a &lt;format&gt; subelement:
//             <ul>
//               <li><b>"zip"</b> - Creates a ZIP file format</li>
//               <li><b>"gz"</b> - Creates a GZIP format</li>
//               <li><b>"tar"</b> - Creates a TAR format</li>
//               <li><b>"tar.gz"</b> - Creates a gzip'd TAR format</li>
//               <li><b>"tar.bz2</b> - Creates a bzip'd TAR format</li>
//             </ul>
public class Formats {
	@XmlElement(name = "format")
	protected List<String> Format;
}

// ModuleSets is Specify which modules source files to include in the assembly
public class ModuleSets {
	@XmlElement(name = "moduleSet")
	protected List<ModuleSet> ModuleSet;
}

// FileSets is Specify assembly parameters for groups of files.
public class FileSets {
	@XmlElement(name = "fileSet")
	protected List<FileSet> FileSet;
}

// Files is Specify assembly parameters for single files.
public class Files {
	@XmlElement(name = "file")
	protected List<FileItem> File;
}

// DependencySets is Specify assembly behavior for sets of dependencies.
public class DependencySets {
	@XmlElement(name = "dependencySet")
	protected List<DependencySet> DependencySet;
}

// Repositories is Specify assembly behavior for sets of repositories.
public class Repositories {
	@XmlElement(name = "repository")
	protected List<Repository> Repository;
}

// ComponentDescriptors is File relative to basedir containing Component.
public class ComponentDescriptors {
	@XmlElement(name = "componentDescriptor")
	protected List<String> ComponentDescriptor;
}

// Assembly2 is The id of this assembly. This is a symbolic name for a
//             particular assembly of files from this project.
public class Assembly2 {
	@XmlElement(name = "id")
	protected String Id;
	@XmlElement(name = "formats")
	protected Formats Formats;
	@XmlElement(name = "includeBaseDirectory")
	protected Boolean IncludeBaseDirectory;
	@XmlElement(name = "includeSiteDirectory")
	protected Boolean IncludeSiteDirectory;
	@XmlElement(name = "moduleSets")
	protected ModuleSets ModuleSets;
	@XmlElement(name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(name = "files")
	protected Files Files;
	@XmlElement(name = "dependencySets")
	protected DependencySets DependencySets;
	@XmlElement(name = "repositories")
	protected Repositories Repositories;
	@XmlElement(name = "componentDescriptors")
	protected ComponentDescriptors ComponentDescriptors;
}

// GroupVersionAlignments is Align a group to a version or an individual artifact.
public class GroupVersionAlignments {
	@XmlElement(name = "groupVersionAlignment")
	protected List<GroupVersionAlignment> GroupVersionAlignment;
}

// Includes is When &lt;include&gt; subelements are present, they define
//             a set of files and directory to include.
public class Includes {
	@XmlElement(name = "include")
	protected List<String> Include;
}

// Excludes is When &lt;exclude&gt; subelements are present, they define
//             a set of files and directory to exclude.
public class Excludes {
	@XmlElement(name = "exclude")
	protected List<String> Exclude;
}

// Repository is If set to true, this property will trigger the creation of repository
//             metadata which will allow the repository to be used as a functional remote
//             repository.
public class Repository {
	@XmlElement(name = "includeMetadata")
	protected Boolean IncludeMetadata;
	@XmlElement(name = "groupVersionAlignments")
	protected GroupVersionAlignments GroupVersionAlignments;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}

// GroupVersionAlignment is The version you want to align this group to.
public class GroupVersionAlignment {
	@XmlElement(name = "id")
	protected String Id;
	@XmlElement(name = "version")
	protected String Version;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
}

// DependencySet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class DependencySet {
	@XmlElement(name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(name = "unpack")
	protected Boolean Unpack;
	@XmlElement(name = "scope")
	protected String Scope;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}

// ModuleSet is 1.0.0
public class ModuleSet {
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "sources")
	protected ModuleSources Sources;
	@XmlElement(name = "binaries")
	protected ModuleBinaries Binaries;
}

// ModuleSources is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class ModuleSources {
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}

// ModuleBinaries is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class ModuleBinaries {
	@XmlElement(name = "includeDependencies")
	protected Boolean IncludeDependencies;
	@XmlElement(name = "unpack")
	protected Boolean Unpack;
	@XmlElement(name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}

// FileItem is Flag used to determine if the file is filtered.
public class FileItem {
	@XmlElement(name = "source")
	protected String Source;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "destName")
	protected String DestName;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "lineEnding")
	protected String LineEnding;
	@XmlElement(name = "filtered")
	protected Boolean Filtered;
}

// FileSet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class FileSet {
	@XmlElement(name = "directory")
	protected String Directory;
	@XmlElement(name = "lineEnding")
	protected String LineEnding;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}
