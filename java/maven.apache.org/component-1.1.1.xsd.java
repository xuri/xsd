// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "component")
public class Component {
	protected Component Component;
}

// FileSets is Specifies which groups of files to include in the assembly. A
//             fileSet is specified by providing one or more of &lt;fileSet&gt;
//             subelements.
public class FileSets {
	@XmlElement(required = true, name = "fileSet")
	protected List<FileSet> FileSet;
}

// Files is Specifies which single files to include in the assembly. A file
//             is specified by providing one or more of &lt;file&gt;
//             subelements.
public class Files {
	@XmlElement(required = true, name = "file")
	protected List<FileItem> File;
}

// DependencySets is Specifies which dependencies to include in the assembly. A
//             dependencySet is specified by providing one or more of
//             &lt;dependencySet&gt; subelements.
public class DependencySets {
	@XmlElement(required = true, name = "dependencySet")
	protected List<DependencySet> DependencySet;
}

// Repositories is Specifies a set of repositories to include in the assembly. A
//             repository is specified by providing one or more of
//             &lt;repository&gt; subelements.
public class Repositories {
	@XmlElement(required = true, name = "repository")
	protected List<Repository> Repository;
}

// ContainerDescriptorHandlers is Set of components which filter various container descriptors out of
//             the normal archive stream, so they can be aggregated then added.
public class ContainerDescriptorHandlers {
	@XmlElement(required = true, name = "containerDescriptorHandler")
	protected List<ContainerDescriptorHandlerConfig> ContainerDescriptorHandler;
}

// Component2 is Describes the component layout and packaging.
public class Component2 {
	@XmlElement(required = true, name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(required = true, name = "files")
	protected Files Files;
	@XmlElement(required = true, name = "dependencySets")
	protected DependencySets DependencySets;
	@XmlElement(required = true, name = "repositories")
	protected Repositories Repositories;
	@XmlElement(required = true, name = "containerDescriptorHandlers")
	protected ContainerDescriptorHandlers ContainerDescriptorHandlers;
}

// Configuration is Configuration options for the handler.
public class Configuration {
}

// ContainerDescriptorHandlerConfig is The handler's plexus role-hint, for lookup from the container.
public class ContainerDescriptorHandlerConfig {
	@XmlElement(required = true, name = "handlerName")
	protected String HandlerName;
	@XmlElement(required = true, name = "configuration")
	protected Configuration Configuration;
}

// GroupVersionAlignments is Align a group to a version or an individual artifact.
public class GroupVersionAlignments {
	@XmlElement(required = true, name = "groupVersionAlignment")
	protected List<GroupVersionAlignment> GroupVersionAlignment;
}

// Includes is When &lt;include&gt; subelements are present, they define a set of
//             files and directory to include. If none is present, then
//             &lt;includes&gt; represents all valid values.
public class Includes {
	@XmlElement(required = true, name = "include")
	protected List<String> Include;
}

// Excludes is When &lt;exclude&gt; subelements are present, they define a set of
//             files and directory to exclude. If none is present, then
//             &lt;excludes&gt; represents no exclusions.
public class Excludes {
	@XmlElement(required = true, name = "exclude")
	protected List<String> Exclude;
}

// Repository is If set to true, this property will trigger the creation of repository
//             metadata which will allow the repository to be used as a functional remote
//             repository.
public class Repository {
	@XmlElement(required = true, name = "includeMetadata")
	protected Boolean IncludeMetadata;
	@XmlElement(required = true, name = "groupVersionAlignments")
	protected GroupVersionAlignments GroupVersionAlignments;
	@XmlElement(required = true, name = "scope")
	protected String Scope;
	@XmlElement(required = true, name = "useStrictFiltering")
	protected Boolean UseStrictFiltering;
	@XmlElement(required = true, name = "useDefaultExcludes")
	protected Boolean UseDefaultExcludes;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

// GroupVersionAlignment is The version you want to align this group to.
public class GroupVersionAlignment {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
}

// FileItem is Sets whether to determine if the file is filtered.
public class FileItem {
	@XmlElement(required = true, name = "source")
	protected String Source;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "destName")
	protected String DestName;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "lineEnding")
	protected String LineEnding;
	@XmlElement(required = true, name = "filtered")
	protected Boolean Filtered;
}

// FileSet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class FileSet {
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "lineEnding")
	protected String LineEnding;
	@XmlElement(required = true, name = "filtered")
	protected Boolean Filtered;
	@XmlElement(required = true, name = "useStrictFiltering")
	protected Boolean UseStrictFiltering;
	@XmlElement(required = true, name = "useDefaultExcludes")
	protected Boolean UseDefaultExcludes;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

// DependencySet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class DependencySet {
	@XmlElement(required = true, name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(required = true, name = "unpack")
	protected Boolean Unpack;
	@XmlElement(required = true, name = "unpackOptions")
	protected UnpackOptions UnpackOptions;
	@XmlElement(required = true, name = "scope")
	protected String Scope;
	@XmlElement(required = true, name = "useProjectArtifact")
	protected Boolean UseProjectArtifact;
	@XmlElement(required = true, name = "useProjectAttachments")
	protected Boolean UseProjectAttachments;
	@XmlElement(required = true, name = "useTransitiveDependencies")
	protected Boolean UseTransitiveDependencies;
	@XmlElement(required = true, name = "useTransitiveFiltering")
	protected Boolean UseTransitiveFiltering;
	@XmlElement(required = true, name = "useStrictFiltering")
	protected Boolean UseStrictFiltering;
	@XmlElement(required = true, name = "useDefaultExcludes")
	protected Boolean UseDefaultExcludes;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

// UnpackOptions is Specifies options for including/excluding/filtering items extracted from an archive.
public class UnpackOptions {
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "filtered")
	protected Boolean Filtered;
}
