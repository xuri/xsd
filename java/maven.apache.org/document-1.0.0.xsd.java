// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "document")
public class Document {
	protected DocumentModel Document;
}

// DocumentModel is The meta data to construct a cover page for the document.
public class DocumentModel {
	@XmlAttribute(name = "outputName")
	protected String OutputNameAttr;
	@XmlElement(required = true, name = "meta")
	protected DocumentMeta Meta;
	@XmlElement(required = true, name = "toc")
	protected DocumentTOC Toc;
	@XmlElement(required = true, name = "cover")
	protected DocumentCover Cover;
}

// DocumentTOC is TOC item.
public class DocumentTOC {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "depth")
	protected Integer DepthAttr;
	@XmlElement(required = true, name = "item")
	protected List<DocumentTOCItem> Item;
}

// DocumentTOCItem is A table of content item containing sub-items.
public class DocumentTOCItem {
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "ref")
	protected String RefAttr;
	@XmlAttribute(name = "collapse")
	protected Boolean CollapseAttr;
	@XmlElement(required = true, name = "item")
	protected List<DocumentTOCItem> Item;
}

// DocumentCover is The location of an image file that represents the company logo.
public class DocumentCover {
	@XmlElement(required = true, name = "coverTitle")
	protected String CoverTitle;
	@XmlElement(required = true, name = "coverSubTitle")
	protected String CoverSubTitle;
	@XmlElement(required = true, name = "coverVersion")
	protected String CoverVersion;
	@XmlElement(required = true, name = "coverType")
	protected String CoverType;
	@XmlElement(required = true, name = "coverDate")
	protected String CoverDate;
	@XmlElement(required = true, name = "author")
	protected List<DocumentAuthor> Author;
	@XmlElement(required = true, name = "projectName")
	protected String ProjectName;
	@XmlElement(required = true, name = "projectLogo")
	protected String ProjectLogo;
	@XmlElement(required = true, name = "companyName")
	protected String CompanyName;
	@XmlElement(required = true, name = "companyLogo")
	protected String CompanyLogo;
}

// DocumentAuthor is The state or province of the address of the author, if applicable.
public class DocumentAuthor {
	@XmlElement(required = true, name = "firstName")
	protected String FirstName;
	@XmlElement(required = true, name = "lastName")
	protected String LastName;
	@XmlElement(required = true, name = "initials")
	protected String Initials;
	@XmlElement(required = true, name = "title")
	protected String Title;
	@XmlElement(required = true, name = "position")
	protected String Position;
	@XmlElement(required = true, name = "email")
	protected String Email;
	@XmlElement(required = true, name = "phoneNumber")
	protected String PhoneNumber;
	@XmlElement(required = true, name = "faxNumber")
	protected String FaxNumber;
	@XmlElement(required = true, name = "companyName")
	protected String CompanyName;
	@XmlElement(required = true, name = "street")
	protected String Street;
	@XmlElement(required = true, name = "city")
	protected String City;
	@XmlElement(required = true, name = "postalCode")
	protected String PostalCode;
	@XmlElement(required = true, name = "country")
	protected String Country;
	@XmlElement(required = true, name = "state")
	protected String State;
}

// Authors is The authors of the document. The names of the entities that
//             are primarily responsible for the content of the document.
public class Authors {
	@XmlElement(required = true, name = "author")
	protected List<DocumentAuthor> Author;
}

// KeyWords is A keyword pertaining to the document. The metadata can contain any
//             number of keyword elements, each element specifying one keyword.
public class KeyWords {
	@XmlElement(required = true, name = "keyWord")
	protected List<String> KeyWord;
}

// DocumentMeta is A shortcut for the unique author of the document, usually as a String of "firstName lastName". For
//             more authors, you could use the <authors/> tag.
public class DocumentMeta {
	@XmlElement(required = true, name = "title")
	protected String Title;
	@XmlElement(required = true, name = "author")
	protected String Author;
	@XmlElement(required = true, name = "authors")
	protected Authors Authors;
	@XmlElement(required = true, name = "subject")
	protected String Subject;
	@XmlElement(required = true, name = "keywords")
	protected String Keywords;
	@XmlElement(required = true, name = "keyWords")
	protected KeyWords KeyWords;
	@XmlElement(required = true, name = "pageSize")
	protected String PageSize;
	@XmlElement(required = true, name = "generator")
	protected String Generator;
	@XmlElement(required = true, name = "description")
	protected String Description;
	@XmlElement(required = true, name = "initialCreator")
	protected String InitialCreator;
	@XmlElement(required = true, name = "creator")
	protected String Creator;
	@XmlElement(required = true, name = "printedBy")
	protected String PrintedBy;
	@XmlElement(required = true, name = "creationDate")
	protected String CreationDate;
	@XmlElement(required = true, name = "date")
	protected String Date;
	@XmlElement(required = true, name = "printDate")
	protected String PrintDate;
	@XmlElement(required = true, name = "template")
	protected DocumentTemplate Template;
	@XmlElement(required = true, name = "hyperlinkBehaviour")
	protected DocumentHyperlinkBehaviour HyperlinkBehaviour;
	@XmlElement(required = true, name = "language")
	protected String Language;
	@XmlElement(required = true, name = "editingCycles")
	protected Long EditingCycles;
	@XmlElement(required = true, name = "editingDuration")
	protected Long EditingDuration;
	@XmlElement(required = true, name = "documentStatistic")
	protected DocumentStatistic DocumentStatistic;
	@XmlElement(required = true, name = "confidential")
	protected Boolean Confidential;
	@XmlElement(required = true, name = "draft")
	protected Boolean Draft;
}

// DocumentTemplate is A template that was used to create the document.
public class DocumentTemplate {
	@XmlAttribute(name = "href")
	protected String HrefAttr;
	@XmlAttribute(name = "title")
	protected String TitleAttr;
	@XmlAttribute(name = "date")
	protected String DateAttr;
}

// DocumentStatistic is Statistical attributes of the document.
public class DocumentStatistic {
	@XmlAttribute(name = "pageCount")
	protected Long PageCountAttr;
	@XmlAttribute(name = "tableCount")
	protected Long TableCountAttr;
	@XmlAttribute(name = "drawCount")
	protected Long DrawCountAttr;
	@XmlAttribute(name = "imageCount")
	protected Long ImageCountAttr;
	@XmlAttribute(name = "objectCount")
	protected Long ObjectCountAttr;
	@XmlAttribute(name = "oleObjectCount")
	protected Long OleObjectCountAttr;
	@XmlAttribute(name = "paragraphCount")
	protected Long ParagraphCountAttr;
	@XmlAttribute(name = "wordCount")
	protected Long WordCountAttr;
	@XmlAttribute(name = "characterCount")
	protected Long CharacterCountAttr;
	@XmlAttribute(name = "rowCount")
	protected Long RowCountAttr;
	@XmlAttribute(name = "frameCount")
	protected Long FrameCountAttr;
	@XmlAttribute(name = "sentenceCount")
	protected Long SentenceCountAttr;
	@XmlAttribute(name = "syllableCount")
	protected Long SyllableCountAttr;
	@XmlAttribute(name = "nonWhitespaceCharacterCount")
	protected Long NonWhitespaceCharacterCountAttr;
}

// DocumentHyperlinkBehaviour is Specifies the default behavior for hyperlinks in the document.
public class DocumentHyperlinkBehaviour {
	@XmlAttribute(name = "targetFrame")
	protected String TargetFrameAttr;
}
