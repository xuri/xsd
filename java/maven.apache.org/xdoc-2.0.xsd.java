// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// ContentType is media type, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentType")
public class ContentType {
	protected String ContentType;
}

// ContentTypes is comma-separated list of media types, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentTypes")
public class ContentTypes {
	protected String ContentTypes;
}

// Charset is a character encoding, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charset")
public class Charset {
	protected String Charset;
}

// Charsets is a space separated list of character encodings, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charsets")
public class Charsets {
	protected String Charsets;
}

// LanguageCode is a language code, as per [RFC3066]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LanguageCode")
public class LanguageCode {
	protected String LanguageCode;
}

// Character is a single character, as per section 2.2 of [XML]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Character")
public class Character {
	protected String Character;
}

// Number is one or more digits
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Number")
public class Number {
	protected Integer Number;
}

// TabindexNumber is tabindex attribute specifies the position of the current element
//       in the tabbing order for the current document. This value must be
//       a number between 0 and 32767. User agents should ignore leading zeros.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "tabindexNumber")
public class TabindexNumber {
	protected Integer TabindexNumber;
}

// LinkTypes is space-separated list of link types
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LinkTypes")
public class LinkTypes {
	protected List<String> LinkTypes;
}

// MediaDesc is single or comma-separated list of media descriptors
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MediaDesc")
public class MediaDesc {
	protected String MediaDesc;
}

// URI is a Uniform Resource Identifier, see [RFC2396]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "URI")
public class URI {
	protected String URI;
}

// UriList is a space separated list of Uniform Resource Identifiers
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "UriList")
public class UriList {
	protected String UriList;
}

// Datetime is date and time information. ISO date format
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Datetime")
public class Datetime {
	protected String Datetime;
}

// Script is script expression
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Script")
public class Script {
	protected String Script;
}

// StyleSheet is style sheet data
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "StyleSheet")
public class StyleSheet {
	protected String StyleSheet;
}

// Text is used for titles etc.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Text")
public class Text {
	protected String Text;
}

// FrameTarget is render in this frame
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "FrameTarget")
public class FrameTarget {
	protected String FrameTarget;
}

// Length is nn for pixels or nn% for percentage length
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Length")
public class Length {
	protected String Length;
}

// MultiLength is pixel, percentage, or relative
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MultiLength")
public class MultiLength {
	protected String MultiLength;
}

// Pixels is integer representing length in pixels
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Pixels")
public class Pixels {
	protected Integer Pixels;
}

// Shape ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Shape")
public class Shape {
	protected String Shape;
}

// Coords is comma separated list of lengths
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Coords")
public class Coords {
	protected String Coords;
}

// ImgAlign is used for object, applet, img, input and iframe
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ImgAlign")
public class ImgAlign {
	protected String ImgAlign;
}

// Color is a color using sRGB: #RRGGBB as Hex values
// 
//       There are also 16 widely known color names with their sRGB values:
// 
//       Black  = #000000    Green  = #008000
//       Silver = #C0C0C0    Lime   = #00FF00
//       Gray   = #808080    Olive  = #808000
//       White  = #FFFFFF    Yellow = #FFFF00
//       Maroon = #800000    Navy   = #000080
//       Red    = #FF0000    Blue   = #0000FF
//       Purple = #800080    Teal   = #008080
//       Fuchsia= #FF00FF    Aqua   = #00FFFF
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Color")
public class Color {
	protected String Color;
}

// Coreattrs is core attributes common to most elements
//       id       document-wide unique id
//       class    space separated list of classes
//       style    associated style info
//       title    advisory title/amplification
public class Coreattrs {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "class")
	protected List<String>Attr Class;
	@XmlAttribute(name = "style")
	protected StringAttr Style;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
}

// I18n is internationalization attributes
//       lang        language code (backwards compatible)
//       xml:lang    language code (as per XML 1.0 spec)
//       dir         direction for weak/neutral text
public class I18n {
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "xml:lang")
	protected LangAttr XmlLang;
	@XmlAttribute(name = "dir")
	protected StringAttr Dir;
}

// Events is attributes for common UI events
//       onclick     a pointer button was clicked
//       ondblclick  a pointer button was double clicked
//       onmousedown a pointer button was pressed down
//       onmouseup   a pointer button was released
//       onmousemove a pointer was moved onto the element
//       onmouseout  a pointer was moved away from the element
//       onkeypress  a key was pressed and released
//       onkeydown   a key was pressed down
//       onkeyup     a key was released
public class Events {
	@XmlAttribute(name = "onclick")
	protected StringAttr Onclick;
	@XmlAttribute(name = "ondblclick")
	protected StringAttr Ondblclick;
	@XmlAttribute(name = "onmousedown")
	protected StringAttr Onmousedown;
	@XmlAttribute(name = "onmouseup")
	protected StringAttr Onmouseup;
	@XmlAttribute(name = "onmouseover")
	protected StringAttr Onmouseover;
	@XmlAttribute(name = "onmousemove")
	protected StringAttr Onmousemove;
	@XmlAttribute(name = "onmouseout")
	protected StringAttr Onmouseout;
	@XmlAttribute(name = "onkeypress")
	protected StringAttr Onkeypress;
	@XmlAttribute(name = "onkeydown")
	protected StringAttr Onkeydown;
	@XmlAttribute(name = "onkeyup")
	protected StringAttr Onkeyup;
}

// Focus is attributes for elements that can get the focus
//       accesskey   accessibility key character
//       tabindex    position in tabbing order
//       onfocus     the element got the focus
//       onblur      the element lost the focus
public class Focus {
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
}

// Attrs ...
public class Attrs {
}

// TextAlign is text alignment for p, div, h1-h6. The default is
//       align="left" for ltr headings, "right" for rtl
public class TextAlign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

// SpecialExtra ...
public class SpecialExtra {
	@XmlElement(required = true, name = "object")
	protected Object Object;
	@XmlElement(required = true, name = "applet")
	protected Applet Applet;
	@XmlElement(required = true, name = "img")
	protected void Img;
	@XmlElement(required = true, name = "map")
	protected Map Map;
	@XmlElement(required = true, name = "iframe")
	protected void Iframe;
	@XmlElement(required = true, name = "source")
	protected Source Source;
	@XmlElement(required = true, name = "macro")
	protected Macro Macro;
}

// SpecialBasic ...
public class SpecialBasic {
	@XmlElement(required = true, name = "br")
	protected void Br;
	@XmlElement(required = true, name = "span")
	protected Span Span;
	@XmlElement(required = true, name = "bdo")
	protected void Bdo;
}

// Special ...
public class Special {
	protected SpecialBasic SpecialBasic;
	protected SpecialExtra SpecialExtra;
}

// FontstyleExtra ...
public class FontstyleExtra {
	@XmlElement(required = true, name = "big")
	protected Big Big;
	@XmlElement(required = true, name = "small")
	protected Small Small;
	@XmlElement(required = true, name = "font")
	protected Font Font;
	@XmlElement(required = true, name = "basefont")
	protected Basefont Basefont;
}

// FontstyleBasic ...
public class FontstyleBasic {
	@XmlElement(required = true, name = "tt")
	protected Tt Tt;
	@XmlElement(required = true, name = "i")
	protected I I;
	@XmlElement(required = true, name = "b")
	protected B B;
	@XmlElement(required = true, name = "u")
	protected U U;
	@XmlElement(required = true, name = "s")
	protected S S;
	@XmlElement(required = true, name = "strike")
	protected Strike Strike;
}

// Fontstyle ...
public class Fontstyle {
	protected FontstyleBasic FontstyleBasic;
	protected FontstyleExtra FontstyleExtra;
}

// PhraseExtra ...
public class PhraseExtra {
	@XmlElement(required = true, name = "sub")
	protected Sub Sub;
	@XmlElement(required = true, name = "sup")
	protected Sup Sup;
}

// PhraseBasic ...
public class PhraseBasic {
	@XmlElement(required = true, name = "em")
	protected Em Em;
	@XmlElement(required = true, name = "strong")
	protected Strong Strong;
	@XmlElement(required = true, name = "dfn")
	protected Dfn Dfn;
	@XmlElement(required = true, name = "code")
	protected Code Code;
	@XmlElement(required = true, name = "q")
	protected Q Q;
	@XmlElement(required = true, name = "samp")
	protected Samp Samp;
	@XmlElement(required = true, name = "kbd")
	protected Kbd Kbd;
	@XmlElement(required = true, name = "var")
	protected Var Var;
	@XmlElement(required = true, name = "cite")
	protected Cite Cite;
	@XmlElement(required = true, name = "abbr")
	protected Abbr Abbr;
	@XmlElement(required = true, name = "acronym")
	protected Acronym Acronym;
}

// Phrase ...
public class Phrase {
	protected PhraseBasic PhraseBasic;
	protected PhraseExtra PhraseExtra;
}

// InlineForms ...
public class InlineForms {
	@XmlElement(required = true, name = "input")
	protected void Input;
	@XmlElement(required = true, name = "select")
	protected Select Select;
	@XmlElement(required = true, name = "textarea")
	protected void Textarea;
	@XmlElement(required = true, name = "label")
	protected Label Label;
	@XmlElement(required = true, name = "button")
	protected void Button;
}

// MiscInline ...
public class MiscInline {
	@XmlElement(required = true, name = "ins")
	protected Ins Ins;
	@XmlElement(required = true, name = "del")
	protected Del Del;
	@XmlElement(required = true, name = "script")
	protected void Script;
}

// Misc ...
public class Misc {
	@XmlElement(required = true, name = "noscript")
	protected Noscript Noscript;
	protected MiscInline MiscInline;
}

// Inline ...
public class Inline {
	@XmlElement(required = true, name = "a")
	protected A A;
	protected Special Special;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected InlineForms InlineForms;
}

// Inline2 is "Inline" covers inline or "text-level" element
public class Inline2 {
	protected List<Inline> Inline;
	protected List<MiscInline> MiscInline;
}

// Heading ...
public class Heading {
	@XmlElement(required = true, name = "h1")
	protected H1 H1;
	@XmlElement(required = true, name = "h2")
	protected H2 H2;
	@XmlElement(required = true, name = "h3")
	protected H3 H3;
	@XmlElement(required = true, name = "h4")
	protected H4 H4;
	@XmlElement(required = true, name = "h5")
	protected H5 H5;
	@XmlElement(required = true, name = "h6")
	protected H6 H6;
}

// Lists ...
public class Lists {
	@XmlElement(required = true, name = "ul")
	protected Ul Ul;
	@XmlElement(required = true, name = "ol")
	protected Ol Ol;
	@XmlElement(required = true, name = "dl")
	protected Dl Dl;
	@XmlElement(required = true, name = "menu")
	protected Menu Menu;
	@XmlElement(required = true, name = "dir")
	protected Dir Dir;
}

// Blocktext ...
public class Blocktext {
	@XmlElement(required = true, name = "pre")
	protected Pre Pre;
	@XmlElement(required = true, name = "hr")
	protected void Hr;
	@XmlElement(required = true, name = "blockquote")
	protected Blockquote Blockquote;
	@XmlElement(required = true, name = "address")
	protected Address Address;
	@XmlElement(required = true, name = "center")
	protected Center Center;
	@XmlElement(required = true, name = "noframes")
	protected Noframes Noframes;
}

// Block ...
public class Block {
	@XmlElement(required = true, name = "p")
	protected P P;
	@XmlElement(required = true, name = "div")
	protected Div Div;
	@XmlElement(required = true, name = "isindex")
	protected Isindex Isindex;
	@XmlElement(required = true, name = "fieldset")
	protected Fieldset Fieldset;
	@XmlElement(required = true, name = "table")
	protected Table Table;
	protected Heading Heading;
	protected Lists Lists;
	protected Blocktext Blocktext;
}

// Flow is "Flow" mixes block and inline and is used for list items etc.
public class Flow {
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
}

// AContent is a elements use "Inline" excluding a
public class AContent {
	protected List<Special> Special;
	protected List<Fontstyle> Fontstyle;
	protected List<Phrase> Phrase;
	protected List<InlineForms> InlineForms;
	protected List<MiscInline> MiscInline;
}

// PreContent is pre uses "Inline" excluding img, object, applet, big, small,
//       font, or basefont
public class PreContent {
	protected List<SpecialBasic> SpecialBasic;
	protected List<FontstyleBasic> FontstyleBasic;
	protected List<PhraseBasic> PhraseBasic;
	protected List<InlineForms> InlineForms;
	protected List<MiscInline> MiscInline;
	@XmlElement(required = true, name = "a")
	protected List<A> A;
}

// FormContent is form uses "Flow" excluding form
public class FormContent {
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
}

// ButtonContent is button uses "Flow" but excludes a, form, form controls, iframe
public class ButtonContent {
	protected List<Heading> Heading;
	protected List<Lists> Lists;
	protected List<Blocktext> Blocktext;
	protected List<Fontstyle> Fontstyle;
	protected List<Phrase> Phrase;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "p")
	protected List<P> P;
	@XmlElement(required = true, name = "div")
	protected List<Div> Div;
	@XmlElement(required = true, name = "table")
	protected List<Table> Table;
	@XmlElement(required = true, name = "br")
	protected List<void> Br;
	@XmlElement(required = true, name = "span")
	protected List<Span> Span;
	@XmlElement(required = true, name = "bdo")
	protected List<void> Bdo;
	@XmlElement(required = true, name = "object")
	protected List<Object> Object;
	@XmlElement(required = true, name = "applet")
	protected List<Applet> Applet;
	@XmlElement(required = true, name = "img")
	protected List<void> Img;
	@XmlElement(required = true, name = "map")
	protected List<Map> Map;
}

// HeadMisc ...
public class HeadMisc {
	@XmlElement(required = true, name = "script")
	protected List<void> Script;
	@XmlElement(required = true, name = "style")
	protected List<Style> Style;
	@XmlElement(required = true, name = "meta")
	protected List<Meta> Meta;
	@XmlElement(required = true, name = "link")
	protected List<Link> Link;
	@XmlElement(required = true, name = "object")
	protected List<Object> Object;
	@XmlElement(required = true, name = "isindex")
	protected List<Isindex> Isindex;
}

// Head is content model is "head.misc" combined with a single
//       title and an optional base element in any order
public class Head {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "profile")
	protected String ProfileAttr;
	protected HeadMisc HeadMisc;
	@XmlElement(required = true, name = "title")
	protected Title Title;
	@XmlElement(required = true, name = "base")
	protected Base Base;
}

// Title is The title element is not considered part of the flow of text.
//       It should be displayed, for example as the page header or
//       window title. Exactly one title is required per document.
public class Title {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected String IdAttr;
}

// Base is document base URI
public class Base {
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "href")
	protected String HrefAttr;
	@XmlAttribute(name = "target")
	protected String TargetAttr;
}

// Meta is generic metainformation
public class Meta {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "http-equiv")
	protected void HttpequivAttr;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	@XmlAttribute(name = "content", required = true)
	protected void ContentAttr;
	@XmlAttribute(name = "scheme")
	protected void SchemeAttr;
}

// Link is Relationship values can be used in principle:
// 
//       a) for document specific toolbars/menus when used
//          with the link element in document head e.g.
//            start, contents, previous, next, index, end, help
//       b) to link to a separate style sheet (rel="stylesheet")
//       c) to make a link to a script (rel="script")
//       d) by stylesheets to control how collections of
//          html nodes are rendered into printed documents
//       e) to make a link to a printable version of this document
//          e.g. a PostScript or PDF version (rel="alternate" media="print")
public class Link {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "charset")
	protected String CharsetAttr;
	@XmlAttribute(name = "href")
	protected String HrefAttr;
	@XmlAttribute(name = "hreflang")
	protected String HreflangAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "rel")
	protected List<String> RelAttr;
	@XmlAttribute(name = "rev")
	protected List<String> RevAttr;
	@XmlAttribute(name = "media")
	protected String MediaAttr;
	@XmlAttribute(name = "target")
	protected String TargetAttr;
}

// Style is style info, which may include CDATA sections
public class Style {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "media")
	protected String MediaAttr;
	@XmlAttribute(name = "title")
	protected String TitleAttr;
	@XmlAttribute(name = "xml:space")
	protected Space XmlSpaceAttr;
}

// Script2 is script statements, which may include CDATA sections
public class Script2 {
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "charset")
	protected String CharsetAttr;
	@XmlAttribute(name = "type", required = true)
	protected String TypeAttr;
	@XmlAttribute(name = "language")
	protected void LanguageAttr;
	@XmlAttribute(name = "src")
	protected String SrcAttr;
	@XmlAttribute(name = "defer")
	protected void DeferAttr;
	@XmlAttribute(name = "xml:space")
	protected Space XmlSpaceAttr;
}

// Noscript is alternate content container for non script-based rendering
public class Noscript extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Iframe is inline subwindow
public class Iframe extends Flow  {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "longdesc")
	protected String LongdescAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "src")
	protected String SrcAttr;
	@XmlAttribute(name = "frameborder")
	protected void FrameborderAttr;
	@XmlAttribute(name = "marginwidth")
	protected Integer MarginwidthAttr;
	@XmlAttribute(name = "marginheight")
	protected Integer MarginheightAttr;
	@XmlAttribute(name = "scrolling")
	protected void ScrollingAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
	@XmlAttribute(name = "height")
	protected String HeightAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
}

// Noframes is alternate content container for non frame-based rendering
public class Noframes extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Div is generic language/style container
public class Div extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// P ...
public class P extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H1 ...
public class H1 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H2 ...
public class H2 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H3 ...
public class H3 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H4 ...
public class H4 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H5 ...
public class H5 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H6 ...
public class H6 extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// ULStyle is Unordered list bullet styles
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ULStyle")
public class ULStyle {
	protected String ULStyle;
}

// Ul is Unordered list
public class Ul {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "compact")
	protected String CompactAttr;
	@XmlElement(required = true, name = "li")
	protected List<Li> Li;
}

// OLStyle is Ordered list numbering style
// 
//       1   arabic numbers      1, 2, 3, ...
//       a   lower alpha         a, b, c, ...
//       A   upper alpha         A, B, C, ...
//       i   lower roman         i, ii, iii, ...
//       I   upper roman         I, II, III, ...
// 
//       The style is applied to the sequence number which by default
//       is reset to 1 for the first list item in an ordered list.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "OLStyle")
public class OLStyle {
	protected String OLStyle;
}

// Ol is Ordered (numbered) list
public class Ol {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "compact")
	protected String CompactAttr;
	@XmlAttribute(name = "start")
	protected Integer StartAttr;
	@XmlElement(required = true, name = "li")
	protected List<Li> Li;
}

// Menu is single column list (DEPRECATED)
public class Menu {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected String CompactAttr;
	@XmlElement(required = true, name = "li")
	protected List<Li> Li;
}

// Dir is multiple column list (DEPRECATED)
public class Dir {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected String CompactAttr;
	@XmlElement(required = true, name = "li")
	protected List<Li> Li;
}

// LIStyle is LIStyle is constrained to: "(ULStyle|OLStyle)"
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LIStyle")
public class LIStyle {
	protected String LIStyle;
}

// Li is list item
public class Li extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "value")
	protected Integer ValueAttr;
}

// Dl ...
public class Dl {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected String CompactAttr;
	@XmlElement(required = true, name = "dt")
	protected List<Dt> Dt;
	@XmlElement(required = true, name = "dd")
	protected List<Dd> Dd;
}

// Dt ...
public class Dt extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Dd ...
public class Dd extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Address is information on author
public class Address {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected List<Inline> Inline;
	protected List<MiscInline> MiscInline;
	@XmlElement(required = true, name = "p")
	protected List<P> P;
}

// Hr ...
public class Hr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected void AlignAttr;
	@XmlAttribute(name = "noshade")
	protected void NoshadeAttr;
	@XmlAttribute(name = "size")
	protected Integer SizeAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
}

// Pre is content is "Inline" excluding
//          "img|object|applet|big|small|sub|sup|font|basefont"
public class Pre extends PreContent  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "width")
	protected Integer WidthAttr;
	@XmlAttribute(name = "xml:space")
	protected Space XmlSpaceAttr;
}

// Blockquote ...
public class Blockquote extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected String CiteAttr;
}

// Center is center content
public class Center extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Ins ...
public class Ins extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected String CiteAttr;
	@XmlAttribute(name = "datetime")
	protected String DatetimeAttr;
}

// Del ...
public class Del extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected String CiteAttr;
	@XmlAttribute(name = "datetime")
	protected String DatetimeAttr;
}

// A is content is "Inline" except that anchors shouldn't be nested
public class A extends AContent  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "charset")
	protected String CharsetAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "href")
	protected String HrefAttr;
	@XmlAttribute(name = "hreflang")
	protected String HreflangAttr;
	@XmlAttribute(name = "rel")
	protected List<String> RelAttr;
	@XmlAttribute(name = "rev")
	protected List<String> RevAttr;
	@XmlAttribute(name = "shape")
	protected String ShapeAttr;
	@XmlAttribute(name = "coords")
	protected String CoordsAttr;
	@XmlAttribute(name = "target")
	protected String TargetAttr;
}

// Span is generic language/style container
public class Span extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Bdo is I18N BiDi over-ride
public class Bdo extends Inline  {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "lang")
	protected String LangAttr;
	@XmlAttribute(name = "xml:lang")
	protected Lang XmlLangAttr;
	@XmlAttribute(name = "dir", required = true)
	protected void DirAttr;
}

// Br is forced line break
public class Br {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "clear")
	protected void ClearAttr;
}

// Em is emphasis
public class Em extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Strong is strong emphasis
public class Strong extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Dfn is definitional
public class Dfn extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Code is program code
public class Code extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Samp is sample
public class Samp extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Kbd is something user would type
public class Kbd extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Var is variable
public class Var extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Cite is citation
public class Cite extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Abbr is abbreviation
public class Abbr extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Acronym is acronym
public class Acronym extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Q is inlined quote
public class Q extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected String CiteAttr;
}

// Sub is subscript
public class Sub extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Sup is superscript
public class Sup extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Tt is fixed pitch font
public class Tt extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// I is italic font
public class I extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// B is bold font
public class B extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Big is bigger font
public class Big extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Small is smaller font
public class Small extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// U is underline
public class U extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// S is strike-through
public class S extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Strike is strike-through
public class Strike extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Basefont is base font size
public class Basefont {
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "size", required = true)
	protected void SizeAttr;
	@XmlAttribute(name = "color")
	protected String ColorAttr;
	@XmlAttribute(name = "face")
	protected void FaceAttr;
}

// Font is local change to font
public class Font extends Inline  {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "size")
	protected void SizeAttr;
	@XmlAttribute(name = "color")
	protected String ColorAttr;
	@XmlAttribute(name = "face")
	protected void FaceAttr;
}

// Object ...
public class Object {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "declare")
	protected String DeclareAttr;
	@XmlAttribute(name = "classid")
	protected String ClassidAttr;
	@XmlAttribute(name = "codebase")
	protected String CodebaseAttr;
	@XmlAttribute(name = "data")
	protected String DataAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "codetype")
	protected String CodetypeAttr;
	@XmlAttribute(name = "archive")
	protected String ArchiveAttr;
	@XmlAttribute(name = "standby")
	protected String StandbyAttr;
	@XmlAttribute(name = "height")
	protected String HeightAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlAttribute(name = "usemap")
	protected String UsemapAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "tabindex")
	protected Integer TabindexAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
	@XmlAttribute(name = "border")
	protected Integer BorderAttr;
	@XmlAttribute(name = "hspace")
	protected Integer HspaceAttr;
	@XmlAttribute(name = "vspace")
	protected Integer VspaceAttr;
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "param")
	protected List<void> Param;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
}

// Param is param is used to supply a named property value.
//       In XML it would seem natural to follow RDF and support an
//       abbreviated syntax where the param elements are replaced
//       by attribute value pairs on the object start tag.
public class Param {
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlAttribute(name = "name", required = true)
	protected void NameAttr;
	@XmlAttribute(name = "value")
	protected void ValueAttr;
	@XmlAttribute(name = "valuetype")
	protected void ValuetypeAttr;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
}

// Applet ...
public class Applet {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "codebase")
	protected String CodebaseAttr;
	@XmlAttribute(name = "archive")
	protected void ArchiveAttr;
	@XmlAttribute(name = "code")
	protected void CodeAttr;
	@XmlAttribute(name = "object")
	protected void ObjectAttr;
	@XmlAttribute(name = "alt")
	protected String AltAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "width", required = true)
	protected String WidthAttr;
	@XmlAttribute(name = "height", required = true)
	protected String HeightAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
	@XmlAttribute(name = "hspace")
	protected Integer HspaceAttr;
	@XmlAttribute(name = "vspace")
	protected Integer VspaceAttr;
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "param")
	protected List<void> Param;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
}

// Img ...
public class Img {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "src", required = true)
	protected String SrcAttr;
	@XmlAttribute(name = "alt", required = true)
	protected String AltAttr;
	@XmlAttribute(name = "name")
	protected String NameAttr;
	@XmlAttribute(name = "longdesc")
	protected String LongdescAttr;
	@XmlAttribute(name = "height")
	protected String HeightAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlAttribute(name = "usemap")
	protected String UsemapAttr;
	@XmlAttribute(name = "ismap")
	protected void IsmapAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
	@XmlAttribute(name = "border")
	protected String BorderAttr;
	@XmlAttribute(name = "hspace")
	protected Integer HspaceAttr;
	@XmlAttribute(name = "vspace")
	protected Integer VspaceAttr;
}

// Map ...
public class Map {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "id", required = true)
	protected String IdAttr;
	@XmlAttribute(name = "class")
	protected void ClassAttr;
	@XmlAttribute(name = "style")
	protected String StyleAttr;
	@XmlAttribute(name = "title")
	protected String TitleAttr;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	protected List<Block> Block;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
	@XmlElement(required = true, name = "area")
	protected List<void> Area;
}

// Area ...
public class Area {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "shape")
	protected String ShapeAttr;
	@XmlAttribute(name = "coords")
	protected String CoordsAttr;
	@XmlAttribute(name = "href")
	protected String HrefAttr;
	@XmlAttribute(name = "nohref")
	protected void NohrefAttr;
	@XmlAttribute(name = "alt", required = true)
	protected String AltAttr;
	@XmlAttribute(name = "target")
	protected String TargetAttr;
}

// Form ...
public class Form extends FormContent  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "action", required = true)
	protected String ActionAttr;
	@XmlAttribute(name = "method")
	protected void MethodAttr;
	@XmlAttribute(name = "enctype")
	protected String EnctypeAttr;
	@XmlAttribute(name = "onsubmit")
	protected String OnsubmitAttr;
	@XmlAttribute(name = "onreset")
	protected String OnresetAttr;
	@XmlAttribute(name = "accept")
	protected String AcceptAttr;
	@XmlAttribute(name = "accept-charset")
	protected String AcceptcharsetAttr;
	@XmlAttribute(name = "target")
	protected String TargetAttr;
}

// Label is Each label must not contain more than ONE field
//       Label elements shouldn't be nested.
public class Label extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "for")
	protected String ForAttr;
	@XmlAttribute(name = "accesskey")
	protected String AccesskeyAttr;
	@XmlAttribute(name = "onfocus")
	protected String OnfocusAttr;
	@XmlAttribute(name = "onblur")
	protected String OnblurAttr;
}

// InputType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "InputType")
public class InputType {
	protected String InputType;
}

// Input is form control
public class Input {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "type")
	protected String TypeAttr;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	@XmlAttribute(name = "value")
	protected void ValueAttr;
	@XmlAttribute(name = "checked")
	protected void CheckedAttr;
	@XmlAttribute(name = "disabled")
	protected void DisabledAttr;
	@XmlAttribute(name = "readonly")
	protected void ReadonlyAttr;
	@XmlAttribute(name = "size")
	protected void SizeAttr;
	@XmlAttribute(name = "maxlength")
	protected Integer MaxlengthAttr;
	@XmlAttribute(name = "src")
	protected String SrcAttr;
	@XmlAttribute(name = "alt")
	protected void AltAttr;
	@XmlAttribute(name = "usemap")
	protected String UsemapAttr;
	@XmlAttribute(name = "onselect")
	protected String OnselectAttr;
	@XmlAttribute(name = "onchange")
	protected String OnchangeAttr;
	@XmlAttribute(name = "accept")
	protected String AcceptAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
}

// Select is option selector
public class Select {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	@XmlAttribute(name = "size")
	protected Integer SizeAttr;
	@XmlAttribute(name = "multiple")
	protected String MultipleAttr;
	@XmlAttribute(name = "disabled")
	protected String DisabledAttr;
	@XmlAttribute(name = "tabindex")
	protected Integer TabindexAttr;
	@XmlAttribute(name = "onfocus")
	protected String OnfocusAttr;
	@XmlAttribute(name = "onblur")
	protected String OnblurAttr;
	@XmlAttribute(name = "onchange")
	protected String OnchangeAttr;
	@XmlElement(required = true, name = "optgroup")
	protected List<Optgroup> Optgroup;
	@XmlElement(required = true, name = "option")
	protected List<void> Option;
}

// Optgroup is option group
public class Optgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "disabled")
	protected String DisabledAttr;
	@XmlAttribute(name = "label", required = true)
	protected String LabelAttr;
	@XmlElement(required = true, name = "option")
	protected List<void> Option;
}

// Option is selectable choice
public class Option {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "selected")
	protected void SelectedAttr;
	@XmlAttribute(name = "disabled")
	protected void DisabledAttr;
	@XmlAttribute(name = "label")
	protected String LabelAttr;
	@XmlAttribute(name = "value")
	protected void ValueAttr;
}

// Textarea is multi-line text field
public class Textarea {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	@XmlAttribute(name = "rows", required = true)
	protected Integer RowsAttr;
	@XmlAttribute(name = "cols", required = true)
	protected Integer ColsAttr;
	@XmlAttribute(name = "disabled")
	protected void DisabledAttr;
	@XmlAttribute(name = "readonly")
	protected void ReadonlyAttr;
	@XmlAttribute(name = "onselect")
	protected String OnselectAttr;
	@XmlAttribute(name = "onchange")
	protected String OnchangeAttr;
}

// Fieldset is The fieldset element is used to group form fields.
//       Only one legend element should occur in the content
//       and if present should only be preceded by whitespace.
// 
//       NOTE: this content model is different from the XHTML 1.0 DTD,
//       closer to the intended content model in HTML4 DTD
public class Fieldset {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "legend")
	protected Legend Legend;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
}

// LAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LAlign")
public class LAlign {
	protected String LAlign;
}

// Legend is fieldset label
public class Legend extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "accesskey")
	protected String AccesskeyAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
}

// Button is Content is "Flow" excluding a, form and form controls
public class Button extends ButtonContent  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected void NameAttr;
	@XmlAttribute(name = "value")
	protected void ValueAttr;
	@XmlAttribute(name = "type")
	protected void TypeAttr;
	@XmlAttribute(name = "disabled")
	protected void DisabledAttr;
}

// Isindex is single-line text input control (DEPRECATED)
public class Isindex {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "prompt")
	protected String PromptAttr;
}

// TFrame is The border attribute sets the thickness of the frame around the
//       table. The default units are screen pixels.
// 
//       The frame attribute specifies which parts of the frame around
//       the table should be rendered. The values are not the same as
//       CALS to avoid a name clash with the valign attribute.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TFrame")
public class TFrame {
	protected String TFrame;
}

// TRules is The rules attribute defines which rules to draw between cells:
// 
//       If rules is absent then assume:
//           "none" if border is absent or border="0" otherwise "all"
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TRules")
public class TRules {
	protected String TRules;
}

// TAlign is horizontal placement of table relative to document
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TAlign")
public class TAlign {
	protected String TAlign;
}

// Cellhalign is horizontal alignment attributes for cell contents
// 
//       char        alignment char, e.g. char=':'
//       charoff     offset for alignment char
public class Cellhalign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "char")
	protected StringAttr Char;
	@XmlAttribute(name = "charoff")
	protected StringAttr Charoff;
}

// Cellvalign is vertical alignment attributes for cell contents
public class Cellvalign {
	@XmlAttribute(name = "valign")
	protected StringAttr Valign;
}

// Table ...
public class Table {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "summary")
	protected String SummaryAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlAttribute(name = "border")
	protected Integer BorderAttr;
	@XmlAttribute(name = "frame")
	protected String FrameAttr;
	@XmlAttribute(name = "rules")
	protected String RulesAttr;
	@XmlAttribute(name = "cellspacing")
	protected String CellspacingAttr;
	@XmlAttribute(name = "cellpadding")
	protected String CellpaddingAttr;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
	@XmlAttribute(name = "bgcolor")
	protected String BgcolorAttr;
	@XmlElement(required = true, name = "caption")
	protected Caption Caption;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
	@XmlElement(required = true, name = "colgroup")
	protected List<Colgroup> Colgroup;
	@XmlElement(required = true, name = "thead")
	protected Thead Thead;
	@XmlElement(required = true, name = "tfoot")
	protected Tfoot Tfoot;
	@XmlElement(required = true, name = "tbody")
	protected List<Tbody> Tbody;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// CAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "CAlign")
public class CAlign {
	protected String CAlign;
}

// Caption ...
public class Caption extends Inline  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected String AlignAttr;
}

// Thead ...
public class Thead {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Tfoot ...
public class Tfoot {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Tbody ...
public class Tbody {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Colgroup is colgroup groups a set of col elements. It allows you to group
//       several semantically related columns together.
public class Colgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected Integer SpanAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
}

// Col is col elements define the alignment properties for cells in
//       one or more columns.
// 
//       The width attribute specifies the width of the columns, e.g.
// 
//           width=64        width in screen pixels
//           width=0.5*      relative width of 0.5
// 
//       The span attribute causes the attributes of one
//       col element to apply to more than one column.
public class Col {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected Integer SpanAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
}

// Tr ...
public class Tr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "bgcolor")
	protected String BgcolorAttr;
	@XmlElement(required = true, name = "th")
	protected List<void> Th;
	@XmlElement(required = true, name = "td")
	protected List<void> Td;
}

// Scope is Scope is simpler than headers attribute for common tables
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Scope")
public class Scope {
	protected String Scope;
}

// Th ...
public class Th extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected String AbbrAttr;
	@XmlAttribute(name = "axis")
	protected void AxisAttr;
	@XmlAttribute(name = "headers")
	protected List<String> HeadersAttr;
	@XmlAttribute(name = "scope")
	protected String ScopeAttr;
	@XmlAttribute(name = "rowspan")
	protected Integer RowspanAttr;
	@XmlAttribute(name = "colspan")
	protected Integer ColspanAttr;
	@XmlAttribute(name = "nowrap")
	protected void NowrapAttr;
	@XmlAttribute(name = "bgcolor")
	protected String BgcolorAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlAttribute(name = "height")
	protected String HeightAttr;
}

// Td ...
public class Td extends Flow  {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected String AbbrAttr;
	@XmlAttribute(name = "axis")
	protected void AxisAttr;
	@XmlAttribute(name = "headers")
	protected List<String> HeadersAttr;
	@XmlAttribute(name = "scope")
	protected String ScopeAttr;
	@XmlAttribute(name = "rowspan")
	protected Integer RowspanAttr;
	@XmlAttribute(name = "colspan")
	protected Integer ColspanAttr;
	@XmlAttribute(name = "nowrap")
	protected void NowrapAttr;
	@XmlAttribute(name = "bgcolor")
	protected String BgcolorAttr;
	@XmlAttribute(name = "width")
	protected String WidthAttr;
	@XmlAttribute(name = "height")
	protected String HeightAttr;
}

// Document is Required body element for this document element.
public class Document {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected String IdAttr;
	@XmlElement(required = true, name = "properties")
	protected Properties Properties;
	@XmlElement(required = true, name = "head")
	protected Head Head;
	@XmlElement(required = true, name = "body")
	protected Body Body;
}

// Properties is Optional creation/last updated date for the document element.
public class Properties {
	@XmlElement(required = true, name = "title")
	protected Title Title;
	@XmlElement(required = true, name = "author")
	protected List<Author> Author;
	@XmlElement(required = true, name = "date")
	protected String Date;
}

// Author is An author element.
public class Author {
	@XmlAttribute(name = "email")
	protected String EmailAttr;
}

// Date is An date element. The date is recommended (but it is not a requirement) to be align to
//         the ISO-8601 standard, i.e.: YYYY-MM-DD.
public class Date {
}

// Body is The body element.
public class Body {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true, name = "section")
	protected List<Section> Section;
}

// Section is A subsection in the section element.
public class Section {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
	@XmlElement(required = true, name = "subsection")
	protected List<Subsection> Subsection;
}

// Subsection is A subsection element.
public class Subsection {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	protected List<Block> Block;
	protected List<Inline> Inline;
	protected List<Misc> Misc;
	@XmlElement(required = true, name = "form")
	protected List<void> Form;
}

// Source is A source element.
public class Source {
}

// Macro is A macro element.
public class Macro {
	@XmlAttribute(name = "name", required = true)
	protected String NameAttr;
	@XmlElement(required = true, name = "param")
	protected List<void> Param;
}
