// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "component")
public class Component {
	protected Component Component;
}

// FileSets is Specify assembly parameters for groups of files.
public class FileSets {
	@XmlElement(name = "fileSet")
	protected List<FileSet> FileSet;
}

// Files is Specify assembly parameters for single files.
public class Files {
	@XmlElement(name = "file")
	protected List<FileItem> File;
}

// DependencySets is Specify assembly behavior for sets of dependencies.
public class DependencySets {
	@XmlElement(name = "dependencySet")
	protected List<DependencySet> DependencySet;
}

// Component2 is Describes the component layout and packaging.
public class Component2 {
	@XmlElement(name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(name = "files")
	protected Files Files;
	@XmlElement(name = "dependencySets")
	protected DependencySets DependencySets;
}

// Includes is When &lt;include&gt; subelements are present, they define
//             a set of files and directory to include.
public class Includes {
	@XmlElement(name = "include")
	protected List<String> Include;
}

// Excludes is When &lt;exclude&gt; subelements are present, they define
//             a set of files and directory to exclude.
public class Excludes {
	@XmlElement(name = "exclude")
	protected List<String> Exclude;
}

// DependencySet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class DependencySet {
	@XmlElement(name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(name = "unpack")
	protected Boolean Unpack;
	@XmlElement(name = "scope")
	protected String Scope;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}

// FileItem is Flag used to determine if the file is filtered.
public class FileItem {
	@XmlElement(name = "source")
	protected String Source;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "destName")
	protected String DestName;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "lineEnding")
	protected String LineEnding;
	@XmlElement(name = "filtered")
	protected Boolean Filtered;
}

// FileSet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
public class FileSet {
	@XmlElement(name = "directory")
	protected String Directory;
	@XmlElement(name = "lineEnding")
	protected String LineEnding;
	@XmlElement(name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(name = "includes")
	protected Includes Includes;
	@XmlElement(name = "excludes")
	protected Excludes Excludes;
	@XmlElement(name = "fileMode")
	protected String FileMode;
	@XmlElement(name = "directoryMode")
	protected String DirectoryMode;
}
