// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// project is The <code>&lt;project&gt;</code> element is the root of the descriptor.
//         The following table lists all of the possible child elements.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct project {
	#[serde(rename = "project")]
	pub project: Model,
}


// Licenses is This element describes all of the licenses for this project.
//             Each license is described by a <code>license</code> element, which
//             is then described by additional elements.
//             Projects should only list the license(s) that applies to the project
//             and not the licenses that apply to dependencies.
//             If multiple licenses are listed, it is assumed that the user can select
//             any of them, not that they must accept all.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Licenses {
	#[serde(rename = "license")]
	pub license: Vec<License>,
}


// Developers is Describes the committers of a project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developers {
	#[serde(rename = "developer")]
	pub developer: Vec<Developer>,
}


// Contributors is Describes the contributors to a project that are not yet committers.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributors {
	#[serde(rename = "contributor")]
	pub contributor: Vec<Contributor>,
}


// MailingLists is Contains information about a project's mailing lists.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingLists {
	#[serde(rename = "mailingList")]
	pub mailing_list: Vec<MailingList>,
}


// Modules is The modules (sometimes called subprojects) to build as a part of this
//             project. Each module listed is a relative path to the directory containing the module.
//             To be consistent with the way default urls are calculated from parent, it is recommended
//             to have module names match artifact ids.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Modules {
	#[serde(rename = "module")]
	pub module: Vec<String>,
}


// Properties is Properties that can be used throughout the POM as a substitution, and
//             are used as filters in resources if enabled.
//             The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Properties {
}


// Dependencies is This element describes all of the dependencies associated with a
//             project.
//             These dependencies are used to construct a classpath for your
//             project during the build process. They are automatically downloaded from the
//             repositories defined in this project.
//             See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
//             dependency mechanism</a> for more information.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependencies {
	#[serde(rename = "dependency")]
	pub dependency: Vec<Dependency>,
}


// Repositories is The lists of the remote repositories for discovering dependencies and
//             extensions.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repositories {
	#[serde(rename = "repository")]
	pub repository: Vec<Repository>,
}


// PluginRepositories is The lists of the remote repositories for discovering plugins for builds and
//             reports.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PluginRepositories {
	#[serde(rename = "pluginRepository")]
	pub plugin_repository: Vec<Repository>,
}


// Reports is <b>Deprecated</b>. Now ignored by Maven.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Reports {
}


// Profiles is A listing of project-local build profiles which will modify the build process
//             when activated.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Profiles {
	#[serde(rename = "profile")]
	pub profile: Vec<Profile>,
}


// Model is This element describes various attributes of the organization to which the
//             project belongs. These attributes are utilized when documentation is created (for
//             copyright notices and links).
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Model {
	#[serde(rename = "child.project.url.inherit.append.path")]
	pub child_project_url_inherit_append_path: Option<String>,
	#[serde(rename = "modelVersion")]
	pub model_version: String,
	#[serde(rename = "parent")]
	pub parent: Parent,
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "packaging")]
	pub packaging: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "description")]
	pub description: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "inceptionYear")]
	pub inception_year: String,
	#[serde(rename = "organization")]
	pub organization: Organization,
	#[serde(rename = "licenses")]
	pub licenses: Licenses,
	#[serde(rename = "developers")]
	pub developers: Developers,
	#[serde(rename = "contributors")]
	pub contributors: Contributors,
	#[serde(rename = "mailingLists")]
	pub mailing_lists: MailingLists,
	#[serde(rename = "prerequisites")]
	pub prerequisites: Prerequisites,
	#[serde(rename = "modules")]
	pub modules: Modules,
	#[serde(rename = "scm")]
	pub scm: Scm,
	#[serde(rename = "issueManagement")]
	pub issue_management: IssueManagement,
	#[serde(rename = "ciManagement")]
	pub ci_management: CiManagement,
	#[serde(rename = "distributionManagement")]
	pub distribution_management: DistributionManagement,
	#[serde(rename = "properties")]
	pub properties: Properties,
	#[serde(rename = "dependencyManagement")]
	pub dependency_management: DependencyManagement,
	#[serde(rename = "dependencies")]
	pub dependencies: Dependencies,
	#[serde(rename = "repositories")]
	pub repositories: Repositories,
	#[serde(rename = "pluginRepositories")]
	pub plugin_repositories: PluginRepositories,
	#[serde(rename = "build")]
	pub build: Build,
	#[serde(rename = "reports")]
	pub reports: Reports,
	#[serde(rename = "reporting")]
	pub reporting: Reporting,
	#[serde(rename = "profiles")]
	pub profiles: Profiles,
}


// License is Addendum information pertaining to this license.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct License {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "distribution")]
	pub distribution: String,
	#[serde(rename = "comments")]
	pub comments: String,
}


// Notifiers is Configuration for notifying developers/users when a build is unsuccessful,
//             including user information and notification mode.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Notifiers {
	#[serde(rename = "notifier")]
	pub notifier: Vec<Notifier>,
}


// CiManagement is URL for the continuous integration system used by the project if it has a web
//             interface.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CiManagement {
	#[serde(rename = "system")]
	pub system: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "notifiers")]
	pub notifiers: Notifiers,
}


// Configuration is Extended configuration specific to this notifier goes here.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Configuration {
}


// Notifier is <b>Deprecated</b>. Where to send the notification to - eg email address.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Notifier {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "sendOnError")]
	pub send_on_error: bool,
	#[serde(rename = "sendOnFailure")]
	pub send_on_failure: bool,
	#[serde(rename = "sendOnSuccess")]
	pub send_on_success: bool,
	#[serde(rename = "sendOnWarning")]
	pub send_on_warning: bool,
	#[serde(rename = "address")]
	pub address: String,
	#[serde(rename = "configuration")]
	pub configuration: Configuration,
}


// Scm is The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             scm's <code>child.scm.url.inherit.append.path="false"</code>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Scm {
	#[serde(rename = "child.scm.connection.inherit.append.path")]
	pub child_scm_connection_inherit_append_path: Option<String>,
	#[serde(rename = "child.scm.developerConnection.inherit.append.path")]
	pub child_scm_developer_connection_inherit_append_path: Option<String>,
	#[serde(rename = "child.scm.url.inherit.append.path")]
	pub child_scm_url_inherit_append_path: Option<String>,
	#[serde(rename = "connection")]
	pub connection: String,
	#[serde(rename = "developerConnection")]
	pub developer_connection: String,
	#[serde(rename = "tag")]
	pub tag: String,
	#[serde(rename = "url")]
	pub url: String,
}


// IssueManagement is URL for the issue management system used by the project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct IssueManagement {
	#[serde(rename = "system")]
	pub system: String,
	#[serde(rename = "url")]
	pub url: String,
}


// DependencyManagement is Section for management of default dependency information for use in a group of
//         POMs.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencyManagement {
	#[serde(rename = "dependencies")]
	pub dependencies: Dependencies,
}


// Exclusions is Lists a set of artifacts that should be excluded from this dependency's
//             artifact list when it comes to calculating transitive dependencies.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Exclusions {
	#[serde(rename = "exclusion")]
	pub exclusion: Vec<Exclusion>,
}


// Dependency is FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
//             and may be replaced in later versions. This specifies the path on the filesystem
//             for this dependency.
//             Requires an absolute path for the value, not relative.
//             Use a property that gives the machine specific absolute path,
//             e.g. <code>${java.home}</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependency {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "classifier")]
	pub classifier: String,
	#[serde(rename = "scope")]
	pub scope: String,
	#[serde(rename = "systemPath")]
	pub system_path: String,
	#[serde(rename = "exclusions")]
	pub exclusions: Exclusions,
	#[serde(rename = "optional")]
	pub optional: String,
}


// Exclusion is The group ID of the project to exclude.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Exclusion {
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "groupId")]
	pub group_id: String,
}


// Parent is The relative path of the parent <code>pom.xml</code> file within the check out.
//             If not specified, it defaults to <code>../pom.xml</code>.
//             Maven looks for the parent POM first in this location on
//             the filesystem, then the local repository, and lastly in the remote repo.
//             <code>relativePath</code> allows you to select a different location,
//             for example when your structure is flat, or deeper without an intermediate parent POM.
//             However, the group ID, artifact ID and version are still required,
//             and must match the file in the location given or it will revert to the repository for the POM.
//             This feature is only for enhancing the development in a local checkout of that project.
//             Set the value to an empty string in case you want to disable the feature and always resolve
//             the parent POM from the repositories.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Parent {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "relativePath")]
	pub relative_path: String,
}


// Roles is The roles the contributor plays in the project. Each role is described by a
//             <code>role</code> element, the body of which is a role name. This can also be used to
//             describe the contribution.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Roles {
	#[serde(rename = "role")]
	pub role: Vec<String>,
}


// Developer is The URL of the organization.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developer {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "email")]
	pub email: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "organization")]
	pub organization: String,
	#[serde(rename = "organizationUrl")]
	pub organization_url: String,
	#[serde(rename = "roles")]
	pub roles: Roles,
	#[serde(rename = "timezone")]
	pub timezone: String,
	#[serde(rename = "properties")]
	pub properties: Properties,
}


// OtherArchives is The link to alternate URLs where you can browse the list archive.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OtherArchives {
	#[serde(rename = "otherArchive")]
	pub other_archive: Vec<String>,
}


// MailingList is The link to a URL where you can browse the mailing list archive.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingList {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "subscribe")]
	pub subscribe: String,
	#[serde(rename = "unsubscribe")]
	pub unsubscribe: String,
	#[serde(rename = "post")]
	pub post: String,
	#[serde(rename = "archive")]
	pub archive: String,
	#[serde(rename = "otherArchives")]
	pub other_archives: OtherArchives,
}


// Contributor is The URL of the organization.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributor {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "email")]
	pub email: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "organization")]
	pub organization: String,
	#[serde(rename = "organizationUrl")]
	pub organization_url: String,
	#[serde(rename = "roles")]
	pub roles: Roles,
	#[serde(rename = "timezone")]
	pub timezone: String,
	#[serde(rename = "properties")]
	pub properties: Properties,
}


// Organization is The URL to the organization's home page.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Organization {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
}


// DistributionManagement is Gives the status of this artifact in the remote repository.
//             This must not be set in your local project, as it is updated by
//             tools placing it in the reposiory. Valid values are: <code>none</code> (default),
//             <code>converted</code> (repository manager converted this from an Maven 1 POM),
//             <code>partner</code>
//             (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
//             instance), <code>verified</code> (has been hand verified as correct and final).
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DistributionManagement {
	#[serde(rename = "repository")]
	pub repository: DeploymentRepository,
	#[serde(rename = "snapshotRepository")]
	pub snapshot_repository: DeploymentRepository,
	#[serde(rename = "site")]
	pub site: Site,
	#[serde(rename = "downloadUrl")]
	pub download_url: String,
	#[serde(rename = "relocation")]
	pub relocation: Relocation,
	#[serde(rename = "status")]
	pub status: String,
}


// DeploymentRepository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DeploymentRepository {
	#[serde(rename = "uniqueVersion")]
	pub unique_version: bool,
	#[serde(rename = "releases")]
	pub releases: RepositoryPolicy,
	#[serde(rename = "snapshots")]
	pub snapshots: RepositoryPolicy,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "layout")]
	pub layout: String,
}


// RepositoryPolicy is What to do when verification of an artifact checksum fails. Valid values are
//             <code>ignore</code>
//             ,
//             <code>fail</code>
//             or
//             <code>warn</code>
//             (the default).
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RepositoryPolicy {
	#[serde(rename = "enabled")]
	pub enabled: String,
	#[serde(rename = "updatePolicy")]
	pub update_policy: String,
	#[serde(rename = "checksumPolicy")]
	pub checksum_policy: String,
}


// Relocation is An additional message to show the user about the move, such as the reason.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Relocation {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "message")]
	pub message: String,
}


// Site is The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             site's <code>child.site.url.inherit.append.path="false"</code>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Site {
	#[serde(rename = "child.site.url.inherit.append.path")]
	pub child_site_url_inherit_append_path: Option<String>,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
}


// Plugins is The reporting plugins to use and their configuration.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Plugins {
	#[serde(rename = "plugin")]
	pub plugin: Vec<ReportPlugin>,
}


// Reporting is Where to store all of the generated reports. The default is
//             <code>${project.build.directory}/site</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Reporting {
	#[serde(rename = "excludeDefaults")]
	pub exclude_defaults: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "plugins")]
	pub plugins: Plugins,
}


// ReportSets is Multiple specifications of a set of reports, each having (possibly) different
//             configuration. This is the reporting parallel to an <code>execution</code> in the build.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ReportSets {
	#[serde(rename = "reportSet")]
	pub report_set: Vec<ReportSet>,
}


// ReportPlugin is The version of the reporting plugin to be used.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ReportPlugin {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "reportSets")]
	pub report_sets: ReportSets,
	#[serde(rename = "inherited")]
	pub inherited: String,
	#[serde(rename = "configuration")]
	pub configuration: Configuration,
}


// ReportSet is The unique id for this report set, to be used during POM inheritance and profile injection
//             for merging of report sets.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ReportSet {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "reports")]
	pub reports: Reports,
	#[serde(rename = "inherited")]
	pub inherited: String,
	#[serde(rename = "configuration")]
	pub configuration: Configuration,
}


// Profile is Information required to build the project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Profile {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "activation")]
	pub activation: Activation,
	#[serde(rename = "build")]
	pub build: BuildBase,
	#[serde(rename = "modules")]
	pub modules: Modules,
	#[serde(rename = "distributionManagement")]
	pub distribution_management: DistributionManagement,
	#[serde(rename = "properties")]
	pub properties: Properties,
	#[serde(rename = "dependencyManagement")]
	pub dependency_management: DependencyManagement,
	#[serde(rename = "dependencies")]
	pub dependencies: Dependencies,
	#[serde(rename = "repositories")]
	pub repositories: Repositories,
	#[serde(rename = "pluginRepositories")]
	pub plugin_repositories: PluginRepositories,
	#[serde(rename = "reports")]
	pub reports: Reports,
	#[serde(rename = "reporting")]
	pub reporting: Reporting,
}


// Activation is Specifies that this profile will be activated based on existence of a file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Activation {
	#[serde(rename = "activeByDefault")]
	pub active_by_default: bool,
	#[serde(rename = "jdk")]
	pub jdk: String,
	#[serde(rename = "os")]
	pub os: ActivationOS,
	#[serde(rename = "property")]
	pub property: ActivationProperty,
	#[serde(rename = "file")]
	pub file: ActivationFile,
}


// ActivationProperty is The value of the property required to activate a profile.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationProperty {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "value")]
	pub value: String,
}


// ActivationFile is The name of the file that must exist to activate the profile.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationFile {
	#[serde(rename = "missing")]
	pub missing: String,
	#[serde(rename = "exists")]
	pub exists: String,
}


// ActivationOS is The version of the operating system to be used to activate the
//           profile.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationOS {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "family")]
	pub family: String,
	#[serde(rename = "arch")]
	pub arch: String,
	#[serde(rename = "version")]
	pub version: String,
}


// Repository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "releases")]
	pub releases: RepositoryPolicy,
	#[serde(rename = "snapshots")]
	pub snapshots: RepositoryPolicy,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "layout")]
	pub layout: String,
}


// Resources is This element describes all of the classpath resources such as properties
//             files associated with a project. These resources are often included in the final
//             package.
//             The default value is <code>src/main/resources</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resources {
	#[serde(rename = "resource")]
	pub resource: Vec<Resource>,
}


// TestResources is This element describes all of the classpath resources such as properties
//             files associated with a project's unit tests.
//             The default value is <code>src/test/resources</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TestResources {
	#[serde(rename = "testResource")]
	pub test_resource: Vec<Resource>,
}


// Filters is The list of filter properties files that are used when filtering is enabled.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Filters {
	#[serde(rename = "filter")]
	pub filter: Vec<String>,
}


// BuildBase is The default goal (or phase in Maven 2) to execute when none is specified for
//             the project. Note that in case of a multi-module build, only the default goal of the top-level
//             project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
//             multiple goals/phases can be separated by whitespace.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct BuildBase {
	#[serde(rename = "defaultGoal")]
	pub default_goal: String,
	#[serde(rename = "resources")]
	pub resources: Resources,
	#[serde(rename = "testResources")]
	pub test_resources: TestResources,
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "finalName")]
	pub final_name: String,
	#[serde(rename = "filters")]
	pub filters: Filters,
	#[serde(rename = "pluginManagement")]
	pub plugin_management: PluginManagement,
	#[serde(rename = "plugins")]
	pub plugins: Plugins,
}


// Executions is Multiple specifications of a set of goals to execute during the build
//             lifecycle, each having (possibly) a different configuration.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Executions {
	#[serde(rename = "execution")]
	pub execution: Vec<PluginExecution>,
}


// Goals is <b>Deprecated</b>. Unused by Maven.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Goals {
}


// Plugin is Whether to load Maven extensions (such as packaging and type handlers) from
//             this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
//             of this field is <code>String</code> for technical reasons, the semantic type is actually
//             <code>Boolean</code>. Default value is <code>false</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Plugin {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "extensions")]
	pub extensions: String,
	#[serde(rename = "executions")]
	pub executions: Executions,
	#[serde(rename = "dependencies")]
	pub dependencies: Dependencies,
	#[serde(rename = "goals")]
	pub goals: Goals,
	#[serde(rename = "inherited")]
	pub inherited: String,
	#[serde(rename = "configuration")]
	pub configuration: Configuration,
}


// PluginExecution is The build lifecycle phase to bind the goals in this execution to. If omitted,
//             the goals will be bound to the default phase specified by the plugin.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PluginExecution {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "phase")]
	pub phase: String,
	#[serde(rename = "goals")]
	pub goals: Goals,
	#[serde(rename = "inherited")]
	pub inherited: String,
	#[serde(rename = "configuration")]
	pub configuration: Configuration,
}


// Includes is A list of patterns to include, e.g. <code>**&#47;*.xml</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes is A list of patterns to exclude, e.g. <code>**&#47;*.xml</code>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// Resource is Describe the directory where the resources are stored. The path is relative
//             to the POM.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resource {
	#[serde(rename = "targetPath")]
	pub target_path: String,
	#[serde(rename = "filtering")]
	pub filtering: String,
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
}


// PluginManagement is Section for management of default plugin information for use in a group of POMs.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PluginManagement {
	#[serde(rename = "plugins")]
	pub plugins: Plugins,
}


// Prerequisites is For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
//             Maven required to use the resulting plugin.<br>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Prerequisites {
	#[serde(rename = "maven")]
	pub maven: String,
}


// Extensions is A set of build extensions to use from this project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Extensions {
	#[serde(rename = "extension")]
	pub extension: Vec<Extension>,
}


// Build is The directory where compiled test classes are placed.
//             The default value is <code>target/test-classes</code>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Build {
	#[serde(rename = "sourceDirectory")]
	pub source_directory: String,
	#[serde(rename = "scriptSourceDirectory")]
	pub script_source_directory: String,
	#[serde(rename = "testSourceDirectory")]
	pub test_source_directory: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "testOutputDirectory")]
	pub test_output_directory: String,
	#[serde(rename = "extensions")]
	pub extensions: Extensions,
	#[serde(rename = "defaultGoal")]
	pub default_goal: String,
	#[serde(rename = "resources")]
	pub resources: Resources,
	#[serde(rename = "testResources")]
	pub test_resources: TestResources,
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "finalName")]
	pub final_name: String,
	#[serde(rename = "filters")]
	pub filters: Filters,
	#[serde(rename = "pluginManagement")]
	pub plugin_management: PluginManagement,
	#[serde(rename = "plugins")]
	pub plugins: Plugins,
}


// Extension is The version of the extension.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Extension {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
}
