// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// document is Record every release with their subsequent changes.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct document {
	#[serde(rename = "document")]
	pub document: ChangesDocument,
}


// ChangesDocument is Contains the releases of this project with the actions taken
//             for each of the releases.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ChangesDocument {
	#[serde(rename = "properties")]
	pub properties: Properties,
	#[serde(rename = "body")]
	pub body: Body,
}


// Body is The list of releases for this project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Body {
	#[serde(rename = "release")]
	pub release: Vec<Release>,
}


// Release is The list of actions taken for this release.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Release {
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "date")]
	pub date: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "action")]
	pub action: Vec<Action>,
}


// Action is A list of contibutors for this issue.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Action {
	#[serde(rename = "dev")]
	pub dev: Option<String>,
	#[serde(rename = "due-to")]
	pub dueto: Option<String>,
	#[serde(rename = "due-to-email")]
	pub duetoemail: Option<String>,
	#[serde(rename = "issue")]
	pub issue: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "system")]
	pub system: Option<String>,
	#[serde(rename = "date")]
	pub date: Option<String>,
	#[serde(rename = "fixes")]
	pub fixes: Vec<FixedIssue>,
	#[serde(rename = "dueto")]
	pub dueto: Vec<DueTo>,
}


// FixedIssue is A fixed issue.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FixedIssue {
	#[serde(rename = "issue")]
	pub issue: Option<String>,
}


// DueTo is Name and Email of the person to be credited for this change. This can be used when a patch is submitted by a non-committer.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DueTo {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "email")]
	pub email: Option<String>,
}


// Properties is Page Author
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Properties {
	#[serde(rename = "title")]
	pub title: String,
	#[serde(rename = "author")]
	pub author: Author,
}


// Author is A description of the author page.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Author {
	#[serde(rename = "email")]
	pub email: Option<String>,
}
