// Code generated by xgen. DO NOT EDIT.

#[macro_use]
extern crate serde_derive;
extern crate serde;
extern crate serde_xml_rs;

use serde_xml_rs::from_reader;


// project is The <code>&lt;project&gt;</code> element is the root of the site decoration descriptor.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct project {
	#[serde(rename = "project")]
	pub project: DecorationModel,
}


// PoweredBy is Powered by logos list.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PoweredBy {
	#[serde(rename = "logo")]
	pub logo: Vec<Logo>,
}


// Custom is Custom configuration for use with customized Velocity templates. Data from this field are
//             accessible in Velocity template from <code>$decoration.custom</code> variable as DOM content.
//             Example: <code>$decoration.custom.getChild( 'customElement' ).getValue()</code>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Custom {
}


// DecorationModel is Modify the version published display properties.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DecorationModel {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "combine.self")]
	pub combine_self: Option<String>,
	#[serde(rename = "bannerLeft")]
	pub banner_left: Banner,
	#[serde(rename = "bannerRight")]
	pub banner_right: Banner,
	#[serde(rename = "googleAdSenseClient")]
	pub google_ad_sense_client: String,
	#[serde(rename = "googleAdSenseSlot")]
	pub google_ad_sense_slot: String,
	#[serde(rename = "googleAnalyticsAccountId")]
	pub google_analytics_account_id: String,
	#[serde(rename = "publishDate")]
	pub publish_date: PublishDate,
	#[serde(rename = "version")]
	pub version: Version,
	#[serde(rename = "poweredBy")]
	pub powered_by: PoweredBy,
	#[serde(rename = "skin")]
	pub skin: Skin,
	#[serde(rename = "body")]
	pub body: Body,
	#[serde(rename = "custom")]
	pub custom: Custom,
}


// Version is Modify display properties for version published.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Version {
	#[serde(rename = "position")]
	pub position: Option<String>,
}


// Banner is The title for the banner image.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Banner {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "src")]
	pub src: String,
	#[serde(rename = "alt")]
	pub alt: String,
	#[serde(rename = "href")]
	pub href: String,
	#[serde(rename = "border")]
	pub border: String,
	#[serde(rename = "width")]
	pub width: String,
	#[serde(rename = "height")]
	pub height: String,
	#[serde(rename = "title")]
	pub title: String,
}


// Head is Additional content (like Javascript) to include in the HEAD block of the generated pages.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Head {
}


// Links is A list of links to display in the navigation.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Links {
	#[serde(rename = "item")]
	pub item: Vec<LinkItem>,
}


// Breadcrumbs is A list of breadcrumbs to display in the navigation.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Breadcrumbs {
	#[serde(rename = "item")]
	pub item: Vec<LinkItem>,
}


// Footer is If present, the contained text will be used instead of the generated copyright text.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Footer {
}


// Body is The main content decoration.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Body {
	#[serde(rename = "head")]
	pub head: Head,
	#[serde(rename = "links")]
	pub links: Links,
	#[serde(rename = "breadcrumbs")]
	pub breadcrumbs: Breadcrumbs,
	#[serde(rename = "menu")]
	pub menu: Vec<Menu>,
	#[serde(rename = "footer")]
	pub footer: Footer,
}


// LinkItem is A link in the navigation.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LinkItem {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "img")]
	pub img: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "alt")]
	pub alt: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
}


// Menu is A list of menu item.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Menu {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "inherit")]
	pub inherit: Option<String>,
	#[serde(rename = "inheritAsRef")]
	pub inherit_as_ref: Option<bool>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "img")]
	pub img: Option<String>,
	#[serde(rename = "alt")]
	pub alt: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "item")]
	pub item: Vec<MenuItem>,
}


// MenuItem is A list of menu item.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MenuItem {
	#[serde(rename = "collapse")]
	pub collapse: Option<bool>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "img")]
	pub img: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "alt")]
	pub alt: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "description")]
	pub description: String,
	#[serde(rename = "item")]
	pub item: Vec<MenuItem>,
}


// Skin is The skin version.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Skin {
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
}


// Logo is Power by logo on the navigation.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Logo {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "img")]
	pub img: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "alt")]
	pub alt: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
}


// PublishDate is Modify display properties for date published.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PublishDate {
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "format")]
	pub format: Option<String>,
}
