// Code generated by xgen. DO NOT EDIT.

#[macro_use]
extern crate serde_derive;
extern crate serde;
extern crate serde_xml_rs;

use serde_xml_rs::from_reader;


// Project ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Project {
	#[serde(rename = "extend")]
	pub extend: String,
	#[serde(rename = "pomVersion")]
	pub pom_version: String,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "currentVersion")]
	pub current_version: String,
	#[serde(rename = "organization")]
	pub organization: Organization,
	#[serde(rename = "inceptionYear")]
	pub inception_year: String,
	#[serde(rename = "package")]
	pub package: String,
	#[serde(rename = "logo")]
	pub logo: String,
	#[serde(rename = "gumpRepositoryId")]
	pub gump_repository_id: String,
	#[serde(rename = "description")]
	pub description: String,
	#[serde(rename = "shortDescription")]
	pub short_description: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "issueTrackingUrl")]
	pub issue_tracking_url: String,
	#[serde(rename = "siteAddress")]
	pub site_address: String,
	#[serde(rename = "siteDirectory")]
	pub site_directory: String,
	#[serde(rename = "distributionSite")]
	pub distribution_site: String,
	#[serde(rename = "distributionDirectory")]
	pub distribution_directory: String,
	#[serde(rename = "repository")]
	pub repository: Repository,
	#[serde(rename = "versions")]
	pub versions: Versions,
	#[serde(rename = "branches")]
	pub branches: Branches,
	#[serde(rename = "mailingLists")]
	pub mailing_lists: MailingLists,
	#[serde(rename = "developers")]
	pub developers: Developers,
	#[serde(rename = "contributors")]
	pub contributors: Contributors,
	#[serde(rename = "licenses")]
	pub licenses: Licenses,
	#[serde(rename = "dependencies")]
	pub dependencies: Dependencies,
	#[serde(rename = "build")]
	pub build: Build,
	#[serde(rename = "reports")]
	pub reports: Reports,
	#[serde(rename = "properties")]
	pub properties: Properties,
}


// extend ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct extend {
	#[serde(rename = "extend")]
	pub extend: String,
}


// connection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct connection {
	#[serde(rename = "connection")]
	pub connection: String,
}


// developer_connection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct developer_connection {
	#[serde(rename = "developerConnection")]
	pub developer_connection: String,
}


// current_version ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct current_version {
	#[serde(rename = "currentVersion")]
	pub current_version: String,
}


// description ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct description {
	#[serde(rename = "description")]
	pub description: String,
}


// distribution_site ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct distribution_site {
	#[serde(rename = "distributionSite")]
	pub distribution_site: String,
}


// distribution_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct distribution_directory {
	#[serde(rename = "distributionDirectory")]
	pub distribution_directory: String,
}


// name ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct name {
	#[serde(rename = "name")]
	pub name: String,
}


// group_id ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct group_id {
	#[serde(rename = "groupId")]
	pub group_id: String,
}


// artifact_id ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct artifact_id {
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
}


// gump_repository_id ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct gump_repository_id {
	#[serde(rename = "gumpRepositoryId")]
	pub gump_repository_id: String,
}


// id ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct id {
	#[serde(rename = "id")]
	pub id: String,
}


// inception_year ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct inception_year {
	#[serde(rename = "inceptionYear")]
	pub inception_year: String,
}


// issue_tracking_url ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct issue_tracking_url {
	#[serde(rename = "issueTrackingUrl")]
	pub issue_tracking_url: String,
}


// logo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct logo {
	#[serde(rename = "logo")]
	pub logo: String,
}


// package ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct package {
	#[serde(rename = "package")]
	pub package: String,
}


// pom_version ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct pom_version {
	#[serde(rename = "pomVersion")]
	pub pom_version: String,
}


// short_description ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct short_description {
	#[serde(rename = "shortDescription")]
	pub short_description: String,
}


// site_address ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct site_address {
	#[serde(rename = "siteAddress")]
	pub site_address: String,
}


// site_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct site_directory {
	#[serde(rename = "siteDirectory")]
	pub site_directory: String,
}


// url ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct url {
	#[serde(rename = "url")]
	pub url: String,
}


// Repository ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "connection")]
	pub connection: String,
	#[serde(rename = "developerConnection")]
	pub developer_connection: String,
	#[serde(rename = "url")]
	pub url: String,
}


// Organization ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Organization {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "logo")]
	pub logo: String,
}


// Versions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Versions {
	#[serde(rename = "version")]
	pub version: Vec<Version>,
}


// Version ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Version {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "tag")]
	pub tag: String,
}


// tag ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct tag {
	#[serde(rename = "tag")]
	pub tag: String,
}


// Branches ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Branches {
	#[serde(rename = "branch")]
	pub branch: Vec<Branch>,
}


// Branch ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Branch {
	#[serde(rename = "tag")]
	pub tag: String,
}


// MailingLists ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingLists {
	#[serde(rename = "mailingList")]
	pub mailing_list: Vec<MailingList>,
}


// MailingList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingList {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "subscribe")]
	pub subscribe: String,
	#[serde(rename = "unsubscribe")]
	pub unsubscribe: String,
	#[serde(rename = "archive")]
	pub archive: String,
}


// subscribe ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct subscribe {
	#[serde(rename = "subscribe")]
	pub subscribe: String,
}


// unsubscribe ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unsubscribe {
	#[serde(rename = "unsubscribe")]
	pub unsubscribe: String,
}


// archive ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct archive {
	#[serde(rename = "archive")]
	pub archive: String,
}


// Developers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developers {
	#[serde(rename = "developer")]
	pub developer: Vec<Developer>,
}


// Developer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developer {
	#[serde(rename = "contactDetails")]
	pub contact_details: ContactDetails,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "id")]
	pub id: String,
}


// ContactDetails ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContactDetails {
	#[serde(rename = "email")]
	pub email: String,
	#[serde(rename = "organization")]
	pub organization: String,
	#[serde(rename = "roles")]
	pub roles: Roles,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "timezone")]
	pub timezone: f64,
}


// email ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct email {
	#[serde(rename = "email")]
	pub email: String,
}


// Roles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Roles {
	#[serde(rename = "role")]
	pub role: Vec<String>,
}


// role ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct role {
	#[serde(rename = "role")]
	pub role: String,
}


// TimezoneType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TimezoneType {
	#[serde(rename = "timezoneType")]
	pub timezone_type: f64,
}


// timezone ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct timezone {
	#[serde(rename = "timezone")]
	pub timezone: f64,
}


// Contributors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributors {
	#[serde(rename = "contributor")]
	pub contributor: Vec<Contributor>,
}


// Contributor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributor {
	#[serde(rename = "contactDetails")]
	pub contact_details: ContactDetails,
	#[serde(rename = "name")]
	pub name: String,
}


// Licenses ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Licenses {
	#[serde(rename = "license")]
	pub license: Vec<License>,
}


// License ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct License {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "distribution")]
	pub distribution: char,
}


// distribution ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct distribution {
	#[serde(rename = "distribution")]
	pub distribution: char,
}


// Dependencies ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependencies {
	#[serde(rename = "dependency")]
	pub dependency: Vec<Dependency>,
}


// Dependency ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependency {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "groupId")]
	pub group_id: String,
	#[serde(rename = "artifactId")]
	pub artifact_id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "jar")]
	pub jar: String,
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "properties")]
	pub properties: Properties,
}


// type_attr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct type_attr {
	#[serde(rename = "type")]
	pub type_attr: String,
}


// jar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct jar {
	#[serde(rename = "jar")]
	pub jar: String,
}


// Build ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Build {
	#[serde(rename = "nagEmailAddress")]
	pub nag_email_address: String,
	#[serde(rename = "sourceDirectory")]
	pub source_directory: String,
	#[serde(rename = "sourceModifications")]
	pub source_modifications: SourceModifications,
	#[serde(rename = "unitTestSourceDirectory")]
	pub unit_test_source_directory: String,
	#[serde(rename = "integrationUnitTestSourceDirectory")]
	pub integration_unit_test_source_directory: String,
	#[serde(rename = "aspectSourceDirectory")]
	pub aspect_source_directory: String,
	#[serde(rename = "unitTest")]
	pub unit_test: UnitTest,
	#[serde(rename = "resources")]
	pub resources: Resources,
}


// nag_email_address ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct nag_email_address {
	#[serde(rename = "nagEmailAddress")]
	pub nag_email_address: String,
}


// source_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct source_directory {
	#[serde(rename = "sourceDirectory")]
	pub source_directory: String,
}


// SourceModifications ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SourceModifications {
	#[serde(rename = "sourceModification")]
	pub source_modification: Vec<SourceModification>,
}


// SourceModification ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SourceModification {
	#[serde(rename = "className")]
	pub class_name: String,
	#[serde(rename = "includes")]
	pub includes: Vec<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Vec<Excludes>,
}


// unit_test_source_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unit_test_source_directory {
	#[serde(rename = "unitTestSourceDirectory")]
	pub unit_test_source_directory: String,
}


// integration_unit_test_source_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct integration_unit_test_source_directory {
	#[serde(rename = "integrationUnitTestSourceDirectory")]
	pub integration_unit_test_source_directory: String,
}


// aspect_source_directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct aspect_source_directory {
	#[serde(rename = "aspectSourceDirectory")]
	pub aspect_source_directory: String,
}


// UnitTest ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UnitTest {
	#[serde(rename = "includes")]
	pub includes: Vec<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Vec<Excludes>,
	#[serde(rename = "resources")]
	pub resources: Resources,
}


// Includes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// include ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct include {
	#[serde(rename = "include")]
	pub include: String,
}


// exclude ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct exclude {
	#[serde(rename = "exclude")]
	pub exclude: String,
}


// Resources ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resources {
	#[serde(rename = "resource")]
	pub resource: Vec<Resource>,
}


// directory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct directory {
	#[serde(rename = "directory")]
	pub directory: String,
}


// target_path ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct target_path {
	#[serde(rename = "targetPath")]
	pub target_path: String,
}


// filtering ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct filtering {
	#[serde(rename = "filtering")]
	pub filtering: bool,
}


// Resource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resource {
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "targetPath")]
	pub target_path: String,
	#[serde(rename = "includes")]
	pub includes: Vec<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Vec<Excludes>,
	#[serde(rename = "filtering")]
	pub filtering: bool,
}


// Reports ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Reports {
	#[serde(rename = "report")]
	pub report: Vec<String>,
}


// Properties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Properties {
}


// classloader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct classloader {
	#[serde(rename = "classloader")]
	pub classloader: char,
}
