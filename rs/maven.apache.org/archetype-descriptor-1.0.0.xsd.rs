// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// archetypedescriptor is 0.0.0+
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct archetypedescriptor {
	#[serde(rename = "archetype-descriptor")]
	pub archetypedescriptor: ArchetypeDescriptor,
}


// RequiredProperties is List of required properties to generate a project from this archetype.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RequiredProperties {
	#[serde(rename = "requiredProperty")]
	pub required_property: Vec<RequiredProperty>,
}


// FileSets is File sets definition.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSets {
	#[serde(rename = "fileSet")]
	pub file_set: Vec<FileSet>,
}


// Modules is Modules definition.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Modules {
	#[serde(rename = "module")]
	pub module: Vec<ModuleDescriptor>,
}


// ArchetypeDescriptor is 0.0.0+
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ArchetypeDescriptor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "partial")]
	pub partial: Option<bool>,
	#[serde(rename = "requiredProperties")]
	pub required_properties: RequiredProperties,
	#[serde(rename = "fileSets")]
	pub file_sets: FileSets,
	#[serde(rename = "modules")]
	pub modules: Modules,
}


// Includes is Inclusion definition "à la" Ant.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes is Exclusion definition "à la" Ant.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// FileSet is The directory where the files will be searched for, which is also the directory where the
//            project's files will be generated.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSet {
	#[serde(rename = "filtered")]
	pub filtered: Option<bool>,
	#[serde(rename = "packaged")]
	pub packaged: Option<bool>,
	#[serde(rename = "encoding")]
	pub encoding: Option<String>,
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
}


// RequiredProperty is Default value of the property.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RequiredProperty {
	#[serde(rename = "key")]
	pub key: Option<String>,
	#[serde(rename = "defaultValue")]
	pub default_value: String,
}


// ModuleDescriptor is 0.0.0+
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModuleDescriptor {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "dir")]
	pub dir: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "fileSets")]
	pub file_sets: FileSets,
	#[serde(rename = "modules")]
	pub modules: Modules,
}
