// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// component is Describes the component layout and packaging.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct component {
	#[serde(rename = "component")]
	pub component: Component,
}


// FileSets is Specifies which groups of files to include in the assembly. A
//             fileSet is specified by providing one or more of &lt;fileSet&gt;
//             subelements.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSets {
	#[serde(rename = "fileSet")]
	pub file_set: Vec<FileSet>,
}


// Files is Specifies which single files to include in the assembly. A file
//             is specified by providing one or more of &lt;file&gt;
//             subelements.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Files {
	#[serde(rename = "file")]
	pub file: Vec<FileItem>,
}


// DependencySets is Specifies which dependencies to include in the assembly. A
//             dependencySet is specified by providing one or more of
//             &lt;dependencySet&gt; subelements.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySets {
	#[serde(rename = "dependencySet")]
	pub dependency_set: Vec<DependencySet>,
}


// Repositories is Specifies a set of repositories to include in the assembly. A
//             repository is specified by providing one or more of
//             &lt;repository&gt; subelements.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repositories {
	#[serde(rename = "repository")]
	pub repository: Vec<Repository>,
}


// ContainerDescriptorHandlers is Set of components which filter various container descriptors out of
//             the normal archive stream, so they can be aggregated then added.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContainerDescriptorHandlers {
	#[serde(rename = "containerDescriptorHandler")]
	pub container_descriptor_handler: Vec<ContainerDescriptorHandlerConfig>,
}


// Component is Describes the component layout and packaging.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Component {
	#[serde(rename = "fileSets")]
	pub file_sets: Option<FileSets>,
	#[serde(rename = "files")]
	pub files: Option<Files>,
	#[serde(rename = "dependencySets")]
	pub dependency_sets: Option<DependencySets>,
	#[serde(rename = "repositories")]
	pub repositories: Option<Repositories>,
	#[serde(rename = "containerDescriptorHandlers")]
	pub container_descriptor_handlers: Option<ContainerDescriptorHandlers>,
}


// Configuration is Configuration options for the handler.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Configuration {
}


// ContainerDescriptorHandlerConfig is The handler's plexus role-hint, for lookup from the container.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContainerDescriptorHandlerConfig {
	#[serde(rename = "handlerName")]
	pub handler_name: Option<String>,
	#[serde(rename = "configuration")]
	pub configuration: Option<Configuration>,
}


// GroupVersionAlignments is Align a group to a version or an individual artifact.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupVersionAlignments {
	#[serde(rename = "groupVersionAlignment")]
	pub group_version_alignment: Vec<GroupVersionAlignment>,
}


// Includes is When &lt;include&gt; subelements are present, they define a set of
//             files and directory to include. If none is present, then
//             &lt;includes&gt; represents all valid values.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes is When &lt;exclude&gt; subelements are present, they define a set of
//             files and directory to exclude. If none is present, then
//             &lt;excludes&gt; represents no exclusions.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// Repository is If set to true, this property will trigger the creation of repository
//             metadata which will allow the repository to be used as a functional remote
//             repository.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "includeMetadata")]
	pub include_metadata: Option<bool>,
	#[serde(rename = "groupVersionAlignments")]
	pub group_version_alignments: Option<GroupVersionAlignments>,
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "useStrictFiltering")]
	pub use_strict_filtering: Option<bool>,
	#[serde(rename = "useDefaultExcludes")]
	pub use_default_excludes: Option<bool>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "directoryMode")]
	pub directory_mode: Option<String>,
}


// GroupVersionAlignment is The version you want to align this group to.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupVersionAlignment {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
}


// FileItem is Sets whether to determine if the file is filtered.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileItem {
	#[serde(rename = "source")]
	pub source: Option<String>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "destName")]
	pub dest_name: Option<String>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "lineEnding")]
	pub line_ending: Option<String>,
	#[serde(rename = "filtered")]
	pub filtered: Option<bool>,
}


// FileSet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSet {
	#[serde(rename = "directory")]
	pub directory: Option<String>,
	#[serde(rename = "lineEnding")]
	pub line_ending: Option<String>,
	#[serde(rename = "filtered")]
	pub filtered: Option<bool>,
	#[serde(rename = "useStrictFiltering")]
	pub use_strict_filtering: Option<bool>,
	#[serde(rename = "useDefaultExcludes")]
	pub use_default_excludes: Option<bool>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "directoryMode")]
	pub directory_mode: Option<String>,
}


// DependencySet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySet {
	#[serde(rename = "outputFileNameMapping")]
	pub output_file_name_mapping: Option<String>,
	#[serde(rename = "unpack")]
	pub unpack: Option<bool>,
	#[serde(rename = "unpackOptions")]
	pub unpack_options: Option<UnpackOptions>,
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "useProjectArtifact")]
	pub use_project_artifact: Option<bool>,
	#[serde(rename = "useProjectAttachments")]
	pub use_project_attachments: Option<bool>,
	#[serde(rename = "useTransitiveDependencies")]
	pub use_transitive_dependencies: Option<bool>,
	#[serde(rename = "useTransitiveFiltering")]
	pub use_transitive_filtering: Option<bool>,
	#[serde(rename = "useStrictFiltering")]
	pub use_strict_filtering: Option<bool>,
	#[serde(rename = "useDefaultExcludes")]
	pub use_default_excludes: Option<bool>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "directoryMode")]
	pub directory_mode: Option<String>,
}


// UnpackOptions is Specifies options for including/excluding/filtering items extracted from an archive.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UnpackOptions {
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "filtered")]
	pub filtered: Option<bool>,
}
