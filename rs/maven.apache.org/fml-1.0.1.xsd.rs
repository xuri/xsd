// Code generated by xgen. DO NOT EDIT.

#[macro_use]
extern crate serde_derive;
extern crate serde;
extern crate serde_xml_rs;

use serde_xml_rs::from_reader;


// ContentType is media type, as per [RFC2045]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContentType {
	#[serde(rename = "ContentType")]
	pub content_type: String,
}


// ContentTypes is comma-separated list of media types, as per [RFC2045]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ContentTypes {
	#[serde(rename = "ContentTypes")]
	pub content_types: String,
}


// Charset is a character encoding, as per [RFC2045]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Charset {
	#[serde(rename = "Charset")]
	pub charset: String,
}


// Charsets is a space separated list of character encodings, as per [RFC2045]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Charsets {
	#[serde(rename = "Charsets")]
	pub charsets: String,
}


// LanguageCode is a language code, as per [RFC3066]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LanguageCode {
	#[serde(rename = "LanguageCode")]
	pub language_code: String,
}


// Character is a single character, as per section 2.2 of [XML]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Character {
	#[serde(rename = "Character")]
	pub character: String,
}


// Number is one or more digits
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Number {
	#[serde(rename = "Number")]
	pub number: u32,
}


// TabindexNumber is tabindex attribute specifies the position of the current element
//       in the tabbing order for the current document. This value must be
//       a number between 0 and 32767. User agents should ignore leading zeros.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TabindexNumber {
	#[serde(rename = "tabindexNumber")]
	pub tabindex_number: u32,
}


// LinkTypes is space-separated list of link types
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LinkTypes {
	#[serde(rename = "LinkTypes")]
	pub link_types: Vec<String>,
}


// MediaDesc is single or comma-separated list of media descriptors
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MediaDesc {
	#[serde(rename = "MediaDesc")]
	pub media_desc: String,
}


// URI is a Uniform Resource Identifier, see [RFC2396]
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct URI {
	#[serde(rename = "URI")]
	pub uri: String,
}


// UriList is a space separated list of Uniform Resource Identifiers
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UriList {
	#[serde(rename = "UriList")]
	pub uri_list: String,
}


// Datetime is date and time information. ISO date format
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Datetime {
	#[serde(rename = "Datetime")]
	pub datetime: u8,
}


// Script is script expression
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Script {
	#[serde(rename = "Script")]
	pub script: String,
}


// StyleSheet is style sheet data
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct StyleSheet {
	#[serde(rename = "StyleSheet")]
	pub style_sheet: String,
}


// Text is used for titles etc.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Text {
	#[serde(rename = "Text")]
	pub text: String,
}


// FrameTarget is render in this frame
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FrameTarget {
	#[serde(rename = "FrameTarget")]
	pub frame_target: String,
}


// Length is nn for pixels or nn% for percentage length
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Length {
	#[serde(rename = "Length")]
	pub length: String,
}


// MultiLength is pixel, percentage, or relative
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MultiLength {
	#[serde(rename = "MultiLength")]
	pub multi_length: String,
}


// Pixels is integer representing length in pixels
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Pixels {
	#[serde(rename = "Pixels")]
	pub pixels: u32,
}


// Shape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Shape {
	#[serde(rename = "Shape")]
	pub shape: String,
}


// Coords is comma separated list of lengths
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Coords {
	#[serde(rename = "Coords")]
	pub coords: String,
}


// ImgAlign is used for object, applet, img, input and iframe
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ImgAlign {
	#[serde(rename = "ImgAlign")]
	pub img_align: String,
}


// Color is a color using sRGB: #RRGGBB as Hex values
// 
//       There are also 16 widely known color names with their sRGB values:
// 
//       Black  = #000000    Green  = #008000
//       Silver = #C0C0C0    Lime   = #00FF00
//       Gray   = #808080    Olive  = #808000
//       White  = #FFFFFF    Yellow = #FFFF00
//       Maroon = #800000    Navy   = #000080
//       Red    = #FF0000    Blue   = #0000FF
//       Purple = #800080    Teal   = #008080
//       Fuchsia= #FF00FF    Aqua   = #00FFFF
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Color {
	#[serde(rename = "Color")]
	pub color: String,
}


// Coreattrs is core attributes common to most elements
//       id       document-wide unique id
//       class    space separated list of classes
//       style    associated style info
//       title    advisory title/amplification
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Coreattrs {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "class")]
	pub class: Option<Vec<String>>,
	#[serde(rename = "style")]
	pub style: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
}


// I18n is internationalization attributes
//       lang        language code (backwards compatible)
//       xml:lang    language code (as per XML 1.0 spec)
//       dir         direction for weak/neutral text
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct I18n {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "xml:lang")]
	pub xml_lang: Option<Lang>,
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}


// Events is attributes for common UI events
//       onclick     a pointer button was clicked
//       ondblclick  a pointer button was double clicked
//       onmousedown a pointer button was pressed down
//       onmouseup   a pointer button was released
//       onmousemove a pointer was moved onto the element
//       onmouseout  a pointer was moved away from the element
//       onkeypress  a key was pressed and released
//       onkeydown   a key was pressed down
//       onkeyup     a key was released
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Events {
	#[serde(rename = "onclick")]
	pub onclick: Option<String>,
	#[serde(rename = "ondblclick")]
	pub ondblclick: Option<String>,
	#[serde(rename = "onmousedown")]
	pub onmousedown: Option<String>,
	#[serde(rename = "onmouseup")]
	pub onmouseup: Option<String>,
	#[serde(rename = "onmouseover")]
	pub onmouseover: Option<String>,
	#[serde(rename = "onmousemove")]
	pub onmousemove: Option<String>,
	#[serde(rename = "onmouseout")]
	pub onmouseout: Option<String>,
	#[serde(rename = "onkeypress")]
	pub onkeypress: Option<String>,
	#[serde(rename = "onkeydown")]
	pub onkeydown: Option<String>,
	#[serde(rename = "onkeyup")]
	pub onkeyup: Option<String>,
}


// Focus is attributes for elements that can get the focus
//       accesskey   accessibility key character
//       tabindex    position in tabbing order
//       onfocus     the element got the focus
//       onblur      the element lost the focus
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Focus {
	#[serde(rename = "accesskey")]
	pub accesskey: Option<String>,
	#[serde(rename = "tabindex")]
	pub tabindex: Option<u32>,
	#[serde(rename = "onfocus")]
	pub onfocus: Option<String>,
	#[serde(rename = "onblur")]
	pub onblur: Option<String>,
}


// Attrs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Attrs {
}


// TextAlign is text alignment for p, div, h1-h6. The default is
//       align="left" for ltr headings, "right" for rtl
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TextAlign {
	#[serde(rename = "align")]
	pub align: Option<String>,
}


// SpecialExtra ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SpecialExtra {
	#[serde(rename = "object")]
	pub object: char,
	#[serde(rename = "applet")]
	pub applet: Applet,
	#[serde(rename = "img")]
	pub img: char,
	#[serde(rename = "map")]
	pub map: Map,
	#[serde(rename = "iframe")]
	pub iframe: char,
	#[serde(rename = "source")]
	pub source: Source,
	#[serde(rename = "macro")]
	pub macro_attr: Macro,
}


// SpecialBasic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SpecialBasic {
	#[serde(rename = "br")]
	pub br: char,
	#[serde(rename = "span")]
	pub span: Span,
	#[serde(rename = "bdo")]
	pub bdo: char,
}


// Special ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Special {
	#[serde(rename = "special.basic")]
	pub special_basic: SpecialBasic,
	#[serde(rename = "special.extra")]
	pub special_extra: SpecialExtra,
}


// FontstyleExtra ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FontstyleExtra {
	#[serde(rename = "big")]
	pub big: Big,
	#[serde(rename = "small")]
	pub small: Small,
	#[serde(rename = "font")]
	pub font: Font,
	#[serde(rename = "basefont")]
	pub basefont: Basefont,
}


// FontstyleBasic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FontstyleBasic {
	#[serde(rename = "tt")]
	pub tt: Tt,
	#[serde(rename = "i")]
	pub i: I,
	#[serde(rename = "b")]
	pub b: B,
	#[serde(rename = "u")]
	pub u: U,
	#[serde(rename = "s")]
	pub s: S,
	#[serde(rename = "strike")]
	pub strike: Strike,
}


// Fontstyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Fontstyle {
	#[serde(rename = "fontstyle.basic")]
	pub fontstyle_basic: FontstyleBasic,
	#[serde(rename = "fontstyle.extra")]
	pub fontstyle_extra: FontstyleExtra,
}


// PhraseExtra ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PhraseExtra {
	#[serde(rename = "sub")]
	pub sub: Sub,
	#[serde(rename = "sup")]
	pub sup: Sup,
}


// PhraseBasic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PhraseBasic {
	#[serde(rename = "em")]
	pub em: Em,
	#[serde(rename = "strong")]
	pub strong: Strong,
	#[serde(rename = "dfn")]
	pub dfn: Dfn,
	#[serde(rename = "code")]
	pub code: Code,
	#[serde(rename = "q")]
	pub q: Q,
	#[serde(rename = "samp")]
	pub samp: Samp,
	#[serde(rename = "kbd")]
	pub kbd: Kbd,
	#[serde(rename = "var")]
	pub var: Var,
	#[serde(rename = "cite")]
	pub cite: Cite,
	#[serde(rename = "abbr")]
	pub abbr: Abbr,
	#[serde(rename = "acronym")]
	pub acronym: Acronym,
}


// Phrase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Phrase {
	#[serde(rename = "phrase.basic")]
	pub phrase_basic: PhraseBasic,
	#[serde(rename = "phrase.extra")]
	pub phrase_extra: PhraseExtra,
}


// InlineForms ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct InlineForms {
	#[serde(rename = "input")]
	pub input: char,
	#[serde(rename = "select")]
	pub select: char,
	#[serde(rename = "textarea")]
	pub textarea: char,
	#[serde(rename = "label")]
	pub label: Label,
	#[serde(rename = "button")]
	pub button: char,
}


// MiscInline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MiscInline {
	#[serde(rename = "ins")]
	pub ins: Ins,
	#[serde(rename = "del")]
	pub del: Del,
	#[serde(rename = "script")]
	pub script: char,
}


// Misc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Misc {
	#[serde(rename = "noscript")]
	pub noscript: Noscript,
	#[serde(rename = "misc.inline")]
	pub misc_inline: MiscInline,
}


// Inline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Inline {
	#[serde(rename = "a")]
	pub a: A,
	#[serde(rename = "special")]
	pub special: Special,
	#[serde(rename = "fontstyle")]
	pub fontstyle: Fontstyle,
	#[serde(rename = "phrase")]
	pub phrase: Phrase,
	#[serde(rename = "inline.forms")]
	pub inline_forms: InlineForms,
}


// Inline2 is "Inline" covers inline or "text-level" element
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Inline2 {
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc.inline")]
	pub misc_inline: Vec<MiscInline>,
}


// Heading ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Heading {
	#[serde(rename = "h1")]
	pub h1: H1,
	#[serde(rename = "h2")]
	pub h2: H2,
	#[serde(rename = "h3")]
	pub h3: H3,
	#[serde(rename = "h4")]
	pub h4: H4,
	#[serde(rename = "h5")]
	pub h5: H5,
	#[serde(rename = "h6")]
	pub h6: H6,
}


// Lists ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Lists {
	#[serde(rename = "ul")]
	pub ul: char,
	#[serde(rename = "ol")]
	pub ol: char,
	#[serde(rename = "dl")]
	pub dl: char,
	#[serde(rename = "menu")]
	pub menu: char,
	#[serde(rename = "dir")]
	pub dir: char,
}


// Blocktext ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Blocktext {
	#[serde(rename = "pre")]
	pub pre: Pre,
	#[serde(rename = "hr")]
	pub hr: char,
	#[serde(rename = "blockquote")]
	pub blockquote: Blockquote,
	#[serde(rename = "address")]
	pub address: Address,
	#[serde(rename = "center")]
	pub center: Center,
	#[serde(rename = "noframes")]
	pub noframes: Noframes,
}


// Block ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Block {
	#[serde(rename = "p")]
	pub p: P,
	#[serde(rename = "div")]
	pub div: Div,
	#[serde(rename = "isindex")]
	pub isindex: Isindex,
	#[serde(rename = "fieldset")]
	pub fieldset: Fieldset,
	#[serde(rename = "table")]
	pub table: Table,
	#[serde(rename = "heading")]
	pub heading: Heading,
	#[serde(rename = "lists")]
	pub lists: Lists,
	#[serde(rename = "blocktext")]
	pub blocktext: Blocktext,
}


// Flow is "Flow" mixes block and inline and is used for list items etc.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Flow {
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "form")]
	pub form: Vec<char>,
}


// AContent is a elements use "Inline" excluding a
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AContent {
	#[serde(rename = "special")]
	pub special: Vec<Special>,
	#[serde(rename = "fontstyle")]
	pub fontstyle: Vec<Fontstyle>,
	#[serde(rename = "phrase")]
	pub phrase: Vec<Phrase>,
	#[serde(rename = "inline.forms")]
	pub inline_forms: Vec<InlineForms>,
	#[serde(rename = "misc.inline")]
	pub misc_inline: Vec<MiscInline>,
}


// PreContent is pre uses "Inline" excluding img, object, applet, big, small,
//       font, or basefont
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PreContent {
	#[serde(rename = "special.basic")]
	pub special_basic: Vec<SpecialBasic>,
	#[serde(rename = "fontstyle.basic")]
	pub fontstyle_basic: Vec<FontstyleBasic>,
	#[serde(rename = "phrase.basic")]
	pub phrase_basic: Vec<PhraseBasic>,
	#[serde(rename = "inline.forms")]
	pub inline_forms: Vec<InlineForms>,
	#[serde(rename = "misc.inline")]
	pub misc_inline: Vec<MiscInline>,
	#[serde(rename = "a")]
	pub a: Vec<A>,
}


// FormContent is form uses "Flow" excluding form
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FormContent {
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
}


// ButtonContent is button uses "Flow" but excludes a, form, form controls, iframe
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ButtonContent {
	#[serde(rename = "heading")]
	pub heading: Vec<Heading>,
	#[serde(rename = "lists")]
	pub lists: Vec<Lists>,
	#[serde(rename = "blocktext")]
	pub blocktext: Vec<Blocktext>,
	#[serde(rename = "fontstyle")]
	pub fontstyle: Vec<Fontstyle>,
	#[serde(rename = "phrase")]
	pub phrase: Vec<Phrase>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "p")]
	pub p: Vec<P>,
	#[serde(rename = "div")]
	pub div: Vec<Div>,
	#[serde(rename = "table")]
	pub table: Vec<Table>,
	#[serde(rename = "br")]
	pub br: Vec<char>,
	#[serde(rename = "span")]
	pub span: Vec<Span>,
	#[serde(rename = "bdo")]
	pub bdo: Vec<char>,
	#[serde(rename = "object")]
	pub object: Vec<char>,
	#[serde(rename = "applet")]
	pub applet: Vec<Applet>,
	#[serde(rename = "img")]
	pub img: Vec<char>,
	#[serde(rename = "map")]
	pub map: Vec<Map>,
}


// HeadMisc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct HeadMisc {
	#[serde(rename = "script")]
	pub script: char,
	#[serde(rename = "style")]
	pub style: Style,
	#[serde(rename = "meta")]
	pub meta: Meta,
	#[serde(rename = "link")]
	pub link: Link,
	#[serde(rename = "object")]
	pub object: char,
	#[serde(rename = "isindex")]
	pub isindex: Isindex,
}


// Head is content model is "head.misc" combined with a single
//       title and an optional base element in any order
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Head {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "profile")]
	pub profile: Option<String>,
	#[serde(rename = "head.misc")]
	pub head_misc: HeadMisc,
	#[serde(rename = "title")]
	pub title: Title,
	#[serde(rename = "base")]
	pub base: Base,
}


// Title is The title element is not considered part of the flow of text.
//       It should be displayed, for example as the page header or
//       window title. Exactly one title is required per document.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Title {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "id")]
	pub id: Option<String>,
}


// Base is document base URI
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Base {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
}


// Meta is generic metainformation
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Meta {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "http-equiv")]
	pub httpequiv: Option<char>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "content")]
	pub content: char,
	#[serde(rename = "scheme")]
	pub scheme: Option<char>,
}


// Link is Relationship values can be used in principle:
// 
//       a) for document specific toolbars/menus when used
//          with the link element in document head e.g.
//            start, contents, previous, next, index, end, help
//       b) to link to a separate style sheet (rel="stylesheet")
//       c) to make a link to a script (rel="script")
//       d) by stylesheets to control how collections of
//          html nodes are rendered into printed documents
//       e) to make a link to a printable version of this document
//          e.g. a PostScript or PDF version (rel="alternate" media="print")
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Link {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "charset")]
	pub charset: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "hreflang")]
	pub hreflang: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "rel")]
	pub rel: Option<Vec<String>>,
	#[serde(rename = "rev")]
	pub rev: Option<Vec<String>>,
	#[serde(rename = "media")]
	pub media: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
}


// Style is style info, which may include CDATA sections
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Style {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "media")]
	pub media: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "xml:space")]
	pub xml_space: Option<Space>,
}


// Script2 is script statements, which may include CDATA sections
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Script2 {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "charset")]
	pub charset: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "language")]
	pub language: Option<char>,
	#[serde(rename = "src")]
	pub src: Option<String>,
	#[serde(rename = "defer")]
	pub defer: Option<char>,
	#[serde(rename = "xml:space")]
	pub xml_space: Option<Space>,
}


// Noscript is alternate content container for non script-based rendering
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Noscript {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Iframe is inline subwindow
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Iframe {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "longdesc")]
	pub longdesc: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "src")]
	pub src: Option<String>,
	#[serde(rename = "frameborder")]
	pub frameborder: Option<char>,
	#[serde(rename = "marginwidth")]
	pub marginwidth: Option<u32>,
	#[serde(rename = "marginheight")]
	pub marginheight: Option<u32>,
	#[serde(rename = "scrolling")]
	pub scrolling: Option<char>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Noframes is alternate content container for non frame-based rendering
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Noframes {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Div is generic language/style container
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Div {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub flow: Flow,
}


// P ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct P {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H1 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H1 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H2 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H2 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H3 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H3 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H4 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H4 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H5 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H5 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// H6 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct H6 {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "TextAlign")]
	pub text_align: Vec<TextAlign>,
	#[serde(flatten)]
	pub inline: Inline,
}


// ULStyle is Unordered list bullet styles
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ULStyle {
	#[serde(rename = "ULStyle")]
	pub ul_style: String,
}


// Ul is Unordered list
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Ul {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "compact")]
	pub compact: Option<char>,
	#[serde(rename = "ul")]
	pub ul: char,
}


// OLStyle is Ordered list numbering style
// 
//       1   arabic numbers      1, 2, 3, ...
//       a   lower alpha         a, b, c, ...
//       A   upper alpha         A, B, C, ...
//       i   lower roman         i, ii, iii, ...
//       I   upper roman         I, II, III, ...
// 
//       The style is applied to the sequence number which by default
//       is reset to 1 for the first list item in an ordered list.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OLStyle {
	#[serde(rename = "OLStyle")]
	pub ol_style: String,
}


// Ol is Ordered (numbered) list
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Ol {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "compact")]
	pub compact: Option<char>,
	#[serde(rename = "start")]
	pub start: Option<u32>,
	#[serde(rename = "ol")]
	pub ol: char,
}


// Menu is single column list (DEPRECATED)
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Menu {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "compact")]
	pub compact: Option<char>,
	#[serde(rename = "menu")]
	pub menu: char,
}


// Dir is multiple column list (DEPRECATED)
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dir {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "compact")]
	pub compact: Option<char>,
	#[serde(rename = "dir")]
	pub dir: char,
}


// LIStyle is LIStyle is constrained to: "(ULStyle|OLStyle)"
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LIStyle {
	#[serde(rename = "LIStyle")]
	pub li_style: String,
}


// Li is list item
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Li {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<u32>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Dl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dl {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "compact")]
	pub compact: Option<char>,
	#[serde(rename = "dt")]
	pub dt: Vec<Dt>,
	#[serde(rename = "dl")]
	pub dl: char,
}


// Dt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dt {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Dd ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dd {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Address is information on author
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Address {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc.inline")]
	pub misc_inline: Vec<MiscInline>,
	#[serde(rename = "p")]
	pub p: Vec<P>,
}


// Hr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Hr {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "align")]
	pub align: Option<char>,
	#[serde(rename = "noshade")]
	pub noshade: Option<char>,
	#[serde(rename = "size")]
	pub size: Option<u32>,
	#[serde(rename = "width")]
	pub width: Option<String>,
}


// Pre is content is "Inline" excluding
//          "img|object|applet|big|small|sub|sup|font|basefont"
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Pre {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "width")]
	pub width: Option<u32>,
	#[serde(rename = "xml:space")]
	pub xml_space: Option<Space>,
	#[serde(flatten)]
	pub pre_content: PreContent,
}


// Blockquote ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Blockquote {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cite")]
	pub cite: Option<String>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Center is center content
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Center {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Ins ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Ins {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cite")]
	pub cite: Option<String>,
	#[serde(rename = "datetime")]
	pub datetime: Option<u8>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Del ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Del {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cite")]
	pub cite: Option<String>,
	#[serde(rename = "datetime")]
	pub datetime: Option<u8>,
	#[serde(flatten)]
	pub flow: Flow,
}


// A is content is "Inline" except that anchors shouldn't be nested
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct A {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "focus")]
	pub focus: Vec<Focus>,
	#[serde(rename = "charset")]
	pub charset: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "hreflang")]
	pub hreflang: Option<String>,
	#[serde(rename = "rel")]
	pub rel: Option<Vec<String>>,
	#[serde(rename = "rev")]
	pub rev: Option<Vec<String>>,
	#[serde(rename = "shape")]
	pub shape: Option<String>,
	#[serde(rename = "coords")]
	pub coords: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(flatten)]
	pub a_content: AContent,
}


// Span is generic language/style container
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Span {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Bdo is I18N BiDi over-ride
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Bdo {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "events")]
	pub events: Vec<Events>,
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "xml:lang")]
	pub xml_lang: Option<Lang>,
	#[serde(rename = "dir")]
	pub dir: char,
	#[serde(flatten)]
	pub inline: Inline,
}


// Br is forced line break
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Br {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "clear")]
	pub clear: Option<char>,
}


// Em is emphasis
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Em {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Strong is strong emphasis
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Strong {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Dfn is definitional
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dfn {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Code is program code
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Code {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Samp is sample
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Samp {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Kbd is something user would type
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Kbd {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Var is variable
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Var {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Cite is citation
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Cite {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Abbr is abbreviation
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Abbr {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Acronym is acronym
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Acronym {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Q is inlined quote
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Q {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cite")]
	pub cite: Option<String>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Sub is subscript
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Sub {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Sup is superscript
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Sup {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Tt is fixed pitch font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Tt {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// I is italic font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct I {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// B is bold font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct B {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Big is bigger font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Big {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Small is smaller font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Small {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// U is underline
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct U {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// S is strike-through
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct S {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Strike is strike-through
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Strike {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Basefont is base font size
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Basefont {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "size")]
	pub size: char,
	#[serde(rename = "color")]
	pub color: Option<String>,
	#[serde(rename = "face")]
	pub face: Option<char>,
}


// Font is local change to font
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Font {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "size")]
	pub size: Option<char>,
	#[serde(rename = "color")]
	pub color: Option<String>,
	#[serde(rename = "face")]
	pub face: Option<char>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Object ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Object {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "declare")]
	pub declare: Option<char>,
	#[serde(rename = "classid")]
	pub classid: Option<String>,
	#[serde(rename = "codebase")]
	pub codebase: Option<String>,
	#[serde(rename = "data")]
	pub data: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "codetype")]
	pub codetype: Option<String>,
	#[serde(rename = "archive")]
	pub archive: Option<String>,
	#[serde(rename = "standby")]
	pub standby: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "usemap")]
	pub usemap: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "tabindex")]
	pub tabindex: Option<u32>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<u32>,
	#[serde(rename = "hspace")]
	pub hspace: Option<u32>,
	#[serde(rename = "vspace")]
	pub vspace: Option<u32>,
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "param")]
	pub param: Vec<char>,
	#[serde(rename = "object")]
	pub object: char,
}


// Param is param is used to supply a named property value.
//       In XML it would seem natural to follow RDF and support an
//       abbreviated syntax where the param elements are replaced
//       by attribute value pairs on the object start tag.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Param {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "name")]
	pub name: char,
	#[serde(rename = "value")]
	pub value: Option<char>,
	#[serde(rename = "valuetype")]
	pub valuetype: Option<char>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
}


// Applet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Applet {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "codebase")]
	pub codebase: Option<String>,
	#[serde(rename = "archive")]
	pub archive: Option<char>,
	#[serde(rename = "code")]
	pub code: Option<char>,
	#[serde(rename = "object")]
	pub object: Option<char>,
	#[serde(rename = "alt")]
	pub alt: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "width")]
	pub width: String,
	#[serde(rename = "height")]
	pub height: String,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "hspace")]
	pub hspace: Option<u32>,
	#[serde(rename = "vspace")]
	pub vspace: Option<u32>,
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "param")]
	pub param: Vec<char>,
	#[serde(rename = "form")]
	pub form: Vec<char>,
}


// Img ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Img {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "src")]
	pub src: String,
	#[serde(rename = "alt")]
	pub alt: String,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "longdesc")]
	pub longdesc: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "usemap")]
	pub usemap: Option<String>,
	#[serde(rename = "ismap")]
	pub ismap: Option<char>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<String>,
	#[serde(rename = "hspace")]
	pub hspace: Option<u32>,
	#[serde(rename = "vspace")]
	pub vspace: Option<u32>,
}


// Map ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Map {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "events")]
	pub events: Vec<Events>,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "class")]
	pub class: Option<char>,
	#[serde(rename = "style")]
	pub style: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "form")]
	pub form: Vec<char>,
	#[serde(rename = "area")]
	pub area: Vec<char>,
}


// Area ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Area {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "focus")]
	pub focus: Vec<Focus>,
	#[serde(rename = "shape")]
	pub shape: Option<String>,
	#[serde(rename = "coords")]
	pub coords: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "nohref")]
	pub nohref: Option<char>,
	#[serde(rename = "alt")]
	pub alt: String,
	#[serde(rename = "target")]
	pub target: Option<String>,
}


// Form ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Form {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "action")]
	pub action: String,
	#[serde(rename = "method")]
	pub method: Option<char>,
	#[serde(rename = "enctype")]
	pub enctype: Option<String>,
	#[serde(rename = "onsubmit")]
	pub onsubmit: Option<String>,
	#[serde(rename = "onreset")]
	pub onreset: Option<String>,
	#[serde(rename = "accept")]
	pub accept: Option<String>,
	#[serde(rename = "accept-charset")]
	pub acceptcharset: Option<String>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(flatten)]
	pub form_content: FormContent,
}


// Label is Each label must not contain more than ONE field
//       Label elements shouldn't be nested.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Label {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "for")]
	pub for_attr: Option<String>,
	#[serde(rename = "accesskey")]
	pub accesskey: Option<String>,
	#[serde(rename = "onfocus")]
	pub onfocus: Option<String>,
	#[serde(rename = "onblur")]
	pub onblur: Option<String>,
	#[serde(flatten)]
	pub inline: Inline,
}


// InputType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct InputType {
	#[serde(rename = "InputType")]
	pub input_type: String,
}


// Input is form control
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Input {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "focus")]
	pub focus: Vec<Focus>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "value")]
	pub value: Option<char>,
	#[serde(rename = "checked")]
	pub checked: Option<char>,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(rename = "readonly")]
	pub readonly: Option<char>,
	#[serde(rename = "size")]
	pub size: Option<char>,
	#[serde(rename = "maxlength")]
	pub maxlength: Option<u32>,
	#[serde(rename = "src")]
	pub src: Option<String>,
	#[serde(rename = "alt")]
	pub alt: Option<char>,
	#[serde(rename = "usemap")]
	pub usemap: Option<String>,
	#[serde(rename = "onselect")]
	pub onselect: Option<String>,
	#[serde(rename = "onchange")]
	pub onchange: Option<String>,
	#[serde(rename = "accept")]
	pub accept: Option<String>,
	#[serde(rename = "align")]
	pub align: Option<String>,
}


// Select is option selector
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Select {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "size")]
	pub size: Option<u32>,
	#[serde(rename = "multiple")]
	pub multiple: Option<char>,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(rename = "tabindex")]
	pub tabindex: Option<u32>,
	#[serde(rename = "onfocus")]
	pub onfocus: Option<String>,
	#[serde(rename = "onblur")]
	pub onblur: Option<String>,
	#[serde(rename = "onchange")]
	pub onchange: Option<String>,
	#[serde(rename = "optgroup")]
	pub optgroup: Vec<char>,
	#[serde(rename = "select")]
	pub select: char,
}


// Optgroup is option group
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Optgroup {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(rename = "label")]
	pub label: String,
	#[serde(rename = "optgroup")]
	pub optgroup: char,
}


// Option is selectable choice
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Option {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "selected")]
	pub selected: Option<char>,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(rename = "label")]
	pub label: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<char>,
}


// Textarea is multi-line text field
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Textarea {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "focus")]
	pub focus: Vec<Focus>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "rows")]
	pub rows: u32,
	#[serde(rename = "cols")]
	pub cols: u32,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(rename = "readonly")]
	pub readonly: Option<char>,
	#[serde(rename = "onselect")]
	pub onselect: Option<String>,
	#[serde(rename = "onchange")]
	pub onchange: Option<String>,
}


// Fieldset is The fieldset element is used to group form fields.
//       Only one legend element should occur in the content
//       and if present should only be preceded by whitespace.
// 
//       NOTE: this content model is different from the XHTML 1.0 DTD,
//       closer to the intended content model in HTML4 DTD
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Fieldset {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "legend")]
	pub legend: Legend,
	#[serde(rename = "form")]
	pub form: Vec<char>,
}


// LAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct LAlign {
	#[serde(rename = "LAlign")]
	pub l_align: String,
}


// Legend is fieldset label
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Legend {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "accesskey")]
	pub accesskey: Option<String>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Button is Content is "Flow" excluding a, form and form controls
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Button {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "focus")]
	pub focus: Vec<Focus>,
	#[serde(rename = "name")]
	pub name: Option<char>,
	#[serde(rename = "value")]
	pub value: Option<char>,
	#[serde(rename = "type")]
	pub type_attr: Option<char>,
	#[serde(rename = "disabled")]
	pub disabled: Option<char>,
	#[serde(flatten)]
	pub button_content: ButtonContent,
}


// Isindex is single-line text input control (DEPRECATED)
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Isindex {
	#[serde(rename = "coreattrs")]
	pub coreattrs: Vec<Coreattrs>,
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "prompt")]
	pub prompt: Option<String>,
}


// TFrame is The border attribute sets the thickness of the frame around the
//       table. The default units are screen pixels.
// 
//       The frame attribute specifies which parts of the frame around
//       the table should be rendered. The values are not the same as
//       CALS to avoid a name clash with the valign attribute.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TFrame {
	#[serde(rename = "TFrame")]
	pub t_frame: String,
}


// TRules is The rules attribute defines which rules to draw between cells:
// 
//       If rules is absent then assume:
//           "none" if border is absent or border="0" otherwise "all"
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TRules {
	#[serde(rename = "TRules")]
	pub t_rules: String,
}


// TAlign is horizontal placement of table relative to document
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct TAlign {
	#[serde(rename = "TAlign")]
	pub t_align: String,
}


// Cellhalign is horizontal alignment attributes for cell contents
// 
//       char        alignment char, e.g. char=':'
//       charoff     offset for alignment char
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Cellhalign {
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "char")]
	pub char: Option<String>,
	#[serde(rename = "charoff")]
	pub charoff: Option<String>,
}


// Cellvalign is vertical alignment attributes for cell contents
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Cellvalign {
	#[serde(rename = "valign")]
	pub valign: Option<String>,
}


// Table ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Table {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "summary")]
	pub summary: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "border")]
	pub border: Option<u32>,
	#[serde(rename = "frame")]
	pub frame: Option<String>,
	#[serde(rename = "rules")]
	pub rules: Option<String>,
	#[serde(rename = "cellspacing")]
	pub cellspacing: Option<String>,
	#[serde(rename = "cellpadding")]
	pub cellpadding: Option<String>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(rename = "bgcolor")]
	pub bgcolor: Option<String>,
	#[serde(rename = "caption")]
	pub caption: Caption,
	#[serde(rename = "col")]
	pub col: Vec<Col>,
	#[serde(rename = "colgroup")]
	pub colgroup: Vec<Colgroup>,
	#[serde(rename = "thead")]
	pub thead: Thead,
	#[serde(rename = "tfoot")]
	pub tfoot: Tfoot,
	#[serde(rename = "tbody")]
	pub tbody: Vec<Tbody>,
	#[serde(rename = "tr")]
	pub tr: Vec<Tr>,
}


// CAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CAlign {
	#[serde(rename = "CAlign")]
	pub c_align: String,
}


// Caption ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Caption {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "align")]
	pub align: Option<String>,
	#[serde(flatten)]
	pub inline: Inline,
}


// Thead ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Thead {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "tr")]
	pub tr: Vec<Tr>,
}


// Tfoot ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Tfoot {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "tr")]
	pub tr: Vec<Tr>,
}


// Tbody ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Tbody {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "tr")]
	pub tr: Vec<Tr>,
}


// Colgroup is colgroup groups a set of col elements. It allows you to group
//       several semantically related columns together.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Colgroup {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "span")]
	pub span: Option<u32>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "col")]
	pub col: Vec<Col>,
}


// Col is col elements define the alignment properties for cells in
//       one or more columns.
// 
//       The width attribute specifies the width of the columns, e.g.
// 
//           width=64        width in screen pixels
//           width=0.5*      relative width of 0.5
// 
//       The span attribute causes the attributes of one
//       col element to apply to more than one column.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Col {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "span")]
	pub span: Option<u32>,
	#[serde(rename = "width")]
	pub width: Option<String>,
}


// Tr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Tr {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "bgcolor")]
	pub bgcolor: Option<String>,
	#[serde(rename = "th")]
	pub th: Vec<char>,
	#[serde(rename = "td")]
	pub td: Vec<char>,
}


// Scope is Scope is simpler than headers attribute for common tables
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Scope {
	#[serde(rename = "Scope")]
	pub scope: String,
}


// Th ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Th {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "abbr")]
	pub abbr: Option<String>,
	#[serde(rename = "axis")]
	pub axis: Option<char>,
	#[serde(rename = "headers")]
	pub headers: Option<Vec<String>>,
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "rowspan")]
	pub rowspan: Option<u32>,
	#[serde(rename = "colspan")]
	pub colspan: Option<u32>,
	#[serde(rename = "nowrap")]
	pub nowrap: Option<char>,
	#[serde(rename = "bgcolor")]
	pub bgcolor: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Td ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Td {
	#[serde(rename = "attrs")]
	pub attrs: Vec<Attrs>,
	#[serde(rename = "cellhalign")]
	pub cellhalign: Vec<Cellhalign>,
	#[serde(rename = "cellvalign")]
	pub cellvalign: Vec<Cellvalign>,
	#[serde(rename = "abbr")]
	pub abbr: Option<String>,
	#[serde(rename = "axis")]
	pub axis: Option<char>,
	#[serde(rename = "headers")]
	pub headers: Option<Vec<String>>,
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "rowspan")]
	pub rowspan: Option<u32>,
	#[serde(rename = "colspan")]
	pub colspan: Option<u32>,
	#[serde(rename = "nowrap")]
	pub nowrap: Option<char>,
	#[serde(rename = "bgcolor")]
	pub bgcolor: Option<String>,
	#[serde(rename = "width")]
	pub width: Option<String>,
	#[serde(rename = "height")]
	pub height: Option<String>,
	#[serde(flatten)]
	pub flow: Flow,
}


// Faqs is The <faqs/> element is the root of the FML descriptor.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Faqs {
	#[serde(rename = "i18n")]
	pub i18n: Vec<I18n>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "toplink")]
	pub toplink: Option<bool>,
	#[serde(rename = "part")]
	pub part: Vec<Part>,
}


// Part is A part element of the faqs element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Part {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "title")]
	pub title: Title,
	#[serde(rename = "faq")]
	pub faq: Vec<Faq>,
}


// Faq is A faq element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Faq {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "question")]
	pub question: Question,
	#[serde(rename = "answer")]
	pub answer: Answer,
}


// Question is A faq question element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Question {
	#[serde(rename = "fontstyle")]
	pub fontstyle: Vec<Fontstyle>,
	#[serde(rename = "phrase")]
	pub phrase: Vec<Phrase>,
}


// Answer is A faq answer element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Answer {
	#[serde(rename = "block")]
	pub block: Vec<Block>,
	#[serde(rename = "inline")]
	pub inline: Vec<Inline>,
	#[serde(rename = "misc")]
	pub misc: Vec<Misc>,
	#[serde(rename = "form")]
	pub form: Vec<char>,
}


// Source is A source element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Source {
}


// Macro is A macro element.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Macro {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "param")]
	pub param: Vec<char>,
}
