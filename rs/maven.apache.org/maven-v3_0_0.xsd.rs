// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// project is The <code>&lt;project&gt;</code> element specifies various attributes 
//          about a project. This is the root element of the project descriptor. 
//          The following table lists all of the possible child elements. Child 
//          elements with children are then documented further in subsequent 
//          sections.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct project {
	#[serde(rename = "project")]
	pub project: Model,
}


// MailingLists is Contains information about a project's mailing lists.  This
//             is used to generate the <a href="/plugins/site/index.html">front
//             page</a> of the site's web site.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingLists {
	#[serde(rename = "mailingList")]
	pub mailing_list: Vec<MailingList>,
}


// Developers is Describes the committers to a project.  This is used to
//             generate the <a href="/plugins/site/index.html">Project Team</a>
//             page of the project's web site.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developers {
	#[serde(rename = "developer")]
	pub developer: Vec<Developer>,
}


// Contributors is Describes the contributors to a project.  This is used to generate
//             the <a href="/plugins/site/index.html">Project Team</a> page of
//             the project's web site.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributors {
	#[serde(rename = "contributor")]
	pub contributor: Vec<Contributor>,
}


// Licenses is This element describes all of the licenses for this project.  
//             Each license is described by a <code>license</code> element, which 
//             is then described by additional elements (described below).  The 
//             auto-generated site documentation references this information.  
//             Projects should only list the license(s) that applies to the project 
//             and not the licenses that apply to dependencies.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Licenses {
	#[serde(rename = "license")]
	pub license: Vec<License>,
}


// Versions is Optional. Contains information on previous versions of the
//             project. This information is used when invoking the 
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Versions {
	#[serde(rename = "version")]
	pub version: Vec<Version>,
}


// Branches is Optional. Contains information on branches of the
//             project. This information is used when invoking the 
//             <a href="/plugins/dist/index.html"><code>maven:dist</code></a>
//             target.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Branches {
	#[serde(rename = "branch")]
	pub branch: Vec<Branch>,
}


// PackageGroups is Package groups required for complete javadocs.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PackageGroups {
	#[serde(rename = "packageGroup")]
	pub package_group: Vec<PackageGroup>,
}


// Reports is This element includes the specification of reports to be
//             included in a Maven-generated site.  These reports will be run
//             when a user executes <code>maven site</code>.  All of the
//             reports will be included in the navigation bar for browsing in
//             the order they are specified.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Reports {
	#[serde(rename = "report")]
	pub report: Vec<String>,
}


// Properties is Project properties that will be used by various plugins
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Properties {
}


// Dependencies is <p>
//               This element describes all of the dependencies associated with a
//               project.  Each dependency is described by a
//               <code>dependency</code> element, which is then described by
//               additional elements (described below).
//             </p>
//             <p>
//               These dependencies are used to construct a classpath for your 
//               project during the build process.
//             </p>
//             <p>
//               Maven can automatically download these dependencies from a 
//               <a href="/user-guide.html#Remote%20Repository%20Layout">remote repository</a>.
//             </p>
//             <p>
//               The filename that Maven downloads from the repository is 
//               <code>artifactId-version.jar</code> where <code>artifactId</code> 
//               corresponds to the <code>artifactId</code> element and 
//               <code>version</code> corresponds to the <code>version</code> element.
//             </p>
//             <p>
//               When Maven goes looking for a dependency in the remote repository, 
//               it uses the dependency element to construct the URL to download 
//               from. This URL is defined as:
//             </p>
//             <div class="source">
//               <pre>${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}</pre>
//             </div>
//             <p>
//               Where
//             </p>
//             <dl>
//               <dt>repo</dt>
//               <dd>
//                 is the remote repository URL specified by 
//                 <code>${maven.repo.remote}</code>
//               </dd>
//               
//               <dt>groupId</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>type</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>artifactId</dt>
//               <dd>is taken from the dependency element</dd>
//               
//               <dt>version</dt>
//               <dd>is taken from the dependency element</dd>
//             </dl>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependencies {
	#[serde(rename = "dependency")]
	pub dependency: Vec<Dependency>,
}


// Model is Optional. The directory on the web server where the final
//             distributions will be published.  This is used when the
//             distributions are
//             <a href="/plugins/dist/index.html">deployed</a>.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Model {
	#[serde(rename = "extend")]
	pub extend: Option<String>,
	#[serde(rename = "pomVersion")]
	pub pom_version: Option<String>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "groupId")]
	pub group_id: Option<String>,
	#[serde(rename = "artifactId")]
	pub artifact_id: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "currentVersion")]
	pub current_version: Option<String>,
	#[serde(rename = "shortDescription")]
	pub short_description: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "logo")]
	pub logo: Option<String>,
	#[serde(rename = "issueTrackingUrl")]
	pub issue_tracking_url: Option<String>,
	#[serde(rename = "inceptionYear")]
	pub inception_year: Option<String>,
	#[serde(rename = "gumpRepositoryId")]
	pub gump_repository_id: Option<String>,
	#[serde(rename = "siteAddress")]
	pub site_address: Option<String>,
	#[serde(rename = "siteDirectory")]
	pub site_directory: Option<String>,
	#[serde(rename = "distributionSite")]
	pub distribution_site: Option<String>,
	#[serde(rename = "distributionDirectory")]
	pub distribution_directory: Option<String>,
	#[serde(rename = "mailingLists")]
	pub mailing_lists: Option<MailingLists>,
	#[serde(rename = "developers")]
	pub developers: Option<Developers>,
	#[serde(rename = "contributors")]
	pub contributors: Option<Contributors>,
	#[serde(rename = "licenses")]
	pub licenses: Option<Licenses>,
	#[serde(rename = "versions")]
	pub versions: Option<Versions>,
	#[serde(rename = "branches")]
	pub branches: Option<Branches>,
	#[serde(rename = "packageGroups")]
	pub package_groups: Option<PackageGroups>,
	#[serde(rename = "reports")]
	pub reports: Option<Reports>,
	#[serde(rename = "repository")]
	pub repository: Option<Repository>,
	#[serde(rename = "organization")]
	pub organization: Option<Organization>,
	#[serde(rename = "properties")]
	pub properties: Option<Properties>,
	#[serde(rename = "package")]
	pub package: Option<String>,
	#[serde(rename = "build")]
	pub build: Option<Build>,
	#[serde(rename = "dependencies")]
	pub dependencies: Option<Dependencies>,
}


// SourceModifications is This element describes all of the sourceModifications associated 
//             with a project.  Each source modification is described by a
//             <code>sourceModification</code> element, which is then described by
//              additional elements (described below).  These modifications are used 
//             to exclude or include various source depending on the environment
//              the build is running in.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SourceModifications {
	#[serde(rename = "sourceModification")]
	pub source_modification: Vec<SourceModification>,
}


// Resources is This element describes all of the resources associated with a 
//             project or unit tests. Each resource is described by a resource 
//             element, which is then described by additional elements (described 
//             <a href="#resource">below</a>). These resources are used to complete 
//             the jar file or to run unit test.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resources {
	#[serde(rename = "resource")]
	pub resource: Vec<Resource>,
}


// Build is This element specifies a directory containing integration test    
//              sources of the project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Build {
	#[serde(rename = "nagEmailAddress")]
	pub nag_email_address: Option<String>,
	#[serde(rename = "sourceDirectory")]
	pub source_directory: Option<String>,
	#[serde(rename = "unitTestSourceDirectory")]
	pub unit_test_source_directory: Option<String>,
	#[serde(rename = "aspectSourceDirectory")]
	pub aspect_source_directory: Option<String>,
	#[serde(rename = "integrationUnitTestSourceDirectory")]
	pub integration_unit_test_source_directory: Option<String>,
	#[serde(rename = "sourceModifications")]
	pub source_modifications: Option<SourceModifications>,
	#[serde(rename = "unitTest")]
	pub unit_test: Option<UnitTest>,
	#[serde(rename = "defaultGoal")]
	pub default_goal: Option<String>,
	#[serde(rename = "resources")]
	pub resources: Option<Resources>,
}


// Includes is the description
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes is the description
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// UnitTest is 3.0.0
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct UnitTest {
	#[serde(rename = "resources")]
	pub resources: Option<Resources>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
}


// Resource is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Resource {
	#[serde(rename = "targetPath")]
	pub target_path: Option<String>,
	#[serde(rename = "filtering")]
	pub filtering: Option<bool>,
	#[serde(rename = "directory")]
	pub directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
}


// SourceModification is Describe the directory where the resource is stored.
//             The path may be absolute, or relative to the project.xml file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SourceModification {
	#[serde(rename = "className")]
	pub class_name: Option<String>,
	#[serde(rename = "property")]
	pub property: Option<String>,
	#[serde(rename = "directory")]
	pub directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
}


// Organization is The URL to the organization's logo image.  This can be an URL relative
//             to the base directory of the generated web site,
//             (e.g., <code>/images/org-logo.png</code>) or an absolute URL
//             (e.g., <code>http://my.corp/logo.png</code>).  This value is used
//             when generating the project documentation.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Organization {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "logo")]
	pub logo: Option<String>,
}


// Roles is The roles the contributor plays in the project.  Each role is
//             described by a <code>role</code> element, the body of which is a
//             role name.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Roles {
	#[serde(rename = "role")]
	pub role: Vec<String>,
}


// Developer is The URL of the organization.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Developer {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "email")]
	pub email: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "organization")]
	pub organization: Option<String>,
	#[serde(rename = "organizationUrl")]
	pub organization_url: Option<String>,
	#[serde(rename = "roles")]
	pub roles: Option<Roles>,
	#[serde(rename = "timezone")]
	pub timezone: Option<String>,
	#[serde(rename = "properties")]
	pub properties: Option<Properties>,
}


// Dependency is The type of dependency. This defaults to <code>jar</code>.
//             Known recognised dependency types are:
//             <ul>
//             <li><code>jar</code></li>
//             <li><code>ejb</code></li>
//             <li><code>plugin</code></li>
//             </ul>
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Dependency {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "groupId")]
	pub group_id: Option<String>,
	#[serde(rename = "artifactId")]
	pub artifact_id: Option<String>,
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "jar")]
	pub jar: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "properties")]
	pub properties: Option<Properties>,
}


// Repository is The URL to the project's browsable CVS repository.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "connection")]
	pub connection: Option<String>,
	#[serde(rename = "developerConnection")]
	pub developer_connection: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
}


// PackageGroup is the description
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PackageGroup {
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "packages")]
	pub packages: Option<String>,
}


// Version is A unique identifier for a version.  This ID is
//             used to specify the version that
//             <a href="/plugins/dist/index.html">
//               <code>maven:dist</code>
//             </a> builds.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Version {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "tag")]
	pub tag: Option<String>,
	#[serde(rename = "id")]
	pub id: Option<String>,
}


// License is Addendum information pertaining to this license.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct License {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "distribution")]
	pub distribution: Option<String>,
	#[serde(rename = "comments")]
	pub comments: Option<String>,
}


// Contributor is The URL of the organization.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Contributor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "email")]
	pub email: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "organization")]
	pub organization: Option<String>,
	#[serde(rename = "organizationUrl")]
	pub organization_url: Option<String>,
	#[serde(rename = "roles")]
	pub roles: Option<Roles>,
	#[serde(rename = "timezone")]
	pub timezone: Option<String>,
	#[serde(rename = "properties")]
	pub properties: Option<Properties>,
}


// Branch is The branch tag in the version control system (e.g. cvs) used by the 
//             project for the source code associated with this branch of the
//             project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Branch {
	#[serde(rename = "tag")]
	pub tag: Option<String>,
}


// OtherArchives is The link to other URLs where you can browse the list archive.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct OtherArchives {
	#[serde(rename = "otherArchive")]
	pub other_archive: Vec<String>,
}


// MailingList is The link to a URL where you can browse the mailing list archive.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MailingList {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "subscribe")]
	pub subscribe: Option<String>,
	#[serde(rename = "unsubscribe")]
	pub unsubscribe: Option<String>,
	#[serde(rename = "post")]
	pub post: Option<String>,
	#[serde(rename = "archive")]
	pub archive: Option<String>,
	#[serde(rename = "otherArchives")]
	pub other_archives: Option<OtherArchives>,
}
