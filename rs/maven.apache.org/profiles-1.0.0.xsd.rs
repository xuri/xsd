// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// profiles_xml is Root element of the profiles.xml file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct profiles_xml {
	#[serde(rename = "profilesXml")]
	pub profiles_xml: ProfilesRoot,
}


// Profiles is Configuration of build profiles for adjusting the build
//             according to environmental parameters
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Profiles {
	#[serde(rename = "profile")]
	pub profile: Vec<Profile>,
}


// ActiveProfiles is List of manually-activated build profiles, specified in the order in which
//             they should be applied.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActiveProfiles {
	#[serde(rename = "activeProfile")]
	pub active_profile: Vec<String>,
}


// ProfilesRoot is Root element of the profiles.xml file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ProfilesRoot {
	#[serde(rename = "profiles")]
	pub profiles: Profiles,
	#[serde(rename = "activeProfiles")]
	pub active_profiles: ActiveProfiles,
}


// Properties is Extended configuration specific to this profile goes
//             here.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Properties {
}


// Repositories is The lists of the remote repositories
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repositories {
	#[serde(rename = "repository")]
	pub repository: Vec<Repository>,
}


// PluginRepositories is The lists of the remote repositories for discovering plugins
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PluginRepositories {
	#[serde(rename = "pluginRepository")]
	pub plugin_repository: Vec<Repository>,
}


// Profile is The conditional logic which will automatically
//             trigger the inclusion of this profile.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Profile {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "activation")]
	pub activation: Activation,
	#[serde(rename = "properties")]
	pub properties: Properties,
	#[serde(rename = "repositories")]
	pub repositories: Repositories,
	#[serde(rename = "pluginRepositories")]
	pub plugin_repositories: PluginRepositories,
}


// Activation is Specifies that this profile will be activated based on existence of a file.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Activation {
	#[serde(rename = "activeByDefault")]
	pub active_by_default: bool,
	#[serde(rename = "jdk")]
	pub jdk: String,
	#[serde(rename = "os")]
	pub os: ActivationOS,
	#[serde(rename = "property")]
	pub property: ActivationProperty,
	#[serde(rename = "file")]
	pub file: ActivationFile,
}


// ActivationOS is The version of the OS to be used to activate a profile
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationOS {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "family")]
	pub family: String,
	#[serde(rename = "arch")]
	pub arch: String,
	#[serde(rename = "version")]
	pub version: String,
}


// ActivationProperty is The value of the property to be used to activate a profile
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationProperty {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "value")]
	pub value: String,
}


// ActivationFile is The name of the file that should exist to activate a profile
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ActivationFile {
	#[serde(rename = "missing")]
	pub missing: String,
	#[serde(rename = "exists")]
	pub exists: String,
}


// Repository is The type of layout this repository uses for locating and storing artifacts - can be "legacy" or
//             "default".
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "releases")]
	pub releases: RepositoryPolicy,
	#[serde(rename = "snapshots")]
	pub snapshots: RepositoryPolicy,
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "url")]
	pub url: String,
	#[serde(rename = "layout")]
	pub layout: String,
}


// RepositoryPolicy is What to do when verification of an artifact checksum fails - warn, fail, etc. Valid values are
//             "fail" or "warn"
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct RepositoryPolicy {
	#[serde(rename = "enabled")]
	pub enabled: bool,
	#[serde(rename = "updatePolicy")]
	pub update_policy: String,
	#[serde(rename = "checksumPolicy")]
	pub checksum_policy: String,
}
