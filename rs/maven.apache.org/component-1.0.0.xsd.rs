// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// component is Describes the component layout and packaging.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct component {
	#[serde(rename = "component")]
	pub component: Component,
}


// FileSets is Specify assembly parameters for groups of files.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSets {
	#[serde(rename = "fileSet")]
	pub file_set: Vec<FileSet>,
}


// Files is Specify assembly parameters for single files.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Files {
	#[serde(rename = "file")]
	pub file: Vec<FileItem>,
}


// DependencySets is Specify assembly behavior for sets of dependencies.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySets {
	#[serde(rename = "dependencySet")]
	pub dependency_set: Vec<DependencySet>,
}


// Component is Describes the component layout and packaging.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Component {
	#[serde(rename = "fileSets")]
	pub file_sets: Option<FileSets>,
	#[serde(rename = "files")]
	pub files: Option<Files>,
	#[serde(rename = "dependencySets")]
	pub dependency_sets: Option<DependencySets>,
}


// Includes is When &lt;include&gt; subelements are present, they define
//             a set of files and directory to include.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes is When &lt;exclude&gt; subelements are present, they define
//             a set of files and directory to exclude.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// DependencySet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySet {
	#[serde(rename = "outputFileNameMapping")]
	pub output_file_name_mapping: Option<String>,
	#[serde(rename = "unpack")]
	pub unpack: Option<bool>,
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "directoryMode")]
	pub directory_mode: Option<String>,
}


// FileItem is Flag used to determine if the file is filtered.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileItem {
	#[serde(rename = "source")]
	pub source: Option<String>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "destName")]
	pub dest_name: Option<String>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "lineEnding")]
	pub line_ending: Option<String>,
	#[serde(rename = "filtered")]
	pub filtered: Option<bool>,
}


// FileSet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSet {
	#[serde(rename = "directory")]
	pub directory: Option<String>,
	#[serde(rename = "lineEnding")]
	pub line_ending: Option<String>,
	#[serde(rename = "outputDirectory")]
	pub output_directory: Option<String>,
	#[serde(rename = "includes")]
	pub includes: Option<Includes>,
	#[serde(rename = "excludes")]
	pub excludes: Option<Excludes>,
	#[serde(rename = "fileMode")]
	pub file_mode: Option<String>,
	#[serde(rename = "directoryMode")]
	pub directory_mode: Option<String>,
}
