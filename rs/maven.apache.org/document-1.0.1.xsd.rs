// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// document is Describes the overall document model.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct document {
	#[serde(rename = "document")]
	pub document: DocumentModel,
}


// DocumentModel is The meta data to construct a cover page for the document.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentModel {
	#[serde(rename = "outputName")]
	pub output_name: Option<String>,
	#[serde(rename = "meta")]
	pub meta: Option<DocumentMeta>,
	#[serde(rename = "toc")]
	pub toc: Option<DocumentTOC>,
	#[serde(rename = "cover")]
	pub cover: Option<DocumentCover>,
}


// DocumentTOC is TOC item.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentTOC {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "depth")]
	pub depth: Option<i32>,
	#[serde(rename = "item")]
	pub item: Vec<DocumentTOCItem>,
}


// DocumentTOCItem is A table of content item containing sub-items.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentTOCItem {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "collapse")]
	pub collapse: Option<bool>,
	#[serde(rename = "item")]
	pub item: Vec<DocumentTOCItem>,
}


// Authors is The authors that appear on the cover page.
//             Only used if author is not given.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Authors {
	#[serde(rename = "author")]
	pub author: Vec<DocumentAuthor>,
}


// DocumentCover is The date as String (recommended format is ISO 8601) to appear on the cover.
//             Only used if <code>coverDate</code> is not set.
//             @since 1.1.1
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentCover {
	#[serde(rename = "coverTitle")]
	pub cover_title: Option<String>,
	#[serde(rename = "coverSubTitle")]
	pub cover_sub_title: Option<String>,
	#[serde(rename = "coverVersion")]
	pub cover_version: Option<String>,
	#[serde(rename = "coverType")]
	pub cover_type: Option<String>,
	#[serde(rename = "coverDate")]
	pub cover_date: Option<u8>,
	#[serde(rename = "coverdate")]
	pub coverdate: Option<String>,
	#[serde(rename = "authors")]
	pub authors: Option<Authors>,
	#[serde(rename = "author")]
	pub author: Option<String>,
	#[serde(rename = "projectName")]
	pub project_name: Option<String>,
	#[serde(rename = "projectLogo")]
	pub project_logo: Option<String>,
	#[serde(rename = "companyName")]
	pub company_name: Option<String>,
	#[serde(rename = "companyLogo")]
	pub company_logo: Option<String>,
}


// DocumentAuthor is The state or province of the address of the author, if applicable.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentAuthor {
	#[serde(rename = "firstName")]
	pub first_name: Option<String>,
	#[serde(rename = "lastName")]
	pub last_name: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "initials")]
	pub initials: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<String>,
	#[serde(rename = "email")]
	pub email: Option<String>,
	#[serde(rename = "phoneNumber")]
	pub phone_number: Option<String>,
	#[serde(rename = "faxNumber")]
	pub fax_number: Option<String>,
	#[serde(rename = "companyName")]
	pub company_name: Option<String>,
	#[serde(rename = "street")]
	pub street: Option<String>,
	#[serde(rename = "city")]
	pub city: Option<String>,
	#[serde(rename = "postalCode")]
	pub postal_code: Option<String>,
	#[serde(rename = "country")]
	pub country: Option<String>,
	#[serde(rename = "state")]
	pub state: Option<String>,
}


// KeyWords is A keyword pertaining to the document. The metadata can contain any
//             number of keyword elements, each element specifying one keyword.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct KeyWords {
	#[serde(rename = "keyWord")]
	pub key_word: Vec<String>,
}


// DocumentMeta is The unique author of the document, usually as a String of "firstName lastName". For
//             more authors, you could use the &lt;authors/&gt; tag.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentMeta {
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "author")]
	pub author: Option<String>,
	#[serde(rename = "authors")]
	pub authors: Option<Authors>,
	#[serde(rename = "subject")]
	pub subject: Option<String>,
	#[serde(rename = "keywords")]
	pub keywords: Option<String>,
	#[serde(rename = "keyWords")]
	pub key_words: Option<KeyWords>,
	#[serde(rename = "pageSize")]
	pub page_size: Option<String>,
	#[serde(rename = "generator")]
	pub generator: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "initialCreator")]
	pub initial_creator: Option<String>,
	#[serde(rename = "creator")]
	pub creator: Option<String>,
	#[serde(rename = "printedBy")]
	pub printed_by: Option<String>,
	#[serde(rename = "creationDate")]
	pub creation_date: Option<u8>,
	#[serde(rename = "creationdate")]
	pub creationdate: Option<String>,
	#[serde(rename = "date")]
	pub date: Option<u8>,
	#[serde(rename = "modifydate")]
	pub modifydate: Option<String>,
	#[serde(rename = "printDate")]
	pub print_date: Option<u8>,
	#[serde(rename = "printdate")]
	pub printdate: Option<String>,
	#[serde(rename = "template")]
	pub template: Option<DocumentTemplate>,
	#[serde(rename = "hyperlinkBehaviour")]
	pub hyperlink_behaviour: Option<DocumentHyperlinkBehaviour>,
	#[serde(rename = "language")]
	pub language: Option<String>,
	#[serde(rename = "editingCycles")]
	pub editing_cycles: Option<i64>,
	#[serde(rename = "editingDuration")]
	pub editing_duration: Option<i64>,
	#[serde(rename = "documentStatistic")]
	pub document_statistic: Option<DocumentStatistic>,
	#[serde(rename = "confidential")]
	pub confidential: Option<bool>,
	#[serde(rename = "draft")]
	pub draft: Option<bool>,
}


// DocumentTemplate is A template that was used to create the document.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentTemplate {
	#[serde(rename = "href")]
	pub href: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "date")]
	pub date: Option<u8>,
	#[serde(rename = "modifydate")]
	pub modifydate: Option<String>,
}


// DocumentStatistic is Statistical attributes of the document.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentStatistic {
	#[serde(rename = "pageCount")]
	pub page_count: Option<i64>,
	#[serde(rename = "tableCount")]
	pub table_count: Option<i64>,
	#[serde(rename = "drawCount")]
	pub draw_count: Option<i64>,
	#[serde(rename = "imageCount")]
	pub image_count: Option<i64>,
	#[serde(rename = "objectCount")]
	pub object_count: Option<i64>,
	#[serde(rename = "oleObjectCount")]
	pub ole_object_count: Option<i64>,
	#[serde(rename = "paragraphCount")]
	pub paragraph_count: Option<i64>,
	#[serde(rename = "wordCount")]
	pub word_count: Option<i64>,
	#[serde(rename = "characterCount")]
	pub character_count: Option<i64>,
	#[serde(rename = "rowCount")]
	pub row_count: Option<i64>,
	#[serde(rename = "frameCount")]
	pub frame_count: Option<i64>,
	#[serde(rename = "sentenceCount")]
	pub sentence_count: Option<i64>,
	#[serde(rename = "syllableCount")]
	pub syllable_count: Option<i64>,
	#[serde(rename = "nonWhitespaceCharacterCount")]
	pub non_whitespace_character_count: Option<i64>,
}


// DocumentHyperlinkBehaviour is Specifies the default behavior for hyperlinks in the document.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DocumentHyperlinkBehaviour {
	#[serde(rename = "targetFrame")]
	pub target_frame: Option<String>,
}
