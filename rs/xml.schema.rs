// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// lang is The union allows for the 'un-declaration' of xml:lang with
// the empty string.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct lang {
	#[serde(rename = "lang")]
	pub lang: String,
}


// space is denotes an attribute whose
// value is a keyword indicating what whitespace processing
// discipline is intended for the content of the element; its
// value is inherited. This name is reserved by virtue of its
// definition in the XML specification.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct space {
	#[serde(rename = "space")]
	pub space: String,
}


// base is for information about this attribute.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct base {
	#[serde(rename = "base")]
	pub base: String,
}


// id is for information about this attribute.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct id {
	#[serde(rename = "id")]
	pub id: String,
}


// SpecialAttrs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct SpecialAttrs {
	#[serde(rename = "xml:base")]
	pub xml_base: Option<String>,
	#[serde(rename = "xml:lang")]
	pub xml_lang: Option<String>,
	#[serde(rename = "xml:space")]
	pub xml_space: Option<String>,
	#[serde(rename = "xml:id")]
	pub xml_id: Option<String>,
}
