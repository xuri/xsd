// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// root is 'root' can be used to distinguish serialization roots from other
//        elements that are present in a serialization but are not roots of
//        a serialized value graph
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct root {
	#[serde(rename = "root")]
	pub root: bool,
}


// CommonAttributes is Attributes common to all elements that function as accessors or
//         represent independent (multi-ref) values.  The href attribute is
//         intended to be used in a manner like CONREF.  That is, the element
//         content should be empty iff the href attribute appears
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CommonAttributes {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "href")]
	pub href: Option<String>,
}


// ArrayCoordinate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ArrayCoordinate {
	#[serde(rename = "arrayCoordinate")]
	pub array_coordinate: String,
}


// array_type ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct array_type {
	#[serde(rename = "arrayType")]
	pub array_type: String,
}


// offset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct offset {
	#[serde(rename = "offset")]
	pub offset: String,
}


// ArrayAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ArrayAttributes {
	#[serde(rename = "tns:arrayType")]
	pub tns_array_type: Option<String>,
	#[serde(rename = "tns:offset")]
	pub tns_offset: Option<String>,
}


// position ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct position {
	#[serde(rename = "position")]
	pub position: String,
}


// ArrayMemberAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ArrayMemberAttributes {
	#[serde(rename = "tns:position")]
	pub tns_position: Option<String>,
}


// Array ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Array {
}


// struct_attr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct struct_attr {
	#[serde(rename = "Struct")]
	pub struct_attr: Struct,
}


// Base64 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Base64 {
	#[serde(rename = "base64")]
	pub base64: String,
}


// duration ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct duration {
	#[serde(rename = "duration")]
	pub duration: String,
}


// date_time ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct date_time {
	#[serde(rename = "dateTime")]
	pub date_time: u8,
}


// notation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct notation {
	#[serde(rename = "NOTATION")]
	pub notation: Vec<String>,
}


// time ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct time {
	#[serde(rename = "time")]
	pub time: String,
}


// date ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct date {
	#[serde(rename = "date")]
	pub date: u8,
}


// g_year_month ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct g_year_month {
	#[serde(rename = "gYearMonth")]
	pub g_year_month: String,
}


// g_year ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct g_year {
	#[serde(rename = "gYear")]
	pub g_year: String,
}


// g_month_day ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct g_month_day {
	#[serde(rename = "gMonthDay")]
	pub g_month_day: String,
}


// g_day ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct g_day {
	#[serde(rename = "gDay")]
	pub g_day: String,
}


// g_month ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct g_month {
	#[serde(rename = "gMonth")]
	pub g_month: String,
}


// boolean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct boolean {
	#[serde(rename = "boolean")]
	pub boolean: bool,
}


// base64_binary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct base64_binary {
	#[serde(rename = "base64Binary")]
	pub base64_binary: String,
}


// hex_binary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct hex_binary {
	#[serde(rename = "hexBinary")]
	pub hex_binary: String,
}


// float ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct float {
	#[serde(rename = "float")]
	pub float: f64,
}


// double ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct double {
	#[serde(rename = "double")]
	pub double: f64,
}


// any_uri ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct any_uri {
	#[serde(rename = "anyURI")]
	pub any_uri: String,
}


// q_name ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct q_name {
	#[serde(rename = "QName")]
	pub q_name: String,
}


// string ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct string {
	#[serde(rename = "string")]
	pub string: String,
}


// normalized_string ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct normalized_string {
	#[serde(rename = "normalizedString")]
	pub normalized_string: String,
}


// token ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct token {
	#[serde(rename = "token")]
	pub token: String,
}


// language ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct language {
	#[serde(rename = "language")]
	pub language: String,
}


// name ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct name {
	#[serde(rename = "Name")]
	pub name: String,
}


// nmtoken ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct nmtoken {
	#[serde(rename = "NMTOKEN")]
	pub nmtoken: String,
}


// nc_name ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct nc_name {
	#[serde(rename = "NCName")]
	pub nc_name: String,
}


// nmtokens ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct nmtokens {
	#[serde(rename = "NMTOKENS")]
	pub nmtokens: Vec<String>,
}


// id ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct id {
	#[serde(rename = "ID")]
	pub id: String,
}


// idref ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct idref {
	#[serde(rename = "IDREF")]
	pub idref: String,
}


// entity ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct entity {
	#[serde(rename = "ENTITY")]
	pub entity: String,
}


// idrefs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct idrefs {
	#[serde(rename = "IDREFS")]
	pub idrefs: Vec<String>,
}


// entities ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct entities {
	#[serde(rename = "ENTITIES")]
	pub entities: Vec<String>,
}


// decimal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct decimal {
	#[serde(rename = "decimal")]
	pub decimal: f64,
}


// integer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct integer {
	#[serde(rename = "integer")]
	pub integer: i32,
}


// non_positive_integer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct non_positive_integer {
	#[serde(rename = "nonPositiveInteger")]
	pub non_positive_integer: i32,
}


// negative_integer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct negative_integer {
	#[serde(rename = "negativeInteger")]
	pub negative_integer: i32,
}


// long ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct long {
	#[serde(rename = "long")]
	pub long: i64,
}


// int ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct int {
	#[serde(rename = "int")]
	pub int: i32,
}


// short ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct short {
	#[serde(rename = "short")]
	pub short: i16,
}


// byte ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct byte {
	#[serde(rename = "byte")]
	pub byte: u8,
}


// non_negative_integer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct non_negative_integer {
	#[serde(rename = "nonNegativeInteger")]
	pub non_negative_integer: u32,
}


// unsigned_long ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unsigned_long {
	#[serde(rename = "unsignedLong")]
	pub unsigned_long: u64,
}


// unsigned_int ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unsigned_int {
	#[serde(rename = "unsignedInt")]
	pub unsigned_int: u32,
}


// unsigned_short ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unsigned_short {
	#[serde(rename = "unsignedShort")]
	pub unsigned_short: u16,
}


// unsigned_byte ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct unsigned_byte {
	#[serde(rename = "unsignedByte")]
	pub unsigned_byte: u8,
}


// positive_integer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct positive_integer {
	#[serde(rename = "positiveInteger")]
	pub positive_integer: u32,
}


// any_type ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct any_type {
	#[serde(rename = "anyType")]
	pub any_type: String,
}
