// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTCTName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCTName {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTCTDescription ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCTDescription {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTCTCategory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCTCategory {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "pri")]
	pub pri: u32,
}


// CTCTCategories ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCTCategories {
	#[serde(rename = "cat")]
	pub cat: Vec<CTCTCategory>,
}


// STClrAppMethod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STClrAppMethod {
	#[serde(rename = "ST_ClrAppMethod")]
	pub st_clr_app_method: String,
}


// STHueDir ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHueDir {
	#[serde(rename = "ST_HueDir")]
	pub st_hue_dir: String,
}


// CTColors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColors {
	#[serde(rename = "meth")]
	pub meth: Option<String>,
	#[serde(rename = "hueDir")]
	pub hue_dir: Option<String>,
	#[serde(rename = "a:EG_ColorChoice")]
	pub aeg_color_choice: Vec<EGColorChoice>,
}


// CTCTStyleLabel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCTStyleLabel {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "fillClrLst")]
	pub fill_clr_lst: Option<CTColors>,
	#[serde(rename = "linClrLst")]
	pub lin_clr_lst: Option<CTColors>,
	#[serde(rename = "effectClrLst")]
	pub effect_clr_lst: Option<CTColors>,
	#[serde(rename = "txLinClrLst")]
	pub tx_lin_clr_lst: Option<CTColors>,
	#[serde(rename = "txFillClrLst")]
	pub tx_fill_clr_lst: Option<CTColors>,
	#[serde(rename = "txEffectClrLst")]
	pub tx_effect_clr_lst: Option<CTColors>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTColorTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorTransform {
	#[serde(rename = "uniqueId")]
	pub unique_id: Option<String>,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "title")]
	pub title: Vec<CTCTName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTCTDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTCTCategories>,
	#[serde(rename = "styleLbl")]
	pub style_lbl: Vec<CTCTStyleLabel>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// colors_def ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct colors_def {
	#[serde(rename = "colorsDef")]
	pub colors_def: CTColorTransform,
}


// CTColorTransformHeader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorTransformHeader {
	#[serde(rename = "uniqueId")]
	pub unique_id: String,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "resId")]
	pub res_id: Option<i32>,
	#[serde(rename = "title")]
	pub title: Vec<CTCTName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTCTDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTCTCategories>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// colors_def_hdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct colors_def_hdr {
	#[serde(rename = "colorsDefHdr")]
	pub colors_def_hdr: CTColorTransformHeader,
}


// CTColorTransformHeaderLst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorTransformHeaderLst {
	#[serde(rename = "colorsDefHdr")]
	pub colors_def_hdr: Vec<CTColorTransformHeader>,
}


// colors_def_hdr_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct colors_def_hdr_lst {
	#[serde(rename = "colorsDefHdrLst")]
	pub colors_def_hdr_lst: CTColorTransformHeaderLst,
}


// STPtType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPtType {
	#[serde(rename = "ST_PtType")]
	pub st_pt_type: String,
}


// CTPt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPt {
	#[serde(rename = "modelId")]
	pub model_id: STModelId,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "cxnId")]
	pub cxn_id: Option<STModelId>,
	#[serde(rename = "prSet")]
	pub pr_set: Option<CTElemPropSet>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "t")]
	pub t: Option<CTTextBody>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTPtList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPtList {
	#[serde(rename = "pt")]
	pub pt: Vec<CTPt>,
}


// STCxnType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCxnType {
	#[serde(rename = "ST_CxnType")]
	pub st_cxn_type: String,
}


// CTCxn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCxn {
	#[serde(rename = "modelId")]
	pub model_id: STModelId,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "srcId")]
	pub src_id: STModelId,
	#[serde(rename = "destId")]
	pub dest_id: STModelId,
	#[serde(rename = "srcOrd")]
	pub src_ord: u32,
	#[serde(rename = "destOrd")]
	pub dest_ord: u32,
	#[serde(rename = "parTransId")]
	pub par_trans_id: Option<STModelId>,
	#[serde(rename = "sibTransId")]
	pub sib_trans_id: Option<STModelId>,
	#[serde(rename = "presId")]
	pub pres_id: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTCxnList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCxnList {
	#[serde(rename = "cxn")]
	pub cxn: Vec<CTCxn>,
}


// CTDataModel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataModel {
	#[serde(rename = "ptLst")]
	pub pt_lst: CTPtList,
	#[serde(rename = "cxnLst")]
	pub cxn_lst: Option<CTCxnList>,
	#[serde(rename = "bg")]
	pub bg: Option<CTBackgroundFormatting>,
	#[serde(rename = "whole")]
	pub whole: Option<CTWholeE2oFormatting>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// data_model ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct data_model {
	#[serde(rename = "dataModel")]
	pub data_model: CTDataModel,
}


// AGIteratorAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGIteratorAttributes {
	#[serde(rename = "axis")]
	pub axis: Option<STAxisTypes>,
	#[serde(rename = "ptType")]
	pub pt_type: Option<STElementTypes>,
	#[serde(rename = "hideLastTrans")]
	pub hide_last_trans: Option<STBooleans>,
	#[serde(rename = "st")]
	pub st: Option<STInts>,
	#[serde(rename = "cnt")]
	pub cnt: Option<STUnsignedInts>,
	#[serde(rename = "step")]
	pub step: Option<STInts>,
}


// AGConstraintAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGConstraintAttributes {
	#[serde(rename = "type")]
	pub type_attr: Vec<String>,
	#[serde(rename = "for")]
	pub for_attr: Option<String>,
	#[serde(rename = "forName")]
	pub for_name: Option<String>,
	#[serde(rename = "ptType")]
	pub pt_type: Option<String>,
}


// AGConstraintRefAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGConstraintRefAttributes {
	#[serde(rename = "refType")]
	pub ref_type: Option<String>,
	#[serde(rename = "refFor")]
	pub ref_for: Option<String>,
	#[serde(rename = "refForName")]
	pub ref_for_name: Option<String>,
	#[serde(rename = "refPtType")]
	pub ref_pt_type: Option<String>,
}


// CTConstraint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConstraint {
	#[serde(rename = "AG_ConstraintAttributes")]
	pub ag_constraint_attributes: Vec<AGConstraintAttributes>,
	#[serde(rename = "AG_ConstraintRefAttributes")]
	pub ag_constraint_ref_attributes: Vec<AGConstraintRefAttributes>,
	#[serde(rename = "op")]
	pub op: Option<String>,
	#[serde(rename = "val")]
	pub val: Option<f64>,
	#[serde(rename = "fact")]
	pub fact: Option<f64>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTConstraints ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConstraints {
	#[serde(rename = "constr")]
	pub constr: Vec<CTConstraint>,
}


// CTNumericRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumericRule {
	#[serde(rename = "AG_ConstraintAttributes")]
	pub ag_constraint_attributes: Vec<AGConstraintAttributes>,
	#[serde(rename = "val")]
	pub val: Option<f64>,
	#[serde(rename = "fact")]
	pub fact: Option<f64>,
	#[serde(rename = "max")]
	pub max: Option<f64>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTRules ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRules {
	#[serde(rename = "rule")]
	pub rule: Vec<CTNumericRule>,
}


// CTPresentationOf ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresentationOf {
	#[serde(rename = "AG_IteratorAttributes")]
	pub ag_iterator_attributes: Vec<AGIteratorAttributes>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLayoutShapeType {
	#[serde(rename = "ST_LayoutShapeType")]
	pub st_output_shape_type: STOutputShapeType,
	#[serde(rename = "ST_LayoutShapeType")]
	pub st_shape_type: String,
}


// STIndex1 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STIndex1 {
	#[serde(rename = "ST_Index1")]
	pub st_index1: u32,
}


// CTAdj ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAdj {
	#[serde(rename = "idx")]
	pub idx: u32,
	#[serde(rename = "val")]
	pub val: f64,
}


// CTAdjLst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAdjLst {
	#[serde(rename = "adj")]
	pub adj: Vec<CTAdj>,
}


// CTShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShape {
	#[serde(rename = "rot")]
	pub rot: Option<f64>,
	#[serde(rename = "type")]
	pub type_attr: Option<STLayoutShapeType>,
	#[serde(rename = "r:blip")]
	pub r_blip: Option<String>,
	#[serde(rename = "zOrderOff")]
	pub z_order_off: Option<i32>,
	#[serde(rename = "hideGeom")]
	pub hide_geom: Option<bool>,
	#[serde(rename = "lkTxEntry")]
	pub lk_tx_entry: Option<bool>,
	#[serde(rename = "blipPhldr")]
	pub blip_phldr: Option<bool>,
	#[serde(rename = "adjLst")]
	pub adj_lst: Option<CTAdjLst>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTParameter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParameter {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "val")]
	pub val: STParameterVal,
}


// CTAlgorithm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlgorithm {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "rev")]
	pub rev: Option<u32>,
	#[serde(rename = "param")]
	pub param: Vec<CTParameter>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTLayoutNode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLayoutNode {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "styleLbl")]
	pub style_lbl: Option<String>,
	#[serde(rename = "chOrder")]
	pub ch_order: Option<String>,
	#[serde(rename = "moveWith")]
	pub move_with: Option<String>,
	#[serde(rename = "alg")]
	pub alg: Vec<CTAlgorithm>,
	#[serde(rename = "shape")]
	pub shape: Vec<CTShape>,
	#[serde(rename = "presOf")]
	pub pres_of: Vec<CTPresentationOf>,
	#[serde(rename = "constrLst")]
	pub constr_lst: Vec<CTConstraints>,
	#[serde(rename = "ruleLst")]
	pub rule_lst: Vec<CTRules>,
	#[serde(rename = "varLst")]
	pub var_lst: Vec<CTLayoutVariablePropertySet>,
	#[serde(rename = "forEach")]
	pub for_each: Vec<CTForEach>,
	#[serde(rename = "layoutNode")]
	pub layout_node: Vec<CTLayoutNode>,
	#[serde(rename = "choose")]
	pub choose: Vec<CTChoose>,
	#[serde(rename = "extLst")]
	pub ext_lst: Vec<CTOfficeArtExtensionList>,
}


// CTForEach ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTForEach {
	#[serde(rename = "AG_IteratorAttributes")]
	pub ag_iterator_attributes: Vec<AGIteratorAttributes>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "alg")]
	pub alg: Vec<CTAlgorithm>,
	#[serde(rename = "shape")]
	pub shape: Vec<CTShape>,
	#[serde(rename = "presOf")]
	pub pres_of: Vec<CTPresentationOf>,
	#[serde(rename = "constrLst")]
	pub constr_lst: Vec<CTConstraints>,
	#[serde(rename = "ruleLst")]
	pub rule_lst: Vec<CTRules>,
	#[serde(rename = "forEach")]
	pub for_each: Vec<CTForEach>,
	#[serde(rename = "layoutNode")]
	pub layout_node: Vec<CTLayoutNode>,
	#[serde(rename = "choose")]
	pub choose: Vec<CTChoose>,
	#[serde(rename = "extLst")]
	pub ext_lst: Vec<CTOfficeArtExtensionList>,
}


// CTWhen ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWhen {
	#[serde(rename = "AG_IteratorAttributes")]
	pub ag_iterator_attributes: Vec<AGIteratorAttributes>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "func")]
	pub func: String,
	#[serde(rename = "arg")]
	pub arg: Option<STFunctionArgument>,
	#[serde(rename = "op")]
	pub op: String,
	#[serde(rename = "val")]
	pub val: STFunctionValue,
	#[serde(rename = "alg")]
	pub alg: Vec<CTAlgorithm>,
	#[serde(rename = "shape")]
	pub shape: Vec<CTShape>,
	#[serde(rename = "presOf")]
	pub pres_of: Vec<CTPresentationOf>,
	#[serde(rename = "constrLst")]
	pub constr_lst: Vec<CTConstraints>,
	#[serde(rename = "ruleLst")]
	pub rule_lst: Vec<CTRules>,
	#[serde(rename = "forEach")]
	pub for_each: Vec<CTForEach>,
	#[serde(rename = "layoutNode")]
	pub layout_node: Vec<CTLayoutNode>,
	#[serde(rename = "choose")]
	pub choose: Vec<CTChoose>,
	#[serde(rename = "extLst")]
	pub ext_lst: Vec<CTOfficeArtExtensionList>,
}


// CTOtherwise ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOtherwise {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "alg")]
	pub alg: Vec<CTAlgorithm>,
	#[serde(rename = "shape")]
	pub shape: Vec<CTShape>,
	#[serde(rename = "presOf")]
	pub pres_of: Vec<CTPresentationOf>,
	#[serde(rename = "constrLst")]
	pub constr_lst: Vec<CTConstraints>,
	#[serde(rename = "ruleLst")]
	pub rule_lst: Vec<CTRules>,
	#[serde(rename = "forEach")]
	pub for_each: Vec<CTForEach>,
	#[serde(rename = "layoutNode")]
	pub layout_node: Vec<CTLayoutNode>,
	#[serde(rename = "choose")]
	pub choose: Vec<CTChoose>,
	#[serde(rename = "extLst")]
	pub ext_lst: Vec<CTOfficeArtExtensionList>,
}


// CTChoose ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChoose {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "if")]
	pub if_attr: Vec<CTWhen>,
	#[serde(rename = "else")]
	pub else_attr: Option<CTOtherwise>,
}


// CTSampleData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSampleData {
	#[serde(rename = "useDef")]
	pub use_def: Option<bool>,
	#[serde(rename = "dataModel")]
	pub data_model: Option<CTDataModel>,
}


// CTCategory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCategory {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "pri")]
	pub pri: u32,
}


// CTCategories ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCategories {
	#[serde(rename = "cat")]
	pub cat: Vec<CTCategory>,
}


// CTName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTName {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTDescription ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDescription {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTDiagramDefinition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDiagramDefinition {
	#[serde(rename = "uniqueId")]
	pub unique_id: Option<String>,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "defStyle")]
	pub def_style: Option<String>,
	#[serde(rename = "title")]
	pub title: Vec<CTName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTCategories>,
	#[serde(rename = "sampData")]
	pub samp_data: Option<CTSampleData>,
	#[serde(rename = "styleData")]
	pub style_data: Option<CTSampleData>,
	#[serde(rename = "clrData")]
	pub clr_data: Option<CTSampleData>,
	#[serde(rename = "layoutNode")]
	pub layout_node: CTLayoutNode,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// layout_def ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct layout_def {
	#[serde(rename = "layoutDef")]
	pub layout_def: CTDiagramDefinition,
}


// CTDiagramDefinitionHeader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDiagramDefinitionHeader {
	#[serde(rename = "uniqueId")]
	pub unique_id: String,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "defStyle")]
	pub def_style: Option<String>,
	#[serde(rename = "resId")]
	pub res_id: Option<i32>,
	#[serde(rename = "title")]
	pub title: Vec<CTName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTCategories>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// layout_def_hdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct layout_def_hdr {
	#[serde(rename = "layoutDefHdr")]
	pub layout_def_hdr: CTDiagramDefinitionHeader,
}


// CTDiagramDefinitionHeaderLst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDiagramDefinitionHeaderLst {
	#[serde(rename = "layoutDefHdr")]
	pub layout_def_hdr: Vec<CTDiagramDefinitionHeader>,
}


// layout_def_hdr_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct layout_def_hdr_lst {
	#[serde(rename = "layoutDefHdrLst")]
	pub layout_def_hdr_lst: CTDiagramDefinitionHeaderLst,
}


// CTRelIds ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRelIds {
	#[serde(rename = "r:dm")]
	pub r_dm: String,
	#[serde(rename = "r:lo")]
	pub r_lo: String,
	#[serde(rename = "r:qs")]
	pub r_qs: String,
	#[serde(rename = "r:cs")]
	pub r_cs: String,
}


// rel_ids ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct rel_ids {
	#[serde(rename = "relIds")]
	pub rel_ids: CTRelIds,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STParameterVal {
	#[serde(rename = "ST_ParameterVal")]
	pub st_arrowhead_style: STArrowheadStyle,
	#[serde(rename = "ST_ParameterVal")]
	pub st_auto_text_rotation: STAutoTextRotation,
	#[serde(rename = "ST_ParameterVal")]
	pub st_bend_point: STBendPoint,
	#[serde(rename = "ST_ParameterVal")]
	pub st_breakpoint: STBreakpoint,
	#[serde(rename = "ST_ParameterVal")]
	pub st_center_shape_mapping: STCenterShapeMapping,
	#[serde(rename = "ST_ParameterVal")]
	pub st_child_alignment: STChildAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_child_direction: STChildDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_connector_dimension: STConnectorDimension,
	#[serde(rename = "ST_ParameterVal")]
	pub st_connector_point: STConnectorPoint,
	#[serde(rename = "ST_ParameterVal")]
	pub st_connector_routing: STConnectorRouting,
	#[serde(rename = "ST_ParameterVal")]
	pub st_continue_direction: STContinueDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_diagram_horizontal_alignment: STDiagramHorizontalAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_diagram_text_alignment: STDiagramTextAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_fallback_dimension: STFallbackDimension,
	#[serde(rename = "ST_ParameterVal")]
	pub st_flow_direction: STFlowDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_grow_direction: STGrowDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_hierarchy_alignment: STHierarchyAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_linear_direction: STLinearDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_node_horizontal_alignment: STNodeHorizontalAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_node_vertical_alignment: STNodeVerticalAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_offset: STOffset,
	#[serde(rename = "ST_ParameterVal")]
	pub st_pyramid_accent_position: STPyramidAccentPosition,
	#[serde(rename = "ST_ParameterVal")]
	pub st_pyramid_accent_text_margin: STPyramidAccentTextMargin,
	#[serde(rename = "ST_ParameterVal")]
	pub st_rotation_path: STRotationPath,
	#[serde(rename = "ST_ParameterVal")]
	pub st_secondary_child_alignment: STSecondaryChildAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub st_secondary_linear_direction: STSecondaryLinearDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_starting_element: STStartingElement,
	#[serde(rename = "ST_ParameterVal")]
	pub st_text_anchor_horizontal: STTextAnchorHorizontal,
	#[serde(rename = "ST_ParameterVal")]
	pub st_text_anchor_vertical: STTextAnchorVertical,
	#[serde(rename = "ST_ParameterVal")]
	pub st_text_block_direction: STTextBlockDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_text_direction: STTextDirection,
	#[serde(rename = "ST_ParameterVal")]
	pub st_vertical_alignment: STVerticalAlignment,
	#[serde(rename = "ST_ParameterVal")]
	pub string: String,
	#[serde(rename = "ST_ParameterVal")]
	pub boolean: bool,
	#[serde(rename = "ST_ParameterVal")]
	pub double: f64,
	#[serde(rename = "ST_ParameterVal")]
	pub int: i32,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STModelId {
	#[serde(rename = "ST_ModelId")]
	pub st_guid: String,
	#[serde(rename = "ST_ModelId")]
	pub int: i32,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPrSetCustVal {
	#[serde(rename = "ST_PrSetCustVal")]
	pub st_percentage: String,
}


// CTElemPropSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTElemPropSet {
	#[serde(rename = "presAssocID")]
	pub pres_assoc_id: Option<STModelId>,
	#[serde(rename = "presName")]
	pub pres_name: Option<String>,
	#[serde(rename = "presStyleLbl")]
	pub pres_style_lbl: Option<String>,
	#[serde(rename = "presStyleIdx")]
	pub pres_style_idx: Option<i32>,
	#[serde(rename = "presStyleCnt")]
	pub pres_style_cnt: Option<i32>,
	#[serde(rename = "loTypeId")]
	pub lo_type_id: Option<String>,
	#[serde(rename = "loCatId")]
	pub lo_cat_id: Option<String>,
	#[serde(rename = "qsTypeId")]
	pub qs_type_id: Option<String>,
	#[serde(rename = "qsCatId")]
	pub qs_cat_id: Option<String>,
	#[serde(rename = "csTypeId")]
	pub cs_type_id: Option<String>,
	#[serde(rename = "csCatId")]
	pub cs_cat_id: Option<String>,
	#[serde(rename = "coherent3DOff")]
	pub coherent3_d_off: Option<bool>,
	#[serde(rename = "phldrT")]
	pub phldr_t: Option<String>,
	#[serde(rename = "phldr")]
	pub phldr: Option<bool>,
	#[serde(rename = "custAng")]
	pub cust_ang: Option<i32>,
	#[serde(rename = "custFlipVert")]
	pub cust_flip_vert: Option<bool>,
	#[serde(rename = "custFlipHor")]
	pub cust_flip_hor: Option<bool>,
	#[serde(rename = "custSzX")]
	pub cust_sz_x: Option<i32>,
	#[serde(rename = "custSzY")]
	pub cust_sz_y: Option<i32>,
	#[serde(rename = "custScaleX")]
	pub cust_scale_x: Option<STPrSetCustVal>,
	#[serde(rename = "custScaleY")]
	pub cust_scale_y: Option<STPrSetCustVal>,
	#[serde(rename = "custT")]
	pub cust_t: Option<bool>,
	#[serde(rename = "custLinFactX")]
	pub cust_lin_fact_x: Option<STPrSetCustVal>,
	#[serde(rename = "custLinFactY")]
	pub cust_lin_fact_y: Option<STPrSetCustVal>,
	#[serde(rename = "custLinFactNeighborX")]
	pub cust_lin_fact_neighbor_x: Option<STPrSetCustVal>,
	#[serde(rename = "custLinFactNeighborY")]
	pub cust_lin_fact_neighbor_y: Option<STPrSetCustVal>,
	#[serde(rename = "custRadScaleRad")]
	pub cust_rad_scale_rad: Option<STPrSetCustVal>,
	#[serde(rename = "custRadScaleInc")]
	pub cust_rad_scale_inc: Option<STPrSetCustVal>,
	#[serde(rename = "presLayoutVars")]
	pub pres_layout_vars: Option<CTLayoutVariablePropertySet>,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
}


// STDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDirection {
	#[serde(rename = "ST_Direction")]
	pub st_direction: String,
}


// STHierBranchStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHierBranchStyle {
	#[serde(rename = "ST_HierBranchStyle")]
	pub st_hier_branch_style: String,
}


// STAnimOneStr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimOneStr {
	#[serde(rename = "ST_AnimOneStr")]
	pub st_anim_one_str: String,
}


// STAnimLvlStr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimLvlStr {
	#[serde(rename = "ST_AnimLvlStr")]
	pub st_anim_lvl_str: String,
}


// CTOrgChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOrgChart {
	#[serde(rename = "val")]
	pub val: Option<bool>,
}


// STNodeCount ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STNodeCount {
	#[serde(rename = "ST_NodeCount")]
	pub st_node_count: i32,
}


// CTChildMax ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChildMax {
	#[serde(rename = "val")]
	pub val: Option<i32>,
}


// CTChildPref ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChildPref {
	#[serde(rename = "val")]
	pub val: Option<i32>,
}


// CTBulletEnabled ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBulletEnabled {
	#[serde(rename = "val")]
	pub val: Option<bool>,
}


// CTDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDirection {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTHierBranchStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHierBranchStyle {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTAnimOne ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimOne {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTAnimLvl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimLvl {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STResizeHandlesStr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STResizeHandlesStr {
	#[serde(rename = "ST_ResizeHandlesStr")]
	pub st_resize_handles_str: String,
}


// CTResizeHandles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTResizeHandles {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTLayoutVariablePropertySet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLayoutVariablePropertySet {
	#[serde(rename = "orgChart")]
	pub org_chart: Option<CTOrgChart>,
	#[serde(rename = "chMax")]
	pub ch_max: Option<CTChildMax>,
	#[serde(rename = "chPref")]
	pub ch_pref: Option<CTChildPref>,
	#[serde(rename = "bulletEnabled")]
	pub bullet_enabled: Option<CTBulletEnabled>,
	#[serde(rename = "dir")]
	pub dir: Option<CTDirection>,
	#[serde(rename = "hierBranch")]
	pub hier_branch: Option<CTHierBranchStyle>,
	#[serde(rename = "animOne")]
	pub anim_one: Option<CTAnimOne>,
	#[serde(rename = "animLvl")]
	pub anim_lvl: Option<CTAnimLvl>,
	#[serde(rename = "resizeHandles")]
	pub resize_handles: Option<CTResizeHandles>,
}


// CTSDName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSDName {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTSDDescription ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSDDescription {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// CTSDCategory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSDCategory {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "pri")]
	pub pri: u32,
}


// CTSDCategories ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSDCategories {
	#[serde(rename = "cat")]
	pub cat: Vec<CTSDCategory>,
}


// CTTextProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextProps {
	#[serde(rename = "a:EG_Text3D")]
	pub aeg_text3_d: Vec<EGText3D>,
}


// CTStyleLabel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleLabel {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "sp3d")]
	pub sp3d: Option<CTShape3D>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextProps>,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTStyleDefinition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleDefinition {
	#[serde(rename = "uniqueId")]
	pub unique_id: Option<String>,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "title")]
	pub title: Vec<CTSDName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTSDDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTSDCategories>,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "styleLbl")]
	pub style_lbl: Vec<CTStyleLabel>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// style_def ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct style_def {
	#[serde(rename = "styleDef")]
	pub style_def: CTStyleDefinition,
}


// CTStyleDefinitionHeader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleDefinitionHeader {
	#[serde(rename = "uniqueId")]
	pub unique_id: String,
	#[serde(rename = "minVer")]
	pub min_ver: Option<String>,
	#[serde(rename = "resId")]
	pub res_id: Option<i32>,
	#[serde(rename = "title")]
	pub title: Vec<CTSDName>,
	#[serde(rename = "desc")]
	pub desc: Vec<CTSDDescription>,
	#[serde(rename = "catLst")]
	pub cat_lst: Option<CTSDCategories>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// style_def_hdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct style_def_hdr {
	#[serde(rename = "styleDefHdr")]
	pub style_def_hdr: CTStyleDefinitionHeader,
}


// CTStyleDefinitionHeaderLst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleDefinitionHeaderLst {
	#[serde(rename = "styleDefHdr")]
	pub style_def_hdr: Vec<CTStyleDefinitionHeader>,
}


// style_def_hdr_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct style_def_hdr_lst {
	#[serde(rename = "styleDefHdrLst")]
	pub style_def_hdr_lst: CTStyleDefinitionHeaderLst,
}


// STAlgorithmType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAlgorithmType {
	#[serde(rename = "ST_AlgorithmType")]
	pub st_algorithm_type: String,
}


// STAxisType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAxisType {
	#[serde(rename = "ST_AxisType")]
	pub st_axis_type: String,
}


// STAxisTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAxisTypes {
	#[serde(rename = "ST_AxisTypes")]
	pub st_axis_types: Vec<String>,
}


// STBoolOperator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBoolOperator {
	#[serde(rename = "ST_BoolOperator")]
	pub st_bool_operator: String,
}


// STChildOrderType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STChildOrderType {
	#[serde(rename = "ST_ChildOrderType")]
	pub st_child_order_type: String,
}


// STConstraintType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConstraintType {
	#[serde(rename = "ST_ConstraintType")]
	pub st_constraint_type: String,
}


// STConstraintRelationship ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConstraintRelationship {
	#[serde(rename = "ST_ConstraintRelationship")]
	pub st_constraint_relationship: String,
}


// STElementType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STElementType {
	#[serde(rename = "ST_ElementType")]
	pub st_element_type: String,
}


// STElementTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STElementTypes {
	#[serde(rename = "ST_ElementTypes")]
	pub st_element_types: Vec<String>,
}


// STParameterId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STParameterId {
	#[serde(rename = "ST_ParameterId")]
	pub st_parameter_id: String,
}


// STInts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STInts {
	#[serde(rename = "ST_Ints")]
	pub st_ints: Vec<i32>,
}


// STUnsignedInts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUnsignedInts {
	#[serde(rename = "ST_UnsignedInts")]
	pub st_unsigned_ints: Vec<u32>,
}


// STBooleans ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBooleans {
	#[serde(rename = "ST_Booleans")]
	pub st_booleans: Vec<bool>,
}


// STFunctionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFunctionType {
	#[serde(rename = "ST_FunctionType")]
	pub st_function_type: String,
}


// STFunctionOperator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFunctionOperator {
	#[serde(rename = "ST_FunctionOperator")]
	pub st_function_operator: String,
}


// STDiagramHorizontalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDiagramHorizontalAlignment {
	#[serde(rename = "ST_DiagramHorizontalAlignment")]
	pub st_diagram_horizontal_alignment: String,
}


// STVerticalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVerticalAlignment {
	#[serde(rename = "ST_VerticalAlignment")]
	pub st_vertical_alignment: String,
}


// STChildDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STChildDirection {
	#[serde(rename = "ST_ChildDirection")]
	pub st_child_direction: String,
}


// STChildAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STChildAlignment {
	#[serde(rename = "ST_ChildAlignment")]
	pub st_child_alignment: String,
}


// STSecondaryChildAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSecondaryChildAlignment {
	#[serde(rename = "ST_SecondaryChildAlignment")]
	pub st_secondary_child_alignment: String,
}


// STLinearDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLinearDirection {
	#[serde(rename = "ST_LinearDirection")]
	pub st_linear_direction: String,
}


// STSecondaryLinearDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSecondaryLinearDirection {
	#[serde(rename = "ST_SecondaryLinearDirection")]
	pub st_secondary_linear_direction: String,
}


// STStartingElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STStartingElement {
	#[serde(rename = "ST_StartingElement")]
	pub st_starting_element: String,
}


// STRotationPath ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRotationPath {
	#[serde(rename = "ST_RotationPath")]
	pub st_rotation_path: String,
}


// STCenterShapeMapping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCenterShapeMapping {
	#[serde(rename = "ST_CenterShapeMapping")]
	pub st_center_shape_mapping: String,
}


// STBendPoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBendPoint {
	#[serde(rename = "ST_BendPoint")]
	pub st_bend_point: String,
}


// STConnectorRouting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConnectorRouting {
	#[serde(rename = "ST_ConnectorRouting")]
	pub st_connector_routing: String,
}


// STArrowheadStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STArrowheadStyle {
	#[serde(rename = "ST_ArrowheadStyle")]
	pub st_arrowhead_style: String,
}


// STConnectorDimension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConnectorDimension {
	#[serde(rename = "ST_ConnectorDimension")]
	pub st_connector_dimension: String,
}


// STConnectorPoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConnectorPoint {
	#[serde(rename = "ST_ConnectorPoint")]
	pub st_connector_point: String,
}


// STNodeHorizontalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STNodeHorizontalAlignment {
	#[serde(rename = "ST_NodeHorizontalAlignment")]
	pub st_node_horizontal_alignment: String,
}


// STNodeVerticalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STNodeVerticalAlignment {
	#[serde(rename = "ST_NodeVerticalAlignment")]
	pub st_node_vertical_alignment: String,
}


// STFallbackDimension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFallbackDimension {
	#[serde(rename = "ST_FallbackDimension")]
	pub st_fallback_dimension: String,
}


// STTextDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextDirection {
	#[serde(rename = "ST_TextDirection")]
	pub st_text_direction: String,
}


// STPyramidAccentPosition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPyramidAccentPosition {
	#[serde(rename = "ST_PyramidAccentPosition")]
	pub st_pyramid_accent_position: String,
}


// STPyramidAccentTextMargin ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPyramidAccentTextMargin {
	#[serde(rename = "ST_PyramidAccentTextMargin")]
	pub st_pyramid_accent_text_margin: String,
}


// STTextBlockDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextBlockDirection {
	#[serde(rename = "ST_TextBlockDirection")]
	pub st_text_block_direction: String,
}


// STTextAnchorHorizontal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAnchorHorizontal {
	#[serde(rename = "ST_TextAnchorHorizontal")]
	pub st_text_anchor_horizontal: String,
}


// STTextAnchorVertical ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAnchorVertical {
	#[serde(rename = "ST_TextAnchorVertical")]
	pub st_text_anchor_vertical: String,
}


// STDiagramTextAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDiagramTextAlignment {
	#[serde(rename = "ST_DiagramTextAlignment")]
	pub st_diagram_text_alignment: String,
}


// STAutoTextRotation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAutoTextRotation {
	#[serde(rename = "ST_AutoTextRotation")]
	pub st_auto_text_rotation: String,
}


// STGrowDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGrowDirection {
	#[serde(rename = "ST_GrowDirection")]
	pub st_grow_direction: String,
}


// STFlowDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFlowDirection {
	#[serde(rename = "ST_FlowDirection")]
	pub st_flow_direction: String,
}


// STContinueDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STContinueDirection {
	#[serde(rename = "ST_ContinueDirection")]
	pub st_continue_direction: String,
}


// STBreakpoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBreakpoint {
	#[serde(rename = "ST_Breakpoint")]
	pub st_breakpoint: String,
}


// STOffset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOffset {
	#[serde(rename = "ST_Offset")]
	pub st_offset: String,
}


// STHierarchyAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHierarchyAlignment {
	#[serde(rename = "ST_HierarchyAlignment")]
	pub st_hierarchy_alignment: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFunctionValue {
	#[serde(rename = "ST_FunctionValue")]
	pub st_resize_handles_str: String,
	#[serde(rename = "ST_FunctionValue")]
	pub st_hier_branch_style: String,
	#[serde(rename = "ST_FunctionValue")]
	pub st_direction: String,
	#[serde(rename = "ST_FunctionValue")]
	pub st_anim_one_str: String,
	#[serde(rename = "ST_FunctionValue")]
	pub st_anim_lvl_str: String,
	#[serde(rename = "ST_FunctionValue")]
	pub boolean: bool,
	#[serde(rename = "ST_FunctionValue")]
	pub int: i32,
}


// STVariableType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVariableType {
	#[serde(rename = "ST_VariableType")]
	pub st_variable_type: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFunctionArgument {
	#[serde(rename = "ST_FunctionArgument")]
	pub st_variable_type: String,
}


// STOutputShapeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOutputShapeType {
	#[serde(rename = "ST_OutputShapeType")]
	pub st_output_shape_type: String,
}
