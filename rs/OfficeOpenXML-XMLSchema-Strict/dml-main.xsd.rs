// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTAudioFile ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAudioFile {
	#[serde(rename = "r:link")]
	pub r_link: String,
	#[serde(rename = "contentType")]
	pub content_type: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTVideoFile ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVideoFile {
	#[serde(rename = "r:link")]
	pub r_link: String,
	#[serde(rename = "contentType")]
	pub content_type: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTQuickTimeFile ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQuickTimeFile {
	#[serde(rename = "r:link")]
	pub r_link: String,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTAudioCDTime ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAudioCDTime {
	#[serde(rename = "track")]
	pub track: u8,
	#[serde(rename = "time")]
	pub time: Option<u32>,
}


// CTAudioCD ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAudioCD {
	#[serde(rename = "st")]
	pub st: CTAudioCDTime,
	#[serde(rename = "end")]
	pub end: CTAudioCDTime,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// EGMedia ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGMedia {
	#[serde(rename = "audioCd")]
	pub audio_cd: CTAudioCD,
	#[serde(rename = "wavAudioFile")]
	pub wav_audio_file: CTEmbeddedWAVAudioFile,
	#[serde(rename = "audioFile")]
	pub audio_file: CTAudioFile,
	#[serde(rename = "videoFile")]
	pub video_file: CTVideoFile,
	#[serde(rename = "quickTimeFile")]
	pub quick_time_file: CTQuickTimeFile,
}


// video_file ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct video_file {
	#[serde(rename = "videoFile")]
	pub video_file: CTVideoFile,
}


// STStyleMatrixColumnIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STStyleMatrixColumnIndex {
	#[serde(rename = "ST_StyleMatrixColumnIndex")]
	pub st_style_matrix_column_index: u32,
}


// STFontCollectionIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFontCollectionIndex {
	#[serde(rename = "ST_FontCollectionIndex")]
	pub st_font_collection_index: String,
}


// STColorSchemeIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STColorSchemeIndex {
	#[serde(rename = "ST_ColorSchemeIndex")]
	pub st_color_scheme_index: String,
}


// CTColorScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorScheme {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "dk1")]
	pub dk1: CTColor,
	#[serde(rename = "lt1")]
	pub lt1: CTColor,
	#[serde(rename = "dk2")]
	pub dk2: CTColor,
	#[serde(rename = "lt2")]
	pub lt2: CTColor,
	#[serde(rename = "accent1")]
	pub accent1: CTColor,
	#[serde(rename = "accent2")]
	pub accent2: CTColor,
	#[serde(rename = "accent3")]
	pub accent3: CTColor,
	#[serde(rename = "accent4")]
	pub accent4: CTColor,
	#[serde(rename = "accent5")]
	pub accent5: CTColor,
	#[serde(rename = "accent6")]
	pub accent6: CTColor,
	#[serde(rename = "hlink")]
	pub hlink: CTColor,
	#[serde(rename = "folHlink")]
	pub fol_hlink: CTColor,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTCustomColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomColor {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTSupplementalFont ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSupplementalFont {
	#[serde(rename = "script")]
	pub script: String,
	#[serde(rename = "typeface")]
	pub typeface: String,
}


// CTCustomColorList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomColorList {
	#[serde(rename = "custClr")]
	pub cust_clr: Vec<CTCustomColor>,
}


// CTFontCollection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontCollection {
	#[serde(rename = "latin")]
	pub latin: CTTextFont,
	#[serde(rename = "ea")]
	pub ea: CTTextFont,
	#[serde(rename = "cs")]
	pub cs: CTTextFont,
	#[serde(rename = "font")]
	pub font: Vec<CTSupplementalFont>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTEffectStyleItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectStyleItem {
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "sp3d")]
	pub sp3d: Option<CTShape3D>,
}


// CTFontScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontScheme {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "majorFont")]
	pub major_font: CTFontCollection,
	#[serde(rename = "minorFont")]
	pub minor_font: CTFontCollection,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTFillStyleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFillStyleList {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// CTLineStyleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineStyleList {
	#[serde(rename = "ln")]
	pub ln: Vec<CTLineProperties>,
}


// CTEffectStyleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectStyleList {
	#[serde(rename = "effectStyle")]
	pub effect_style: Vec<CTEffectStyleItem>,
}


// CTBackgroundFillStyleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackgroundFillStyleList {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// CTStyleMatrix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleMatrix {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "fillStyleLst")]
	pub fill_style_lst: CTFillStyleList,
	#[serde(rename = "lnStyleLst")]
	pub ln_style_lst: CTLineStyleList,
	#[serde(rename = "effectStyleLst")]
	pub effect_style_lst: CTEffectStyleList,
	#[serde(rename = "bgFillStyleLst")]
	pub bg_fill_style_lst: CTBackgroundFillStyleList,
}


// CTBaseStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBaseStyles {
	#[serde(rename = "clrScheme")]
	pub clr_scheme: CTColorScheme,
	#[serde(rename = "fontScheme")]
	pub font_scheme: CTFontScheme,
	#[serde(rename = "fmtScheme")]
	pub fmt_scheme: CTStyleMatrix,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTOfficeArtExtension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOfficeArtExtension {
	#[serde(rename = "uri")]
	pub uri: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCoordinate {
	#[serde(rename = "ST_Coordinate")]
	pub st_coordinate_unqualified: STCoordinateUnqualified,
	#[serde(rename = "ST_Coordinate")]
	pub st_universal_measure: String,
}


// STCoordinateUnqualified ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCoordinateUnqualified {
	#[serde(rename = "ST_CoordinateUnqualified")]
	pub st_coordinate_unqualified: i64,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCoordinate32 {
	#[serde(rename = "ST_Coordinate32")]
	pub st_coordinate32_unqualified: STCoordinate32Unqualified,
	#[serde(rename = "ST_Coordinate32")]
	pub st_universal_measure: String,
}


// STCoordinate32Unqualified ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCoordinate32Unqualified {
	#[serde(rename = "ST_Coordinate32Unqualified")]
	pub st_coordinate32_unqualified: i32,
}


// STPositiveCoordinate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveCoordinate {
	#[serde(rename = "ST_PositiveCoordinate")]
	pub st_positive_coordinate: i64,
}


// STPositiveCoordinate32 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveCoordinate32 {
	#[serde(rename = "ST_PositiveCoordinate32")]
	pub st_positive_coordinate32: i32,
}


// STAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAngle {
	#[serde(rename = "ST_Angle")]
	pub st_angle: i32,
}


// CTAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAngle {
	#[serde(rename = "val")]
	pub val: i32,
}


// STFixedAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFixedAngle {
	#[serde(rename = "ST_FixedAngle")]
	pub st_fixed_angle: i32,
}


// STPositiveFixedAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveFixedAngle {
	#[serde(rename = "ST_PositiveFixedAngle")]
	pub st_positive_fixed_angle: i32,
}


// CTPositiveFixedAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPositiveFixedAngle {
	#[serde(rename = "val")]
	pub val: i32,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPercentage {
	#[serde(rename = "ST_Percentage")]
	pub st_percentage: String,
}


// CTPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPercentage {
	#[serde(rename = "val")]
	pub val: STPercentage,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositivePercentage {
	#[serde(rename = "ST_PositivePercentage")]
	pub st_positive_percentage: String,
}


// CTPositivePercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPositivePercentage {
	#[serde(rename = "val")]
	pub val: STPositivePercentage,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFixedPercentage {
	#[serde(rename = "ST_FixedPercentage")]
	pub st_fixed_percentage: String,
}


// CTFixedPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFixedPercentage {
	#[serde(rename = "val")]
	pub val: STFixedPercentage,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveFixedPercentage {
	#[serde(rename = "ST_PositiveFixedPercentage")]
	pub st_positive_fixed_percentage: String,
}


// CTPositiveFixedPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPositiveFixedPercentage {
	#[serde(rename = "val")]
	pub val: STPositiveFixedPercentage,
}


// CTRatio ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRatio {
	#[serde(rename = "n")]
	pub n: i64,
	#[serde(rename = "d")]
	pub d: i64,
}


// CTPoint2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPoint2D {
	#[serde(rename = "x")]
	pub x: STCoordinate,
	#[serde(rename = "y")]
	pub y: STCoordinate,
}


// CTPositiveSize2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPositiveSize2D {
	#[serde(rename = "cx")]
	pub cx: i64,
	#[serde(rename = "cy")]
	pub cy: i64,
}


// CTComplementTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComplementTransform {
}


// CTInverseTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInverseTransform {
}


// CTGrayscaleTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGrayscaleTransform {
}


// CTGammaTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGammaTransform {
}


// CTInverseGammaTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInverseGammaTransform {
}


// EGColorTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGColorTransform {
	#[serde(rename = "tint")]
	pub tint: CTPositiveFixedPercentage,
	#[serde(rename = "shade")]
	pub shade: CTPositiveFixedPercentage,
	#[serde(rename = "comp")]
	pub comp: CTComplementTransform,
	#[serde(rename = "inv")]
	pub inv: CTInverseTransform,
	#[serde(rename = "gray")]
	pub gray: CTGrayscaleTransform,
	#[serde(rename = "alpha")]
	pub alpha: CTPositiveFixedPercentage,
	#[serde(rename = "alphaOff")]
	pub alpha_off: CTFixedPercentage,
	#[serde(rename = "alphaMod")]
	pub alpha_mod: CTPositivePercentage,
	#[serde(rename = "hue")]
	pub hue: CTPositiveFixedAngle,
	#[serde(rename = "hueOff")]
	pub hue_off: CTAngle,
	#[serde(rename = "hueMod")]
	pub hue_mod: CTPositivePercentage,
	#[serde(rename = "sat")]
	pub sat: CTPercentage,
	#[serde(rename = "satOff")]
	pub sat_off: CTPercentage,
	#[serde(rename = "satMod")]
	pub sat_mod: CTPercentage,
	#[serde(rename = "lum")]
	pub lum: CTPercentage,
	#[serde(rename = "lumOff")]
	pub lum_off: CTPercentage,
	#[serde(rename = "lumMod")]
	pub lum_mod: CTPercentage,
	#[serde(rename = "red")]
	pub red: CTPercentage,
	#[serde(rename = "redOff")]
	pub red_off: CTPercentage,
	#[serde(rename = "redMod")]
	pub red_mod: CTPercentage,
	#[serde(rename = "green")]
	pub green: CTPercentage,
	#[serde(rename = "greenOff")]
	pub green_off: CTPercentage,
	#[serde(rename = "greenMod")]
	pub green_mod: CTPercentage,
	#[serde(rename = "blue")]
	pub blue: CTPercentage,
	#[serde(rename = "blueOff")]
	pub blue_off: CTPercentage,
	#[serde(rename = "blueMod")]
	pub blue_mod: CTPercentage,
	#[serde(rename = "gamma")]
	pub gamma: CTGammaTransform,
	#[serde(rename = "invGamma")]
	pub inv_gamma: CTInverseGammaTransform,
}


// CTScRgbColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScRgbColor {
	#[serde(rename = "r")]
	pub r: STPercentage,
	#[serde(rename = "g")]
	pub g: STPercentage,
	#[serde(rename = "b")]
	pub b: STPercentage,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// CTSRgbColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSRgbColor {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// CTHslColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHslColor {
	#[serde(rename = "hue")]
	pub hue: i32,
	#[serde(rename = "sat")]
	pub sat: STPercentage,
	#[serde(rename = "lum")]
	pub lum: STPercentage,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// STSystemColorVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSystemColorVal {
	#[serde(rename = "ST_SystemColorVal")]
	pub st_system_color_val: String,
}


// CTSystemColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSystemColor {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "lastClr")]
	pub last_clr: Option<String>,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// STSchemeColorVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSchemeColorVal {
	#[serde(rename = "ST_SchemeColorVal")]
	pub st_scheme_color_val: String,
}


// CTSchemeColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSchemeColor {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// STPresetColorVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetColorVal {
	#[serde(rename = "ST_PresetColorVal")]
	pub st_preset_color_val: String,
}


// CTPresetColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresetColor {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "EG_ColorTransform")]
	pub eg_color_transform: Vec<EGColorTransform>,
}


// EGOfficeArtExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGOfficeArtExtensionList {
	#[serde(rename = "ext")]
	pub ext: CTOfficeArtExtension,
}


// CTOfficeArtExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOfficeArtExtensionList {
	#[serde(rename = "EG_OfficeArtExtensionList")]
	pub eg_office_art_extension_list: Vec<EGOfficeArtExtensionList>,
}


// CTScale2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScale2D {
	#[serde(rename = "sx")]
	pub sx: CTRatio,
	#[serde(rename = "sy")]
	pub sy: CTRatio,
}


// CTTransform2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTransform2D {
	#[serde(rename = "rot")]
	pub rot: Option<i32>,
	#[serde(rename = "flipH")]
	pub flip_h: Option<bool>,
	#[serde(rename = "flipV")]
	pub flip_v: Option<bool>,
	#[serde(rename = "off")]
	pub off: Option<CTPoint2D>,
	#[serde(rename = "ext")]
	pub ext: Option<CTPositiveSize2D>,
}


// CTGroupTransform2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupTransform2D {
	#[serde(rename = "rot")]
	pub rot: Option<i32>,
	#[serde(rename = "flipH")]
	pub flip_h: Option<bool>,
	#[serde(rename = "flipV")]
	pub flip_v: Option<bool>,
	#[serde(rename = "off")]
	pub off: Option<CTPoint2D>,
	#[serde(rename = "ext")]
	pub ext: Option<CTPositiveSize2D>,
	#[serde(rename = "chOff")]
	pub ch_off: Option<CTPoint2D>,
	#[serde(rename = "chExt")]
	pub ch_ext: Option<CTPositiveSize2D>,
}


// CTPoint3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPoint3D {
	#[serde(rename = "x")]
	pub x: STCoordinate,
	#[serde(rename = "y")]
	pub y: STCoordinate,
	#[serde(rename = "z")]
	pub z: STCoordinate,
}


// CTVector3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVector3D {
	#[serde(rename = "dx")]
	pub dx: STCoordinate,
	#[serde(rename = "dy")]
	pub dy: STCoordinate,
	#[serde(rename = "dz")]
	pub dz: STCoordinate,
}


// CTSphereCoords ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSphereCoords {
	#[serde(rename = "lat")]
	pub lat: i32,
	#[serde(rename = "lon")]
	pub lon: i32,
	#[serde(rename = "rev")]
	pub rev: i32,
}


// CTRelativeRect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRelativeRect {
	#[serde(rename = "l")]
	pub l: Option<STPercentage>,
	#[serde(rename = "t")]
	pub t: Option<STPercentage>,
	#[serde(rename = "r")]
	pub r: Option<STPercentage>,
	#[serde(rename = "b")]
	pub b: Option<STPercentage>,
}


// STRectAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRectAlignment {
	#[serde(rename = "ST_RectAlignment")]
	pub st_rect_alignment: String,
}


// EGColorChoice ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGColorChoice {
	#[serde(rename = "scrgbClr")]
	pub scrgb_clr: CTScRgbColor,
	#[serde(rename = "srgbClr")]
	pub srgb_clr: CTSRgbColor,
	#[serde(rename = "hslClr")]
	pub hsl_clr: CTHslColor,
	#[serde(rename = "sysClr")]
	pub sys_clr: CTSystemColor,
	#[serde(rename = "schemeClr")]
	pub scheme_clr: CTSchemeColor,
	#[serde(rename = "prstClr")]
	pub prst_clr: CTPresetColor,
}


// CTColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColor {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: EGColorChoice,
}


// CTColorMRU ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorMRU {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// STBlackWhiteMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBlackWhiteMode {
	#[serde(rename = "ST_BlackWhiteMode")]
	pub st_black_white_mode: String,
}


// AGBlob ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGBlob {
	#[serde(rename = "r:embed")]
	pub r_embed: Option<String>,
	#[serde(rename = "r:link")]
	pub r_link: Option<String>,
}


// CTEmbeddedWAVAudioFile ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmbeddedWAVAudioFile {
	#[serde(rename = "r:embed")]
	pub r_embed: String,
	#[serde(rename = "name")]
	pub name: Option<String>,
}


// CTHyperlink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHyperlink {
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "invalidUrl")]
	pub invalid_url: Option<String>,
	#[serde(rename = "action")]
	pub action: Option<String>,
	#[serde(rename = "tgtFrame")]
	pub tgt_frame: Option<String>,
	#[serde(rename = "tooltip")]
	pub tooltip: Option<String>,
	#[serde(rename = "history")]
	pub history: Option<bool>,
	#[serde(rename = "highlightClick")]
	pub highlight_click: Option<bool>,
	#[serde(rename = "endSnd")]
	pub end_snd: Option<bool>,
	#[serde(rename = "snd")]
	pub snd: Option<CTEmbeddedWAVAudioFile>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// STDrawingElementId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDrawingElementId {
	#[serde(rename = "ST_DrawingElementId")]
	pub st_drawing_element_id: u32,
}


// AGLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGLocking {
	#[serde(rename = "noGrp")]
	pub no_grp: Option<bool>,
	#[serde(rename = "noSelect")]
	pub no_select: Option<bool>,
	#[serde(rename = "noRot")]
	pub no_rot: Option<bool>,
	#[serde(rename = "noChangeAspect")]
	pub no_change_aspect: Option<bool>,
	#[serde(rename = "noMove")]
	pub no_move: Option<bool>,
	#[serde(rename = "noResize")]
	pub no_resize: Option<bool>,
	#[serde(rename = "noEditPoints")]
	pub no_edit_points: Option<bool>,
	#[serde(rename = "noAdjustHandles")]
	pub no_adjust_handles: Option<bool>,
	#[serde(rename = "noChangeArrowheads")]
	pub no_change_arrowheads: Option<bool>,
	#[serde(rename = "noChangeShapeType")]
	pub no_change_shape_type: Option<bool>,
}


// CTConnectorLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnectorLocking {
	#[serde(rename = "AG_Locking")]
	pub ag_locking: Vec<AGLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTShapeLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShapeLocking {
	#[serde(rename = "AG_Locking")]
	pub ag_locking: Vec<AGLocking>,
	#[serde(rename = "noTextEdit")]
	pub no_text_edit: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTPictureLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPictureLocking {
	#[serde(rename = "AG_Locking")]
	pub ag_locking: Vec<AGLocking>,
	#[serde(rename = "noCrop")]
	pub no_crop: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGroupLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupLocking {
	#[serde(rename = "noGrp")]
	pub no_grp: Option<bool>,
	#[serde(rename = "noUngrp")]
	pub no_ungrp: Option<bool>,
	#[serde(rename = "noSelect")]
	pub no_select: Option<bool>,
	#[serde(rename = "noRot")]
	pub no_rot: Option<bool>,
	#[serde(rename = "noChangeAspect")]
	pub no_change_aspect: Option<bool>,
	#[serde(rename = "noMove")]
	pub no_move: Option<bool>,
	#[serde(rename = "noResize")]
	pub no_resize: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGraphicalObjectFrameLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicalObjectFrameLocking {
	#[serde(rename = "noGrp")]
	pub no_grp: Option<bool>,
	#[serde(rename = "noDrilldown")]
	pub no_drilldown: Option<bool>,
	#[serde(rename = "noSelect")]
	pub no_select: Option<bool>,
	#[serde(rename = "noChangeAspect")]
	pub no_change_aspect: Option<bool>,
	#[serde(rename = "noMove")]
	pub no_move: Option<bool>,
	#[serde(rename = "noResize")]
	pub no_resize: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTContentPartLocking ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTContentPartLocking {
	#[serde(rename = "AG_Locking")]
	pub ag_locking: Vec<AGLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualDrawingProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualDrawingProps {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "descr")]
	pub descr: Option<String>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "hlinkClick")]
	pub hlink_click: Option<CTHyperlink>,
	#[serde(rename = "hlinkHover")]
	pub hlink_hover: Option<CTHyperlink>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualDrawingShapeProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualDrawingShapeProps {
	#[serde(rename = "txBox")]
	pub tx_box: Option<bool>,
	#[serde(rename = "spLocks")]
	pub sp_locks: Option<CTShapeLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualConnectorProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualConnectorProperties {
	#[serde(rename = "cxnSpLocks")]
	pub cxn_sp_locks: Option<CTConnectorLocking>,
	#[serde(rename = "stCxn")]
	pub st_cxn: Option<CTConnection>,
	#[serde(rename = "endCxn")]
	pub end_cxn: Option<CTConnection>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualPictureProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualPictureProperties {
	#[serde(rename = "preferRelativeResize")]
	pub prefer_relative_resize: Option<bool>,
	#[serde(rename = "picLocks")]
	pub pic_locks: Option<CTPictureLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualGroupDrawingShapeProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualGroupDrawingShapeProps {
	#[serde(rename = "grpSpLocks")]
	pub grp_sp_locks: Option<CTGroupLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualGraphicFrameProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualGraphicFrameProperties {
	#[serde(rename = "graphicFrameLocks")]
	pub graphic_frame_locks: Option<CTGraphicalObjectFrameLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTNonVisualContentPartProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNonVisualContentPartProperties {
	#[serde(rename = "isComment")]
	pub is_comment: Option<bool>,
	#[serde(rename = "cpLocks")]
	pub cp_locks: Option<CTContentPartLocking>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGraphicalObjectData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicalObjectData {
	#[serde(rename = "uri")]
	pub uri: String,
}


// CTGraphicalObject ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicalObject {
	#[serde(rename = "graphicData")]
	pub graphic_data: CTGraphicalObjectData,
}


// graphic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct graphic {
	#[serde(rename = "graphic")]
	pub graphic: CTGraphicalObject,
}


// STChartBuildStep ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STChartBuildStep {
	#[serde(rename = "ST_ChartBuildStep")]
	pub st_chart_build_step: String,
}


// STDgmBuildStep ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDgmBuildStep {
	#[serde(rename = "ST_DgmBuildStep")]
	pub st_dgm_build_step: String,
}


// CTAnimationDgmElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationDgmElement {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "bldStep")]
	pub bld_step: Option<String>,
}


// CTAnimationChartElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationChartElement {
	#[serde(rename = "seriesIdx")]
	pub series_idx: Option<i32>,
	#[serde(rename = "categoryIdx")]
	pub category_idx: Option<i32>,
	#[serde(rename = "bldStep")]
	pub bld_step: String,
}


// CTAnimationElementChoice ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationElementChoice {
	#[serde(rename = "dgm")]
	pub dgm: Option<CTAnimationDgmElement>,
	#[serde(rename = "chart")]
	pub chart: Option<CTAnimationChartElement>,
}


// STAnimationBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimationBuildType {
	#[serde(rename = "ST_AnimationBuildType")]
	pub st_animation_build_type: String,
}


// STAnimationDgmOnlyBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimationDgmOnlyBuildType {
	#[serde(rename = "ST_AnimationDgmOnlyBuildType")]
	pub st_animation_dgm_only_build_type: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimationDgmBuildType {
	#[serde(rename = "ST_AnimationDgmBuildType")]
	pub st_animation_dgm_only_build_type: String,
	#[serde(rename = "ST_AnimationDgmBuildType")]
	pub st_animation_build_type: String,
}


// CTAnimationDgmBuildProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationDgmBuildProperties {
	#[serde(rename = "bld")]
	pub bld: Option<STAnimationDgmBuildType>,
	#[serde(rename = "rev")]
	pub rev: Option<bool>,
}


// STAnimationChartOnlyBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimationChartOnlyBuildType {
	#[serde(rename = "ST_AnimationChartOnlyBuildType")]
	pub st_animation_chart_only_build_type: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnimationChartBuildType {
	#[serde(rename = "ST_AnimationChartBuildType")]
	pub st_animation_chart_only_build_type: String,
	#[serde(rename = "ST_AnimationChartBuildType")]
	pub st_animation_build_type: String,
}


// CTAnimationChartBuildProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationChartBuildProperties {
	#[serde(rename = "bld")]
	pub bld: Option<STAnimationChartBuildType>,
	#[serde(rename = "animBg")]
	pub anim_bg: Option<bool>,
}


// CTAnimationGraphicalObjectBuildProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnimationGraphicalObjectBuildProperties {
	#[serde(rename = "bldDgm")]
	pub bld_dgm: Option<CTAnimationDgmBuildProperties>,
	#[serde(rename = "bldChart")]
	pub bld_chart: Option<CTAnimationChartBuildProperties>,
}


// CTBackgroundFormatting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackgroundFormatting {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
}


// CTWholeE2oFormatting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWholeE2oFormatting {
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "ln")]
	pub ln: Option<CTLineProperties>,
}


// CTGvmlUseShapeRectangle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlUseShapeRectangle {
}


// CTGvmlTextShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlTextShape {
	#[serde(rename = "txBody")]
	pub tx_body: CTTextBody,
	#[serde(rename = "useSpRect")]
	pub use_sp_rect: Option<CTGvmlUseShapeRectangle>,
	#[serde(rename = "xfrm")]
	pub xfrm: Option<CTTransform2D>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGvmlShapeNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlShapeNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvSpPr")]
	pub c_nv_sp_pr: CTNonVisualDrawingShapeProps,
}


// CTGvmlShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlShape {
	#[serde(rename = "nvSpPr")]
	pub nv_sp_pr: CTGvmlShapeNonVisual,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "txSp")]
	pub tx_sp: Option<CTGvmlTextShape>,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGvmlConnectorNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlConnectorNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvCxnSpPr")]
	pub c_nv_cxn_sp_pr: CTNonVisualConnectorProperties,
}


// CTGvmlConnector ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlConnector {
	#[serde(rename = "nvCxnSpPr")]
	pub nv_cxn_sp_pr: CTGvmlConnectorNonVisual,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGvmlPictureNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlPictureNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvPicPr")]
	pub c_nv_pic_pr: CTNonVisualPictureProperties,
}


// CTGvmlPicture ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlPicture {
	#[serde(rename = "nvPicPr")]
	pub nv_pic_pr: CTGvmlPictureNonVisual,
	#[serde(rename = "blipFill")]
	pub blip_fill: CTBlipFillProperties,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGvmlGraphicFrameNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlGraphicFrameNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGraphicFramePr")]
	pub c_nv_graphic_frame_pr: CTNonVisualGraphicFrameProperties,
}


// CTGvmlGraphicalObjectFrame ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlGraphicalObjectFrame {
	#[serde(rename = "nvGraphicFramePr")]
	pub nv_graphic_frame_pr: CTGvmlGraphicFrameNonVisual,
	#[serde(rename = "graphic")]
	pub graphic: CTGraphicalObject,
	#[serde(rename = "xfrm")]
	pub xfrm: CTTransform2D,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGvmlGroupShapeNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlGroupShapeNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGrpSpPr")]
	pub c_nv_grp_sp_pr: CTNonVisualGroupDrawingShapeProps,
}


// CTGvmlGroupShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGvmlGroupShape {
	#[serde(rename = "nvGrpSpPr")]
	pub nv_grp_sp_pr: CTGvmlGroupShapeNonVisual,
	#[serde(rename = "grpSpPr")]
	pub grp_sp_pr: CTGroupShapeProperties,
	#[serde(rename = "txSp")]
	pub tx_sp: Vec<CTGvmlTextShape>,
	#[serde(rename = "sp")]
	pub sp: Vec<CTGvmlShape>,
	#[serde(rename = "cxnSp")]
	pub cxn_sp: Vec<CTGvmlConnector>,
	#[serde(rename = "pic")]
	pub pic: Vec<CTGvmlPicture>,
	#[serde(rename = "graphicFrame")]
	pub graphic_frame: Vec<CTGvmlGraphicalObjectFrame>,
	#[serde(rename = "grpSp")]
	pub grp_sp: Vec<CTGvmlGroupShape>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// STPresetCameraType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetCameraType {
	#[serde(rename = "ST_PresetCameraType")]
	pub st_preset_camera_type: String,
}


// STFOVAngle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFOVAngle {
	#[serde(rename = "ST_FOVAngle")]
	pub st_fov_angle: i32,
}


// CTCamera ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCamera {
	#[serde(rename = "prst")]
	pub prst: String,
	#[serde(rename = "fov")]
	pub fov: Option<i32>,
	#[serde(rename = "zoom")]
	pub zoom: Option<STPositivePercentage>,
	#[serde(rename = "rot")]
	pub rot: Option<CTSphereCoords>,
}


// STLightRigDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLightRigDirection {
	#[serde(rename = "ST_LightRigDirection")]
	pub st_light_rig_direction: String,
}


// STLightRigType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLightRigType {
	#[serde(rename = "ST_LightRigType")]
	pub st_light_rig_type: String,
}


// CTLightRig ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLightRig {
	#[serde(rename = "rig")]
	pub rig: String,
	#[serde(rename = "dir")]
	pub dir: String,
	#[serde(rename = "rot")]
	pub rot: Option<CTSphereCoords>,
}


// CTScene3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScene3D {
	#[serde(rename = "camera")]
	pub camera: CTCamera,
	#[serde(rename = "lightRig")]
	pub light_rig: CTLightRig,
	#[serde(rename = "backdrop")]
	pub backdrop: Option<CTBackdrop>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTBackdrop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackdrop {
	#[serde(rename = "anchor")]
	pub anchor: CTPoint3D,
	#[serde(rename = "norm")]
	pub norm: CTVector3D,
	#[serde(rename = "up")]
	pub up: CTVector3D,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// STBevelPresetType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBevelPresetType {
	#[serde(rename = "ST_BevelPresetType")]
	pub st_bevel_preset_type: String,
}


// CTBevel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBevel {
	#[serde(rename = "w")]
	pub w: Option<i64>,
	#[serde(rename = "h")]
	pub h: Option<i64>,
	#[serde(rename = "prst")]
	pub prst: Option<String>,
}


// STPresetMaterialType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetMaterialType {
	#[serde(rename = "ST_PresetMaterialType")]
	pub st_preset_material_type: String,
}


// CTShape3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShape3D {
	#[serde(rename = "z")]
	pub z: Option<STCoordinate>,
	#[serde(rename = "extrusionH")]
	pub extrusion_h: Option<i64>,
	#[serde(rename = "contourW")]
	pub contour_w: Option<i64>,
	#[serde(rename = "prstMaterial")]
	pub prst_material: Option<String>,
	#[serde(rename = "bevelT")]
	pub bevel_t: Option<CTBevel>,
	#[serde(rename = "bevelB")]
	pub bevel_b: Option<CTBevel>,
	#[serde(rename = "extrusionClr")]
	pub extrusion_clr: Option<CTColor>,
	#[serde(rename = "contourClr")]
	pub contour_clr: Option<CTColor>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTFlatText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFlatText {
	#[serde(rename = "z")]
	pub z: Option<STCoordinate>,
}


// EGText3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGText3D {
	#[serde(rename = "sp3d")]
	pub sp3d: CTShape3D,
	#[serde(rename = "flatTx")]
	pub flat_tx: CTFlatText,
}


// CTAlphaBiLevelEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaBiLevelEffect {
	#[serde(rename = "thresh")]
	pub thresh: STPositiveFixedPercentage,
}


// CTAlphaCeilingEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaCeilingEffect {
}


// CTAlphaFloorEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaFloorEffect {
}


// CTAlphaInverseEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaInverseEffect {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTAlphaModulateFixedEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaModulateFixedEffect {
	#[serde(rename = "amt")]
	pub amt: Option<STPositivePercentage>,
}


// CTAlphaOutsetEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaOutsetEffect {
	#[serde(rename = "rad")]
	pub rad: Option<STCoordinate>,
}


// CTAlphaReplaceEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaReplaceEffect {
	#[serde(rename = "a")]
	pub a: STPositiveFixedPercentage,
}


// CTBiLevelEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBiLevelEffect {
	#[serde(rename = "thresh")]
	pub thresh: STPositiveFixedPercentage,
}


// CTBlurEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBlurEffect {
	#[serde(rename = "rad")]
	pub rad: Option<i64>,
	#[serde(rename = "grow")]
	pub grow: Option<bool>,
}


// CTColorChangeEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorChangeEffect {
	#[serde(rename = "useA")]
	pub use_a: Option<bool>,
	#[serde(rename = "clrFrom")]
	pub clr_from: CTColor,
	#[serde(rename = "clrTo")]
	pub clr_to: CTColor,
}


// CTColorReplaceEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorReplaceEffect {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTDuotoneEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDuotoneEffect {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTGlowEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGlowEffect {
	#[serde(rename = "rad")]
	pub rad: Option<i64>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTGrayscaleEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGrayscaleEffect {
}


// CTHSLEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHSLEffect {
	#[serde(rename = "hue")]
	pub hue: Option<i32>,
	#[serde(rename = "sat")]
	pub sat: Option<STFixedPercentage>,
	#[serde(rename = "lum")]
	pub lum: Option<STFixedPercentage>,
}


// CTInnerShadowEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInnerShadowEffect {
	#[serde(rename = "blurRad")]
	pub blur_rad: Option<i64>,
	#[serde(rename = "dist")]
	pub dist: Option<i64>,
	#[serde(rename = "dir")]
	pub dir: Option<i32>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTLuminanceEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLuminanceEffect {
	#[serde(rename = "bright")]
	pub bright: Option<STFixedPercentage>,
	#[serde(rename = "contrast")]
	pub contrast: Option<STFixedPercentage>,
}


// CTOuterShadowEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOuterShadowEffect {
	#[serde(rename = "blurRad")]
	pub blur_rad: Option<i64>,
	#[serde(rename = "dist")]
	pub dist: Option<i64>,
	#[serde(rename = "dir")]
	pub dir: Option<i32>,
	#[serde(rename = "sx")]
	pub sx: Option<STPercentage>,
	#[serde(rename = "sy")]
	pub sy: Option<STPercentage>,
	#[serde(rename = "kx")]
	pub kx: Option<i32>,
	#[serde(rename = "ky")]
	pub ky: Option<i32>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
	#[serde(rename = "rotWithShape")]
	pub rot_with_shape: Option<bool>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// STPresetShadowVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetShadowVal {
	#[serde(rename = "ST_PresetShadowVal")]
	pub st_preset_shadow_val: String,
}


// CTPresetShadowEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresetShadowEffect {
	#[serde(rename = "prst")]
	pub prst: String,
	#[serde(rename = "dist")]
	pub dist: Option<i64>,
	#[serde(rename = "dir")]
	pub dir: Option<i32>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTReflectionEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTReflectionEffect {
	#[serde(rename = "blurRad")]
	pub blur_rad: Option<i64>,
	#[serde(rename = "stA")]
	pub st_a: Option<STPositiveFixedPercentage>,
	#[serde(rename = "stPos")]
	pub st_pos: Option<STPositiveFixedPercentage>,
	#[serde(rename = "endA")]
	pub end_a: Option<STPositiveFixedPercentage>,
	#[serde(rename = "endPos")]
	pub end_pos: Option<STPositiveFixedPercentage>,
	#[serde(rename = "dist")]
	pub dist: Option<i64>,
	#[serde(rename = "dir")]
	pub dir: Option<i32>,
	#[serde(rename = "fadeDir")]
	pub fade_dir: Option<i32>,
	#[serde(rename = "sx")]
	pub sx: Option<STPercentage>,
	#[serde(rename = "sy")]
	pub sy: Option<STPercentage>,
	#[serde(rename = "kx")]
	pub kx: Option<i32>,
	#[serde(rename = "ky")]
	pub ky: Option<i32>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
	#[serde(rename = "rotWithShape")]
	pub rot_with_shape: Option<bool>,
}


// CTRelativeOffsetEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRelativeOffsetEffect {
	#[serde(rename = "tx")]
	pub tx: Option<STPercentage>,
	#[serde(rename = "ty")]
	pub ty: Option<STPercentage>,
}


// CTSoftEdgesEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSoftEdgesEffect {
	#[serde(rename = "rad")]
	pub rad: i64,
}


// CTTintEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTintEffect {
	#[serde(rename = "hue")]
	pub hue: Option<i32>,
	#[serde(rename = "amt")]
	pub amt: Option<STFixedPercentage>,
}


// CTTransformEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTransformEffect {
	#[serde(rename = "sx")]
	pub sx: Option<STPercentage>,
	#[serde(rename = "sy")]
	pub sy: Option<STPercentage>,
	#[serde(rename = "kx")]
	pub kx: Option<i32>,
	#[serde(rename = "ky")]
	pub ky: Option<i32>,
	#[serde(rename = "tx")]
	pub tx: Option<STCoordinate>,
	#[serde(rename = "ty")]
	pub ty: Option<STCoordinate>,
}


// CTNoFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNoFillProperties {
}


// CTSolidColorFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSolidColorFillProperties {
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTLinearShadeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLinearShadeProperties {
	#[serde(rename = "ang")]
	pub ang: Option<i32>,
	#[serde(rename = "scaled")]
	pub scaled: Option<bool>,
}


// STPathShadeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPathShadeType {
	#[serde(rename = "ST_PathShadeType")]
	pub st_path_shade_type: String,
}


// CTPathShadeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPathShadeProperties {
	#[serde(rename = "path")]
	pub path: Option<String>,
	#[serde(rename = "fillToRect")]
	pub fill_to_rect: Option<CTRelativeRect>,
}


// EGShadeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGShadeProperties {
	#[serde(rename = "lin")]
	pub lin: CTLinearShadeProperties,
	#[serde(rename = "path")]
	pub path: CTPathShadeProperties,
}


// STTileFlipMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTileFlipMode {
	#[serde(rename = "ST_TileFlipMode")]
	pub st_tile_flip_mode: String,
}


// CTGradientStop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGradientStop {
	#[serde(rename = "pos")]
	pub pos: STPositiveFixedPercentage,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTGradientStopList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGradientStopList {
	#[serde(rename = "gs")]
	pub gs: Vec<CTGradientStop>,
}


// CTGradientFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGradientFillProperties {
	#[serde(rename = "flip")]
	pub flip: Option<String>,
	#[serde(rename = "rotWithShape")]
	pub rot_with_shape: Option<bool>,
	#[serde(rename = "EG_ShadeProperties")]
	pub eg_shade_properties: Vec<EGShadeProperties>,
	#[serde(rename = "gsLst")]
	pub gs_lst: Option<CTGradientStopList>,
	#[serde(rename = "tileRect")]
	pub tile_rect: Option<CTRelativeRect>,
}


// CTTileInfoProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTileInfoProperties {
	#[serde(rename = "tx")]
	pub tx: Option<STCoordinate>,
	#[serde(rename = "ty")]
	pub ty: Option<STCoordinate>,
	#[serde(rename = "sx")]
	pub sx: Option<STPercentage>,
	#[serde(rename = "sy")]
	pub sy: Option<STPercentage>,
	#[serde(rename = "flip")]
	pub flip: Option<String>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
}


// CTStretchInfoProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStretchInfoProperties {
	#[serde(rename = "fillRect")]
	pub fill_rect: Option<CTRelativeRect>,
}


// EGFillModeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGFillModeProperties {
	#[serde(rename = "tile")]
	pub tile: CTTileInfoProperties,
	#[serde(rename = "stretch")]
	pub stretch: CTStretchInfoProperties,
}


// STBlipCompression ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBlipCompression {
	#[serde(rename = "ST_BlipCompression")]
	pub st_blip_compression: String,
}


// CTBlip ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBlip {
	#[serde(rename = "AG_Blob")]
	pub ag_blob: Vec<AGBlob>,
	#[serde(rename = "cstate")]
	pub cstate: Option<String>,
	#[serde(rename = "alphaBiLevel")]
	pub alpha_bi_level: Vec<CTAlphaBiLevelEffect>,
	#[serde(rename = "alphaCeiling")]
	pub alpha_ceiling: Vec<CTAlphaCeilingEffect>,
	#[serde(rename = "alphaFloor")]
	pub alpha_floor: Vec<CTAlphaFloorEffect>,
	#[serde(rename = "alphaInv")]
	pub alpha_inv: Vec<CTAlphaInverseEffect>,
	#[serde(rename = "alphaMod")]
	pub alpha_mod: Vec<CTAlphaModulateEffect>,
	#[serde(rename = "alphaModFix")]
	pub alpha_mod_fix: Vec<CTAlphaModulateFixedEffect>,
	#[serde(rename = "alphaRepl")]
	pub alpha_repl: Vec<CTAlphaReplaceEffect>,
	#[serde(rename = "biLevel")]
	pub bi_level: Vec<CTBiLevelEffect>,
	#[serde(rename = "blur")]
	pub blur: Vec<CTBlurEffect>,
	#[serde(rename = "clrChange")]
	pub clr_change: Vec<CTColorChangeEffect>,
	#[serde(rename = "clrRepl")]
	pub clr_repl: Vec<CTColorReplaceEffect>,
	#[serde(rename = "duotone")]
	pub duotone: Vec<CTDuotoneEffect>,
	#[serde(rename = "fillOverlay")]
	pub fill_overlay: Vec<CTFillOverlayEffect>,
	#[serde(rename = "grayscl")]
	pub grayscl: Vec<CTGrayscaleEffect>,
	#[serde(rename = "hsl")]
	pub hsl: Vec<CTHSLEffect>,
	#[serde(rename = "lum")]
	pub lum: Vec<CTLuminanceEffect>,
	#[serde(rename = "tint")]
	pub tint: Vec<CTTintEffect>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTBlipFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBlipFillProperties {
	#[serde(rename = "dpi")]
	pub dpi: Option<u32>,
	#[serde(rename = "rotWithShape")]
	pub rot_with_shape: Option<bool>,
	#[serde(rename = "EG_FillModeProperties")]
	pub eg_fill_mode_properties: Vec<EGFillModeProperties>,
	#[serde(rename = "blip")]
	pub blip: Option<CTBlip>,
	#[serde(rename = "srcRect")]
	pub src_rect: Option<CTRelativeRect>,
}


// STPresetPatternVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetPatternVal {
	#[serde(rename = "ST_PresetPatternVal")]
	pub st_preset_pattern_val: String,
}


// CTPatternFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPatternFillProperties {
	#[serde(rename = "prst")]
	pub prst: Option<String>,
	#[serde(rename = "fgClr")]
	pub fg_clr: Option<CTColor>,
	#[serde(rename = "bgClr")]
	pub bg_clr: Option<CTColor>,
}


// CTGroupFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupFillProperties {
}


// EGFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGFillProperties {
	#[serde(rename = "noFill")]
	pub no_fill: CTNoFillProperties,
	#[serde(rename = "solidFill")]
	pub solid_fill: CTSolidColorFillProperties,
	#[serde(rename = "gradFill")]
	pub grad_fill: CTGradientFillProperties,
	#[serde(rename = "blipFill")]
	pub blip_fill: CTBlipFillProperties,
	#[serde(rename = "pattFill")]
	pub patt_fill: CTPatternFillProperties,
	#[serde(rename = "grpFill")]
	pub grp_fill: CTGroupFillProperties,
}


// CTFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFillProperties {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// CTFillEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFillEffect {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// STBlendMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBlendMode {
	#[serde(rename = "ST_BlendMode")]
	pub st_blend_mode: String,
}


// CTFillOverlayEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFillOverlayEffect {
	#[serde(rename = "blend")]
	pub blend: String,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// CTEffectReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectReference {
	#[serde(rename = "ref")]
	pub ref_attr: String,
}


// EGEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGEffect {
	#[serde(rename = "cont")]
	pub cont: CTEffectContainer,
	#[serde(rename = "effect")]
	pub effect: CTEffectReference,
	#[serde(rename = "alphaBiLevel")]
	pub alpha_bi_level: CTAlphaBiLevelEffect,
	#[serde(rename = "alphaCeiling")]
	pub alpha_ceiling: CTAlphaCeilingEffect,
	#[serde(rename = "alphaFloor")]
	pub alpha_floor: CTAlphaFloorEffect,
	#[serde(rename = "alphaInv")]
	pub alpha_inv: CTAlphaInverseEffect,
	#[serde(rename = "alphaMod")]
	pub alpha_mod: CTAlphaModulateEffect,
	#[serde(rename = "alphaModFix")]
	pub alpha_mod_fix: CTAlphaModulateFixedEffect,
	#[serde(rename = "alphaOutset")]
	pub alpha_outset: CTAlphaOutsetEffect,
	#[serde(rename = "alphaRepl")]
	pub alpha_repl: CTAlphaReplaceEffect,
	#[serde(rename = "biLevel")]
	pub bi_level: CTBiLevelEffect,
	#[serde(rename = "blend")]
	pub blend: CTBlendEffect,
	#[serde(rename = "blur")]
	pub blur: CTBlurEffect,
	#[serde(rename = "clrChange")]
	pub clr_change: CTColorChangeEffect,
	#[serde(rename = "clrRepl")]
	pub clr_repl: CTColorReplaceEffect,
	#[serde(rename = "duotone")]
	pub duotone: CTDuotoneEffect,
	#[serde(rename = "fill")]
	pub fill: CTFillEffect,
	#[serde(rename = "fillOverlay")]
	pub fill_overlay: CTFillOverlayEffect,
	#[serde(rename = "glow")]
	pub glow: CTGlowEffect,
	#[serde(rename = "grayscl")]
	pub grayscl: CTGrayscaleEffect,
	#[serde(rename = "hsl")]
	pub hsl: CTHSLEffect,
	#[serde(rename = "innerShdw")]
	pub inner_shdw: CTInnerShadowEffect,
	#[serde(rename = "lum")]
	pub lum: CTLuminanceEffect,
	#[serde(rename = "outerShdw")]
	pub outer_shdw: CTOuterShadowEffect,
	#[serde(rename = "prstShdw")]
	pub prst_shdw: CTPresetShadowEffect,
	#[serde(rename = "reflection")]
	pub reflection: CTReflectionEffect,
	#[serde(rename = "relOff")]
	pub rel_off: CTRelativeOffsetEffect,
	#[serde(rename = "softEdge")]
	pub soft_edge: CTSoftEdgesEffect,
	#[serde(rename = "tint")]
	pub tint: CTTintEffect,
	#[serde(rename = "xfrm")]
	pub xfrm: CTTransformEffect,
}


// STEffectContainerType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STEffectContainerType {
	#[serde(rename = "ST_EffectContainerType")]
	pub st_effect_container_type: String,
}


// CTEffectContainer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectContainer {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "EG_Effect")]
	pub eg_effect: Vec<EGEffect>,
}


// CTAlphaModulateEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAlphaModulateEffect {
	#[serde(rename = "cont")]
	pub cont: CTEffectContainer,
}


// CTBlendEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBlendEffect {
	#[serde(rename = "blend")]
	pub blend: String,
	#[serde(rename = "cont")]
	pub cont: CTEffectContainer,
}


// CTEffectList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectList {
	#[serde(rename = "blur")]
	pub blur: Option<CTBlurEffect>,
	#[serde(rename = "fillOverlay")]
	pub fill_overlay: Option<CTFillOverlayEffect>,
	#[serde(rename = "glow")]
	pub glow: Option<CTGlowEffect>,
	#[serde(rename = "innerShdw")]
	pub inner_shdw: Option<CTInnerShadowEffect>,
	#[serde(rename = "outerShdw")]
	pub outer_shdw: Option<CTOuterShadowEffect>,
	#[serde(rename = "prstShdw")]
	pub prst_shdw: Option<CTPresetShadowEffect>,
	#[serde(rename = "reflection")]
	pub reflection: Option<CTReflectionEffect>,
	#[serde(rename = "softEdge")]
	pub soft_edge: Option<CTSoftEdgesEffect>,
}


// EGEffectProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGEffectProperties {
	#[serde(rename = "effectLst")]
	pub effect_lst: CTEffectList,
	#[serde(rename = "effectDag")]
	pub effect_dag: CTEffectContainer,
}


// CTEffectProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectProperties {
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
}


// blip ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct blip {
	#[serde(rename = "blip")]
	pub blip: CTBlip,
}


// STShapeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShapeType {
	#[serde(rename = "ST_ShapeType")]
	pub st_shape_type: String,
}


// STTextShapeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextShapeType {
	#[serde(rename = "ST_TextShapeType")]
	pub st_text_shape_type: String,
}


// STGeomGuideName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGeomGuideName {
	#[serde(rename = "ST_GeomGuideName")]
	pub st_geom_guide_name: String,
}


// STGeomGuideFormula ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGeomGuideFormula {
	#[serde(rename = "ST_GeomGuideFormula")]
	pub st_geom_guide_formula: String,
}


// CTGeomGuide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGeomGuide {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "fmla")]
	pub fmla: String,
}


// CTGeomGuideList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGeomGuideList {
	#[serde(rename = "gd")]
	pub gd: Vec<CTGeomGuide>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAdjCoordinate {
	#[serde(rename = "ST_AdjCoordinate")]
	pub st_coordinate: STCoordinate,
	#[serde(rename = "ST_AdjCoordinate")]
	pub st_geom_guide_name: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAdjAngle {
	#[serde(rename = "ST_AdjAngle")]
	pub st_geom_guide_name: String,
	#[serde(rename = "ST_AdjAngle")]
	pub st_angle: i32,
}


// CTAdjPoint2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAdjPoint2D {
	#[serde(rename = "x")]
	pub x: STAdjCoordinate,
	#[serde(rename = "y")]
	pub y: STAdjCoordinate,
}


// CTGeomRect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGeomRect {
	#[serde(rename = "l")]
	pub l: STAdjCoordinate,
	#[serde(rename = "t")]
	pub t: STAdjCoordinate,
	#[serde(rename = "r")]
	pub r: STAdjCoordinate,
	#[serde(rename = "b")]
	pub b: STAdjCoordinate,
}


// CTXYAdjustHandle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXYAdjustHandle {
	#[serde(rename = "gdRefX")]
	pub gd_ref_x: Option<String>,
	#[serde(rename = "minX")]
	pub min_x: Option<STAdjCoordinate>,
	#[serde(rename = "maxX")]
	pub max_x: Option<STAdjCoordinate>,
	#[serde(rename = "gdRefY")]
	pub gd_ref_y: Option<String>,
	#[serde(rename = "minY")]
	pub min_y: Option<STAdjCoordinate>,
	#[serde(rename = "maxY")]
	pub max_y: Option<STAdjCoordinate>,
	#[serde(rename = "pos")]
	pub pos: CTAdjPoint2D,
}


// CTPolarAdjustHandle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPolarAdjustHandle {
	#[serde(rename = "gdRefR")]
	pub gd_ref_r: Option<String>,
	#[serde(rename = "minR")]
	pub min_r: Option<STAdjCoordinate>,
	#[serde(rename = "maxR")]
	pub max_r: Option<STAdjCoordinate>,
	#[serde(rename = "gdRefAng")]
	pub gd_ref_ang: Option<String>,
	#[serde(rename = "minAng")]
	pub min_ang: Option<STAdjAngle>,
	#[serde(rename = "maxAng")]
	pub max_ang: Option<STAdjAngle>,
	#[serde(rename = "pos")]
	pub pos: CTAdjPoint2D,
}


// CTConnectionSite ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnectionSite {
	#[serde(rename = "ang")]
	pub ang: STAdjAngle,
	#[serde(rename = "pos")]
	pub pos: CTAdjPoint2D,
}


// CTAdjustHandleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAdjustHandleList {
	#[serde(rename = "ahXY")]
	pub ah_xy: Vec<CTXYAdjustHandle>,
	#[serde(rename = "ahPolar")]
	pub ah_polar: Vec<CTPolarAdjustHandle>,
}


// CTConnectionSiteList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnectionSiteList {
	#[serde(rename = "cxn")]
	pub cxn: Vec<CTConnectionSite>,
}


// CTConnection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnection {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "idx")]
	pub idx: u32,
}


// CTPath2DMoveTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DMoveTo {
	#[serde(rename = "pt")]
	pub pt: CTAdjPoint2D,
}


// CTPath2DLineTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DLineTo {
	#[serde(rename = "pt")]
	pub pt: CTAdjPoint2D,
}


// CTPath2DArcTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DArcTo {
	#[serde(rename = "wR")]
	pub wr: STAdjCoordinate,
	#[serde(rename = "hR")]
	pub hr: STAdjCoordinate,
	#[serde(rename = "stAng")]
	pub st_ang: STAdjAngle,
	#[serde(rename = "swAng")]
	pub sw_ang: STAdjAngle,
}


// CTPath2DQuadBezierTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DQuadBezierTo {
	#[serde(rename = "pt")]
	pub pt: Vec<CTAdjPoint2D>,
}


// CTPath2DCubicBezierTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DCubicBezierTo {
	#[serde(rename = "pt")]
	pub pt: Vec<CTAdjPoint2D>,
}


// CTPath2DClose ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DClose {
}


// STPathFillMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPathFillMode {
	#[serde(rename = "ST_PathFillMode")]
	pub st_path_fill_mode: String,
}


// CTPath2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2D {
	#[serde(rename = "w")]
	pub w: Option<i64>,
	#[serde(rename = "h")]
	pub h: Option<i64>,
	#[serde(rename = "fill")]
	pub fill: Option<String>,
	#[serde(rename = "stroke")]
	pub stroke: Option<bool>,
	#[serde(rename = "extrusionOk")]
	pub extrusion_ok: Option<bool>,
	#[serde(rename = "close")]
	pub close: Vec<CTPath2DClose>,
	#[serde(rename = "moveTo")]
	pub move_to: Vec<CTPath2DMoveTo>,
	#[serde(rename = "lnTo")]
	pub ln_to: Vec<CTPath2DLineTo>,
	#[serde(rename = "arcTo")]
	pub arc_to: Vec<CTPath2DArcTo>,
	#[serde(rename = "quadBezTo")]
	pub quad_bez_to: Vec<CTPath2DQuadBezierTo>,
	#[serde(rename = "cubicBezTo")]
	pub cubic_bez_to: Vec<CTPath2DCubicBezierTo>,
}


// CTPath2DList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPath2DList {
	#[serde(rename = "path")]
	pub path: Vec<CTPath2D>,
}


// CTPresetGeometry2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresetGeometry2D {
	#[serde(rename = "prst")]
	pub prst: String,
	#[serde(rename = "avLst")]
	pub av_lst: Option<CTGeomGuideList>,
}


// CTPresetTextShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresetTextShape {
	#[serde(rename = "prst")]
	pub prst: String,
	#[serde(rename = "avLst")]
	pub av_lst: Option<CTGeomGuideList>,
}


// CTCustomGeometry2D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomGeometry2D {
	#[serde(rename = "avLst")]
	pub av_lst: Option<CTGeomGuideList>,
	#[serde(rename = "gdLst")]
	pub gd_lst: Option<CTGeomGuideList>,
	#[serde(rename = "ahLst")]
	pub ah_lst: Option<CTAdjustHandleList>,
	#[serde(rename = "cxnLst")]
	pub cxn_lst: Option<CTConnectionSiteList>,
	#[serde(rename = "rect")]
	pub rect: Option<CTGeomRect>,
	#[serde(rename = "pathLst")]
	pub path_lst: CTPath2DList,
}


// EGGeometry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGGeometry {
	#[serde(rename = "custGeom")]
	pub cust_geom: CTCustomGeometry2D,
	#[serde(rename = "prstGeom")]
	pub prst_geom: CTPresetGeometry2D,
}


// EGTextGeometry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextGeometry {
	#[serde(rename = "custGeom")]
	pub cust_geom: CTCustomGeometry2D,
	#[serde(rename = "prstTxWarp")]
	pub prst_tx_warp: CTPresetTextShape,
}


// STLineEndType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineEndType {
	#[serde(rename = "ST_LineEndType")]
	pub st_line_end_type: String,
}


// STLineEndWidth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineEndWidth {
	#[serde(rename = "ST_LineEndWidth")]
	pub st_line_end_width: String,
}


// STLineEndLength ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineEndLength {
	#[serde(rename = "ST_LineEndLength")]
	pub st_line_end_length: String,
}


// CTLineEndProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineEndProperties {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "w")]
	pub w: Option<String>,
	#[serde(rename = "len")]
	pub len: Option<String>,
}


// EGLineFillProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGLineFillProperties {
	#[serde(rename = "noFill")]
	pub no_fill: CTNoFillProperties,
	#[serde(rename = "solidFill")]
	pub solid_fill: CTSolidColorFillProperties,
	#[serde(rename = "gradFill")]
	pub grad_fill: CTGradientFillProperties,
	#[serde(rename = "pattFill")]
	pub patt_fill: CTPatternFillProperties,
}


// CTLineJoinBevel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineJoinBevel {
}


// CTLineJoinRound ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineJoinRound {
}


// CTLineJoinMiterProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineJoinMiterProperties {
	#[serde(rename = "lim")]
	pub lim: Option<STPositivePercentage>,
}


// EGLineJoinProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGLineJoinProperties {
	#[serde(rename = "round")]
	pub round: CTLineJoinRound,
	#[serde(rename = "bevel")]
	pub bevel: CTLineJoinBevel,
	#[serde(rename = "miter")]
	pub miter: CTLineJoinMiterProperties,
}


// STPresetLineDashVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPresetLineDashVal {
	#[serde(rename = "ST_PresetLineDashVal")]
	pub st_preset_line_dash_val: String,
}


// CTPresetLineDashProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresetLineDashProperties {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTDashStop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDashStop {
	#[serde(rename = "d")]
	pub d: STPositivePercentage,
	#[serde(rename = "sp")]
	pub sp: STPositivePercentage,
}


// CTDashStopList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDashStopList {
	#[serde(rename = "ds")]
	pub ds: Vec<CTDashStop>,
}


// EGLineDashProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGLineDashProperties {
	#[serde(rename = "prstDash")]
	pub prst_dash: CTPresetLineDashProperties,
	#[serde(rename = "custDash")]
	pub cust_dash: CTDashStopList,
}


// STLineCap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineCap {
	#[serde(rename = "ST_LineCap")]
	pub st_line_cap: String,
}


// STLineWidth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineWidth {
	#[serde(rename = "ST_LineWidth")]
	pub st_line_width: i32,
}


// STPenAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPenAlignment {
	#[serde(rename = "ST_PenAlignment")]
	pub st_pen_alignment: String,
}


// STCompoundLine ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCompoundLine {
	#[serde(rename = "ST_CompoundLine")]
	pub st_compound_line: String,
}


// CTLineProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineProperties {
	#[serde(rename = "w")]
	pub w: Option<i32>,
	#[serde(rename = "cap")]
	pub cap: Option<String>,
	#[serde(rename = "cmpd")]
	pub cmpd: Option<String>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
	#[serde(rename = "EG_LineFillProperties")]
	pub eg_line_fill_properties: Vec<EGLineFillProperties>,
	#[serde(rename = "EG_LineDashProperties")]
	pub eg_line_dash_properties: Vec<EGLineDashProperties>,
	#[serde(rename = "EG_LineJoinProperties")]
	pub eg_line_join_properties: Vec<EGLineJoinProperties>,
	#[serde(rename = "headEnd")]
	pub head_end: Option<CTLineEndProperties>,
	#[serde(rename = "tailEnd")]
	pub tail_end: Option<CTLineEndProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// STShapeID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShapeID {
	#[serde(rename = "ST_ShapeID")]
	pub st_shape_id: String,
}


// CTShapeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShapeProperties {
	#[serde(rename = "bwMode")]
	pub bw_mode: Option<String>,
	#[serde(rename = "EG_Geometry")]
	pub eg_geometry: Vec<EGGeometry>,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "xfrm")]
	pub xfrm: Option<CTTransform2D>,
	#[serde(rename = "ln")]
	pub ln: Option<CTLineProperties>,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "sp3d")]
	pub sp3d: Option<CTShape3D>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTGroupShapeProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupShapeProperties {
	#[serde(rename = "bwMode")]
	pub bw_mode: Option<String>,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "xfrm")]
	pub xfrm: Option<CTGroupTransform2D>,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTStyleMatrixReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleMatrixReference {
	#[serde(rename = "idx")]
	pub idx: u32,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTFontReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontReference {
	#[serde(rename = "idx")]
	pub idx: String,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
}


// CTShapeStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShapeStyle {
	#[serde(rename = "lnRef")]
	pub ln_ref: CTStyleMatrixReference,
	#[serde(rename = "fillRef")]
	pub fill_ref: CTStyleMatrixReference,
	#[serde(rename = "effectRef")]
	pub effect_ref: CTStyleMatrixReference,
	#[serde(rename = "fontRef")]
	pub font_ref: CTFontReference,
}


// CTDefaultShapeDefinition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDefaultShapeDefinition {
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "bodyPr")]
	pub body_pr: CTTextBodyProperties,
	#[serde(rename = "lstStyle")]
	pub lst_style: CTTextListStyle,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTObjectStyleDefaults ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObjectStyleDefaults {
	#[serde(rename = "spDef")]
	pub sp_def: Option<CTDefaultShapeDefinition>,
	#[serde(rename = "lnDef")]
	pub ln_def: Option<CTDefaultShapeDefinition>,
	#[serde(rename = "txDef")]
	pub tx_def: Option<CTDefaultShapeDefinition>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTEmptyElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmptyElement {
}


// CTColorMapping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorMapping {
	#[serde(rename = "bg1")]
	pub bg1: String,
	#[serde(rename = "tx1")]
	pub tx1: String,
	#[serde(rename = "bg2")]
	pub bg2: String,
	#[serde(rename = "tx2")]
	pub tx2: String,
	#[serde(rename = "accent1")]
	pub accent1: String,
	#[serde(rename = "accent2")]
	pub accent2: String,
	#[serde(rename = "accent3")]
	pub accent3: String,
	#[serde(rename = "accent4")]
	pub accent4: String,
	#[serde(rename = "accent5")]
	pub accent5: String,
	#[serde(rename = "accent6")]
	pub accent6: String,
	#[serde(rename = "hlink")]
	pub hlink: String,
	#[serde(rename = "folHlink")]
	pub fol_hlink: String,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTColorMappingOverride ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorMappingOverride {
	#[serde(rename = "masterClrMapping")]
	pub master_clr_mapping: Option<CTEmptyElement>,
	#[serde(rename = "overrideClrMapping")]
	pub override_clr_mapping: Option<CTColorMapping>,
}


// CTColorSchemeAndMapping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorSchemeAndMapping {
	#[serde(rename = "clrScheme")]
	pub clr_scheme: CTColorScheme,
	#[serde(rename = "clrMap")]
	pub clr_map: Option<CTColorMapping>,
}


// CTColorSchemeList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorSchemeList {
	#[serde(rename = "extraClrScheme")]
	pub extra_clr_scheme: Vec<CTColorSchemeAndMapping>,
}


// CTOfficeStyleSheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOfficeStyleSheet {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "themeElements")]
	pub theme_elements: CTBaseStyles,
	#[serde(rename = "objectDefaults")]
	pub object_defaults: Option<CTObjectStyleDefaults>,
	#[serde(rename = "extraClrSchemeLst")]
	pub extra_clr_scheme_lst: Option<CTColorSchemeList>,
	#[serde(rename = "custClrLst")]
	pub cust_clr_lst: Option<CTCustomColorList>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTBaseStylesOverride ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBaseStylesOverride {
	#[serde(rename = "clrScheme")]
	pub clr_scheme: Option<CTColorScheme>,
	#[serde(rename = "fontScheme")]
	pub font_scheme: Option<CTFontScheme>,
	#[serde(rename = "fmtScheme")]
	pub fmt_scheme: Option<CTStyleMatrix>,
}


// CTClipboardStyleSheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTClipboardStyleSheet {
	#[serde(rename = "themeElements")]
	pub theme_elements: CTBaseStyles,
	#[serde(rename = "clrMap")]
	pub clr_map: CTColorMapping,
}


// theme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct theme {
	#[serde(rename = "theme")]
	pub theme: CTOfficeStyleSheet,
}


// theme_override ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct theme_override {
	#[serde(rename = "themeOverride")]
	pub theme_override: CTBaseStylesOverride,
}


// theme_manager ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct theme_manager {
	#[serde(rename = "themeManager")]
	pub theme_manager: CTEmptyElement,
}


// CTTableCellProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableCellProperties {
	#[serde(rename = "marL")]
	pub mar_l: Option<STCoordinate32>,
	#[serde(rename = "marR")]
	pub mar_r: Option<STCoordinate32>,
	#[serde(rename = "marT")]
	pub mar_t: Option<STCoordinate32>,
	#[serde(rename = "marB")]
	pub mar_b: Option<STCoordinate32>,
	#[serde(rename = "vert")]
	pub vert: Option<String>,
	#[serde(rename = "anchor")]
	pub anchor: Option<String>,
	#[serde(rename = "anchorCtr")]
	pub anchor_ctr: Option<bool>,
	#[serde(rename = "horzOverflow")]
	pub horz_overflow: Option<String>,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "lnL")]
	pub ln_l: Option<CTLineProperties>,
	#[serde(rename = "lnR")]
	pub ln_r: Option<CTLineProperties>,
	#[serde(rename = "lnT")]
	pub ln_t: Option<CTLineProperties>,
	#[serde(rename = "lnB")]
	pub ln_b: Option<CTLineProperties>,
	#[serde(rename = "lnTlToBr")]
	pub ln_tl_to_br: Option<CTLineProperties>,
	#[serde(rename = "lnBlToTr")]
	pub ln_bl_to_tr: Option<CTLineProperties>,
	#[serde(rename = "cell3D")]
	pub cell3_d: Option<CTCell3D>,
	#[serde(rename = "headers")]
	pub headers: Option<CTHeaders>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTHeaders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeaders {
	#[serde(rename = "header")]
	pub header: Vec<String>,
}


// CTTableCol ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableCol {
	#[serde(rename = "w")]
	pub w: STCoordinate,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableGrid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableGrid {
	#[serde(rename = "gridCol")]
	pub grid_col: Vec<CTTableCol>,
}


// CTTableCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableCell {
	#[serde(rename = "rowSpan")]
	pub row_span: Option<i32>,
	#[serde(rename = "gridSpan")]
	pub grid_span: Option<i32>,
	#[serde(rename = "hMerge")]
	pub h_merge: Option<bool>,
	#[serde(rename = "vMerge")]
	pub v_merge: Option<bool>,
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "txBody")]
	pub tx_body: Option<CTTextBody>,
	#[serde(rename = "tcPr")]
	pub tc_pr: Option<CTTableCellProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableRow {
	#[serde(rename = "h")]
	pub h: STCoordinate,
	#[serde(rename = "tc")]
	pub tc: Vec<CTTableCell>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableProperties {
	#[serde(rename = "rtl")]
	pub rtl: Option<bool>,
	#[serde(rename = "firstRow")]
	pub first_row: Option<bool>,
	#[serde(rename = "firstCol")]
	pub first_col: Option<bool>,
	#[serde(rename = "lastRow")]
	pub last_row: Option<bool>,
	#[serde(rename = "lastCol")]
	pub last_col: Option<bool>,
	#[serde(rename = "bandRow")]
	pub band_row: Option<bool>,
	#[serde(rename = "bandCol")]
	pub band_col: Option<bool>,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "tableStyle")]
	pub table_style: Option<CTTableStyle>,
	#[serde(rename = "tableStyleId")]
	pub table_style_id: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTable {
	#[serde(rename = "tblPr")]
	pub tbl_pr: Option<CTTableProperties>,
	#[serde(rename = "tblGrid")]
	pub tbl_grid: CTTableGrid,
	#[serde(rename = "tr")]
	pub tr: Vec<CTTableRow>,
}


// tbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct tbl {
	#[serde(rename = "tbl")]
	pub tbl: CTTable,
}


// CTCell3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCell3D {
	#[serde(rename = "prstMaterial")]
	pub prst_material: Option<String>,
	#[serde(rename = "bevel")]
	pub bevel: CTBevel,
	#[serde(rename = "lightRig")]
	pub light_rig: Option<CTLightRig>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// EGThemeableFillStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGThemeableFillStyle {
	#[serde(rename = "fill")]
	pub fill: CTFillProperties,
	#[serde(rename = "fillRef")]
	pub fill_ref: CTStyleMatrixReference,
}


// CTThemeableLineStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTThemeableLineStyle {
	#[serde(rename = "ln")]
	pub ln: Option<CTLineProperties>,
	#[serde(rename = "lnRef")]
	pub ln_ref: Option<CTStyleMatrixReference>,
}


// EGThemeableEffectStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGThemeableEffectStyle {
	#[serde(rename = "effect")]
	pub effect: CTEffectProperties,
	#[serde(rename = "effectRef")]
	pub effect_ref: CTStyleMatrixReference,
}


// EGThemeableFontStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGThemeableFontStyles {
	#[serde(rename = "font")]
	pub font: CTFontCollection,
	#[serde(rename = "fontRef")]
	pub font_ref: CTFontReference,
}


// STOnOffStyleType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOnOffStyleType {
	#[serde(rename = "ST_OnOffStyleType")]
	pub st_on_off_style_type: String,
}


// CTTableStyleTextStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyleTextStyle {
	#[serde(rename = "b")]
	pub b: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<String>,
	#[serde(rename = "EG_ThemeableFontStyles")]
	pub eg_themeable_font_styles: Vec<EGThemeableFontStyles>,
	#[serde(rename = "EG_ColorChoice")]
	pub eg_color_choice: Vec<EGColorChoice>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableCellBorderStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableCellBorderStyle {
	#[serde(rename = "left")]
	pub left: Option<CTThemeableLineStyle>,
	#[serde(rename = "right")]
	pub right: Option<CTThemeableLineStyle>,
	#[serde(rename = "top")]
	pub top: Option<CTThemeableLineStyle>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTThemeableLineStyle>,
	#[serde(rename = "insideH")]
	pub inside_h: Option<CTThemeableLineStyle>,
	#[serde(rename = "insideV")]
	pub inside_v: Option<CTThemeableLineStyle>,
	#[serde(rename = "tl2br")]
	pub tl2br: Option<CTThemeableLineStyle>,
	#[serde(rename = "tr2bl")]
	pub tr2bl: Option<CTThemeableLineStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableBackgroundStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableBackgroundStyle {
	#[serde(rename = "EG_ThemeableFillStyle")]
	pub eg_themeable_fill_style: Vec<EGThemeableFillStyle>,
	#[serde(rename = "EG_ThemeableEffectStyle")]
	pub eg_themeable_effect_style: Vec<EGThemeableEffectStyle>,
}


// CTTableStyleCellStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyleCellStyle {
	#[serde(rename = "EG_ThemeableFillStyle")]
	pub eg_themeable_fill_style: Vec<EGThemeableFillStyle>,
	#[serde(rename = "tcBdr")]
	pub tc_bdr: Option<CTTableCellBorderStyle>,
	#[serde(rename = "cell3D")]
	pub cell3_d: Option<CTCell3D>,
}


// CTTablePartStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTablePartStyle {
	#[serde(rename = "tcTxStyle")]
	pub tc_tx_style: Option<CTTableStyleTextStyle>,
	#[serde(rename = "tcStyle")]
	pub tc_style: Option<CTTableStyleCellStyle>,
}


// CTTableStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyle {
	#[serde(rename = "styleId")]
	pub style_id: String,
	#[serde(rename = "styleName")]
	pub style_name: String,
	#[serde(rename = "tblBg")]
	pub tbl_bg: Option<CTTableBackgroundStyle>,
	#[serde(rename = "wholeTbl")]
	pub whole_tbl: Option<CTTablePartStyle>,
	#[serde(rename = "band1H")]
	pub band1_h: Option<CTTablePartStyle>,
	#[serde(rename = "band2H")]
	pub band2_h: Option<CTTablePartStyle>,
	#[serde(rename = "band1V")]
	pub band1_v: Option<CTTablePartStyle>,
	#[serde(rename = "band2V")]
	pub band2_v: Option<CTTablePartStyle>,
	#[serde(rename = "lastCol")]
	pub last_col: Option<CTTablePartStyle>,
	#[serde(rename = "firstCol")]
	pub first_col: Option<CTTablePartStyle>,
	#[serde(rename = "lastRow")]
	pub last_row: Option<CTTablePartStyle>,
	#[serde(rename = "seCell")]
	pub se_cell: Option<CTTablePartStyle>,
	#[serde(rename = "swCell")]
	pub sw_cell: Option<CTTablePartStyle>,
	#[serde(rename = "firstRow")]
	pub first_row: Option<CTTablePartStyle>,
	#[serde(rename = "neCell")]
	pub ne_cell: Option<CTTablePartStyle>,
	#[serde(rename = "nwCell")]
	pub nw_cell: Option<CTTablePartStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTableStyleList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyleList {
	#[serde(rename = "def")]
	pub def: String,
	#[serde(rename = "tblStyle")]
	pub tbl_style: Vec<CTTableStyle>,
}


// tbl_style_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct tbl_style_lst {
	#[serde(rename = "tblStyleLst")]
	pub tbl_style_lst: CTTableStyleList,
}


// CTTextParagraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextParagraph {
	#[serde(rename = "EG_TextRun")]
	pub eg_text_run: Vec<EGTextRun>,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "endParaRPr")]
	pub end_para_r_pr: Option<CTTextCharacterProperties>,
}


// STTextAnchoringType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAnchoringType {
	#[serde(rename = "ST_TextAnchoringType")]
	pub st_text_anchoring_type: String,
}


// STTextVertOverflowType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextVertOverflowType {
	#[serde(rename = "ST_TextVertOverflowType")]
	pub st_text_vert_overflow_type: String,
}


// STTextHorzOverflowType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextHorzOverflowType {
	#[serde(rename = "ST_TextHorzOverflowType")]
	pub st_text_horz_overflow_type: String,
}


// STTextVerticalType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextVerticalType {
	#[serde(rename = "ST_TextVerticalType")]
	pub st_text_vertical_type: String,
}


// STTextWrappingType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextWrappingType {
	#[serde(rename = "ST_TextWrappingType")]
	pub st_text_wrapping_type: String,
}


// STTextColumnCount ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextColumnCount {
	#[serde(rename = "ST_TextColumnCount")]
	pub st_text_column_count: i32,
}


// CTTextListStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextListStyle {
	#[serde(rename = "defPPr")]
	pub def_p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl1pPr")]
	pub lvl1p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl2pPr")]
	pub lvl2p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl3pPr")]
	pub lvl3p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl4pPr")]
	pub lvl4p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl5pPr")]
	pub lvl5p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl6pPr")]
	pub lvl6p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl7pPr")]
	pub lvl7p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl8pPr")]
	pub lvl8p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "lvl9pPr")]
	pub lvl9p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextFontScalePercentOrPercentString {
	#[serde(rename = "ST_TextFontScalePercentOrPercentString")]
	pub st_percentage: String,
}


// CTTextNormalAutofit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextNormalAutofit {
	#[serde(rename = "fontScale")]
	pub font_scale: Option<STTextFontScalePercentOrPercentString>,
	#[serde(rename = "lnSpcReduction")]
	pub ln_spc_reduction: Option<STTextSpacingPercentOrPercentString>,
}


// CTTextShapeAutofit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextShapeAutofit {
}


// CTTextNoAutofit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextNoAutofit {
}


// EGTextAutofit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextAutofit {
	#[serde(rename = "noAutofit")]
	pub no_autofit: CTTextNoAutofit,
	#[serde(rename = "normAutofit")]
	pub norm_autofit: CTTextNormalAutofit,
	#[serde(rename = "spAutoFit")]
	pub sp_auto_fit: CTTextShapeAutofit,
}


// CTTextBodyProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBodyProperties {
	#[serde(rename = "rot")]
	pub rot: Option<i32>,
	#[serde(rename = "spcFirstLastPara")]
	pub spc_first_last_para: Option<bool>,
	#[serde(rename = "vertOverflow")]
	pub vert_overflow: Option<String>,
	#[serde(rename = "horzOverflow")]
	pub horz_overflow: Option<String>,
	#[serde(rename = "vert")]
	pub vert: Option<String>,
	#[serde(rename = "wrap")]
	pub wrap: Option<String>,
	#[serde(rename = "lIns")]
	pub l_ins: Option<STCoordinate32>,
	#[serde(rename = "tIns")]
	pub t_ins: Option<STCoordinate32>,
	#[serde(rename = "rIns")]
	pub r_ins: Option<STCoordinate32>,
	#[serde(rename = "bIns")]
	pub b_ins: Option<STCoordinate32>,
	#[serde(rename = "numCol")]
	pub num_col: Option<i32>,
	#[serde(rename = "spcCol")]
	pub spc_col: Option<i32>,
	#[serde(rename = "rtlCol")]
	pub rtl_col: Option<bool>,
	#[serde(rename = "fromWordArt")]
	pub from_word_art: Option<bool>,
	#[serde(rename = "anchor")]
	pub anchor: Option<String>,
	#[serde(rename = "anchorCtr")]
	pub anchor_ctr: Option<bool>,
	#[serde(rename = "forceAA")]
	pub force_aa: Option<bool>,
	#[serde(rename = "upright")]
	pub upright: Option<bool>,
	#[serde(rename = "compatLnSpc")]
	pub compat_ln_spc: Option<bool>,
	#[serde(rename = "EG_TextAutofit")]
	pub eg_text_autofit: Vec<EGTextAutofit>,
	#[serde(rename = "EG_Text3D")]
	pub eg_text3_d: Vec<EGText3D>,
	#[serde(rename = "prstTxWarp")]
	pub prst_tx_warp: Option<CTPresetTextShape>,
	#[serde(rename = "scene3d")]
	pub scene3d: Option<CTScene3D>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTextBody ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBody {
	#[serde(rename = "bodyPr")]
	pub body_pr: CTTextBodyProperties,
	#[serde(rename = "lstStyle")]
	pub lst_style: Option<CTTextListStyle>,
	#[serde(rename = "p")]
	pub p: Vec<CTTextParagraph>,
}


// STTextBulletStartAtNum ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextBulletStartAtNum {
	#[serde(rename = "ST_TextBulletStartAtNum")]
	pub st_text_bullet_start_at_num: i32,
}


// STTextAutonumberScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAutonumberScheme {
	#[serde(rename = "ST_TextAutonumberScheme")]
	pub st_text_autonumber_scheme: String,
}


// CTTextBulletColorFollowText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBulletColorFollowText {
}


// EGTextBulletColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextBulletColor {
	#[serde(rename = "buClrTx")]
	pub bu_clr_tx: CTTextBulletColorFollowText,
	#[serde(rename = "buClr")]
	pub bu_clr: CTColor,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextBulletSize {
	#[serde(rename = "ST_TextBulletSize")]
	pub st_text_bullet_size_percent: STTextBulletSizePercent,
}


// STTextBulletSizePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextBulletSizePercent {
	#[serde(rename = "ST_TextBulletSizePercent")]
	pub st_text_bullet_size_percent: String,
}


// CTTextBulletSizeFollowText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBulletSizeFollowText {
}


// CTTextBulletSizePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBulletSizePercent {
	#[serde(rename = "val")]
	pub val: String,
}


// CTTextBulletSizePoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBulletSizePoint {
	#[serde(rename = "val")]
	pub val: i32,
}


// EGTextBulletSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextBulletSize {
	#[serde(rename = "buSzTx")]
	pub bu_sz_tx: CTTextBulletSizeFollowText,
	#[serde(rename = "buSzPct")]
	pub bu_sz_pct: CTTextBulletSizePercent,
	#[serde(rename = "buSzPts")]
	pub bu_sz_pts: CTTextBulletSizePoint,
}


// CTTextBulletTypefaceFollowText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBulletTypefaceFollowText {
}


// EGTextBulletTypeface ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextBulletTypeface {
	#[serde(rename = "buFontTx")]
	pub bu_font_tx: CTTextBulletTypefaceFollowText,
	#[serde(rename = "buFont")]
	pub bu_font: CTTextFont,
}


// CTTextAutonumberBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextAutonumberBullet {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "startAt")]
	pub start_at: Option<i32>,
}


// CTTextCharBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextCharBullet {
	#[serde(rename = "char")]
	pub char: String,
}


// CTTextBlipBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextBlipBullet {
	#[serde(rename = "blip")]
	pub blip: CTBlip,
}


// CTTextNoBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextNoBullet {
}


// EGTextBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextBullet {
	#[serde(rename = "buNone")]
	pub bu_none: CTTextNoBullet,
	#[serde(rename = "buAutoNum")]
	pub bu_auto_num: CTTextAutonumberBullet,
	#[serde(rename = "buChar")]
	pub bu_char: CTTextCharBullet,
	#[serde(rename = "buBlip")]
	pub bu_blip: CTTextBlipBullet,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextPoint {
	#[serde(rename = "ST_TextPoint")]
	pub st_text_point_unqualified: STTextPointUnqualified,
	#[serde(rename = "ST_TextPoint")]
	pub st_universal_measure: String,
}


// STTextPointUnqualified ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextPointUnqualified {
	#[serde(rename = "ST_TextPointUnqualified")]
	pub st_text_point_unqualified: i32,
}


// STTextNonNegativePoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextNonNegativePoint {
	#[serde(rename = "ST_TextNonNegativePoint")]
	pub st_text_non_negative_point: i32,
}


// STTextFontSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextFontSize {
	#[serde(rename = "ST_TextFontSize")]
	pub st_text_font_size: i32,
}


// STTextTypeface ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextTypeface {
	#[serde(rename = "ST_TextTypeface")]
	pub st_text_typeface: String,
}


// STPitchFamily ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPitchFamily {
	#[serde(rename = "ST_PitchFamily")]
	pub st_pitch_family: u8,
}


// CTTextFont ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextFont {
	#[serde(rename = "typeface")]
	pub typeface: String,
	#[serde(rename = "panose")]
	pub panose: Option<String>,
	#[serde(rename = "pitchFamily")]
	pub pitch_family: Option<u8>,
	#[serde(rename = "charset")]
	pub charset: Option<u8>,
}


// STTextUnderlineType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextUnderlineType {
	#[serde(rename = "ST_TextUnderlineType")]
	pub st_text_underline_type: String,
}


// CTTextUnderlineLineFollowText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextUnderlineLineFollowText {
}


// CTTextUnderlineFillFollowText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextUnderlineFillFollowText {
}


// CTTextUnderlineFillGroupWrapper ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextUnderlineFillGroupWrapper {
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
}


// EGTextUnderlineLine ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextUnderlineLine {
	#[serde(rename = "uLnTx")]
	pub u_ln_tx: CTTextUnderlineLineFollowText,
	#[serde(rename = "uLn")]
	pub u_ln: CTLineProperties,
}


// EGTextUnderlineFill ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextUnderlineFill {
	#[serde(rename = "uFillTx")]
	pub u_fill_tx: CTTextUnderlineFillFollowText,
	#[serde(rename = "uFill")]
	pub u_fill: CTTextUnderlineFillGroupWrapper,
}


// STTextStrikeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextStrikeType {
	#[serde(rename = "ST_TextStrikeType")]
	pub st_text_strike_type: String,
}


// STTextCapsType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextCapsType {
	#[serde(rename = "ST_TextCapsType")]
	pub st_text_caps_type: String,
}


// CTTextCharacterProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextCharacterProperties {
	#[serde(rename = "kumimoji")]
	pub kumimoji: Option<bool>,
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "altLang")]
	pub alt_lang: Option<String>,
	#[serde(rename = "sz")]
	pub sz: Option<i32>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "u")]
	pub u: Option<String>,
	#[serde(rename = "strike")]
	pub strike: Option<String>,
	#[serde(rename = "kern")]
	pub kern: Option<i32>,
	#[serde(rename = "cap")]
	pub cap: Option<String>,
	#[serde(rename = "spc")]
	pub spc: Option<STTextPoint>,
	#[serde(rename = "normalizeH")]
	pub normalize_h: Option<bool>,
	#[serde(rename = "baseline")]
	pub baseline: Option<STPercentage>,
	#[serde(rename = "noProof")]
	pub no_proof: Option<bool>,
	#[serde(rename = "dirty")]
	pub dirty: Option<bool>,
	#[serde(rename = "err")]
	pub err: Option<bool>,
	#[serde(rename = "smtClean")]
	pub smt_clean: Option<bool>,
	#[serde(rename = "smtId")]
	pub smt_id: Option<u32>,
	#[serde(rename = "bmk")]
	pub bmk: Option<String>,
	#[serde(rename = "EG_FillProperties")]
	pub eg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "EG_EffectProperties")]
	pub eg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "EG_TextUnderlineLine")]
	pub eg_text_underline_line: Vec<EGTextUnderlineLine>,
	#[serde(rename = "EG_TextUnderlineFill")]
	pub eg_text_underline_fill: Vec<EGTextUnderlineFill>,
	#[serde(rename = "ln")]
	pub ln: Option<CTLineProperties>,
	#[serde(rename = "highlight")]
	pub highlight: Option<CTColor>,
	#[serde(rename = "latin")]
	pub latin: Option<CTTextFont>,
	#[serde(rename = "ea")]
	pub ea: Option<CTTextFont>,
	#[serde(rename = "cs")]
	pub cs: Option<CTTextFont>,
	#[serde(rename = "sym")]
	pub sym: Option<CTTextFont>,
	#[serde(rename = "hlinkClick")]
	pub hlink_click: Option<CTHyperlink>,
	#[serde(rename = "hlinkMouseOver")]
	pub hlink_mouse_over: Option<CTHyperlink>,
	#[serde(rename = "rtl")]
	pub rtl: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTBoolean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBoolean {
	#[serde(rename = "val")]
	pub val: Option<STOnOff>,
}


// STTextSpacingPoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextSpacingPoint {
	#[serde(rename = "ST_TextSpacingPoint")]
	pub st_text_spacing_point: i32,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextSpacingPercentOrPercentString {
	#[serde(rename = "ST_TextSpacingPercentOrPercentString")]
	pub st_percentage: String,
}


// CTTextSpacingPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextSpacingPercent {
	#[serde(rename = "val")]
	pub val: STTextSpacingPercentOrPercentString,
}


// CTTextSpacingPoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextSpacingPoint {
	#[serde(rename = "val")]
	pub val: i32,
}


// STTextMargin ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextMargin {
	#[serde(rename = "ST_TextMargin")]
	pub st_text_margin: i32,
}


// STTextIndent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextIndent {
	#[serde(rename = "ST_TextIndent")]
	pub st_text_indent: i32,
}


// STTextTabAlignType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextTabAlignType {
	#[serde(rename = "ST_TextTabAlignType")]
	pub st_text_tab_align_type: String,
}


// CTTextTabStop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextTabStop {
	#[serde(rename = "pos")]
	pub pos: Option<STCoordinate32>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
}


// CTTextTabStopList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextTabStopList {
	#[serde(rename = "tab")]
	pub tab: Vec<CTTextTabStop>,
}


// CTTextLineBreak ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextLineBreak {
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTTextCharacterProperties>,
}


// CTTextSpacing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextSpacing {
	#[serde(rename = "spcPct")]
	pub spc_pct: Option<CTTextSpacingPercent>,
	#[serde(rename = "spcPts")]
	pub spc_pts: Option<CTTextSpacingPoint>,
}


// STTextAlignType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAlignType {
	#[serde(rename = "ST_TextAlignType")]
	pub st_text_align_type: String,
}


// STTextFontAlignType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextFontAlignType {
	#[serde(rename = "ST_TextFontAlignType")]
	pub st_text_font_align_type: String,
}


// STTextIndentLevelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextIndentLevelType {
	#[serde(rename = "ST_TextIndentLevelType")]
	pub st_text_indent_level_type: i32,
}


// CTTextParagraphProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextParagraphProperties {
	#[serde(rename = "marL")]
	pub mar_l: Option<i32>,
	#[serde(rename = "marR")]
	pub mar_r: Option<i32>,
	#[serde(rename = "lvl")]
	pub lvl: Option<i32>,
	#[serde(rename = "indent")]
	pub indent: Option<i32>,
	#[serde(rename = "algn")]
	pub algn: Option<String>,
	#[serde(rename = "defTabSz")]
	pub def_tab_sz: Option<STCoordinate32>,
	#[serde(rename = "rtl")]
	pub rtl: Option<bool>,
	#[serde(rename = "eaLnBrk")]
	pub ea_ln_brk: Option<bool>,
	#[serde(rename = "fontAlgn")]
	pub font_algn: Option<String>,
	#[serde(rename = "latinLnBrk")]
	pub latin_ln_brk: Option<bool>,
	#[serde(rename = "hangingPunct")]
	pub hanging_punct: Option<bool>,
	#[serde(rename = "EG_TextBulletColor")]
	pub eg_text_bullet_color: Vec<EGTextBulletColor>,
	#[serde(rename = "EG_TextBulletSize")]
	pub eg_text_bullet_size: Vec<EGTextBulletSize>,
	#[serde(rename = "EG_TextBulletTypeface")]
	pub eg_text_bullet_typeface: Vec<EGTextBulletTypeface>,
	#[serde(rename = "EG_TextBullet")]
	pub eg_text_bullet: Vec<EGTextBullet>,
	#[serde(rename = "lnSpc")]
	pub ln_spc: Option<CTTextSpacing>,
	#[serde(rename = "spcBef")]
	pub spc_bef: Option<CTTextSpacing>,
	#[serde(rename = "spcAft")]
	pub spc_aft: Option<CTTextSpacing>,
	#[serde(rename = "tabLst")]
	pub tab_lst: Option<CTTextTabStopList>,
	#[serde(rename = "defRPr")]
	pub def_r_pr: Option<CTTextCharacterProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTTextField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextField {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTTextCharacterProperties>,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTTextParagraphProperties>,
	#[serde(rename = "t")]
	pub t: Option<String>,
}


// EGTextRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTextRun {
	#[serde(rename = "r")]
	pub r: CTRegularTextRun,
	#[serde(rename = "br")]
	pub br: CTTextLineBreak,
	#[serde(rename = "fld")]
	pub fld: CTTextField,
}


// CTRegularTextRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRegularTextRun {
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTTextCharacterProperties>,
	#[serde(rename = "t")]
	pub t: String,
}
