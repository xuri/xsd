// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTEmpty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmpty {
}


// CTOnOff ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOnOff {
	#[serde(rename = "val")]
	pub val: Option<STOnOff>,
}


// STLongHexNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLongHexNumber {
	#[serde(rename = "ST_LongHexNumber")]
	pub st_long_hex_number: String,
}


// CTLongHexNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLongHexNumber {
	#[serde(rename = "val")]
	pub val: String,
}


// STShortHexNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShortHexNumber {
	#[serde(rename = "ST_ShortHexNumber")]
	pub st_short_hex_number: String,
}


// STUcharHexNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUcharHexNumber {
	#[serde(rename = "ST_UcharHexNumber")]
	pub st_uchar_hex_number: String,
}


// CTCharset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCharset {
	#[serde(rename = "characterSet")]
	pub character_set: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDecimalNumberOrPercent {
	#[serde(rename = "ST_DecimalNumberOrPercent")]
	pub st_percentage: String,
}


// STDecimalNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDecimalNumber {
	#[serde(rename = "ST_DecimalNumber")]
	pub st_decimal_number: i32,
}


// CTDecimalNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDecimalNumber {
	#[serde(rename = "val")]
	pub val: i32,
}


// CTUnsignedDecimalNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUnsignedDecimalNumber {
	#[serde(rename = "val")]
	pub val: u64,
}


// CTDecimalNumberOrPrecent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDecimalNumberOrPrecent {
	#[serde(rename = "val")]
	pub val: STDecimalNumberOrPercent,
}


// CTTwipsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTwipsMeasure {
	#[serde(rename = "val")]
	pub val: STTwipsMeasure,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSignedTwipsMeasure {
	#[serde(rename = "ST_SignedTwipsMeasure")]
	pub st_universal_measure: String,
	#[serde(rename = "ST_SignedTwipsMeasure")]
	pub integer: i32,
}


// CTSignedTwipsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSignedTwipsMeasure {
	#[serde(rename = "val")]
	pub val: STSignedTwipsMeasure,
}


// STPixelsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPixelsMeasure {
	#[serde(rename = "ST_PixelsMeasure")]
	pub st_pixels_measure: u64,
}


// CTPixelsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPixelsMeasure {
	#[serde(rename = "val")]
	pub val: u64,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHpsMeasure {
	#[serde(rename = "ST_HpsMeasure")]
	pub st_positive_universal_measure: String,
	#[serde(rename = "ST_HpsMeasure")]
	pub st_unsigned_decimal_number: u64,
}


// CTHpsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHpsMeasure {
	#[serde(rename = "val")]
	pub val: STHpsMeasure,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSignedHpsMeasure {
	#[serde(rename = "ST_SignedHpsMeasure")]
	pub st_universal_measure: String,
	#[serde(rename = "ST_SignedHpsMeasure")]
	pub integer: i32,
}


// CTSignedHpsMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSignedHpsMeasure {
	#[serde(rename = "val")]
	pub val: STSignedHpsMeasure,
}


// STDateTime ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDateTime {
	#[serde(rename = "ST_DateTime")]
	pub st_date_time: u8,
}


// STMacroName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMacroName {
	#[serde(rename = "ST_MacroName")]
	pub st_macro_name: String,
}


// CTMacroName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMacroName {
	#[serde(rename = "val")]
	pub val: String,
}


// STEighthPointMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STEighthPointMeasure {
	#[serde(rename = "ST_EighthPointMeasure")]
	pub st_eighth_point_measure: u64,
}


// STPointMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPointMeasure {
	#[serde(rename = "ST_PointMeasure")]
	pub st_point_measure: u64,
}


// CTString ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTString {
	#[serde(rename = "val")]
	pub val: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextScale {
	#[serde(rename = "ST_TextScale")]
	pub st_text_scale_percent: STTextScalePercent,
}


// STTextScalePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextScalePercent {
	#[serde(rename = "ST_TextScalePercent")]
	pub st_text_scale_percent: String,
}


// CTTextScale ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextScale {
	#[serde(rename = "val")]
	pub val: Option<STTextScale>,
}


// STHighlightColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHighlightColor {
	#[serde(rename = "ST_HighlightColor")]
	pub st_highlight_color: String,
}


// CTHighlight ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHighlight {
	#[serde(rename = "val")]
	pub val: String,
}


// STHexColorAuto ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHexColorAuto {
	#[serde(rename = "ST_HexColorAuto")]
	pub st_hex_color_auto: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHexColor {
	#[serde(rename = "ST_HexColor")]
	pub st_hex_color_rgb: String,
	#[serde(rename = "ST_HexColor")]
	pub st_hex_color_auto: String,
}


// CTColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColor {
	#[serde(rename = "val")]
	pub val: STHexColor,
	#[serde(rename = "themeColor")]
	pub theme_color: Option<String>,
	#[serde(rename = "themeTint")]
	pub theme_tint: Option<String>,
	#[serde(rename = "themeShade")]
	pub theme_shade: Option<String>,
}


// CTLang ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLang {
	#[serde(rename = "val")]
	pub val: String,
}


// CTGuid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGuid {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STUnderline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUnderline {
	#[serde(rename = "ST_Underline")]
	pub st_underline: String,
}


// CTUnderline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUnderline {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "color")]
	pub color: Option<STHexColor>,
	#[serde(rename = "themeColor")]
	pub theme_color: Option<String>,
	#[serde(rename = "themeTint")]
	pub theme_tint: Option<String>,
	#[serde(rename = "themeShade")]
	pub theme_shade: Option<String>,
}


// STTextEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextEffect {
	#[serde(rename = "ST_TextEffect")]
	pub st_text_effect: String,
}


// CTTextEffect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextEffect {
	#[serde(rename = "val")]
	pub val: String,
}


// STBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBorder {
	#[serde(rename = "ST_Border")]
	pub st_border: String,
}


// CTBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBorder {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "color")]
	pub color: Option<STHexColor>,
	#[serde(rename = "themeColor")]
	pub theme_color: Option<String>,
	#[serde(rename = "themeTint")]
	pub theme_tint: Option<String>,
	#[serde(rename = "themeShade")]
	pub theme_shade: Option<String>,
	#[serde(rename = "sz")]
	pub sz: Option<u64>,
	#[serde(rename = "space")]
	pub space: Option<u64>,
	#[serde(rename = "shadow")]
	pub shadow: Option<STOnOff>,
	#[serde(rename = "frame")]
	pub frame: Option<STOnOff>,
}


// STShd ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShd {
	#[serde(rename = "ST_Shd")]
	pub st_shd: String,
}


// CTShd ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShd {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "color")]
	pub color: Option<STHexColor>,
	#[serde(rename = "themeColor")]
	pub theme_color: Option<String>,
	#[serde(rename = "themeTint")]
	pub theme_tint: Option<String>,
	#[serde(rename = "themeShade")]
	pub theme_shade: Option<String>,
	#[serde(rename = "fill")]
	pub fill: Option<STHexColor>,
	#[serde(rename = "themeFill")]
	pub theme_fill: Option<String>,
	#[serde(rename = "themeFillTint")]
	pub theme_fill_tint: Option<String>,
	#[serde(rename = "themeFillShade")]
	pub theme_fill_shade: Option<String>,
}


// CTVerticalAlignRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVerticalAlignRun {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFitText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFitText {
	#[serde(rename = "val")]
	pub val: STTwipsMeasure,
	#[serde(rename = "id")]
	pub id: Option<i32>,
}


// STEm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STEm {
	#[serde(rename = "ST_Em")]
	pub st_em: String,
}


// CTEm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEm {
	#[serde(rename = "val")]
	pub val: String,
}


// CTLanguage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLanguage {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "eastAsia")]
	pub east_asia: Option<String>,
	#[serde(rename = "bidi")]
	pub bidi: Option<String>,
}


// STCombineBrackets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCombineBrackets {
	#[serde(rename = "ST_CombineBrackets")]
	pub st_combine_brackets: String,
}


// CTEastAsianLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEastAsianLayout {
	#[serde(rename = "id")]
	pub id: Option<i32>,
	#[serde(rename = "combine")]
	pub combine: Option<STOnOff>,
	#[serde(rename = "combineBrackets")]
	pub combine_brackets: Option<String>,
	#[serde(rename = "vert")]
	pub vert: Option<STOnOff>,
	#[serde(rename = "vertCompress")]
	pub vert_compress: Option<STOnOff>,
}


// STHeightRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHeightRule {
	#[serde(rename = "ST_HeightRule")]
	pub st_height_rule: String,
}


// STWrap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STWrap {
	#[serde(rename = "ST_Wrap")]
	pub st_wrap: String,
}


// STVAnchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVAnchor {
	#[serde(rename = "ST_VAnchor")]
	pub st_v_anchor: String,
}


// STHAnchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHAnchor {
	#[serde(rename = "ST_HAnchor")]
	pub st_h_anchor: String,
}


// STDropCap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDropCap {
	#[serde(rename = "ST_DropCap")]
	pub st_drop_cap: String,
}


// CTFramePr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFramePr {
	#[serde(rename = "dropCap")]
	pub drop_cap: Option<String>,
	#[serde(rename = "lines")]
	pub lines: Option<i32>,
	#[serde(rename = "w")]
	pub w: Option<STTwipsMeasure>,
	#[serde(rename = "h")]
	pub h: Option<STTwipsMeasure>,
	#[serde(rename = "vSpace")]
	pub v_space: Option<STTwipsMeasure>,
	#[serde(rename = "hSpace")]
	pub h_space: Option<STTwipsMeasure>,
	#[serde(rename = "wrap")]
	pub wrap: Option<String>,
	#[serde(rename = "hAnchor")]
	pub h_anchor: Option<String>,
	#[serde(rename = "vAnchor")]
	pub v_anchor: Option<String>,
	#[serde(rename = "x")]
	pub x: Option<STSignedTwipsMeasure>,
	#[serde(rename = "xAlign")]
	pub x_align: Option<String>,
	#[serde(rename = "y")]
	pub y: Option<STSignedTwipsMeasure>,
	#[serde(rename = "yAlign")]
	pub y_align: Option<String>,
	#[serde(rename = "hRule")]
	pub h_rule: Option<String>,
	#[serde(rename = "anchorLock")]
	pub anchor_lock: Option<STOnOff>,
}


// STTabJc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTabJc {
	#[serde(rename = "ST_TabJc")]
	pub st_tab_jc: String,
}


// STTabTlc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTabTlc {
	#[serde(rename = "ST_TabTlc")]
	pub st_tab_tlc: String,
}


// CTTabStop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTabStop {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "leader")]
	pub leader: Option<String>,
	#[serde(rename = "pos")]
	pub pos: STSignedTwipsMeasure,
}


// STLineSpacingRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineSpacingRule {
	#[serde(rename = "ST_LineSpacingRule")]
	pub st_line_spacing_rule: String,
}


// CTSpacing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSpacing {
	#[serde(rename = "before")]
	pub before: Option<STTwipsMeasure>,
	#[serde(rename = "beforeLines")]
	pub before_lines: Option<i32>,
	#[serde(rename = "beforeAutospacing")]
	pub before_autospacing: Option<STOnOff>,
	#[serde(rename = "after")]
	pub after: Option<STTwipsMeasure>,
	#[serde(rename = "afterLines")]
	pub after_lines: Option<i32>,
	#[serde(rename = "afterAutospacing")]
	pub after_autospacing: Option<STOnOff>,
	#[serde(rename = "line")]
	pub line: Option<STSignedTwipsMeasure>,
	#[serde(rename = "lineRule")]
	pub line_rule: Option<String>,
}


// CTInd ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInd {
	#[serde(rename = "start")]
	pub start: Option<STSignedTwipsMeasure>,
	#[serde(rename = "startChars")]
	pub start_chars: Option<i32>,
	#[serde(rename = "end")]
	pub end: Option<STSignedTwipsMeasure>,
	#[serde(rename = "endChars")]
	pub end_chars: Option<i32>,
	#[serde(rename = "hanging")]
	pub hanging: Option<STTwipsMeasure>,
	#[serde(rename = "hangingChars")]
	pub hanging_chars: Option<i32>,
	#[serde(rename = "firstLine")]
	pub first_line: Option<STTwipsMeasure>,
	#[serde(rename = "firstLineChars")]
	pub first_line_chars: Option<i32>,
}


// STJc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STJc {
	#[serde(rename = "ST_Jc")]
	pub st_jc: String,
}


// STJcTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STJcTable {
	#[serde(rename = "ST_JcTable")]
	pub st_jc_table: String,
}


// CTJc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTJc {
	#[serde(rename = "val")]
	pub val: String,
}


// CTJcTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTJcTable {
	#[serde(rename = "val")]
	pub val: String,
}


// STView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STView {
	#[serde(rename = "ST_View")]
	pub st_view: String,
}


// CTView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTView {
	#[serde(rename = "val")]
	pub val: String,
}


// STZoom ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STZoom {
	#[serde(rename = "ST_Zoom")]
	pub st_zoom: String,
}


// CTZoom ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTZoom {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "percent")]
	pub percent: STDecimalNumberOrPercent,
}


// CTWritingStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWritingStyle {
	#[serde(rename = "lang")]
	pub lang: String,
	#[serde(rename = "vendorID")]
	pub vendor_id: String,
	#[serde(rename = "dllVersion")]
	pub dll_version: String,
	#[serde(rename = "nlCheck")]
	pub nl_check: Option<STOnOff>,
	#[serde(rename = "checkStyle")]
	pub check_style: STOnOff,
	#[serde(rename = "appName")]
	pub app_name: String,
}


// STProof ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STProof {
	#[serde(rename = "ST_Proof")]
	pub st_proof: String,
}


// CTProof ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTProof {
	#[serde(rename = "spelling")]
	pub spelling: Option<String>,
	#[serde(rename = "grammar")]
	pub grammar: Option<String>,
}


// STDocType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocType {
	#[serde(rename = "ST_DocType")]
	pub st_doc_type: String,
}


// CTDocType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocType {
	#[serde(rename = "val")]
	pub val: String,
}


// STDocProtect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocProtect {
	#[serde(rename = "ST_DocProtect")]
	pub st_doc_protect: String,
}


// AGPassword ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGPassword {
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinCount")]
	pub spin_count: Option<i32>,
}


// CTDocProtect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocProtect {
	#[serde(rename = "AG_Password")]
	pub ag_password: Vec<AGPassword>,
	#[serde(rename = "edit")]
	pub edit: Option<String>,
	#[serde(rename = "formatting")]
	pub formatting: Option<STOnOff>,
	#[serde(rename = "enforcement")]
	pub enforcement: Option<STOnOff>,
}


// STMailMergeDocType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMailMergeDocType {
	#[serde(rename = "ST_MailMergeDocType")]
	pub st_mail_merge_doc_type: String,
}


// CTMailMergeDocType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMergeDocType {
	#[serde(rename = "val")]
	pub val: String,
}


// STMailMergeDataType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMailMergeDataType {
	#[serde(rename = "ST_MailMergeDataType")]
	pub st_mail_merge_data_type: String,
}


// CTMailMergeDataType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMergeDataType {
	#[serde(rename = "val")]
	pub val: String,
}


// STMailMergeDest ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMailMergeDest {
	#[serde(rename = "ST_MailMergeDest")]
	pub st_mail_merge_dest: String,
}


// CTMailMergeDest ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMergeDest {
	#[serde(rename = "val")]
	pub val: String,
}


// STMailMergeOdsoFMDFieldType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMailMergeOdsoFMDFieldType {
	#[serde(rename = "ST_MailMergeOdsoFMDFieldType")]
	pub st_mail_merge_odso_fmd_field_type: String,
}


// CTMailMergeOdsoFMDFieldType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMergeOdsoFMDFieldType {
	#[serde(rename = "val")]
	pub val: String,
}


// CTTrackChangesView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrackChangesView {
	#[serde(rename = "markup")]
	pub markup: Option<STOnOff>,
	#[serde(rename = "comments")]
	pub comments: Option<STOnOff>,
	#[serde(rename = "insDel")]
	pub ins_del: Option<STOnOff>,
	#[serde(rename = "formatting")]
	pub formatting: Option<STOnOff>,
	#[serde(rename = "inkAnnotations")]
	pub ink_annotations: Option<STOnOff>,
}


// CTKinsoku ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTKinsoku {
	#[serde(rename = "lang")]
	pub lang: String,
	#[serde(rename = "val")]
	pub val: String,
}


// STTextDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextDirection {
	#[serde(rename = "ST_TextDirection")]
	pub st_text_direction: String,
}


// CTTextDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextDirection {
	#[serde(rename = "val")]
	pub val: String,
}


// STTextAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextAlignment {
	#[serde(rename = "ST_TextAlignment")]
	pub st_text_alignment: String,
}


// CTTextAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextAlignment {
	#[serde(rename = "val")]
	pub val: String,
}


// STDisplacedByCustomXml ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDisplacedByCustomXml {
	#[serde(rename = "ST_DisplacedByCustomXml")]
	pub st_displaced_by_custom_xml: String,
}


// STAnnotationVMerge ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAnnotationVMerge {
	#[serde(rename = "ST_AnnotationVMerge")]
	pub st_annotation_v_merge: String,
}


// CTMarkup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMarkup {
	#[serde(rename = "id")]
	pub id: i32,
}


// CTTrackChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrackChange {
	#[serde(rename = "author")]
	pub author: String,
	#[serde(rename = "date")]
	pub date: Option<u8>,
	#[serde(flatten)]
	pub ct_markup: CTMarkup,
}


// CTCellMergeTrackChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellMergeTrackChange {
	#[serde(rename = "vMerge")]
	pub v_merge: Option<String>,
	#[serde(rename = "vMergeOrig")]
	pub v_merge_orig: Option<String>,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTTrackChangeRange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrackChangeRange {
	#[serde(rename = "displacedByCustomXml")]
	pub displaced_by_custom_xml: Option<String>,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTMarkupRange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMarkupRange {
	#[serde(rename = "displacedByCustomXml")]
	pub displaced_by_custom_xml: Option<String>,
	#[serde(flatten)]
	pub ct_markup: CTMarkup,
}


// CTBookmarkRange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBookmarkRange {
	#[serde(rename = "colFirst")]
	pub col_first: Option<i32>,
	#[serde(rename = "colLast")]
	pub col_last: Option<i32>,
	#[serde(flatten)]
	pub ct_markup_range: CTMarkupRange,
}


// CTBookmark ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBookmark {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(flatten)]
	pub ct_bookmark_range: CTBookmarkRange,
}


// CTMoveBookmark ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMoveBookmark {
	#[serde(rename = "author")]
	pub author: String,
	#[serde(rename = "date")]
	pub date: u8,
	#[serde(flatten)]
	pub ct_bookmark: CTBookmark,
}


// CTComment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComment {
	#[serde(rename = "initials")]
	pub initials: Option<String>,
	#[serde(rename = "EG_BlockLevelElts")]
	pub eg_block_level_elts: Vec<EGBlockLevelElts>,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTTblPrExChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPrExChange {
	#[serde(rename = "tblPrEx")]
	pub tbl_pr_ex: CTTblPrExBase,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTTcPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcPrChange {
	#[serde(rename = "tcPr")]
	pub tc_pr: CTTcPrInner,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTTrPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrPrChange {
	#[serde(rename = "trPr")]
	pub tr_pr: CTTrPrBase,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTTblGridChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblGridChange {
	#[serde(rename = "tblGrid")]
	pub tbl_grid: CTTblGridBase,
	#[serde(flatten)]
	pub ct_markup: CTMarkup,
}


// CTTblPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPrChange {
	#[serde(rename = "tblPr")]
	pub tbl_pr: CTTblPrBase,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTSectPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSectPrChange {
	#[serde(rename = "sectPr")]
	pub sect_pr: Option<CTSectPrBase>,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTPPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPPrChange {
	#[serde(rename = "pPr")]
	pub p_pr: CTPPrBase,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTRPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRPrChange {
	#[serde(rename = "rPr")]
	pub r_pr: CTRPrOriginal,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTParaRPrChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParaRPrChange {
	#[serde(rename = "rPr")]
	pub r_pr: CTParaRPrOriginal,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTRunTrackChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRunTrackChange {
	#[serde(rename = "EG_ContentRunContent")]
	pub eg_content_run_content: Vec<EGContentRunContent>,
	#[serde(rename = "m:EG_OMathMathElements")]
	pub meg_o_math_math_elements: Vec<EGOMathMathElements>,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// EGPContentMath ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGPContentMath {
	#[serde(rename = "EG_PContentBase")]
	pub eg_p_content_base: EGPContentBase,
	#[serde(rename = "EG_ContentRunContentBase")]
	pub eg_content_run_content_base: EGContentRunContentBase,
}


// EGPContentBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGPContentBase {
	#[serde(rename = "customXml")]
	pub custom_xml: CTCustomXmlRun,
	#[serde(rename = "fldSimple")]
	pub fld_simple: CTSimpleField,
	#[serde(rename = "hyperlink")]
	pub hyperlink: CTHyperlink,
}


// EGContentRunContentBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGContentRunContentBase {
	#[serde(rename = "smartTag")]
	pub smart_tag: CTSmartTagRun,
	#[serde(rename = "sdt")]
	pub sdt: CTSdtRun,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// EGCellMarkupElements ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGCellMarkupElements {
	#[serde(rename = "cellIns")]
	pub cell_ins: CTTrackChange,
	#[serde(rename = "cellDel")]
	pub cell_del: CTTrackChange,
	#[serde(rename = "cellMerge")]
	pub cell_merge: CTCellMergeTrackChange,
}


// EGRangeMarkupElements ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRangeMarkupElements {
	#[serde(rename = "bookmarkStart")]
	pub bookmark_start: CTBookmark,
	#[serde(rename = "bookmarkEnd")]
	pub bookmark_end: CTMarkupRange,
	#[serde(rename = "moveFromRangeStart")]
	pub move_from_range_start: CTMoveBookmark,
	#[serde(rename = "moveFromRangeEnd")]
	pub move_from_range_end: CTMarkupRange,
	#[serde(rename = "moveToRangeStart")]
	pub move_to_range_start: CTMoveBookmark,
	#[serde(rename = "moveToRangeEnd")]
	pub move_to_range_end: CTMarkupRange,
	#[serde(rename = "commentRangeStart")]
	pub comment_range_start: CTMarkupRange,
	#[serde(rename = "commentRangeEnd")]
	pub comment_range_end: CTMarkupRange,
	#[serde(rename = "customXmlInsRangeStart")]
	pub custom_xml_ins_range_start: CTTrackChange,
	#[serde(rename = "customXmlInsRangeEnd")]
	pub custom_xml_ins_range_end: CTMarkup,
	#[serde(rename = "customXmlDelRangeStart")]
	pub custom_xml_del_range_start: CTTrackChange,
	#[serde(rename = "customXmlDelRangeEnd")]
	pub custom_xml_del_range_end: CTMarkup,
	#[serde(rename = "customXmlMoveFromRangeStart")]
	pub custom_xml_move_from_range_start: CTTrackChange,
	#[serde(rename = "customXmlMoveFromRangeEnd")]
	pub custom_xml_move_from_range_end: CTMarkup,
	#[serde(rename = "customXmlMoveToRangeStart")]
	pub custom_xml_move_to_range_start: CTTrackChange,
	#[serde(rename = "customXmlMoveToRangeEnd")]
	pub custom_xml_move_to_range_end: CTMarkup,
}


// CTNumPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumPr {
	#[serde(rename = "ilvl")]
	pub ilvl: Option<CTDecimalNumber>,
	#[serde(rename = "numId")]
	pub num_id: Option<CTDecimalNumber>,
	#[serde(rename = "ins")]
	pub ins: Option<CTTrackChange>,
}


// CTPBdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPBdr {
	#[serde(rename = "top")]
	pub top: Option<CTBorder>,
	#[serde(rename = "left")]
	pub left: Option<CTBorder>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTBorder>,
	#[serde(rename = "right")]
	pub right: Option<CTBorder>,
	#[serde(rename = "between")]
	pub between: Option<CTBorder>,
	#[serde(rename = "bar")]
	pub bar: Option<CTBorder>,
}


// CTTabs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTabs {
	#[serde(rename = "tab")]
	pub tab: Vec<CTTabStop>,
}


// STTextboxTightWrap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextboxTightWrap {
	#[serde(rename = "ST_TextboxTightWrap")]
	pub st_textbox_tight_wrap: String,
}


// CTTextboxTightWrap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextboxTightWrap {
	#[serde(rename = "val")]
	pub val: String,
}


// CTPPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPPr {
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTParaRPr>,
	#[serde(rename = "sectPr")]
	pub sect_pr: Option<CTSectPr>,
	#[serde(rename = "pPrChange")]
	pub p_pr_change: Option<CTPPrChange>,
	#[serde(flatten)]
	pub ctp_pr_base: CTPPrBase,
}


// CTPPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPPrBase {
	#[serde(rename = "pStyle")]
	pub p_style: Option<CTString>,
	#[serde(rename = "keepNext")]
	pub keep_next: Option<CTOnOff>,
	#[serde(rename = "keepLines")]
	pub keep_lines: Option<CTOnOff>,
	#[serde(rename = "pageBreakBefore")]
	pub page_break_before: Option<CTOnOff>,
	#[serde(rename = "framePr")]
	pub frame_pr: Option<CTFramePr>,
	#[serde(rename = "widowControl")]
	pub widow_control: Option<CTOnOff>,
	#[serde(rename = "numPr")]
	pub num_pr: Option<CTNumPr>,
	#[serde(rename = "suppressLineNumbers")]
	pub suppress_line_numbers: Option<CTOnOff>,
	#[serde(rename = "pBdr")]
	pub p_bdr: Option<CTPBdr>,
	#[serde(rename = "shd")]
	pub shd: Option<CTShd>,
	#[serde(rename = "tabs")]
	pub tabs: Option<CTTabs>,
	#[serde(rename = "suppressAutoHyphens")]
	pub suppress_auto_hyphens: Option<CTOnOff>,
	#[serde(rename = "kinsoku")]
	pub kinsoku: Option<CTOnOff>,
	#[serde(rename = "wordWrap")]
	pub word_wrap: Option<CTOnOff>,
	#[serde(rename = "overflowPunct")]
	pub overflow_punct: Option<CTOnOff>,
	#[serde(rename = "topLinePunct")]
	pub top_line_punct: Option<CTOnOff>,
	#[serde(rename = "autoSpaceDE")]
	pub auto_space_de: Option<CTOnOff>,
	#[serde(rename = "autoSpaceDN")]
	pub auto_space_dn: Option<CTOnOff>,
	#[serde(rename = "bidi")]
	pub bidi: Option<CTOnOff>,
	#[serde(rename = "adjustRightInd")]
	pub adjust_right_ind: Option<CTOnOff>,
	#[serde(rename = "snapToGrid")]
	pub snap_to_grid: Option<CTOnOff>,
	#[serde(rename = "spacing")]
	pub spacing: Option<CTSpacing>,
	#[serde(rename = "ind")]
	pub ind: Option<CTInd>,
	#[serde(rename = "contextualSpacing")]
	pub contextual_spacing: Option<CTOnOff>,
	#[serde(rename = "mirrorIndents")]
	pub mirror_indents: Option<CTOnOff>,
	#[serde(rename = "suppressOverlap")]
	pub suppress_overlap: Option<CTOnOff>,
	#[serde(rename = "jc")]
	pub jc: Option<CTJc>,
	#[serde(rename = "textDirection")]
	pub text_direction: Option<CTTextDirection>,
	#[serde(rename = "textAlignment")]
	pub text_alignment: Option<CTTextAlignment>,
	#[serde(rename = "textboxTightWrap")]
	pub textbox_tight_wrap: Option<CTTextboxTightWrap>,
	#[serde(rename = "outlineLvl")]
	pub outline_lvl: Option<CTDecimalNumber>,
	#[serde(rename = "divId")]
	pub div_id: Option<CTDecimalNumber>,
	#[serde(rename = "cnfStyle")]
	pub cnf_style: Option<CTCnf>,
}


// CTPPrGeneral ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPPrGeneral {
	#[serde(rename = "pPrChange")]
	pub p_pr_change: Option<CTPPrChange>,
	#[serde(flatten)]
	pub ctp_pr_base: CTPPrBase,
}


// CTControl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControl {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "shapeid")]
	pub shapeid: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// CTBackground ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackground {
	#[serde(rename = "color")]
	pub color: Option<STHexColor>,
	#[serde(rename = "themeColor")]
	pub theme_color: Option<String>,
	#[serde(rename = "themeTint")]
	pub theme_tint: Option<String>,
	#[serde(rename = "themeShade")]
	pub theme_shade: Option<String>,
	#[serde(rename = "drawing")]
	pub drawing: Option<CTDrawing>,
}


// CTRel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRel {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTObject ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObject {
	#[serde(rename = "dxaOrig")]
	pub dxa_orig: Option<STTwipsMeasure>,
	#[serde(rename = "dyaOrig")]
	pub dya_orig: Option<STTwipsMeasure>,
	#[serde(rename = "drawing")]
	pub drawing: Option<CTDrawing>,
	#[serde(rename = "control")]
	pub control: CTControl,
	#[serde(rename = "objectLink")]
	pub object_link: CTObjectLink,
	#[serde(rename = "objectEmbed")]
	pub object_embed: CTObjectEmbed,
	#[serde(rename = "movie")]
	pub movie: CTRel,
}


// CTObjectEmbed ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObjectEmbed {
	#[serde(rename = "drawAspect")]
	pub draw_aspect: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "progId")]
	pub prog_id: Option<String>,
	#[serde(rename = "shapeId")]
	pub shape_id: Option<String>,
	#[serde(rename = "fieldCodes")]
	pub field_codes: Option<String>,
}


// STObjectDrawAspect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STObjectDrawAspect {
	#[serde(rename = "ST_ObjectDrawAspect")]
	pub st_object_draw_aspect: String,
}


// CTObjectLink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObjectLink {
	#[serde(rename = "updateMode")]
	pub update_mode: String,
	#[serde(rename = "lockedField")]
	pub locked_field: Option<STOnOff>,
	#[serde(flatten)]
	pub ct_object_embed: CTObjectEmbed,
}


// STObjectUpdateMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STObjectUpdateMode {
	#[serde(rename = "ST_ObjectUpdateMode")]
	pub st_object_update_mode: String,
}


// CTDrawing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDrawing {
	#[serde(rename = "wp:anchor")]
	pub wp_anchor: Vec<CTAnchor>,
	#[serde(rename = "wp:inline")]
	pub wp_inline: Vec<CTInline>,
}


// CTSimpleField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSimpleField {
	#[serde(rename = "instr")]
	pub instr: String,
	#[serde(rename = "fldLock")]
	pub fld_lock: Option<STOnOff>,
	#[serde(rename = "dirty")]
	pub dirty: Option<STOnOff>,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
}


// STFldCharType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFldCharType {
	#[serde(rename = "ST_FldCharType")]
	pub st_fld_char_type: String,
}


// STInfoTextType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STInfoTextType {
	#[serde(rename = "ST_InfoTextType")]
	pub st_info_text_type: String,
}


// STFFHelpTextVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFFHelpTextVal {
	#[serde(rename = "ST_FFHelpTextVal")]
	pub st_ff_help_text_val: String,
}


// STFFStatusTextVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFFStatusTextVal {
	#[serde(rename = "ST_FFStatusTextVal")]
	pub st_ff_status_text_val: String,
}


// STFFName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFFName {
	#[serde(rename = "ST_FFName")]
	pub st_ff_name: String,
}


// STFFTextType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFFTextType {
	#[serde(rename = "ST_FFTextType")]
	pub st_ff_text_type: String,
}


// CTFFTextType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFTextType {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFFName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFName {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTFldChar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFldChar {
	#[serde(rename = "fldCharType")]
	pub fld_char_type: String,
	#[serde(rename = "fldLock")]
	pub fld_lock: Option<STOnOff>,
	#[serde(rename = "dirty")]
	pub dirty: Option<STOnOff>,
	#[serde(rename = "ffData")]
	pub ff_data: Option<CTFFData>,
}


// CTHyperlink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHyperlink {
	#[serde(rename = "tgtFrame")]
	pub tgt_frame: Option<String>,
	#[serde(rename = "tooltip")]
	pub tooltip: Option<String>,
	#[serde(rename = "docLocation")]
	pub doc_location: Option<String>,
	#[serde(rename = "history")]
	pub history: Option<STOnOff>,
	#[serde(rename = "anchor")]
	pub anchor: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
}


// CTFFData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFData {
	#[serde(rename = "name")]
	pub name: Vec<CTFFName>,
	#[serde(rename = "label")]
	pub label: Vec<CTDecimalNumber>,
	#[serde(rename = "tabIndex")]
	pub tab_index: Vec<CTUnsignedDecimalNumber>,
	#[serde(rename = "enabled")]
	pub enabled: Vec<CTOnOff>,
	#[serde(rename = "calcOnExit")]
	pub calc_on_exit: Vec<CTOnOff>,
	#[serde(rename = "entryMacro")]
	pub entry_macro: Vec<CTMacroName>,
	#[serde(rename = "exitMacro")]
	pub exit_macro: Vec<CTMacroName>,
	#[serde(rename = "helpText")]
	pub help_text: Vec<CTFFHelpText>,
	#[serde(rename = "statusText")]
	pub status_text: Vec<CTFFStatusText>,
	#[serde(rename = "checkBox")]
	pub check_box: Vec<CTFFCheckBox>,
	#[serde(rename = "ddList")]
	pub dd_list: Vec<CTFFDDList>,
	#[serde(rename = "textInput")]
	pub text_input: Vec<CTFFTextInput>,
}


// CTFFHelpText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFHelpText {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTFFStatusText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFStatusText {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTFFCheckBox ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFCheckBox {
	#[serde(rename = "size")]
	pub size: CTHpsMeasure,
	#[serde(rename = "sizeAuto")]
	pub size_auto: CTOnOff,
	#[serde(rename = "default")]
	pub default: Option<CTOnOff>,
	#[serde(rename = "checked")]
	pub checked: Option<CTOnOff>,
}


// CTFFDDList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFDDList {
	#[serde(rename = "result")]
	pub result: Option<CTDecimalNumber>,
	#[serde(rename = "default")]
	pub default: Option<CTDecimalNumber>,
	#[serde(rename = "listEntry")]
	pub list_entry: Vec<CTString>,
}


// CTFFTextInput ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFFTextInput {
	#[serde(rename = "type")]
	pub type_attr: Option<CTFFTextType>,
	#[serde(rename = "default")]
	pub default: Option<CTString>,
	#[serde(rename = "maxLength")]
	pub max_length: Option<CTDecimalNumber>,
	#[serde(rename = "format")]
	pub format: Option<CTString>,
}


// STSectionMark ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSectionMark {
	#[serde(rename = "ST_SectionMark")]
	pub st_section_mark: String,
}


// CTSectType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSectType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTPaperSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPaperSource {
	#[serde(rename = "first")]
	pub first: Option<i32>,
	#[serde(rename = "other")]
	pub other: Option<i32>,
}


// STNumberFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STNumberFormat {
	#[serde(rename = "ST_NumberFormat")]
	pub st_number_format: String,
}


// STPageOrientation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageOrientation {
	#[serde(rename = "ST_PageOrientation")]
	pub st_page_orientation: String,
}


// CTPageSz ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageSz {
	#[serde(rename = "w")]
	pub w: Option<STTwipsMeasure>,
	#[serde(rename = "h")]
	pub h: Option<STTwipsMeasure>,
	#[serde(rename = "orient")]
	pub orient: Option<String>,
	#[serde(rename = "code")]
	pub code: Option<i32>,
}


// CTPageMar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageMar {
	#[serde(rename = "top")]
	pub top: STSignedTwipsMeasure,
	#[serde(rename = "right")]
	pub right: STTwipsMeasure,
	#[serde(rename = "bottom")]
	pub bottom: STSignedTwipsMeasure,
	#[serde(rename = "left")]
	pub left: STTwipsMeasure,
	#[serde(rename = "header")]
	pub header: STTwipsMeasure,
	#[serde(rename = "footer")]
	pub footer: STTwipsMeasure,
	#[serde(rename = "gutter")]
	pub gutter: STTwipsMeasure,
}


// STPageBorderZOrder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageBorderZOrder {
	#[serde(rename = "ST_PageBorderZOrder")]
	pub st_page_border_z_order: String,
}


// STPageBorderDisplay ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageBorderDisplay {
	#[serde(rename = "ST_PageBorderDisplay")]
	pub st_page_border_display: String,
}


// STPageBorderOffset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageBorderOffset {
	#[serde(rename = "ST_PageBorderOffset")]
	pub st_page_border_offset: String,
}


// CTPageBorders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageBorders {
	#[serde(rename = "zOrder")]
	pub z_order: Option<String>,
	#[serde(rename = "display")]
	pub display: Option<String>,
	#[serde(rename = "offsetFrom")]
	pub offset_from: Option<String>,
	#[serde(rename = "top")]
	pub top: Option<CTTopPageBorder>,
	#[serde(rename = "left")]
	pub left: Option<CTPageBorder>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTBottomPageBorder>,
	#[serde(rename = "right")]
	pub right: Option<CTPageBorder>,
}


// CTPageBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageBorder {
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(flatten)]
	pub ct_border: CTBorder,
}


// CTBottomPageBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBottomPageBorder {
	#[serde(rename = "r:bottomLeft")]
	pub r_bottom_left: Option<String>,
	#[serde(rename = "r:bottomRight")]
	pub r_bottom_right: Option<String>,
	#[serde(flatten)]
	pub ct_page_border: CTPageBorder,
}


// CTTopPageBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTopPageBorder {
	#[serde(rename = "r:topLeft")]
	pub r_top_left: Option<String>,
	#[serde(rename = "r:topRight")]
	pub r_top_right: Option<String>,
	#[serde(flatten)]
	pub ct_page_border: CTPageBorder,
}


// STChapterSep ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STChapterSep {
	#[serde(rename = "ST_ChapterSep")]
	pub st_chapter_sep: String,
}


// STLineNumberRestart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLineNumberRestart {
	#[serde(rename = "ST_LineNumberRestart")]
	pub st_line_number_restart: String,
}


// CTLineNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineNumber {
	#[serde(rename = "countBy")]
	pub count_by: Option<i32>,
	#[serde(rename = "start")]
	pub start: Option<i32>,
	#[serde(rename = "distance")]
	pub distance: Option<STTwipsMeasure>,
	#[serde(rename = "restart")]
	pub restart: Option<String>,
}


// CTPageNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageNumber {
	#[serde(rename = "fmt")]
	pub fmt: Option<String>,
	#[serde(rename = "start")]
	pub start: Option<i32>,
	#[serde(rename = "chapStyle")]
	pub chap_style: Option<i32>,
	#[serde(rename = "chapSep")]
	pub chap_sep: Option<String>,
}


// CTColumn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColumn {
	#[serde(rename = "w")]
	pub w: Option<STTwipsMeasure>,
	#[serde(rename = "space")]
	pub space: Option<STTwipsMeasure>,
}


// CTColumns ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColumns {
	#[serde(rename = "equalWidth")]
	pub equal_width: Option<STOnOff>,
	#[serde(rename = "space")]
	pub space: Option<STTwipsMeasure>,
	#[serde(rename = "num")]
	pub num: Option<i32>,
	#[serde(rename = "sep")]
	pub sep: Option<STOnOff>,
	#[serde(rename = "col")]
	pub col: Vec<CTColumn>,
}


// STVerticalJc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVerticalJc {
	#[serde(rename = "ST_VerticalJc")]
	pub st_vertical_jc: String,
}


// CTVerticalJc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVerticalJc {
	#[serde(rename = "val")]
	pub val: String,
}


// STDocGrid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocGrid {
	#[serde(rename = "ST_DocGrid")]
	pub st_doc_grid: String,
}


// CTDocGrid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocGrid {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "linePitch")]
	pub line_pitch: Option<i32>,
	#[serde(rename = "charSpace")]
	pub char_space: Option<i32>,
}


// STHdrFtr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHdrFtr {
	#[serde(rename = "ST_HdrFtr")]
	pub st_hdr_ftr: String,
}


// STFtnEdn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFtnEdn {
	#[serde(rename = "ST_FtnEdn")]
	pub st_ftn_edn: String,
}


// CTHdrFtrRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHdrFtrRef {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(flatten)]
	pub ct_rel: CTRel,
}


// EGHdrFtrReferences ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGHdrFtrReferences {
	#[serde(rename = "headerReference")]
	pub header_reference: CTHdrFtrRef,
	#[serde(rename = "footerReference")]
	pub footer_reference: CTHdrFtrRef,
}


// CTHdrFtr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHdrFtr {
	#[serde(rename = "EG_BlockLevelElts")]
	pub eg_block_level_elts: Vec<EGBlockLevelElts>,
}


// EGSectPrContents ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGSectPrContents {
	#[serde(rename = "footnotePr")]
	pub footnote_pr: CTFtnProps,
	#[serde(rename = "endnotePr")]
	pub endnote_pr: CTEdnProps,
	#[serde(rename = "type")]
	pub type_attr: CTSectType,
	#[serde(rename = "pgSz")]
	pub pg_sz: CTPageSz,
	#[serde(rename = "pgMar")]
	pub pg_mar: CTPageMar,
	#[serde(rename = "paperSrc")]
	pub paper_src: CTPaperSource,
	#[serde(rename = "pgBorders")]
	pub pg_borders: CTPageBorders,
	#[serde(rename = "lnNumType")]
	pub ln_num_type: CTLineNumber,
	#[serde(rename = "pgNumType")]
	pub pg_num_type: CTPageNumber,
	#[serde(rename = "cols")]
	pub cols: CTColumns,
	#[serde(rename = "formProt")]
	pub form_prot: CTOnOff,
	#[serde(rename = "vAlign")]
	pub v_align: CTVerticalJc,
	#[serde(rename = "noEndnote")]
	pub no_endnote: CTOnOff,
	#[serde(rename = "titlePg")]
	pub title_pg: CTOnOff,
	#[serde(rename = "textDirection")]
	pub text_direction: CTTextDirection,
	#[serde(rename = "bidi")]
	pub bidi: CTOnOff,
	#[serde(rename = "rtlGutter")]
	pub rtl_gutter: CTOnOff,
	#[serde(rename = "docGrid")]
	pub doc_grid: CTDocGrid,
	#[serde(rename = "printerSettings")]
	pub printer_settings: CTRel,
}


// AGSectPrAttributes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGSectPrAttributes {
	#[serde(rename = "rsidRPr")]
	pub rsid_r_pr: Option<String>,
	#[serde(rename = "rsidDel")]
	pub rsid_del: Option<String>,
	#[serde(rename = "rsidR")]
	pub rsid_r: Option<String>,
	#[serde(rename = "rsidSect")]
	pub rsid_sect: Option<String>,
}


// CTSectPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSectPrBase {
	#[serde(rename = "AG_SectPrAttributes")]
	pub ag_sect_pr_attributes: Vec<AGSectPrAttributes>,
	#[serde(rename = "EG_SectPrContents")]
	pub eg_sect_pr_contents: EGSectPrContents,
}


// CTSectPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSectPr {
	#[serde(rename = "AG_SectPrAttributes")]
	pub ag_sect_pr_attributes: Vec<AGSectPrAttributes>,
	#[serde(rename = "EG_HdrFtrReferences")]
	pub eg_hdr_ftr_references: Vec<EGHdrFtrReferences>,
	#[serde(rename = "EG_SectPrContents")]
	pub eg_sect_pr_contents: EGSectPrContents,
	#[serde(rename = "sectPrChange")]
	pub sect_pr_change: Option<CTSectPrChange>,
}


// STBrType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBrType {
	#[serde(rename = "ST_BrType")]
	pub st_br_type: String,
}


// STBrClear ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBrClear {
	#[serde(rename = "ST_BrClear")]
	pub st_br_clear: String,
}


// CTBr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBr {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "clear")]
	pub clear: Option<String>,
}


// STPTabAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPTabAlignment {
	#[serde(rename = "ST_PTabAlignment")]
	pub st_p_tab_alignment: String,
}


// STPTabRelativeTo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPTabRelativeTo {
	#[serde(rename = "ST_PTabRelativeTo")]
	pub st_p_tab_relative_to: String,
}


// STPTabLeader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPTabLeader {
	#[serde(rename = "ST_PTabLeader")]
	pub st_p_tab_leader: String,
}


// CTPTab ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPTab {
	#[serde(rename = "alignment")]
	pub alignment: String,
	#[serde(rename = "relativeTo")]
	pub relative_to: String,
	#[serde(rename = "leader")]
	pub leader: String,
}


// CTSym ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSym {
	#[serde(rename = "font")]
	pub font: Option<String>,
	#[serde(rename = "char")]
	pub char: Option<String>,
}


// STProofErr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STProofErr {
	#[serde(rename = "ST_ProofErr")]
	pub st_proof_err: String,
}


// CTProofErr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTProofErr {
	#[serde(rename = "type")]
	pub type_attr: String,
}


// STEdGrp ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STEdGrp {
	#[serde(rename = "ST_EdGrp")]
	pub st_ed_grp: String,
}


// CTPerm ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPerm {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "displacedByCustomXml")]
	pub displaced_by_custom_xml: Option<String>,
}


// CTPermStart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPermStart {
	#[serde(rename = "edGrp")]
	pub ed_grp: Option<String>,
	#[serde(rename = "ed")]
	pub ed: Option<String>,
	#[serde(rename = "colFirst")]
	pub col_first: Option<i32>,
	#[serde(rename = "colLast")]
	pub col_last: Option<i32>,
	#[serde(flatten)]
	pub ct_perm: CTPerm,
}


// CTText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTText {
	#[serde(rename = "xml:space")]
	pub xml_space: Option<Space>,
	#[serde(rename = "$value")]
	pub value: String,
}


// EGRunInnerContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRunInnerContent {
	#[serde(rename = "br")]
	pub br: CTBr,
	#[serde(rename = "t")]
	pub t: CTText,
	#[serde(rename = "contentPart")]
	pub content_part: CTRel,
	#[serde(rename = "delText")]
	pub del_text: CTText,
	#[serde(rename = "instrText")]
	pub instr_text: CTText,
	#[serde(rename = "delInstrText")]
	pub del_instr_text: CTText,
	#[serde(rename = "noBreakHyphen")]
	pub no_break_hyphen: CTEmpty,
	#[serde(rename = "softHyphen")]
	pub soft_hyphen: CTEmpty,
	#[serde(rename = "dayShort")]
	pub day_short: CTEmpty,
	#[serde(rename = "monthShort")]
	pub month_short: CTEmpty,
	#[serde(rename = "yearShort")]
	pub year_short: CTEmpty,
	#[serde(rename = "dayLong")]
	pub day_long: CTEmpty,
	#[serde(rename = "monthLong")]
	pub month_long: CTEmpty,
	#[serde(rename = "yearLong")]
	pub year_long: CTEmpty,
	#[serde(rename = "annotationRef")]
	pub annotation_ref: CTEmpty,
	#[serde(rename = "footnoteRef")]
	pub footnote_ref: CTEmpty,
	#[serde(rename = "endnoteRef")]
	pub endnote_ref: CTEmpty,
	#[serde(rename = "separator")]
	pub separator: CTEmpty,
	#[serde(rename = "continuationSeparator")]
	pub continuation_separator: CTEmpty,
	#[serde(rename = "sym")]
	pub sym: CTSym,
	#[serde(rename = "pgNum")]
	pub pg_num: CTEmpty,
	#[serde(rename = "cr")]
	pub cr: CTEmpty,
	#[serde(rename = "tab")]
	pub tab: CTEmpty,
	#[serde(rename = "object")]
	pub object: CTObject,
	#[serde(rename = "fldChar")]
	pub fld_char: CTFldChar,
	#[serde(rename = "ruby")]
	pub ruby: CTRuby,
	#[serde(rename = "footnoteReference")]
	pub footnote_reference: CTFtnEdnRef,
	#[serde(rename = "endnoteReference")]
	pub endnote_reference: CTFtnEdnRef,
	#[serde(rename = "commentReference")]
	pub comment_reference: CTMarkup,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
	#[serde(rename = "ptab")]
	pub ptab: CTPTab,
	#[serde(rename = "lastRenderedPageBreak")]
	pub last_rendered_page_break: CTEmpty,
}


// CTR ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTR {
	#[serde(rename = "rsidRPr")]
	pub rsid_r_pr: Option<String>,
	#[serde(rename = "rsidDel")]
	pub rsid_del: Option<String>,
	#[serde(rename = "rsidR")]
	pub rsid_r: Option<String>,
	#[serde(rename = "EG_RPr")]
	pub eg_r_pr: EGRPr,
	#[serde(rename = "EG_RunInnerContent")]
	pub eg_run_inner_content: Vec<EGRunInnerContent>,
}


// STHint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHint {
	#[serde(rename = "ST_Hint")]
	pub st_hint: String,
}


// STTheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTheme {
	#[serde(rename = "ST_Theme")]
	pub st_theme: String,
}


// CTFonts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFonts {
	#[serde(rename = "hint")]
	pub hint: Option<String>,
	#[serde(rename = "ascii")]
	pub ascii: Option<String>,
	#[serde(rename = "hAnsi")]
	pub h_ansi: Option<String>,
	#[serde(rename = "eastAsia")]
	pub east_asia: Option<String>,
	#[serde(rename = "cs")]
	pub cs: Option<String>,
	#[serde(rename = "asciiTheme")]
	pub ascii_theme: Option<String>,
	#[serde(rename = "hAnsiTheme")]
	pub h_ansi_theme: Option<String>,
	#[serde(rename = "eastAsiaTheme")]
	pub east_asia_theme: Option<String>,
	#[serde(rename = "cstheme")]
	pub cstheme: Option<String>,
}


// EGRPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRPrBase {
	#[serde(rename = "rStyle")]
	pub r_style: CTString,
	#[serde(rename = "rFonts")]
	pub r_fonts: CTFonts,
	#[serde(rename = "b")]
	pub b: CTOnOff,
	#[serde(rename = "bCs")]
	pub b_cs: CTOnOff,
	#[serde(rename = "i")]
	pub i: CTOnOff,
	#[serde(rename = "iCs")]
	pub i_cs: CTOnOff,
	#[serde(rename = "caps")]
	pub caps: CTOnOff,
	#[serde(rename = "smallCaps")]
	pub small_caps: CTOnOff,
	#[serde(rename = "strike")]
	pub strike: CTOnOff,
	#[serde(rename = "dstrike")]
	pub dstrike: CTOnOff,
	#[serde(rename = "outline")]
	pub outline: CTOnOff,
	#[serde(rename = "shadow")]
	pub shadow: CTOnOff,
	#[serde(rename = "emboss")]
	pub emboss: CTOnOff,
	#[serde(rename = "imprint")]
	pub imprint: CTOnOff,
	#[serde(rename = "noProof")]
	pub no_proof: CTOnOff,
	#[serde(rename = "snapToGrid")]
	pub snap_to_grid: CTOnOff,
	#[serde(rename = "vanish")]
	pub vanish: CTOnOff,
	#[serde(rename = "webHidden")]
	pub web_hidden: CTOnOff,
	#[serde(rename = "color")]
	pub color: CTColor,
	#[serde(rename = "spacing")]
	pub spacing: CTSignedTwipsMeasure,
	#[serde(rename = "w")]
	pub w: CTTextScale,
	#[serde(rename = "kern")]
	pub kern: CTHpsMeasure,
	#[serde(rename = "position")]
	pub position: CTSignedHpsMeasure,
	#[serde(rename = "sz")]
	pub sz: CTHpsMeasure,
	#[serde(rename = "szCs")]
	pub sz_cs: CTHpsMeasure,
	#[serde(rename = "highlight")]
	pub highlight: CTHighlight,
	#[serde(rename = "u")]
	pub u: CTUnderline,
	#[serde(rename = "effect")]
	pub effect: CTTextEffect,
	#[serde(rename = "bdr")]
	pub bdr: CTBorder,
	#[serde(rename = "shd")]
	pub shd: CTShd,
	#[serde(rename = "fitText")]
	pub fit_text: CTFitText,
	#[serde(rename = "vertAlign")]
	pub vert_align: CTVerticalAlignRun,
	#[serde(rename = "rtl")]
	pub rtl: CTOnOff,
	#[serde(rename = "cs")]
	pub cs: CTOnOff,
	#[serde(rename = "em")]
	pub em: CTEm,
	#[serde(rename = "lang")]
	pub lang: CTLanguage,
	#[serde(rename = "eastAsianLayout")]
	pub east_asian_layout: CTEastAsianLayout,
	#[serde(rename = "specVanish")]
	pub spec_vanish: CTOnOff,
	#[serde(rename = "oMath")]
	pub o_math: CTOnOff,
}


// EGRPrContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRPrContent {
	#[serde(rename = "rPrChange")]
	pub r_pr_change: CTRPrChange,
	#[serde(rename = "EG_RPrBase")]
	pub eg_r_pr_base: EGRPrBase,
}


// CTRPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRPr {
	#[serde(rename = "EG_RPrContent")]
	pub eg_r_pr_content: EGRPrContent,
}


// EGRPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRPr {
	#[serde(rename = "rPr")]
	pub r_pr: CTRPr,
}


// EGRPrMath ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRPrMath {
	#[serde(rename = "ins")]
	pub ins: CTMathCtrlIns,
	#[serde(rename = "del")]
	pub del: CTMathCtrlDel,
	#[serde(rename = "EG_RPr")]
	pub eg_r_pr: EGRPr,
}


// CTMathCtrlIns ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMathCtrlIns {
	#[serde(rename = "del")]
	pub del: CTRPrChange,
	#[serde(rename = "rPr")]
	pub r_pr: CTRPr,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTMathCtrlDel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMathCtrlDel {
	#[serde(rename = "rPr")]
	pub r_pr: CTRPr,
	#[serde(flatten)]
	pub ct_track_change: CTTrackChange,
}


// CTRPrOriginal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRPrOriginal {
	#[serde(rename = "EG_RPrBase")]
	pub eg_r_pr_base: Vec<EGRPrBase>,
}


// CTParaRPrOriginal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParaRPrOriginal {
	#[serde(rename = "EG_ParaRPrTrackChanges")]
	pub eg_para_r_pr_track_changes: EGParaRPrTrackChanges,
	#[serde(rename = "EG_RPrBase")]
	pub eg_r_pr_base: Vec<EGRPrBase>,
}


// CTParaRPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParaRPr {
	#[serde(rename = "EG_ParaRPrTrackChanges")]
	pub eg_para_r_pr_track_changes: EGParaRPrTrackChanges,
	#[serde(rename = "EG_RPrBase")]
	pub eg_r_pr_base: Vec<EGRPrBase>,
	#[serde(rename = "rPrChange")]
	pub r_pr_change: Option<CTParaRPrChange>,
}


// EGParaRPrTrackChanges ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGParaRPrTrackChanges {
	#[serde(rename = "ins")]
	pub ins: CTTrackChange,
	#[serde(rename = "del")]
	pub del: CTTrackChange,
	#[serde(rename = "moveFrom")]
	pub move_from: CTTrackChange,
	#[serde(rename = "moveTo")]
	pub move_to: CTTrackChange,
}


// CTAltChunk ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAltChunk {
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "altChunkPr")]
	pub alt_chunk_pr: Option<CTAltChunkPr>,
}


// CTAltChunkPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAltChunkPr {
	#[serde(rename = "matchSrc")]
	pub match_src: Option<CTOnOff>,
}


// STRubyAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRubyAlign {
	#[serde(rename = "ST_RubyAlign")]
	pub st_ruby_align: String,
}


// CTRubyAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRubyAlign {
	#[serde(rename = "val")]
	pub val: String,
}


// CTRubyPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRubyPr {
	#[serde(rename = "rubyAlign")]
	pub ruby_align: CTRubyAlign,
	#[serde(rename = "hps")]
	pub hps: CTHpsMeasure,
	#[serde(rename = "hpsRaise")]
	pub hps_raise: CTHpsMeasure,
	#[serde(rename = "hpsBaseText")]
	pub hps_base_text: CTHpsMeasure,
	#[serde(rename = "lid")]
	pub lid: CTLang,
	#[serde(rename = "dirty")]
	pub dirty: Option<CTOnOff>,
}


// EGRubyContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRubyContent {
	#[serde(rename = "r")]
	pub r: CTR,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// CTRubyContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRubyContent {
	#[serde(rename = "EG_RubyContent")]
	pub eg_ruby_content: Vec<EGRubyContent>,
}


// CTRuby ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRuby {
	#[serde(rename = "rubyPr")]
	pub ruby_pr: CTRubyPr,
	#[serde(rename = "rt")]
	pub rt: CTRubyContent,
	#[serde(rename = "rubyBase")]
	pub ruby_base: CTRubyContent,
}


// STLock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLock {
	#[serde(rename = "ST_Lock")]
	pub st_lock: String,
}


// CTLock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLock {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTSdtListItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtListItem {
	#[serde(rename = "displayText")]
	pub display_text: Option<String>,
	#[serde(rename = "value")]
	pub value: Option<String>,
}


// STSdtDateMappingType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSdtDateMappingType {
	#[serde(rename = "ST_SdtDateMappingType")]
	pub st_sdt_date_mapping_type: String,
}


// CTSdtDateMappingType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtDateMappingType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTCalendarType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalendarType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTSdtDate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtDate {
	#[serde(rename = "fullDate")]
	pub full_date: Option<u8>,
	#[serde(rename = "dateFormat")]
	pub date_format: Option<CTString>,
	#[serde(rename = "lid")]
	pub lid: Option<CTLang>,
	#[serde(rename = "storeMappedDataAs")]
	pub store_mapped_data_as: Option<CTSdtDateMappingType>,
	#[serde(rename = "calendar")]
	pub calendar: Option<CTCalendarType>,
}


// CTSdtComboBox ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtComboBox {
	#[serde(rename = "lastValue")]
	pub last_value: Option<String>,
	#[serde(rename = "listItem")]
	pub list_item: Vec<CTSdtListItem>,
}


// CTSdtDocPart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtDocPart {
	#[serde(rename = "docPartGallery")]
	pub doc_part_gallery: Option<CTString>,
	#[serde(rename = "docPartCategory")]
	pub doc_part_category: Option<CTString>,
	#[serde(rename = "docPartUnique")]
	pub doc_part_unique: Option<CTOnOff>,
}


// CTSdtDropDownList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtDropDownList {
	#[serde(rename = "lastValue")]
	pub last_value: Option<String>,
	#[serde(rename = "listItem")]
	pub list_item: Vec<CTSdtListItem>,
}


// CTPlaceholder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPlaceholder {
	#[serde(rename = "docPart")]
	pub doc_part: CTString,
}


// CTSdtText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtText {
	#[serde(rename = "multiLine")]
	pub multi_line: Option<STOnOff>,
}


// CTDataBinding ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataBinding {
	#[serde(rename = "prefixMappings")]
	pub prefix_mappings: Option<String>,
	#[serde(rename = "xpath")]
	pub xpath: String,
	#[serde(rename = "storeItemID")]
	pub store_item_id: String,
}


// CTSdtPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtPr {
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTRPr>,
	#[serde(rename = "alias")]
	pub alias: Option<CTString>,
	#[serde(rename = "tag")]
	pub tag: Option<CTString>,
	#[serde(rename = "id")]
	pub id: Option<CTDecimalNumber>,
	#[serde(rename = "lock")]
	pub lock: Option<CTLock>,
	#[serde(rename = "placeholder")]
	pub placeholder: Option<CTPlaceholder>,
	#[serde(rename = "temporary")]
	pub temporary: Option<CTOnOff>,
	#[serde(rename = "showingPlcHdr")]
	pub showing_plc_hdr: Option<CTOnOff>,
	#[serde(rename = "dataBinding")]
	pub data_binding: Option<CTDataBinding>,
	#[serde(rename = "label")]
	pub label: Option<CTDecimalNumber>,
	#[serde(rename = "tabIndex")]
	pub tab_index: Option<CTUnsignedDecimalNumber>,
	#[serde(rename = "equation")]
	pub equation: CTEmpty,
	#[serde(rename = "comboBox")]
	pub combo_box: CTSdtComboBox,
	#[serde(rename = "date")]
	pub date: CTSdtDate,
	#[serde(rename = "docPartObj")]
	pub doc_part_obj: CTSdtDocPart,
	#[serde(rename = "docPartList")]
	pub doc_part_list: CTSdtDocPart,
	#[serde(rename = "dropDownList")]
	pub drop_down_list: CTSdtDropDownList,
	#[serde(rename = "picture")]
	pub picture: CTEmpty,
	#[serde(rename = "richText")]
	pub rich_text: CTEmpty,
	#[serde(rename = "text")]
	pub text: CTSdtText,
	#[serde(rename = "citation")]
	pub citation: CTEmpty,
	#[serde(rename = "group")]
	pub group: CTEmpty,
	#[serde(rename = "bibliography")]
	pub bibliography: CTEmpty,
}


// CTSdtEndPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtEndPr {
	#[serde(rename = "rPr")]
	pub r_pr: Vec<CTRPr>,
}


// EGContentRunContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGContentRunContent {
	#[serde(rename = "customXml")]
	pub custom_xml: CTCustomXmlRun,
	#[serde(rename = "smartTag")]
	pub smart_tag: CTSmartTagRun,
	#[serde(rename = "sdt")]
	pub sdt: CTSdtRun,
	#[serde(rename = "dir")]
	pub dir: CTDirContentRun,
	#[serde(rename = "bdo")]
	pub bdo: CTBdoContentRun,
	#[serde(rename = "r")]
	pub r: CTR,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// CTDirContentRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDirContentRun {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
}


// CTBdoContentRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBdoContentRun {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
}


// STDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDirection {
	#[serde(rename = "ST_Direction")]
	pub st_direction: String,
}


// CTSdtContentRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtContentRun {
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
}


// EGContentBlockContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGContentBlockContent {
	#[serde(rename = "customXml")]
	pub custom_xml: CTCustomXmlBlock,
	#[serde(rename = "sdt")]
	pub sdt: CTSdtBlock,
	#[serde(rename = "p")]
	pub p: CTP,
	#[serde(rename = "tbl")]
	pub tbl: CTTbl,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// CTSdtContentBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtContentBlock {
	#[serde(rename = "EG_ContentBlockContent")]
	pub eg_content_block_content: Vec<EGContentBlockContent>,
}


// EGContentRowContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGContentRowContent {
	#[serde(rename = "tr")]
	pub tr: CTRow,
	#[serde(rename = "customXml")]
	pub custom_xml: CTCustomXmlRow,
	#[serde(rename = "sdt")]
	pub sdt: CTSdtRow,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// CTSdtContentRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtContentRow {
	#[serde(rename = "EG_ContentRowContent")]
	pub eg_content_row_content: Vec<EGContentRowContent>,
}


// EGContentCellContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGContentCellContent {
	#[serde(rename = "tc")]
	pub tc: CTTc,
	#[serde(rename = "customXml")]
	pub custom_xml: CTCustomXmlCell,
	#[serde(rename = "sdt")]
	pub sdt: CTSdtCell,
	#[serde(rename = "EG_RunLevelElts")]
	pub eg_run_level_elts: EGRunLevelElts,
}


// CTSdtContentCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtContentCell {
	#[serde(rename = "EG_ContentCellContent")]
	pub eg_content_cell_content: Vec<EGContentCellContent>,
}


// CTSdtBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtBlock {
	#[serde(rename = "sdtPr")]
	pub sdt_pr: Option<CTSdtPr>,
	#[serde(rename = "sdtEndPr")]
	pub sdt_end_pr: Option<CTSdtEndPr>,
	#[serde(rename = "sdtContent")]
	pub sdt_content: Option<CTSdtContentBlock>,
}


// CTSdtRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtRun {
	#[serde(rename = "sdtPr")]
	pub sdt_pr: Option<CTSdtPr>,
	#[serde(rename = "sdtEndPr")]
	pub sdt_end_pr: Option<CTSdtEndPr>,
	#[serde(rename = "sdtContent")]
	pub sdt_content: Option<CTSdtContentRun>,
}


// CTSdtCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtCell {
	#[serde(rename = "sdtPr")]
	pub sdt_pr: Option<CTSdtPr>,
	#[serde(rename = "sdtEndPr")]
	pub sdt_end_pr: Option<CTSdtEndPr>,
	#[serde(rename = "sdtContent")]
	pub sdt_content: Option<CTSdtContentCell>,
}


// CTSdtRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSdtRow {
	#[serde(rename = "sdtPr")]
	pub sdt_pr: Option<CTSdtPr>,
	#[serde(rename = "sdtEndPr")]
	pub sdt_end_pr: Option<CTSdtEndPr>,
	#[serde(rename = "sdtContent")]
	pub sdt_content: Option<CTSdtContentRow>,
}


// CTAttr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAttr {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "val")]
	pub val: String,
}


// CTCustomXmlRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomXmlRun {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "element")]
	pub element: String,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
	#[serde(rename = "customXmlPr")]
	pub custom_xml_pr: Option<CTCustomXmlPr>,
}


// CTSmartTagRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagRun {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "element")]
	pub element: String,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
	#[serde(rename = "smartTagPr")]
	pub smart_tag_pr: Option<CTSmartTagPr>,
}


// CTCustomXmlBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomXmlBlock {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "element")]
	pub element: String,
	#[serde(rename = "EG_ContentBlockContent")]
	pub eg_content_block_content: Vec<EGContentBlockContent>,
	#[serde(rename = "customXmlPr")]
	pub custom_xml_pr: Option<CTCustomXmlPr>,
}


// CTCustomXmlPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomXmlPr {
	#[serde(rename = "placeholder")]
	pub placeholder: Option<CTString>,
	#[serde(rename = "attr")]
	pub attr: Vec<CTAttr>,
}


// CTCustomXmlRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomXmlRow {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "element")]
	pub element: String,
	#[serde(rename = "EG_ContentRowContent")]
	pub eg_content_row_content: Vec<EGContentRowContent>,
	#[serde(rename = "customXmlPr")]
	pub custom_xml_pr: Option<CTCustomXmlPr>,
}


// CTCustomXmlCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomXmlCell {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "element")]
	pub element: String,
	#[serde(rename = "EG_ContentCellContent")]
	pub eg_content_cell_content: Vec<EGContentCellContent>,
	#[serde(rename = "customXmlPr")]
	pub custom_xml_pr: Option<CTCustomXmlPr>,
}


// CTSmartTagPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagPr {
	#[serde(rename = "attr")]
	pub attr: Vec<CTAttr>,
}


// EGPContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGPContent {
	#[serde(rename = "fldSimple")]
	pub fld_simple: CTSimpleField,
	#[serde(rename = "hyperlink")]
	pub hyperlink: CTHyperlink,
	#[serde(rename = "subDoc")]
	pub sub_doc: CTRel,
	#[serde(rename = "EG_ContentRunContent")]
	pub eg_content_run_content: EGContentRunContent,
}


// CTP ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTP {
	#[serde(rename = "rsidRPr")]
	pub rsid_r_pr: Option<String>,
	#[serde(rename = "rsidR")]
	pub rsid_r: Option<String>,
	#[serde(rename = "rsidDel")]
	pub rsid_del: Option<String>,
	#[serde(rename = "rsidP")]
	pub rsid_p: Option<String>,
	#[serde(rename = "rsidRDefault")]
	pub rsid_r_default: Option<String>,
	#[serde(rename = "EG_PContent")]
	pub eg_p_content: Vec<EGPContent>,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTPPr>,
}


// STTblWidth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTblWidth {
	#[serde(rename = "ST_TblWidth")]
	pub st_tbl_width: String,
}


// CTHeight ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeight {
	#[serde(rename = "val")]
	pub val: Option<STTwipsMeasure>,
	#[serde(rename = "hRule")]
	pub h_rule: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMeasurementOrPercent {
	#[serde(rename = "ST_MeasurementOrPercent")]
	pub st_decimal_number_or_percent: STDecimalNumberOrPercent,
	#[serde(rename = "ST_MeasurementOrPercent")]
	pub st_universal_measure: String,
}


// CTTblWidth ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblWidth {
	#[serde(rename = "w")]
	pub w: Option<STMeasurementOrPercent>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
}


// CTTblGridCol ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblGridCol {
	#[serde(rename = "w")]
	pub w: Option<STTwipsMeasure>,
}


// CTTblGridBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblGridBase {
	#[serde(rename = "gridCol")]
	pub grid_col: Vec<CTTblGridCol>,
}


// CTTblGrid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblGrid {
	#[serde(rename = "tblGridChange")]
	pub tbl_grid_change: Option<CTTblGridChange>,
	#[serde(flatten)]
	pub ct_tbl_grid_base: CTTblGridBase,
}


// CTTcBorders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcBorders {
	#[serde(rename = "top")]
	pub top: Option<CTBorder>,
	#[serde(rename = "start")]
	pub start: Option<CTBorder>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTBorder>,
	#[serde(rename = "end")]
	pub end: Option<CTBorder>,
	#[serde(rename = "insideH")]
	pub inside_h: Option<CTBorder>,
	#[serde(rename = "insideV")]
	pub inside_v: Option<CTBorder>,
	#[serde(rename = "tl2br")]
	pub tl2br: Option<CTBorder>,
	#[serde(rename = "tr2bl")]
	pub tr2bl: Option<CTBorder>,
}


// CTTcMar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcMar {
	#[serde(rename = "top")]
	pub top: Option<CTTblWidth>,
	#[serde(rename = "start")]
	pub start: Option<CTTblWidth>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTTblWidth>,
	#[serde(rename = "end")]
	pub end: Option<CTTblWidth>,
}


// STMerge ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMerge {
	#[serde(rename = "ST_Merge")]
	pub st_merge: String,
}


// CTVMerge ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVMerge {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTTcPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcPrBase {
	#[serde(rename = "cnfStyle")]
	pub cnf_style: Option<CTCnf>,
	#[serde(rename = "tcW")]
	pub tc_w: Option<CTTblWidth>,
	#[serde(rename = "gridSpan")]
	pub grid_span: Option<CTDecimalNumber>,
	#[serde(rename = "vMerge")]
	pub v_merge: Option<CTVMerge>,
	#[serde(rename = "tcBorders")]
	pub tc_borders: Option<CTTcBorders>,
	#[serde(rename = "shd")]
	pub shd: Option<CTShd>,
	#[serde(rename = "noWrap")]
	pub no_wrap: Option<CTOnOff>,
	#[serde(rename = "tcMar")]
	pub tc_mar: Option<CTTcMar>,
	#[serde(rename = "textDirection")]
	pub text_direction: Option<CTTextDirection>,
	#[serde(rename = "tcFitText")]
	pub tc_fit_text: Option<CTOnOff>,
	#[serde(rename = "vAlign")]
	pub v_align: Option<CTVerticalJc>,
	#[serde(rename = "hideMark")]
	pub hide_mark: Option<CTOnOff>,
	#[serde(rename = "headers")]
	pub headers: Option<CTHeaders>,
}


// CTTcPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcPr {
	#[serde(rename = "tcPrChange")]
	pub tc_pr_change: Option<CTTcPrChange>,
	#[serde(flatten)]
	pub ct_tc_pr_inner: CTTcPrInner,
}


// CTTcPrInner ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTcPrInner {
	#[serde(rename = "EG_CellMarkupElements")]
	pub eg_cell_markup_elements: Vec<EGCellMarkupElements>,
	#[serde(flatten)]
	pub ct_tc_pr_base: CTTcPrBase,
}


// CTTc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTc {
	#[serde(rename = "id")]
	pub id: Option<String>,
	#[serde(rename = "EG_BlockLevelElts")]
	pub eg_block_level_elts: Vec<EGBlockLevelElts>,
	#[serde(rename = "tcPr")]
	pub tc_pr: Option<CTTcPr>,
}


// CTCnf ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCnf {
	#[serde(rename = "firstRow")]
	pub first_row: Option<STOnOff>,
	#[serde(rename = "lastRow")]
	pub last_row: Option<STOnOff>,
	#[serde(rename = "firstColumn")]
	pub first_column: Option<STOnOff>,
	#[serde(rename = "lastColumn")]
	pub last_column: Option<STOnOff>,
	#[serde(rename = "oddVBand")]
	pub odd_v_band: Option<STOnOff>,
	#[serde(rename = "evenVBand")]
	pub even_v_band: Option<STOnOff>,
	#[serde(rename = "oddHBand")]
	pub odd_h_band: Option<STOnOff>,
	#[serde(rename = "evenHBand")]
	pub even_h_band: Option<STOnOff>,
	#[serde(rename = "firstRowFirstColumn")]
	pub first_row_first_column: Option<STOnOff>,
	#[serde(rename = "firstRowLastColumn")]
	pub first_row_last_column: Option<STOnOff>,
	#[serde(rename = "lastRowFirstColumn")]
	pub last_row_first_column: Option<STOnOff>,
	#[serde(rename = "lastRowLastColumn")]
	pub last_row_last_column: Option<STOnOff>,
}


// CTHeaders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeaders {
	#[serde(rename = "header")]
	pub header: Vec<CTString>,
}


// CTTrPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrPrBase {
	#[serde(rename = "cnfStyle")]
	pub cnf_style: Vec<CTCnf>,
	#[serde(rename = "divId")]
	pub div_id: Vec<CTDecimalNumber>,
	#[serde(rename = "gridBefore")]
	pub grid_before: Vec<CTDecimalNumber>,
	#[serde(rename = "gridAfter")]
	pub grid_after: Vec<CTDecimalNumber>,
	#[serde(rename = "wBefore")]
	pub w_before: Vec<CTTblWidth>,
	#[serde(rename = "wAfter")]
	pub w_after: Vec<CTTblWidth>,
	#[serde(rename = "cantSplit")]
	pub cant_split: Vec<CTOnOff>,
	#[serde(rename = "trHeight")]
	pub tr_height: Vec<CTHeight>,
	#[serde(rename = "tblHeader")]
	pub tbl_header: Vec<CTOnOff>,
	#[serde(rename = "tblCellSpacing")]
	pub tbl_cell_spacing: Vec<CTTblWidth>,
	#[serde(rename = "jc")]
	pub jc: Vec<CTJcTable>,
	#[serde(rename = "hidden")]
	pub hidden: Vec<CTOnOff>,
}


// CTTrPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrPr {
	#[serde(rename = "ins")]
	pub ins: Option<CTTrackChange>,
	#[serde(rename = "del")]
	pub del: Option<CTTrackChange>,
	#[serde(rename = "trPrChange")]
	pub tr_pr_change: Option<CTTrPrChange>,
	#[serde(flatten)]
	pub ct_tr_pr_base: CTTrPrBase,
}


// CTRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRow {
	#[serde(rename = "rsidRPr")]
	pub rsid_r_pr: Option<String>,
	#[serde(rename = "rsidR")]
	pub rsid_r: Option<String>,
	#[serde(rename = "rsidDel")]
	pub rsid_del: Option<String>,
	#[serde(rename = "rsidTr")]
	pub rsid_tr: Option<String>,
	#[serde(rename = "EG_ContentCellContent")]
	pub eg_content_cell_content: Vec<EGContentCellContent>,
	#[serde(rename = "tblPrEx")]
	pub tbl_pr_ex: Option<CTTblPrEx>,
	#[serde(rename = "trPr")]
	pub tr_pr: Option<CTTrPr>,
}


// STTblLayoutType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTblLayoutType {
	#[serde(rename = "ST_TblLayoutType")]
	pub st_tbl_layout_type: String,
}


// CTTblLayoutType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblLayoutType {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
}


// STTblOverlap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTblOverlap {
	#[serde(rename = "ST_TblOverlap")]
	pub st_tbl_overlap: String,
}


// CTTblOverlap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblOverlap {
	#[serde(rename = "val")]
	pub val: String,
}


// CTTblPPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPPr {
	#[serde(rename = "leftFromText")]
	pub left_from_text: Option<STTwipsMeasure>,
	#[serde(rename = "rightFromText")]
	pub right_from_text: Option<STTwipsMeasure>,
	#[serde(rename = "topFromText")]
	pub top_from_text: Option<STTwipsMeasure>,
	#[serde(rename = "bottomFromText")]
	pub bottom_from_text: Option<STTwipsMeasure>,
	#[serde(rename = "vertAnchor")]
	pub vert_anchor: Option<String>,
	#[serde(rename = "horzAnchor")]
	pub horz_anchor: Option<String>,
	#[serde(rename = "tblpXSpec")]
	pub tblp_x_spec: Option<String>,
	#[serde(rename = "tblpX")]
	pub tblp_x: Option<STSignedTwipsMeasure>,
	#[serde(rename = "tblpYSpec")]
	pub tblp_y_spec: Option<String>,
	#[serde(rename = "tblpY")]
	pub tblp_y: Option<STSignedTwipsMeasure>,
}


// CTTblCellMar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblCellMar {
	#[serde(rename = "top")]
	pub top: Option<CTTblWidth>,
	#[serde(rename = "start")]
	pub start: Option<CTTblWidth>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTTblWidth>,
	#[serde(rename = "end")]
	pub end: Option<CTTblWidth>,
}


// CTTblBorders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblBorders {
	#[serde(rename = "top")]
	pub top: Option<CTBorder>,
	#[serde(rename = "start")]
	pub start: Option<CTBorder>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTBorder>,
	#[serde(rename = "end")]
	pub end: Option<CTBorder>,
	#[serde(rename = "insideH")]
	pub inside_h: Option<CTBorder>,
	#[serde(rename = "insideV")]
	pub inside_v: Option<CTBorder>,
}


// CTTblPrBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPrBase {
	#[serde(rename = "tblStyle")]
	pub tbl_style: Option<CTString>,
	#[serde(rename = "tblpPr")]
	pub tblp_pr: Option<CTTblPPr>,
	#[serde(rename = "tblOverlap")]
	pub tbl_overlap: Option<CTTblOverlap>,
	#[serde(rename = "bidiVisual")]
	pub bidi_visual: Option<CTOnOff>,
	#[serde(rename = "tblStyleRowBandSize")]
	pub tbl_style_row_band_size: Option<CTDecimalNumber>,
	#[serde(rename = "tblStyleColBandSize")]
	pub tbl_style_col_band_size: Option<CTDecimalNumber>,
	#[serde(rename = "tblW")]
	pub tbl_w: Option<CTTblWidth>,
	#[serde(rename = "jc")]
	pub jc: Option<CTJcTable>,
	#[serde(rename = "tblCellSpacing")]
	pub tbl_cell_spacing: Option<CTTblWidth>,
	#[serde(rename = "tblInd")]
	pub tbl_ind: Option<CTTblWidth>,
	#[serde(rename = "tblBorders")]
	pub tbl_borders: Option<CTTblBorders>,
	#[serde(rename = "shd")]
	pub shd: Option<CTShd>,
	#[serde(rename = "tblLayout")]
	pub tbl_layout: Option<CTTblLayoutType>,
	#[serde(rename = "tblCellMar")]
	pub tbl_cell_mar: Option<CTTblCellMar>,
	#[serde(rename = "tblLook")]
	pub tbl_look: Option<CTTblLook>,
	#[serde(rename = "tblCaption")]
	pub tbl_caption: Option<CTString>,
	#[serde(rename = "tblDescription")]
	pub tbl_description: Option<CTString>,
}


// CTTblPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPr {
	#[serde(rename = "tblPrChange")]
	pub tbl_pr_change: Option<CTTblPrChange>,
	#[serde(flatten)]
	pub ct_tbl_pr_base: CTTblPrBase,
}


// CTTblPrExBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPrExBase {
	#[serde(rename = "tblW")]
	pub tbl_w: Option<CTTblWidth>,
	#[serde(rename = "jc")]
	pub jc: Option<CTJcTable>,
	#[serde(rename = "tblCellSpacing")]
	pub tbl_cell_spacing: Option<CTTblWidth>,
	#[serde(rename = "tblInd")]
	pub tbl_ind: Option<CTTblWidth>,
	#[serde(rename = "tblBorders")]
	pub tbl_borders: Option<CTTblBorders>,
	#[serde(rename = "shd")]
	pub shd: Option<CTShd>,
	#[serde(rename = "tblLayout")]
	pub tbl_layout: Option<CTTblLayoutType>,
	#[serde(rename = "tblCellMar")]
	pub tbl_cell_mar: Option<CTTblCellMar>,
	#[serde(rename = "tblLook")]
	pub tbl_look: Option<CTTblLook>,
}


// CTTblPrEx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblPrEx {
	#[serde(rename = "tblPrExChange")]
	pub tbl_pr_ex_change: Option<CTTblPrExChange>,
	#[serde(flatten)]
	pub ct_tbl_pr_ex_base: CTTblPrExBase,
}


// CTTbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTbl {
	#[serde(rename = "EG_RangeMarkupElements")]
	pub eg_range_markup_elements: Vec<EGRangeMarkupElements>,
	#[serde(rename = "EG_ContentRowContent")]
	pub eg_content_row_content: Vec<EGContentRowContent>,
	#[serde(rename = "tblPr")]
	pub tbl_pr: CTTblPr,
	#[serde(rename = "tblGrid")]
	pub tbl_grid: CTTblGrid,
}


// CTTblLook ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblLook {
	#[serde(rename = "firstRow")]
	pub first_row: Option<STOnOff>,
	#[serde(rename = "lastRow")]
	pub last_row: Option<STOnOff>,
	#[serde(rename = "firstColumn")]
	pub first_column: Option<STOnOff>,
	#[serde(rename = "lastColumn")]
	pub last_column: Option<STOnOff>,
	#[serde(rename = "noHBand")]
	pub no_h_band: Option<STOnOff>,
	#[serde(rename = "noVBand")]
	pub no_v_band: Option<STOnOff>,
}


// STFtnPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFtnPos {
	#[serde(rename = "ST_FtnPos")]
	pub st_ftn_pos: String,
}


// CTFtnPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnPos {
	#[serde(rename = "val")]
	pub val: String,
}


// STEdnPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STEdnPos {
	#[serde(rename = "ST_EdnPos")]
	pub st_edn_pos: String,
}


// CTEdnPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEdnPos {
	#[serde(rename = "val")]
	pub val: String,
}


// CTNumFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumFmt {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "format")]
	pub format: Option<String>,
}


// STRestartNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRestartNumber {
	#[serde(rename = "ST_RestartNumber")]
	pub st_restart_number: String,
}


// CTNumRestart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumRestart {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFtnEdnRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnEdnRef {
	#[serde(rename = "customMarkFollows")]
	pub custom_mark_follows: Option<STOnOff>,
	#[serde(rename = "id")]
	pub id: i32,
}


// CTFtnEdnSepRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnEdnSepRef {
	#[serde(rename = "id")]
	pub id: i32,
}


// CTFtnEdn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnEdn {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "id")]
	pub id: i32,
	#[serde(rename = "EG_BlockLevelElts")]
	pub eg_block_level_elts: Vec<EGBlockLevelElts>,
}


// EGFtnEdnNumProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGFtnEdnNumProps {
	#[serde(rename = "numStart")]
	pub num_start: CTDecimalNumber,
	#[serde(rename = "numRestart")]
	pub num_restart: CTNumRestart,
}


// CTFtnProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnProps {
	#[serde(rename = "EG_FtnEdnNumProps")]
	pub eg_ftn_edn_num_props: EGFtnEdnNumProps,
	#[serde(rename = "pos")]
	pub pos: Option<CTFtnPos>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Option<CTNumFmt>,
}


// CTEdnProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEdnProps {
	#[serde(rename = "EG_FtnEdnNumProps")]
	pub eg_ftn_edn_num_props: EGFtnEdnNumProps,
	#[serde(rename = "pos")]
	pub pos: Option<CTEdnPos>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Option<CTNumFmt>,
}


// CTFtnDocProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFtnDocProps {
	#[serde(rename = "footnote")]
	pub footnote: Vec<CTFtnEdnSepRef>,
	#[serde(flatten)]
	pub ct_ftn_props: CTFtnProps,
}


// CTEdnDocProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEdnDocProps {
	#[serde(rename = "endnote")]
	pub endnote: Vec<CTFtnEdnSepRef>,
	#[serde(flatten)]
	pub ct_edn_props: CTEdnProps,
}


// CTRecipientData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRecipientData {
	#[serde(rename = "active")]
	pub active: Option<CTOnOff>,
	#[serde(rename = "column")]
	pub column: CTDecimalNumber,
	#[serde(rename = "uniqueTag")]
	pub unique_tag: CTBase64Binary,
}


// CTBase64Binary ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBase64Binary {
	#[serde(rename = "val")]
	pub val: String,
}


// CTRecipients ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRecipients {
	#[serde(rename = "recipientData")]
	pub recipient_data: Vec<CTRecipientData>,
}


// recipients ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct recipients {
	#[serde(rename = "recipients")]
	pub recipients: CTRecipients,
}


// CTOdsoFieldMapData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOdsoFieldMapData {
	#[serde(rename = "type")]
	pub type_attr: Option<CTMailMergeOdsoFMDFieldType>,
	#[serde(rename = "name")]
	pub name: Option<CTString>,
	#[serde(rename = "mappedName")]
	pub mapped_name: Option<CTString>,
	#[serde(rename = "column")]
	pub column: Option<CTDecimalNumber>,
	#[serde(rename = "lid")]
	pub lid: Option<CTLang>,
	#[serde(rename = "dynamicAddress")]
	pub dynamic_address: Option<CTOnOff>,
}


// STMailMergeSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMailMergeSourceType {
	#[serde(rename = "ST_MailMergeSourceType")]
	pub st_mail_merge_source_type: String,
}


// CTMailMergeSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMergeSourceType {
	#[serde(rename = "val")]
	pub val: String,
}


// CTOdso ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOdso {
	#[serde(rename = "udl")]
	pub udl: Option<CTString>,
	#[serde(rename = "table")]
	pub table: Option<CTString>,
	#[serde(rename = "src")]
	pub src: Option<CTRel>,
	#[serde(rename = "colDelim")]
	pub col_delim: Option<CTDecimalNumber>,
	#[serde(rename = "type")]
	pub type_attr: Option<CTMailMergeSourceType>,
	#[serde(rename = "fHdr")]
	pub f_hdr: Option<CTOnOff>,
	#[serde(rename = "fieldMapData")]
	pub field_map_data: Vec<CTOdsoFieldMapData>,
	#[serde(rename = "recipientData")]
	pub recipient_data: Vec<CTRel>,
}


// CTMailMerge ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMailMerge {
	#[serde(rename = "mainDocumentType")]
	pub main_document_type: CTMailMergeDocType,
	#[serde(rename = "linkToQuery")]
	pub link_to_query: Option<CTOnOff>,
	#[serde(rename = "dataType")]
	pub data_type: CTMailMergeDataType,
	#[serde(rename = "connectString")]
	pub connect_string: Option<CTString>,
	#[serde(rename = "query")]
	pub query: Option<CTString>,
	#[serde(rename = "dataSource")]
	pub data_source: Option<CTRel>,
	#[serde(rename = "headerSource")]
	pub header_source: Option<CTRel>,
	#[serde(rename = "doNotSuppressBlankLines")]
	pub do_not_suppress_blank_lines: Option<CTOnOff>,
	#[serde(rename = "destination")]
	pub destination: Option<CTMailMergeDest>,
	#[serde(rename = "addressFieldName")]
	pub address_field_name: Option<CTString>,
	#[serde(rename = "mailSubject")]
	pub mail_subject: Option<CTString>,
	#[serde(rename = "mailAsAttachment")]
	pub mail_as_attachment: Option<CTOnOff>,
	#[serde(rename = "viewMergedData")]
	pub view_merged_data: Option<CTOnOff>,
	#[serde(rename = "activeRecord")]
	pub active_record: Option<CTDecimalNumber>,
	#[serde(rename = "checkErrors")]
	pub check_errors: Option<CTDecimalNumber>,
	#[serde(rename = "odso")]
	pub odso: Option<CTOdso>,
}


// STTargetScreenSz ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTargetScreenSz {
	#[serde(rename = "ST_TargetScreenSz")]
	pub st_target_screen_sz: String,
}


// CTTargetScreenSz ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTargetScreenSz {
	#[serde(rename = "val")]
	pub val: String,
}


// CTCompat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCompat {
	#[serde(rename = "spaceForUL")]
	pub space_for_ul: Option<CTOnOff>,
	#[serde(rename = "balanceSingleByteDoubleByteWidth")]
	pub balance_single_byte_double_byte_width: Option<CTOnOff>,
	#[serde(rename = "doNotLeaveBackslashAlone")]
	pub do_not_leave_backslash_alone: Option<CTOnOff>,
	#[serde(rename = "ulTrailSpace")]
	pub ul_trail_space: Option<CTOnOff>,
	#[serde(rename = "doNotExpandShiftReturn")]
	pub do_not_expand_shift_return: Option<CTOnOff>,
	#[serde(rename = "adjustLineHeightInTable")]
	pub adjust_line_height_in_table: Option<CTOnOff>,
	#[serde(rename = "applyBreakingRules")]
	pub apply_breaking_rules: Option<CTOnOff>,
	#[serde(rename = "compatSetting")]
	pub compat_setting: Vec<CTCompatSetting>,
}


// CTCompatSetting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCompatSetting {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "uri")]
	pub uri: Option<String>,
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTDocVar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocVar {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "val")]
	pub val: String,
}


// CTDocVars ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocVars {
	#[serde(rename = "docVar")]
	pub doc_var: Vec<CTDocVar>,
}


// CTDocRsids ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocRsids {
	#[serde(rename = "rsidRoot")]
	pub rsid_root: Option<CTLongHexNumber>,
	#[serde(rename = "rsid")]
	pub rsid: Vec<CTLongHexNumber>,
}


// STCharacterSpacing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCharacterSpacing {
	#[serde(rename = "ST_CharacterSpacing")]
	pub st_character_spacing: String,
}


// CTCharacterSpacing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCharacterSpacing {
	#[serde(rename = "val")]
	pub val: String,
}


// CTSaveThroughXslt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSaveThroughXslt {
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "solutionID")]
	pub solution_id: Option<String>,
}


// CTRPrDefault ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRPrDefault {
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTRPr>,
}


// CTPPrDefault ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPPrDefault {
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTPPrGeneral>,
}


// CTDocDefaults ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocDefaults {
	#[serde(rename = "rPrDefault")]
	pub r_pr_default: Option<CTRPrDefault>,
	#[serde(rename = "pPrDefault")]
	pub p_pr_default: Option<CTPPrDefault>,
}


// STWmlColorSchemeIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STWmlColorSchemeIndex {
	#[serde(rename = "ST_WmlColorSchemeIndex")]
	pub st_wml_color_scheme_index: String,
}


// CTColorSchemeMapping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorSchemeMapping {
	#[serde(rename = "bg1")]
	pub bg1: Option<String>,
	#[serde(rename = "t1")]
	pub t1: Option<String>,
	#[serde(rename = "bg2")]
	pub bg2: Option<String>,
	#[serde(rename = "t2")]
	pub t2: Option<String>,
	#[serde(rename = "accent1")]
	pub accent1: Option<String>,
	#[serde(rename = "accent2")]
	pub accent2: Option<String>,
	#[serde(rename = "accent3")]
	pub accent3: Option<String>,
	#[serde(rename = "accent4")]
	pub accent4: Option<String>,
	#[serde(rename = "accent5")]
	pub accent5: Option<String>,
	#[serde(rename = "accent6")]
	pub accent6: Option<String>,
	#[serde(rename = "hyperlink")]
	pub hyperlink: Option<String>,
	#[serde(rename = "followedHyperlink")]
	pub followed_hyperlink: Option<String>,
}


// CTReadingModeInkLockDown ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTReadingModeInkLockDown {
	#[serde(rename = "actualPg")]
	pub actual_pg: STOnOff,
	#[serde(rename = "w")]
	pub w: u64,
	#[serde(rename = "h")]
	pub h: u64,
	#[serde(rename = "fontSz")]
	pub font_sz: STDecimalNumberOrPercent,
}


// CTWriteProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWriteProtection {
	#[serde(rename = "AG_Password")]
	pub ag_password: Vec<AGPassword>,
	#[serde(rename = "recommended")]
	pub recommended: Option<STOnOff>,
}


// CTSettings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSettings {
	#[serde(rename = "writeProtection")]
	pub write_protection: Option<CTWriteProtection>,
	#[serde(rename = "view")]
	pub view: Option<CTView>,
	#[serde(rename = "zoom")]
	pub zoom: Option<CTZoom>,
	#[serde(rename = "removePersonalInformation")]
	pub remove_personal_information: Option<CTOnOff>,
	#[serde(rename = "removeDateAndTime")]
	pub remove_date_and_time: Option<CTOnOff>,
	#[serde(rename = "doNotDisplayPageBoundaries")]
	pub do_not_display_page_boundaries: Option<CTOnOff>,
	#[serde(rename = "displayBackgroundShape")]
	pub display_background_shape: Option<CTOnOff>,
	#[serde(rename = "printPostScriptOverText")]
	pub print_post_script_over_text: Option<CTOnOff>,
	#[serde(rename = "printFractionalCharacterWidth")]
	pub print_fractional_character_width: Option<CTOnOff>,
	#[serde(rename = "printFormsData")]
	pub print_forms_data: Option<CTOnOff>,
	#[serde(rename = "embedTrueTypeFonts")]
	pub embed_true_type_fonts: Option<CTOnOff>,
	#[serde(rename = "embedSystemFonts")]
	pub embed_system_fonts: Option<CTOnOff>,
	#[serde(rename = "saveSubsetFonts")]
	pub save_subset_fonts: Option<CTOnOff>,
	#[serde(rename = "saveFormsData")]
	pub save_forms_data: Option<CTOnOff>,
	#[serde(rename = "mirrorMargins")]
	pub mirror_margins: Option<CTOnOff>,
	#[serde(rename = "alignBordersAndEdges")]
	pub align_borders_and_edges: Option<CTOnOff>,
	#[serde(rename = "bordersDoNotSurroundHeader")]
	pub borders_do_not_surround_header: Option<CTOnOff>,
	#[serde(rename = "bordersDoNotSurroundFooter")]
	pub borders_do_not_surround_footer: Option<CTOnOff>,
	#[serde(rename = "gutterAtTop")]
	pub gutter_at_top: Option<CTOnOff>,
	#[serde(rename = "hideSpellingErrors")]
	pub hide_spelling_errors: Option<CTOnOff>,
	#[serde(rename = "hideGrammaticalErrors")]
	pub hide_grammatical_errors: Option<CTOnOff>,
	#[serde(rename = "activeWritingStyle")]
	pub active_writing_style: Vec<CTWritingStyle>,
	#[serde(rename = "proofState")]
	pub proof_state: Option<CTProof>,
	#[serde(rename = "formsDesign")]
	pub forms_design: Option<CTOnOff>,
	#[serde(rename = "attachedTemplate")]
	pub attached_template: Option<CTRel>,
	#[serde(rename = "linkStyles")]
	pub link_styles: Option<CTOnOff>,
	#[serde(rename = "stylePaneFormatFilter")]
	pub style_pane_format_filter: Option<CTStylePaneFilter>,
	#[serde(rename = "stylePaneSortMethod")]
	pub style_pane_sort_method: Option<CTStyleSort>,
	#[serde(rename = "documentType")]
	pub document_type: Option<CTDocType>,
	#[serde(rename = "mailMerge")]
	pub mail_merge: Option<CTMailMerge>,
	#[serde(rename = "revisionView")]
	pub revision_view: Option<CTTrackChangesView>,
	#[serde(rename = "trackRevisions")]
	pub track_revisions: Option<CTOnOff>,
	#[serde(rename = "doNotTrackMoves")]
	pub do_not_track_moves: Option<CTOnOff>,
	#[serde(rename = "doNotTrackFormatting")]
	pub do_not_track_formatting: Option<CTOnOff>,
	#[serde(rename = "documentProtection")]
	pub document_protection: Option<CTDocProtect>,
	#[serde(rename = "autoFormatOverride")]
	pub auto_format_override: Option<CTOnOff>,
	#[serde(rename = "styleLockTheme")]
	pub style_lock_theme: Option<CTOnOff>,
	#[serde(rename = "styleLockQFSet")]
	pub style_lock_qf_set: Option<CTOnOff>,
	#[serde(rename = "defaultTabStop")]
	pub default_tab_stop: Option<CTTwipsMeasure>,
	#[serde(rename = "autoHyphenation")]
	pub auto_hyphenation: Option<CTOnOff>,
	#[serde(rename = "consecutiveHyphenLimit")]
	pub consecutive_hyphen_limit: Option<CTDecimalNumber>,
	#[serde(rename = "hyphenationZone")]
	pub hyphenation_zone: Option<CTTwipsMeasure>,
	#[serde(rename = "doNotHyphenateCaps")]
	pub do_not_hyphenate_caps: Option<CTOnOff>,
	#[serde(rename = "showEnvelope")]
	pub show_envelope: Option<CTOnOff>,
	#[serde(rename = "summaryLength")]
	pub summary_length: Option<CTDecimalNumberOrPrecent>,
	#[serde(rename = "clickAndTypeStyle")]
	pub click_and_type_style: Option<CTString>,
	#[serde(rename = "defaultTableStyle")]
	pub default_table_style: Option<CTString>,
	#[serde(rename = "evenAndOddHeaders")]
	pub even_and_odd_headers: Option<CTOnOff>,
	#[serde(rename = "bookFoldRevPrinting")]
	pub book_fold_rev_printing: Option<CTOnOff>,
	#[serde(rename = "bookFoldPrinting")]
	pub book_fold_printing: Option<CTOnOff>,
	#[serde(rename = "bookFoldPrintingSheets")]
	pub book_fold_printing_sheets: Option<CTDecimalNumber>,
	#[serde(rename = "drawingGridHorizontalSpacing")]
	pub drawing_grid_horizontal_spacing: Option<CTTwipsMeasure>,
	#[serde(rename = "drawingGridVerticalSpacing")]
	pub drawing_grid_vertical_spacing: Option<CTTwipsMeasure>,
	#[serde(rename = "displayHorizontalDrawingGridEvery")]
	pub display_horizontal_drawing_grid_every: Option<CTDecimalNumber>,
	#[serde(rename = "displayVerticalDrawingGridEvery")]
	pub display_vertical_drawing_grid_every: Option<CTDecimalNumber>,
	#[serde(rename = "doNotUseMarginsForDrawingGridOrigin")]
	pub do_not_use_margins_for_drawing_grid_origin: Option<CTOnOff>,
	#[serde(rename = "drawingGridHorizontalOrigin")]
	pub drawing_grid_horizontal_origin: Option<CTTwipsMeasure>,
	#[serde(rename = "drawingGridVerticalOrigin")]
	pub drawing_grid_vertical_origin: Option<CTTwipsMeasure>,
	#[serde(rename = "doNotShadeFormData")]
	pub do_not_shade_form_data: Option<CTOnOff>,
	#[serde(rename = "noPunctuationKerning")]
	pub no_punctuation_kerning: Option<CTOnOff>,
	#[serde(rename = "characterSpacingControl")]
	pub character_spacing_control: Option<CTCharacterSpacing>,
	#[serde(rename = "printTwoOnOne")]
	pub print_two_on_one: Option<CTOnOff>,
	#[serde(rename = "strictFirstAndLastChars")]
	pub strict_first_and_last_chars: Option<CTOnOff>,
	#[serde(rename = "noLineBreaksAfter")]
	pub no_line_breaks_after: Option<CTKinsoku>,
	#[serde(rename = "noLineBreaksBefore")]
	pub no_line_breaks_before: Option<CTKinsoku>,
	#[serde(rename = "savePreviewPicture")]
	pub save_preview_picture: Option<CTOnOff>,
	#[serde(rename = "doNotValidateAgainstSchema")]
	pub do_not_validate_against_schema: Option<CTOnOff>,
	#[serde(rename = "saveInvalidXml")]
	pub save_invalid_xml: Option<CTOnOff>,
	#[serde(rename = "ignoreMixedContent")]
	pub ignore_mixed_content: Option<CTOnOff>,
	#[serde(rename = "alwaysShowPlaceholderText")]
	pub always_show_placeholder_text: Option<CTOnOff>,
	#[serde(rename = "doNotDemarcateInvalidXml")]
	pub do_not_demarcate_invalid_xml: Option<CTOnOff>,
	#[serde(rename = "saveXmlDataOnly")]
	pub save_xml_data_only: Option<CTOnOff>,
	#[serde(rename = "useXSLTWhenSaving")]
	pub use_xslt_when_saving: Option<CTOnOff>,
	#[serde(rename = "saveThroughXslt")]
	pub save_through_xslt: Option<CTSaveThroughXslt>,
	#[serde(rename = "showXMLTags")]
	pub show_xml_tags: Option<CTOnOff>,
	#[serde(rename = "alwaysMergeEmptyNamespace")]
	pub always_merge_empty_namespace: Option<CTOnOff>,
	#[serde(rename = "updateFields")]
	pub update_fields: Option<CTOnOff>,
	#[serde(rename = "footnotePr")]
	pub footnote_pr: Option<CTFtnDocProps>,
	#[serde(rename = "endnotePr")]
	pub endnote_pr: Option<CTEdnDocProps>,
	#[serde(rename = "compat")]
	pub compat: Option<CTCompat>,
	#[serde(rename = "docVars")]
	pub doc_vars: Option<CTDocVars>,
	#[serde(rename = "rsids")]
	pub rsids: Option<CTDocRsids>,
	#[serde(rename = "m:mathPr")]
	pub m_math_pr: Option<CTMathPr>,
	#[serde(rename = "attachedSchema")]
	pub attached_schema: Vec<CTString>,
	#[serde(rename = "themeFontLang")]
	pub theme_font_lang: Option<CTLanguage>,
	#[serde(rename = "clrSchemeMapping")]
	pub clr_scheme_mapping: Option<CTColorSchemeMapping>,
	#[serde(rename = "doNotIncludeSubdocsInStats")]
	pub do_not_include_subdocs_in_stats: Option<CTOnOff>,
	#[serde(rename = "doNotAutoCompressPictures")]
	pub do_not_auto_compress_pictures: Option<CTOnOff>,
	#[serde(rename = "forceUpgrade")]
	pub force_upgrade: Option<CTEmpty>,
	#[serde(rename = "captions")]
	pub captions: Option<CTCaptions>,
	#[serde(rename = "readModeInkLockDown")]
	pub read_mode_ink_lock_down: Option<CTReadingModeInkLockDown>,
	#[serde(rename = "smartTagType")]
	pub smart_tag_type: Vec<CTSmartTagType>,
	#[serde(rename = "sl:schemaLibrary")]
	pub sl_schema_library: Option<CTSchemaLibrary>,
	#[serde(rename = "doNotEmbedSmartTags")]
	pub do_not_embed_smart_tags: Option<CTOnOff>,
	#[serde(rename = "decimalSymbol")]
	pub decimal_symbol: Option<CTString>,
	#[serde(rename = "listSeparator")]
	pub list_separator: Option<CTString>,
}


// CTStyleSort ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyleSort {
	#[serde(rename = "val")]
	pub val: String,
}


// CTStylePaneFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStylePaneFilter {
	#[serde(rename = "allStyles")]
	pub all_styles: Option<STOnOff>,
	#[serde(rename = "customStyles")]
	pub custom_styles: Option<STOnOff>,
	#[serde(rename = "latentStyles")]
	pub latent_styles: Option<STOnOff>,
	#[serde(rename = "stylesInUse")]
	pub styles_in_use: Option<STOnOff>,
	#[serde(rename = "headingStyles")]
	pub heading_styles: Option<STOnOff>,
	#[serde(rename = "numberingStyles")]
	pub numbering_styles: Option<STOnOff>,
	#[serde(rename = "tableStyles")]
	pub table_styles: Option<STOnOff>,
	#[serde(rename = "directFormattingOnRuns")]
	pub direct_formatting_on_runs: Option<STOnOff>,
	#[serde(rename = "directFormattingOnParagraphs")]
	pub direct_formatting_on_paragraphs: Option<STOnOff>,
	#[serde(rename = "directFormattingOnNumbering")]
	pub direct_formatting_on_numbering: Option<STOnOff>,
	#[serde(rename = "directFormattingOnTables")]
	pub direct_formatting_on_tables: Option<STOnOff>,
	#[serde(rename = "clearFormatting")]
	pub clear_formatting: Option<STOnOff>,
	#[serde(rename = "top3HeadingStyles")]
	pub top3_heading_styles: Option<STOnOff>,
	#[serde(rename = "visibleStyles")]
	pub visible_styles: Option<STOnOff>,
	#[serde(rename = "alternateStyleNames")]
	pub alternate_style_names: Option<STOnOff>,
}


// STStyleSort ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STStyleSort {
	#[serde(rename = "ST_StyleSort")]
	pub st_style_sort: String,
}


// CTWebSettings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebSettings {
	#[serde(rename = "frameset")]
	pub frameset: Option<CTFrameset>,
	#[serde(rename = "divs")]
	pub divs: Option<CTDivs>,
	#[serde(rename = "encoding")]
	pub encoding: Option<CTString>,
	#[serde(rename = "optimizeForBrowser")]
	pub optimize_for_browser: Option<CTOptimizeForBrowser>,
	#[serde(rename = "allowPNG")]
	pub allow_png: Option<CTOnOff>,
	#[serde(rename = "doNotRelyOnCSS")]
	pub do_not_rely_on_css: Option<CTOnOff>,
	#[serde(rename = "doNotSaveAsSingleFile")]
	pub do_not_save_as_single_file: Option<CTOnOff>,
	#[serde(rename = "doNotOrganizeInFolder")]
	pub do_not_organize_in_folder: Option<CTOnOff>,
	#[serde(rename = "doNotUseLongFileNames")]
	pub do_not_use_long_file_names: Option<CTOnOff>,
	#[serde(rename = "pixelsPerInch")]
	pub pixels_per_inch: Option<CTDecimalNumber>,
	#[serde(rename = "targetScreenSz")]
	pub target_screen_sz: Option<CTTargetScreenSz>,
	#[serde(rename = "saveSmartTagsAsXml")]
	pub save_smart_tags_as_xml: Option<CTOnOff>,
}


// STFrameScrollbar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFrameScrollbar {
	#[serde(rename = "ST_FrameScrollbar")]
	pub st_frame_scrollbar: String,
}


// CTFrameScrollbar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFrameScrollbar {
	#[serde(rename = "val")]
	pub val: String,
}


// CTOptimizeForBrowser ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOptimizeForBrowser {
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(flatten)]
	pub ct_on_off: CTOnOff,
}


// CTFrame ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFrame {
	#[serde(rename = "sz")]
	pub sz: Option<CTString>,
	#[serde(rename = "name")]
	pub name: Option<CTString>,
	#[serde(rename = "title")]
	pub title: Option<CTString>,
	#[serde(rename = "longDesc")]
	pub long_desc: Option<CTRel>,
	#[serde(rename = "sourceFileName")]
	pub source_file_name: Option<CTRel>,
	#[serde(rename = "marW")]
	pub mar_w: Option<CTPixelsMeasure>,
	#[serde(rename = "marH")]
	pub mar_h: Option<CTPixelsMeasure>,
	#[serde(rename = "scrollbar")]
	pub scrollbar: Option<CTFrameScrollbar>,
	#[serde(rename = "noResizeAllowed")]
	pub no_resize_allowed: Option<CTOnOff>,
	#[serde(rename = "linkedToFile")]
	pub linked_to_file: Option<CTOnOff>,
}


// STFrameLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFrameLayout {
	#[serde(rename = "ST_FrameLayout")]
	pub st_frame_layout: String,
}


// CTFrameLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFrameLayout {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFramesetSplitbar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFramesetSplitbar {
	#[serde(rename = "w")]
	pub w: Option<CTTwipsMeasure>,
	#[serde(rename = "color")]
	pub color: Option<CTColor>,
	#[serde(rename = "noBorder")]
	pub no_border: Option<CTOnOff>,
	#[serde(rename = "flatBorders")]
	pub flat_borders: Option<CTOnOff>,
}


// CTFrameset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFrameset {
	#[serde(rename = "sz")]
	pub sz: Option<CTString>,
	#[serde(rename = "framesetSplitbar")]
	pub frameset_splitbar: Option<CTFramesetSplitbar>,
	#[serde(rename = "frameLayout")]
	pub frame_layout: Option<CTFrameLayout>,
	#[serde(rename = "title")]
	pub title: Option<CTString>,
	#[serde(rename = "frameset")]
	pub frameset: Vec<CTFrameset>,
	#[serde(rename = "frame")]
	pub frame: Vec<CTFrame>,
}


// CTNumPicBullet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumPicBullet {
	#[serde(rename = "numPicBulletId")]
	pub num_pic_bullet_id: i32,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
}


// STLevelSuffix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLevelSuffix {
	#[serde(rename = "ST_LevelSuffix")]
	pub st_level_suffix: String,
}


// CTLevelSuffix ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLevelSuffix {
	#[serde(rename = "val")]
	pub val: String,
}


// CTLevelText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLevelText {
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "null")]
	pub null: Option<STOnOff>,
}


// CTLvl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLvl {
	#[serde(rename = "ilvl")]
	pub ilvl: i32,
	#[serde(rename = "tplc")]
	pub tplc: Option<String>,
	#[serde(rename = "tentative")]
	pub tentative: Option<STOnOff>,
	#[serde(rename = "start")]
	pub start: Option<CTDecimalNumber>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Option<CTNumFmt>,
	#[serde(rename = "lvlRestart")]
	pub lvl_restart: Option<CTDecimalNumber>,
	#[serde(rename = "pStyle")]
	pub p_style: Option<CTString>,
	#[serde(rename = "isLgl")]
	pub is_lgl: Option<CTOnOff>,
	#[serde(rename = "suff")]
	pub suff: Option<CTLevelSuffix>,
	#[serde(rename = "lvlText")]
	pub lvl_text: Option<CTLevelText>,
	#[serde(rename = "lvlPicBulletId")]
	pub lvl_pic_bullet_id: Option<CTDecimalNumber>,
	#[serde(rename = "lvlJc")]
	pub lvl_jc: Option<CTJc>,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTPPrGeneral>,
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTRPr>,
}


// STMultiLevelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMultiLevelType {
	#[serde(rename = "ST_MultiLevelType")]
	pub st_multi_level_type: String,
}


// CTMultiLevelType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMultiLevelType {
	#[serde(rename = "val")]
	pub val: String,
}


// CTAbstractNum ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAbstractNum {
	#[serde(rename = "abstractNumId")]
	pub abstract_num_id: i32,
	#[serde(rename = "nsid")]
	pub nsid: Option<CTLongHexNumber>,
	#[serde(rename = "multiLevelType")]
	pub multi_level_type: Option<CTMultiLevelType>,
	#[serde(rename = "tmpl")]
	pub tmpl: Option<CTLongHexNumber>,
	#[serde(rename = "name")]
	pub name: Option<CTString>,
	#[serde(rename = "styleLink")]
	pub style_link: Option<CTString>,
	#[serde(rename = "numStyleLink")]
	pub num_style_link: Option<CTString>,
	#[serde(rename = "lvl")]
	pub lvl: Vec<CTLvl>,
}


// CTNumLvl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumLvl {
	#[serde(rename = "ilvl")]
	pub ilvl: i32,
	#[serde(rename = "startOverride")]
	pub start_override: Option<CTDecimalNumber>,
	#[serde(rename = "lvl")]
	pub lvl: Option<CTLvl>,
}


// CTNum ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNum {
	#[serde(rename = "numId")]
	pub num_id: i32,
	#[serde(rename = "abstractNumId")]
	pub abstract_num_id: CTDecimalNumber,
	#[serde(rename = "lvlOverride")]
	pub lvl_override: Vec<CTNumLvl>,
}


// CTNumbering ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumbering {
	#[serde(rename = "numPicBullet")]
	pub num_pic_bullet: Vec<CTNumPicBullet>,
	#[serde(rename = "abstractNum")]
	pub abstract_num: Vec<CTAbstractNum>,
	#[serde(rename = "num")]
	pub num: Vec<CTNum>,
	#[serde(rename = "numIdMacAtCleanup")]
	pub num_id_mac_at_cleanup: Option<CTDecimalNumber>,
}


// STTblStyleOverrideType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTblStyleOverrideType {
	#[serde(rename = "ST_TblStyleOverrideType")]
	pub st_tbl_style_override_type: String,
}


// CTTblStylePr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTblStylePr {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTPPrGeneral>,
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTRPr>,
	#[serde(rename = "tblPr")]
	pub tbl_pr: Option<CTTblPrBase>,
	#[serde(rename = "trPr")]
	pub tr_pr: Option<CTTrPr>,
	#[serde(rename = "tcPr")]
	pub tc_pr: Option<CTTcPr>,
}


// STStyleType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STStyleType {
	#[serde(rename = "ST_StyleType")]
	pub st_style_type: String,
}


// CTStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyle {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "styleId")]
	pub style_id: Option<String>,
	#[serde(rename = "default")]
	pub default: Option<STOnOff>,
	#[serde(rename = "customStyle")]
	pub custom_style: Option<STOnOff>,
	#[serde(rename = "name")]
	pub name: Option<CTString>,
	#[serde(rename = "aliases")]
	pub aliases: Option<CTString>,
	#[serde(rename = "basedOn")]
	pub based_on: Option<CTString>,
	#[serde(rename = "next")]
	pub next: Option<CTString>,
	#[serde(rename = "link")]
	pub link: Option<CTString>,
	#[serde(rename = "autoRedefine")]
	pub auto_redefine: Option<CTOnOff>,
	#[serde(rename = "hidden")]
	pub hidden: Option<CTOnOff>,
	#[serde(rename = "uiPriority")]
	pub ui_priority: Option<CTDecimalNumber>,
	#[serde(rename = "semiHidden")]
	pub semi_hidden: Option<CTOnOff>,
	#[serde(rename = "unhideWhenUsed")]
	pub unhide_when_used: Option<CTOnOff>,
	#[serde(rename = "qFormat")]
	pub q_format: Option<CTOnOff>,
	#[serde(rename = "locked")]
	pub locked: Option<CTOnOff>,
	#[serde(rename = "personal")]
	pub personal: Option<CTOnOff>,
	#[serde(rename = "personalCompose")]
	pub personal_compose: Option<CTOnOff>,
	#[serde(rename = "personalReply")]
	pub personal_reply: Option<CTOnOff>,
	#[serde(rename = "rsid")]
	pub rsid: Option<CTLongHexNumber>,
	#[serde(rename = "pPr")]
	pub p_pr: Option<CTPPrGeneral>,
	#[serde(rename = "rPr")]
	pub r_pr: Option<CTRPr>,
	#[serde(rename = "tblPr")]
	pub tbl_pr: Option<CTTblPrBase>,
	#[serde(rename = "trPr")]
	pub tr_pr: Option<CTTrPr>,
	#[serde(rename = "tcPr")]
	pub tc_pr: Option<CTTcPr>,
	#[serde(rename = "tblStylePr")]
	pub tbl_style_pr: Vec<CTTblStylePr>,
}


// CTLsdException ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLsdException {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "locked")]
	pub locked: Option<STOnOff>,
	#[serde(rename = "uiPriority")]
	pub ui_priority: Option<i32>,
	#[serde(rename = "semiHidden")]
	pub semi_hidden: Option<STOnOff>,
	#[serde(rename = "unhideWhenUsed")]
	pub unhide_when_used: Option<STOnOff>,
	#[serde(rename = "qFormat")]
	pub q_format: Option<STOnOff>,
}


// CTLatentStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLatentStyles {
	#[serde(rename = "defLockedState")]
	pub def_locked_state: Option<STOnOff>,
	#[serde(rename = "defUIPriority")]
	pub def_ui_priority: Option<i32>,
	#[serde(rename = "defSemiHidden")]
	pub def_semi_hidden: Option<STOnOff>,
	#[serde(rename = "defUnhideWhenUsed")]
	pub def_unhide_when_used: Option<STOnOff>,
	#[serde(rename = "defQFormat")]
	pub def_q_format: Option<STOnOff>,
	#[serde(rename = "count")]
	pub count: Option<i32>,
	#[serde(rename = "lsdException")]
	pub lsd_exception: Vec<CTLsdException>,
}


// CTStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyles {
	#[serde(rename = "docDefaults")]
	pub doc_defaults: Option<CTDocDefaults>,
	#[serde(rename = "latentStyles")]
	pub latent_styles: Option<CTLatentStyles>,
	#[serde(rename = "style")]
	pub style: Vec<CTStyle>,
}


// CTPanose ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPanose {
	#[serde(rename = "val")]
	pub val: String,
}


// STFontFamily ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFontFamily {
	#[serde(rename = "ST_FontFamily")]
	pub st_font_family: String,
}


// CTFontFamily ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontFamily {
	#[serde(rename = "val")]
	pub val: String,
}


// STPitch ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPitch {
	#[serde(rename = "ST_Pitch")]
	pub st_pitch: String,
}


// CTPitch ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPitch {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFontSig ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontSig {
	#[serde(rename = "usb0")]
	pub usb0: String,
	#[serde(rename = "usb1")]
	pub usb1: String,
	#[serde(rename = "usb2")]
	pub usb2: String,
	#[serde(rename = "usb3")]
	pub usb3: String,
	#[serde(rename = "csb0")]
	pub csb0: String,
	#[serde(rename = "csb1")]
	pub csb1: String,
}


// CTFontRel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontRel {
	#[serde(rename = "fontKey")]
	pub font_key: Option<String>,
	#[serde(rename = "subsetted")]
	pub subsetted: Option<STOnOff>,
	#[serde(flatten)]
	pub ct_rel: CTRel,
}


// CTFont ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFont {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "altName")]
	pub alt_name: Option<CTString>,
	#[serde(rename = "panose1")]
	pub panose1: Option<CTPanose>,
	#[serde(rename = "charset")]
	pub charset: Option<CTCharset>,
	#[serde(rename = "family")]
	pub family: Option<CTFontFamily>,
	#[serde(rename = "notTrueType")]
	pub not_true_type: Option<CTOnOff>,
	#[serde(rename = "pitch")]
	pub pitch: Option<CTPitch>,
	#[serde(rename = "sig")]
	pub sig: Option<CTFontSig>,
	#[serde(rename = "embedRegular")]
	pub embed_regular: Option<CTFontRel>,
	#[serde(rename = "embedBold")]
	pub embed_bold: Option<CTFontRel>,
	#[serde(rename = "embedItalic")]
	pub embed_italic: Option<CTFontRel>,
	#[serde(rename = "embedBoldItalic")]
	pub embed_bold_italic: Option<CTFontRel>,
}


// CTFontsList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontsList {
	#[serde(rename = "font")]
	pub font: Vec<CTFont>,
}


// CTDivBdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDivBdr {
	#[serde(rename = "top")]
	pub top: Option<CTBorder>,
	#[serde(rename = "left")]
	pub left: Option<CTBorder>,
	#[serde(rename = "bottom")]
	pub bottom: Option<CTBorder>,
	#[serde(rename = "right")]
	pub right: Option<CTBorder>,
}


// CTDiv ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDiv {
	#[serde(rename = "id")]
	pub id: i32,
	#[serde(rename = "blockQuote")]
	pub block_quote: Option<CTOnOff>,
	#[serde(rename = "bodyDiv")]
	pub body_div: Option<CTOnOff>,
	#[serde(rename = "marLeft")]
	pub mar_left: CTSignedTwipsMeasure,
	#[serde(rename = "marRight")]
	pub mar_right: CTSignedTwipsMeasure,
	#[serde(rename = "marTop")]
	pub mar_top: CTSignedTwipsMeasure,
	#[serde(rename = "marBottom")]
	pub mar_bottom: CTSignedTwipsMeasure,
	#[serde(rename = "divBdr")]
	pub div_bdr: Option<CTDivBdr>,
	#[serde(rename = "divsChild")]
	pub divs_child: Vec<CTDivs>,
}


// CTDivs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDivs {
	#[serde(rename = "div")]
	pub div: Vec<CTDiv>,
}


// EGMathContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGMathContent {
	#[serde(rename = "m:oMathPara")]
	pub mo_math_para: CTOMathPara,
	#[serde(rename = "m:oMath")]
	pub mo_math: CTOMath,
}


// EGBlockLevelChunkElts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGBlockLevelChunkElts {
	#[serde(rename = "EG_ContentBlockContent")]
	pub eg_content_block_content: EGContentBlockContent,
}


// EGBlockLevelElts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGBlockLevelElts {
	#[serde(rename = "altChunk")]
	pub alt_chunk: CTAltChunk,
	#[serde(rename = "EG_BlockLevelChunkElts")]
	pub eg_block_level_chunk_elts: EGBlockLevelChunkElts,
}


// EGRunLevelElts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGRunLevelElts {
	#[serde(rename = "proofErr")]
	pub proof_err: CTProofErr,
	#[serde(rename = "permStart")]
	pub perm_start: CTPermStart,
	#[serde(rename = "permEnd")]
	pub perm_end: CTPerm,
	#[serde(rename = "ins")]
	pub ins: CTRunTrackChange,
	#[serde(rename = "del")]
	pub del: CTRunTrackChange,
	#[serde(rename = "moveFrom")]
	pub move_from: CTRunTrackChange,
	#[serde(rename = "moveTo")]
	pub move_to: CTRunTrackChange,
	#[serde(rename = "EG_RangeMarkupElements")]
	pub eg_range_markup_elements: EGRangeMarkupElements,
	#[serde(rename = "EG_MathContent")]
	pub eg_math_content: EGMathContent,
}


// CTBody ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBody {
	#[serde(rename = "EG_BlockLevelElts")]
	pub eg_block_level_elts: Vec<EGBlockLevelElts>,
	#[serde(rename = "sectPr")]
	pub sect_pr: Option<CTSectPr>,
}


// CTComments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComments {
	#[serde(rename = "comment")]
	pub comment: Vec<CTComment>,
}


// comments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct comments {
	#[serde(rename = "comments")]
	pub comments: CTComments,
}


// CTFootnotes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFootnotes {
	#[serde(rename = "footnote")]
	pub footnote: Vec<CTFtnEdn>,
}


// footnotes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct footnotes {
	#[serde(rename = "footnotes")]
	pub footnotes: CTFootnotes,
}


// CTEndnotes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEndnotes {
	#[serde(rename = "endnote")]
	pub endnote: Vec<CTFtnEdn>,
}


// endnotes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct endnotes {
	#[serde(rename = "endnotes")]
	pub endnotes: CTEndnotes,
}


// hdr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct hdr {
	#[serde(rename = "hdr")]
	pub hdr: CTHdrFtr,
}


// ftr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ftr {
	#[serde(rename = "ftr")]
	pub ftr: CTHdrFtr,
}


// CTSmartTagType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagType {
	#[serde(rename = "namespaceuri")]
	pub namespaceuri: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
}


// STThemeColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STThemeColor {
	#[serde(rename = "ST_ThemeColor")]
	pub st_theme_color: String,
}


// STDocPartBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocPartBehavior {
	#[serde(rename = "ST_DocPartBehavior")]
	pub st_doc_part_behavior: String,
}


// CTDocPartBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartBehavior {
	#[serde(rename = "val")]
	pub val: String,
}


// CTDocPartBehaviors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartBehaviors {
	#[serde(rename = "behavior")]
	pub behavior: Vec<CTDocPartBehavior>,
}


// STDocPartType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocPartType {
	#[serde(rename = "ST_DocPartType")]
	pub st_doc_part_type: String,
}


// CTDocPartType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartType {
	#[serde(rename = "val")]
	pub val: String,
}


// CTDocPartTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartTypes {
	#[serde(rename = "all")]
	pub all: Option<STOnOff>,
	#[serde(rename = "type")]
	pub type_attr: Vec<CTDocPartType>,
}


// STDocPartGallery ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDocPartGallery {
	#[serde(rename = "ST_DocPartGallery")]
	pub st_doc_part_gallery: String,
}


// CTDocPartGallery ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartGallery {
	#[serde(rename = "val")]
	pub val: String,
}


// CTDocPartCategory ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartCategory {
	#[serde(rename = "name")]
	pub name: CTString,
	#[serde(rename = "gallery")]
	pub gallery: CTDocPartGallery,
}


// CTDocPartName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartName {
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "decorated")]
	pub decorated: Option<STOnOff>,
}


// CTDocPartPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPartPr {
	#[serde(rename = "name")]
	pub name: CTDocPartName,
	#[serde(rename = "style")]
	pub style: Option<CTString>,
	#[serde(rename = "category")]
	pub category: Option<CTDocPartCategory>,
	#[serde(rename = "types")]
	pub types: Option<CTDocPartTypes>,
	#[serde(rename = "behaviors")]
	pub behaviors: Option<CTDocPartBehaviors>,
	#[serde(rename = "description")]
	pub description: Option<CTString>,
	#[serde(rename = "guid")]
	pub guid: Option<CTGuid>,
}


// CTDocPart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocPart {
	#[serde(rename = "docPartPr")]
	pub doc_part_pr: Option<CTDocPartPr>,
	#[serde(rename = "docPartBody")]
	pub doc_part_body: Option<CTBody>,
}


// CTDocParts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocParts {
	#[serde(rename = "docPart")]
	pub doc_part: Vec<CTDocPart>,
}


// settings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct settings {
	#[serde(rename = "settings")]
	pub settings: CTSettings,
}


// web_settings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct web_settings {
	#[serde(rename = "webSettings")]
	pub web_settings: CTWebSettings,
}


// fonts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct fonts {
	#[serde(rename = "fonts")]
	pub fonts: CTFontsList,
}


// numbering ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct numbering {
	#[serde(rename = "numbering")]
	pub numbering: CTNumbering,
}


// styles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct styles {
	#[serde(rename = "styles")]
	pub styles: CTStyles,
}


// STCaptionPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCaptionPos {
	#[serde(rename = "ST_CaptionPos")]
	pub st_caption_pos: String,
}


// CTCaption ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCaption {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "pos")]
	pub pos: Option<String>,
	#[serde(rename = "chapNum")]
	pub chap_num: Option<STOnOff>,
	#[serde(rename = "heading")]
	pub heading: Option<i32>,
	#[serde(rename = "noLabel")]
	pub no_label: Option<STOnOff>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Option<String>,
	#[serde(rename = "sep")]
	pub sep: Option<String>,
}


// CTAutoCaption ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAutoCaption {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "caption")]
	pub caption: String,
}


// CTAutoCaptions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAutoCaptions {
	#[serde(rename = "autoCaption")]
	pub auto_caption: Vec<CTAutoCaption>,
}


// CTCaptions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCaptions {
	#[serde(rename = "caption")]
	pub caption: Vec<CTCaption>,
	#[serde(rename = "autoCaptions")]
	pub auto_captions: Option<CTAutoCaptions>,
}


// CTDocumentBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocumentBase {
	#[serde(rename = "background")]
	pub background: Option<CTBackground>,
}


// CTDocument ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDocument {
	#[serde(rename = "conformance")]
	pub conformance: Option<String>,
	#[serde(rename = "body")]
	pub body: Option<CTBody>,
	#[serde(flatten)]
	pub ct_document_base: CTDocumentBase,
}


// CTGlossaryDocument ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGlossaryDocument {
	#[serde(rename = "docParts")]
	pub doc_parts: Option<CTDocParts>,
	#[serde(flatten)]
	pub ct_document_base: CTDocumentBase,
}


// document ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct document {
	#[serde(rename = "document")]
	pub document: CTDocument,
}


// glossary_document ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct glossary_document {
	#[serde(rename = "glossaryDocument")]
	pub glossary_document: CTGlossaryDocument,
}
