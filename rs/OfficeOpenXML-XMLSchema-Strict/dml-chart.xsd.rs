// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTBoolean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBoolean {
	#[serde(rename = "val")]
	pub val: Option<bool>,
}


// CTDouble ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDouble {
	#[serde(rename = "val")]
	pub val: f64,
}


// CTUnsignedInt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUnsignedInt {
	#[serde(rename = "val")]
	pub val: u32,
}


// CTRelId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRelId {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTExtension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtension {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
}


// CTExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtensionList {
	#[serde(rename = "ext")]
	pub ext: Vec<CTExtension>,
}


// CTNumVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumVal {
	#[serde(rename = "idx")]
	pub idx: u32,
	#[serde(rename = "formatCode")]
	pub format_code: Option<String>,
	#[serde(rename = "v")]
	pub v: String,
}


// CTNumData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumData {
	#[serde(rename = "formatCode")]
	pub format_code: Option<String>,
	#[serde(rename = "ptCount")]
	pub pt_count: Option<CTUnsignedInt>,
	#[serde(rename = "pt")]
	pub pt: Vec<CTNumVal>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTNumRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumRef {
	#[serde(rename = "f")]
	pub f: String,
	#[serde(rename = "numCache")]
	pub num_cache: Option<CTNumData>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTNumDataSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumDataSource {
	#[serde(rename = "numRef")]
	pub num_ref: Option<CTNumRef>,
	#[serde(rename = "numLit")]
	pub num_lit: Option<CTNumData>,
}


// CTStrVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStrVal {
	#[serde(rename = "idx")]
	pub idx: u32,
	#[serde(rename = "v")]
	pub v: String,
}


// CTStrData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStrData {
	#[serde(rename = "ptCount")]
	pub pt_count: Option<CTUnsignedInt>,
	#[serde(rename = "pt")]
	pub pt: Vec<CTStrVal>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTStrRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStrRef {
	#[serde(rename = "f")]
	pub f: String,
	#[serde(rename = "strCache")]
	pub str_cache: Option<CTStrData>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTTx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTx {
	#[serde(rename = "strRef")]
	pub str_ref: Option<CTStrRef>,
	#[serde(rename = "rich")]
	pub rich: Option<CTTextBody>,
}


// CTTextLanguageID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextLanguageID {
	#[serde(rename = "val")]
	pub val: String,
}


// CTLvl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLvl {
	#[serde(rename = "pt")]
	pub pt: Vec<CTStrVal>,
}


// CTMultiLvlStrData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMultiLvlStrData {
	#[serde(rename = "ptCount")]
	pub pt_count: Option<CTUnsignedInt>,
	#[serde(rename = "lvl")]
	pub lvl: Vec<CTLvl>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTMultiLvlStrRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMultiLvlStrRef {
	#[serde(rename = "f")]
	pub f: String,
	#[serde(rename = "multiLvlStrCache")]
	pub multi_lvl_str_cache: Option<CTMultiLvlStrData>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTAxDataSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAxDataSource {
	#[serde(rename = "multiLvlStrRef")]
	pub multi_lvl_str_ref: Option<CTMultiLvlStrRef>,
	#[serde(rename = "numRef")]
	pub num_ref: Option<CTNumRef>,
	#[serde(rename = "numLit")]
	pub num_lit: Option<CTNumData>,
	#[serde(rename = "strRef")]
	pub str_ref: Option<CTStrRef>,
	#[serde(rename = "strLit")]
	pub str_lit: Option<CTStrData>,
}


// CTSerTx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSerTx {
	#[serde(rename = "strRef")]
	pub str_ref: Option<CTStrRef>,
	#[serde(rename = "v")]
	pub v: Option<String>,
}


// STLayoutTarget ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLayoutTarget {
	#[serde(rename = "ST_LayoutTarget")]
	pub st_layout_target: String,
}


// CTLayoutTarget ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLayoutTarget {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STLayoutMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLayoutMode {
	#[serde(rename = "ST_LayoutMode")]
	pub st_layout_mode: String,
}


// CTLayoutMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLayoutMode {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTManualLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTManualLayout {
	#[serde(rename = "layoutTarget")]
	pub layout_target: Option<CTLayoutTarget>,
	#[serde(rename = "xMode")]
	pub x_mode: Option<CTLayoutMode>,
	#[serde(rename = "yMode")]
	pub y_mode: Option<CTLayoutMode>,
	#[serde(rename = "wMode")]
	pub w_mode: Option<CTLayoutMode>,
	#[serde(rename = "hMode")]
	pub h_mode: Option<CTLayoutMode>,
	#[serde(rename = "x")]
	pub x: Option<CTDouble>,
	#[serde(rename = "y")]
	pub y: Option<CTDouble>,
	#[serde(rename = "w")]
	pub w: Option<CTDouble>,
	#[serde(rename = "h")]
	pub h: Option<CTDouble>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLayout {
	#[serde(rename = "manualLayout")]
	pub manual_layout: Option<CTManualLayout>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTTitle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTitle {
	#[serde(rename = "tx")]
	pub tx: Option<CTTx>,
	#[serde(rename = "layout")]
	pub layout: Option<CTLayout>,
	#[serde(rename = "overlay")]
	pub overlay: Option<CTBoolean>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STRotX ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRotX {
	#[serde(rename = "ST_RotX")]
	pub st_rot_x: u8,
}


// CTRotX ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRotX {
	#[serde(rename = "val")]
	pub val: Option<u8>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHPercent {
	#[serde(rename = "ST_HPercent")]
	pub st_h_percent_with_symbol: STHPercentWithSymbol,
}


// STHPercentWithSymbol ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHPercentWithSymbol {
	#[serde(rename = "ST_HPercentWithSymbol")]
	pub st_h_percent_with_symbol: String,
}


// CTHPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHPercent {
	#[serde(rename = "val")]
	pub val: Option<STHPercent>,
}


// STRotY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRotY {
	#[serde(rename = "ST_RotY")]
	pub st_rot_y: u16,
}


// CTRotY ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRotY {
	#[serde(rename = "val")]
	pub val: Option<u16>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDepthPercent {
	#[serde(rename = "ST_DepthPercent")]
	pub st_depth_percent_with_symbol: STDepthPercentWithSymbol,
}


// STDepthPercentWithSymbol ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDepthPercentWithSymbol {
	#[serde(rename = "ST_DepthPercentWithSymbol")]
	pub st_depth_percent_with_symbol: String,
}


// CTDepthPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDepthPercent {
	#[serde(rename = "val")]
	pub val: Option<STDepthPercent>,
}


// STPerspective ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPerspective {
	#[serde(rename = "ST_Perspective")]
	pub st_perspective: u8,
}


// CTPerspective ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPerspective {
	#[serde(rename = "val")]
	pub val: Option<u8>,
}


// CTView3D ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTView3D {
	#[serde(rename = "rotX")]
	pub rot_x: Option<CTRotX>,
	#[serde(rename = "hPercent")]
	pub h_percent: Option<CTHPercent>,
	#[serde(rename = "rotY")]
	pub rot_y: Option<CTRotY>,
	#[serde(rename = "depthPercent")]
	pub depth_percent: Option<CTDepthPercent>,
	#[serde(rename = "rAngAx")]
	pub r_ang_ax: Option<CTBoolean>,
	#[serde(rename = "perspective")]
	pub perspective: Option<CTPerspective>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTSurface ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSurface {
	#[serde(rename = "thickness")]
	pub thickness: Option<CTThickness>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "pictureOptions")]
	pub picture_options: Option<CTPictureOptions>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STThickness {
	#[serde(rename = "ST_Thickness")]
	pub st_thickness_percent: STThicknessPercent,
}


// STThicknessPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STThicknessPercent {
	#[serde(rename = "ST_ThicknessPercent")]
	pub st_thickness_percent: String,
}


// CTThickness ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTThickness {
	#[serde(rename = "val")]
	pub val: STThickness,
}


// CTDTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDTable {
	#[serde(rename = "showHorzBorder")]
	pub show_horz_border: Option<CTBoolean>,
	#[serde(rename = "showVertBorder")]
	pub show_vert_border: Option<CTBoolean>,
	#[serde(rename = "showOutline")]
	pub show_outline: Option<CTBoolean>,
	#[serde(rename = "showKeys")]
	pub show_keys: Option<CTBoolean>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGapAmount {
	#[serde(rename = "ST_GapAmount")]
	pub st_gap_amount_percent: STGapAmountPercent,
}


// STGapAmountPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGapAmountPercent {
	#[serde(rename = "ST_GapAmountPercent")]
	pub st_gap_amount_percent: String,
}


// CTGapAmount ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGapAmount {
	#[serde(rename = "val")]
	pub val: Option<STGapAmount>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOverlap {
	#[serde(rename = "ST_Overlap")]
	pub st_overlap_percent: STOverlapPercent,
}


// STOverlapPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOverlapPercent {
	#[serde(rename = "ST_OverlapPercent")]
	pub st_overlap_percent: String,
}


// CTOverlap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOverlap {
	#[serde(rename = "val")]
	pub val: Option<STOverlap>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBubbleScale {
	#[serde(rename = "ST_BubbleScale")]
	pub st_bubble_scale_percent: STBubbleScalePercent,
}


// STBubbleScalePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBubbleScalePercent {
	#[serde(rename = "ST_BubbleScalePercent")]
	pub st_bubble_scale_percent: String,
}


// CTBubbleScale ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBubbleScale {
	#[serde(rename = "val")]
	pub val: Option<STBubbleScale>,
}


// STSizeRepresents ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSizeRepresents {
	#[serde(rename = "ST_SizeRepresents")]
	pub st_size_represents: String,
}


// CTSizeRepresents ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSizeRepresents {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STFirstSliceAng ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFirstSliceAng {
	#[serde(rename = "ST_FirstSliceAng")]
	pub st_first_slice_ang: u16,
}


// CTFirstSliceAng ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFirstSliceAng {
	#[serde(rename = "val")]
	pub val: Option<u16>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHoleSize {
	#[serde(rename = "ST_HoleSize")]
	pub st_hole_size_percent: STHoleSizePercent,
}


// STHoleSizePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHoleSizePercent {
	#[serde(rename = "ST_HoleSizePercent")]
	pub st_hole_size_percent: String,
}


// CTHoleSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHoleSize {
	#[serde(rename = "val")]
	pub val: Option<STHoleSize>,
}


// STSplitType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSplitType {
	#[serde(rename = "ST_SplitType")]
	pub st_split_type: String,
}


// CTSplitType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSplitType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTCustSplit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustSplit {
	#[serde(rename = "secondPiePt")]
	pub second_pie_pt: Vec<CTUnsignedInt>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSecondPieSize {
	#[serde(rename = "ST_SecondPieSize")]
	pub st_second_pie_size_percent: STSecondPieSizePercent,
}


// STSecondPieSizePercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSecondPieSizePercent {
	#[serde(rename = "ST_SecondPieSizePercent")]
	pub st_second_pie_size_percent: String,
}


// CTSecondPieSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSecondPieSize {
	#[serde(rename = "val")]
	pub val: Option<STSecondPieSize>,
}


// CTNumFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumFmt {
	#[serde(rename = "formatCode")]
	pub format_code: String,
	#[serde(rename = "sourceLinked")]
	pub source_linked: Option<bool>,
}


// STLblAlgn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLblAlgn {
	#[serde(rename = "ST_LblAlgn")]
	pub st_lbl_algn: String,
}


// CTLblAlgn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLblAlgn {
	#[serde(rename = "val")]
	pub val: String,
}


// STDLblPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDLblPos {
	#[serde(rename = "ST_DLblPos")]
	pub st_d_lbl_pos: String,
}


// CTDLblPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDLblPos {
	#[serde(rename = "val")]
	pub val: String,
}


// EGDLblShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGDLblShared {
	#[serde(rename = "numFmt")]
	pub num_fmt: CTNumFmt,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "txPr")]
	pub tx_pr: CTTextBody,
	#[serde(rename = "dLblPos")]
	pub d_lbl_pos: CTDLblPos,
	#[serde(rename = "showLegendKey")]
	pub show_legend_key: CTBoolean,
	#[serde(rename = "showVal")]
	pub show_val: CTBoolean,
	#[serde(rename = "showCatName")]
	pub show_cat_name: CTBoolean,
	#[serde(rename = "showSerName")]
	pub show_ser_name: CTBoolean,
	#[serde(rename = "showPercent")]
	pub show_percent: CTBoolean,
	#[serde(rename = "showBubbleSize")]
	pub show_bubble_size: CTBoolean,
	#[serde(rename = "separator")]
	pub separator: String,
}


// GroupDLbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupDLbl {
	#[serde(rename = "layout")]
	pub layout: CTLayout,
	#[serde(rename = "tx")]
	pub tx: CTTx,
	#[serde(rename = "EG_DLblShared")]
	pub eg_d_lbl_shared: EGDLblShared,
}


// CTDLbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDLbl {
	#[serde(rename = "Group_DLbl")]
	pub group_d_lbl: Vec<GroupDLbl>,
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "delete")]
	pub delete: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// GroupDLbls ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupDLbls {
	#[serde(rename = "showLeaderLines")]
	pub show_leader_lines: CTBoolean,
	#[serde(rename = "leaderLines")]
	pub leader_lines: CTChartLines,
	#[serde(rename = "EG_DLblShared")]
	pub eg_d_lbl_shared: EGDLblShared,
}


// CTDLbls ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDLbls {
	#[serde(rename = "Group_DLbls")]
	pub group_d_lbls: Vec<GroupDLbls>,
	#[serde(rename = "dLbl")]
	pub d_lbl: Vec<CTDLbl>,
	#[serde(rename = "delete")]
	pub delete: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STMarkerStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMarkerStyle {
	#[serde(rename = "ST_MarkerStyle")]
	pub st_marker_style: String,
}


// CTMarkerStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMarkerStyle {
	#[serde(rename = "val")]
	pub val: String,
}


// STMarkerSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMarkerSize {
	#[serde(rename = "ST_MarkerSize")]
	pub st_marker_size: u8,
}


// CTMarkerSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMarkerSize {
	#[serde(rename = "val")]
	pub val: Option<u8>,
}


// CTMarker ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMarker {
	#[serde(rename = "symbol")]
	pub symbol: Option<CTMarkerStyle>,
	#[serde(rename = "size")]
	pub size: Option<CTMarkerSize>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTDPt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDPt {
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "invertIfNegative")]
	pub invert_if_negative: Option<CTBoolean>,
	#[serde(rename = "marker")]
	pub marker: Option<CTMarker>,
	#[serde(rename = "bubble3D")]
	pub bubble3_d: Option<CTBoolean>,
	#[serde(rename = "explosion")]
	pub explosion: Option<CTUnsignedInt>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "pictureOptions")]
	pub picture_options: Option<CTPictureOptions>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STTrendlineType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTrendlineType {
	#[serde(rename = "ST_TrendlineType")]
	pub st_trendline_type: String,
}


// CTTrendlineType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrendlineType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STOrder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOrder {
	#[serde(rename = "ST_Order")]
	pub st_order: u8,
}


// CTOrder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOrder {
	#[serde(rename = "val")]
	pub val: Option<u8>,
}


// STPeriod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPeriod {
	#[serde(rename = "ST_Period")]
	pub st_period: u32,
}


// CTPeriod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPeriod {
	#[serde(rename = "val")]
	pub val: Option<u32>,
}


// CTTrendlineLbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrendlineLbl {
	#[serde(rename = "layout")]
	pub layout: Option<CTLayout>,
	#[serde(rename = "tx")]
	pub tx: Option<CTTx>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Option<CTNumFmt>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTTrendline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTrendline {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "trendlineType")]
	pub trendline_type: CTTrendlineType,
	#[serde(rename = "order")]
	pub order: Option<CTOrder>,
	#[serde(rename = "period")]
	pub period: Option<CTPeriod>,
	#[serde(rename = "forward")]
	pub forward: Option<CTDouble>,
	#[serde(rename = "backward")]
	pub backward: Option<CTDouble>,
	#[serde(rename = "intercept")]
	pub intercept: Option<CTDouble>,
	#[serde(rename = "dispRSqr")]
	pub disp_r_sqr: Option<CTBoolean>,
	#[serde(rename = "dispEq")]
	pub disp_eq: Option<CTBoolean>,
	#[serde(rename = "trendlineLbl")]
	pub trendline_lbl: Option<CTTrendlineLbl>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STErrDir ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STErrDir {
	#[serde(rename = "ST_ErrDir")]
	pub st_err_dir: String,
}


// CTErrDir ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTErrDir {
	#[serde(rename = "val")]
	pub val: String,
}


// STErrBarType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STErrBarType {
	#[serde(rename = "ST_ErrBarType")]
	pub st_err_bar_type: String,
}


// CTErrBarType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTErrBarType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STErrValType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STErrValType {
	#[serde(rename = "ST_ErrValType")]
	pub st_err_val_type: String,
}


// CTErrValType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTErrValType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTErrBars ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTErrBars {
	#[serde(rename = "errDir")]
	pub err_dir: Option<CTErrDir>,
	#[serde(rename = "errBarType")]
	pub err_bar_type: CTErrBarType,
	#[serde(rename = "errValType")]
	pub err_val_type: CTErrValType,
	#[serde(rename = "noEndCap")]
	pub no_end_cap: Option<CTBoolean>,
	#[serde(rename = "plus")]
	pub plus: Option<CTNumDataSource>,
	#[serde(rename = "minus")]
	pub minus: Option<CTNumDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTDouble>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTUpDownBar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUpDownBar {
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
}


// CTUpDownBars ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUpDownBars {
	#[serde(rename = "gapWidth")]
	pub gap_width: Option<CTGapAmount>,
	#[serde(rename = "upBars")]
	pub up_bars: Option<CTUpDownBar>,
	#[serde(rename = "downBars")]
	pub down_bars: Option<CTUpDownBar>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// EGSerShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGSerShared {
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "order")]
	pub order: CTUnsignedInt,
	#[serde(rename = "tx")]
	pub tx: CTSerTx,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
}


// CTLineSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "marker")]
	pub marker: Option<CTMarker>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "trendline")]
	pub trendline: Vec<CTTrendline>,
	#[serde(rename = "errBars")]
	pub err_bars: Option<CTErrBars>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "smooth")]
	pub smooth: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTScatterSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScatterSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "marker")]
	pub marker: Option<CTMarker>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "trendline")]
	pub trendline: Vec<CTTrendline>,
	#[serde(rename = "errBars")]
	pub err_bars: Vec<CTErrBars>,
	#[serde(rename = "xVal")]
	pub x_val: Option<CTAxDataSource>,
	#[serde(rename = "yVal")]
	pub y_val: Option<CTNumDataSource>,
	#[serde(rename = "smooth")]
	pub smooth: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTRadarSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRadarSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "marker")]
	pub marker: Option<CTMarker>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTBarSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBarSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "invertIfNegative")]
	pub invert_if_negative: Option<CTBoolean>,
	#[serde(rename = "pictureOptions")]
	pub picture_options: Option<CTPictureOptions>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "trendline")]
	pub trendline: Vec<CTTrendline>,
	#[serde(rename = "errBars")]
	pub err_bars: Option<CTErrBars>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "shape")]
	pub shape: Option<CTShape>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTAreaSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAreaSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "pictureOptions")]
	pub picture_options: Option<CTPictureOptions>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "trendline")]
	pub trendline: Vec<CTTrendline>,
	#[serde(rename = "errBars")]
	pub err_bars: Vec<CTErrBars>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTPieSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPieSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "explosion")]
	pub explosion: Option<CTUnsignedInt>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTBubbleSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBubbleSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "invertIfNegative")]
	pub invert_if_negative: Option<CTBoolean>,
	#[serde(rename = "dPt")]
	pub d_pt: Vec<CTDPt>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "trendline")]
	pub trendline: Vec<CTTrendline>,
	#[serde(rename = "errBars")]
	pub err_bars: Vec<CTErrBars>,
	#[serde(rename = "xVal")]
	pub x_val: Option<CTAxDataSource>,
	#[serde(rename = "yVal")]
	pub y_val: Option<CTNumDataSource>,
	#[serde(rename = "bubbleSize")]
	pub bubble_size: Option<CTNumDataSource>,
	#[serde(rename = "bubble3D")]
	pub bubble3_d: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTSurfaceSer ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSurfaceSer {
	#[serde(rename = "EG_SerShared")]
	pub eg_ser_shared: Vec<EGSerShared>,
	#[serde(rename = "cat")]
	pub cat: Option<CTAxDataSource>,
	#[serde(rename = "val")]
	pub val: Option<CTNumDataSource>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STGrouping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGrouping {
	#[serde(rename = "ST_Grouping")]
	pub st_grouping: String,
}


// CTGrouping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGrouping {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTChartLines ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartLines {
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
}


// EGLineChartShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGLineChartShared {
	#[serde(rename = "grouping")]
	pub grouping: CTGrouping,
	#[serde(rename = "varyColors")]
	pub vary_colors: CTBoolean,
	#[serde(rename = "ser")]
	pub ser: CTLineSer,
	#[serde(rename = "dLbls")]
	pub d_lbls: CTDLbls,
	#[serde(rename = "dropLines")]
	pub drop_lines: CTChartLines,
}


// CTLineChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLineChart {
	#[serde(rename = "EG_LineChartShared")]
	pub eg_line_chart_shared: Vec<EGLineChartShared>,
	#[serde(rename = "hiLowLines")]
	pub hi_low_lines: Option<CTChartLines>,
	#[serde(rename = "upDownBars")]
	pub up_down_bars: Option<CTUpDownBars>,
	#[serde(rename = "marker")]
	pub marker: Option<CTBoolean>,
	#[serde(rename = "smooth")]
	pub smooth: Option<CTBoolean>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTLine3DChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLine3DChart {
	#[serde(rename = "EG_LineChartShared")]
	pub eg_line_chart_shared: Vec<EGLineChartShared>,
	#[serde(rename = "gapDepth")]
	pub gap_depth: Option<CTGapAmount>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTStockChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStockChart {
	#[serde(rename = "ser")]
	pub ser: Vec<CTLineSer>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "dropLines")]
	pub drop_lines: Option<CTChartLines>,
	#[serde(rename = "hiLowLines")]
	pub hi_low_lines: Option<CTChartLines>,
	#[serde(rename = "upDownBars")]
	pub up_down_bars: Option<CTUpDownBars>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STScatterStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STScatterStyle {
	#[serde(rename = "ST_ScatterStyle")]
	pub st_scatter_style: String,
}


// CTScatterStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScatterStyle {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTScatterChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScatterChart {
	#[serde(rename = "scatterStyle")]
	pub scatter_style: CTScatterStyle,
	#[serde(rename = "varyColors")]
	pub vary_colors: Option<CTBoolean>,
	#[serde(rename = "ser")]
	pub ser: Vec<CTScatterSer>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STRadarStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRadarStyle {
	#[serde(rename = "ST_RadarStyle")]
	pub st_radar_style: String,
}


// CTRadarStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRadarStyle {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTRadarChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRadarChart {
	#[serde(rename = "radarStyle")]
	pub radar_style: CTRadarStyle,
	#[serde(rename = "varyColors")]
	pub vary_colors: Option<CTBoolean>,
	#[serde(rename = "ser")]
	pub ser: Vec<CTRadarSer>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STBarGrouping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBarGrouping {
	#[serde(rename = "ST_BarGrouping")]
	pub st_bar_grouping: String,
}


// CTBarGrouping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBarGrouping {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STBarDir ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBarDir {
	#[serde(rename = "ST_BarDir")]
	pub st_bar_dir: String,
}


// CTBarDir ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBarDir {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShape {
	#[serde(rename = "ST_Shape")]
	pub st_shape: String,
}


// CTShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShape {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// EGBarChartShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGBarChartShared {
	#[serde(rename = "barDir")]
	pub bar_dir: CTBarDir,
	#[serde(rename = "grouping")]
	pub grouping: CTBarGrouping,
	#[serde(rename = "varyColors")]
	pub vary_colors: CTBoolean,
	#[serde(rename = "ser")]
	pub ser: CTBarSer,
	#[serde(rename = "dLbls")]
	pub d_lbls: CTDLbls,
}


// CTBarChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBarChart {
	#[serde(rename = "EG_BarChartShared")]
	pub eg_bar_chart_shared: Vec<EGBarChartShared>,
	#[serde(rename = "gapWidth")]
	pub gap_width: Option<CTGapAmount>,
	#[serde(rename = "overlap")]
	pub overlap: Option<CTOverlap>,
	#[serde(rename = "serLines")]
	pub ser_lines: Vec<CTChartLines>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTBar3DChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBar3DChart {
	#[serde(rename = "EG_BarChartShared")]
	pub eg_bar_chart_shared: Vec<EGBarChartShared>,
	#[serde(rename = "gapWidth")]
	pub gap_width: Option<CTGapAmount>,
	#[serde(rename = "gapDepth")]
	pub gap_depth: Option<CTGapAmount>,
	#[serde(rename = "shape")]
	pub shape: Option<CTShape>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// EGAreaChartShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGAreaChartShared {
	#[serde(rename = "grouping")]
	pub grouping: CTGrouping,
	#[serde(rename = "varyColors")]
	pub vary_colors: CTBoolean,
	#[serde(rename = "ser")]
	pub ser: CTAreaSer,
	#[serde(rename = "dLbls")]
	pub d_lbls: CTDLbls,
	#[serde(rename = "dropLines")]
	pub drop_lines: CTChartLines,
}


// CTAreaChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAreaChart {
	#[serde(rename = "EG_AreaChartShared")]
	pub eg_area_chart_shared: Vec<EGAreaChartShared>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTArea3DChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTArea3DChart {
	#[serde(rename = "EG_AreaChartShared")]
	pub eg_area_chart_shared: Vec<EGAreaChartShared>,
	#[serde(rename = "gapDepth")]
	pub gap_depth: Option<CTGapAmount>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// EGPieChartShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGPieChartShared {
	#[serde(rename = "varyColors")]
	pub vary_colors: CTBoolean,
	#[serde(rename = "ser")]
	pub ser: CTPieSer,
	#[serde(rename = "dLbls")]
	pub d_lbls: CTDLbls,
}


// CTPieChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPieChart {
	#[serde(rename = "EG_PieChartShared")]
	pub eg_pie_chart_shared: Vec<EGPieChartShared>,
	#[serde(rename = "firstSliceAng")]
	pub first_slice_ang: Option<CTFirstSliceAng>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTPie3DChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPie3DChart {
	#[serde(rename = "EG_PieChartShared")]
	pub eg_pie_chart_shared: Vec<EGPieChartShared>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTDoughnutChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDoughnutChart {
	#[serde(rename = "EG_PieChartShared")]
	pub eg_pie_chart_shared: Vec<EGPieChartShared>,
	#[serde(rename = "firstSliceAng")]
	pub first_slice_ang: Option<CTFirstSliceAng>,
	#[serde(rename = "holeSize")]
	pub hole_size: Option<CTHoleSize>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STOfPieType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOfPieType {
	#[serde(rename = "ST_OfPieType")]
	pub st_of_pie_type: String,
}


// CTOfPieType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOfPieType {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTOfPieChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOfPieChart {
	#[serde(rename = "EG_PieChartShared")]
	pub eg_pie_chart_shared: Vec<EGPieChartShared>,
	#[serde(rename = "ofPieType")]
	pub of_pie_type: CTOfPieType,
	#[serde(rename = "gapWidth")]
	pub gap_width: Option<CTGapAmount>,
	#[serde(rename = "splitType")]
	pub split_type: Option<CTSplitType>,
	#[serde(rename = "splitPos")]
	pub split_pos: Option<CTDouble>,
	#[serde(rename = "custSplit")]
	pub cust_split: Option<CTCustSplit>,
	#[serde(rename = "secondPieSize")]
	pub second_pie_size: Option<CTSecondPieSize>,
	#[serde(rename = "serLines")]
	pub ser_lines: Vec<CTChartLines>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTBubbleChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBubbleChart {
	#[serde(rename = "varyColors")]
	pub vary_colors: Option<CTBoolean>,
	#[serde(rename = "ser")]
	pub ser: Vec<CTBubbleSer>,
	#[serde(rename = "dLbls")]
	pub d_lbls: Option<CTDLbls>,
	#[serde(rename = "bubble3D")]
	pub bubble3_d: Option<CTBoolean>,
	#[serde(rename = "bubbleScale")]
	pub bubble_scale: Option<CTBubbleScale>,
	#[serde(rename = "showNegBubbles")]
	pub show_neg_bubbles: Option<CTBoolean>,
	#[serde(rename = "sizeRepresents")]
	pub size_represents: Option<CTSizeRepresents>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTBandFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBandFmt {
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
}


// CTBandFmts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBandFmts {
	#[serde(rename = "bandFmt")]
	pub band_fmt: Vec<CTBandFmt>,
}


// EGSurfaceChartShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGSurfaceChartShared {
	#[serde(rename = "wireframe")]
	pub wireframe: CTBoolean,
	#[serde(rename = "ser")]
	pub ser: CTSurfaceSer,
	#[serde(rename = "bandFmts")]
	pub band_fmts: CTBandFmts,
}


// CTSurfaceChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSurfaceChart {
	#[serde(rename = "EG_SurfaceChartShared")]
	pub eg_surface_chart_shared: Vec<EGSurfaceChartShared>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTSurface3DChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSurface3DChart {
	#[serde(rename = "EG_SurfaceChartShared")]
	pub eg_surface_chart_shared: Vec<EGSurfaceChartShared>,
	#[serde(rename = "axId")]
	pub ax_id: Vec<CTUnsignedInt>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STAxPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAxPos {
	#[serde(rename = "ST_AxPos")]
	pub st_ax_pos: String,
}


// CTAxPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAxPos {
	#[serde(rename = "val")]
	pub val: String,
}


// STCrosses ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCrosses {
	#[serde(rename = "ST_Crosses")]
	pub st_crosses: String,
}


// CTCrosses ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCrosses {
	#[serde(rename = "val")]
	pub val: String,
}


// STCrossBetween ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCrossBetween {
	#[serde(rename = "ST_CrossBetween")]
	pub st_cross_between: String,
}


// CTCrossBetween ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCrossBetween {
	#[serde(rename = "val")]
	pub val: String,
}


// STTickMark ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTickMark {
	#[serde(rename = "ST_TickMark")]
	pub st_tick_mark: String,
}


// CTTickMark ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTickMark {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STTickLblPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTickLblPos {
	#[serde(rename = "ST_TickLblPos")]
	pub st_tick_lbl_pos: String,
}


// CTTickLblPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTickLblPos {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STSkip ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSkip {
	#[serde(rename = "ST_Skip")]
	pub st_skip: u32,
}


// CTSkip ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSkip {
	#[serde(rename = "val")]
	pub val: u32,
}


// STTimeUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTimeUnit {
	#[serde(rename = "ST_TimeUnit")]
	pub st_time_unit: String,
}


// CTTimeUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTimeUnit {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STAxisUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAxisUnit {
	#[serde(rename = "ST_AxisUnit")]
	pub st_axis_unit: f64,
}


// CTAxisUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAxisUnit {
	#[serde(rename = "val")]
	pub val: f64,
}


// STBuiltInUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBuiltInUnit {
	#[serde(rename = "ST_BuiltInUnit")]
	pub st_built_in_unit: String,
}


// CTBuiltInUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBuiltInUnit {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STPictureFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPictureFormat {
	#[serde(rename = "ST_PictureFormat")]
	pub st_picture_format: String,
}


// CTPictureFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPictureFormat {
	#[serde(rename = "val")]
	pub val: String,
}


// STPictureStackUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPictureStackUnit {
	#[serde(rename = "ST_PictureStackUnit")]
	pub st_picture_stack_unit: f64,
}


// CTPictureStackUnit ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPictureStackUnit {
	#[serde(rename = "val")]
	pub val: f64,
}


// CTPictureOptions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPictureOptions {
	#[serde(rename = "applyToFront")]
	pub apply_to_front: Option<CTBoolean>,
	#[serde(rename = "applyToSides")]
	pub apply_to_sides: Option<CTBoolean>,
	#[serde(rename = "applyToEnd")]
	pub apply_to_end: Option<CTBoolean>,
	#[serde(rename = "pictureFormat")]
	pub picture_format: Option<CTPictureFormat>,
	#[serde(rename = "pictureStackUnit")]
	pub picture_stack_unit: Option<CTPictureStackUnit>,
}


// CTDispUnitsLbl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDispUnitsLbl {
	#[serde(rename = "layout")]
	pub layout: Option<CTLayout>,
	#[serde(rename = "tx")]
	pub tx: Option<CTTx>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
}


// CTDispUnits ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDispUnits {
	#[serde(rename = "custUnit")]
	pub cust_unit: Option<CTDouble>,
	#[serde(rename = "builtInUnit")]
	pub built_in_unit: Option<CTBuiltInUnit>,
	#[serde(rename = "dispUnitsLbl")]
	pub disp_units_lbl: Option<CTDispUnitsLbl>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STOrientation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOrientation {
	#[serde(rename = "ST_Orientation")]
	pub st_orientation: String,
}


// CTOrientation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOrientation {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STLogBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLogBase {
	#[serde(rename = "ST_LogBase")]
	pub st_log_base: f64,
}


// CTLogBase ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLogBase {
	#[serde(rename = "val")]
	pub val: f64,
}


// CTScaling ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScaling {
	#[serde(rename = "logBase")]
	pub log_base: Option<CTLogBase>,
	#[serde(rename = "orientation")]
	pub orientation: Option<CTOrientation>,
	#[serde(rename = "max")]
	pub max: Option<CTDouble>,
	#[serde(rename = "min")]
	pub min: Option<CTDouble>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLblOffset {
	#[serde(rename = "ST_LblOffset")]
	pub st_lbl_offset_percent: STLblOffsetPercent,
}


// STLblOffsetPercent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLblOffsetPercent {
	#[serde(rename = "ST_LblOffsetPercent")]
	pub st_lbl_offset_percent: String,
}


// CTLblOffset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLblOffset {
	#[serde(rename = "val")]
	pub val: Option<STLblOffset>,
}


// EGAxShared ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGAxShared {
	#[serde(rename = "axId")]
	pub ax_id: CTUnsignedInt,
	#[serde(rename = "scaling")]
	pub scaling: CTScaling,
	#[serde(rename = "delete")]
	pub delete: CTBoolean,
	#[serde(rename = "axPos")]
	pub ax_pos: CTAxPos,
	#[serde(rename = "majorGridlines")]
	pub major_gridlines: CTChartLines,
	#[serde(rename = "minorGridlines")]
	pub minor_gridlines: CTChartLines,
	#[serde(rename = "title")]
	pub title: CTTitle,
	#[serde(rename = "numFmt")]
	pub num_fmt: CTNumFmt,
	#[serde(rename = "majorTickMark")]
	pub major_tick_mark: CTTickMark,
	#[serde(rename = "minorTickMark")]
	pub minor_tick_mark: CTTickMark,
	#[serde(rename = "tickLblPos")]
	pub tick_lbl_pos: CTTickLblPos,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "txPr")]
	pub tx_pr: CTTextBody,
	#[serde(rename = "crossAx")]
	pub cross_ax: CTUnsignedInt,
	#[serde(rename = "crosses")]
	pub crosses: CTCrosses,
	#[serde(rename = "crossesAt")]
	pub crosses_at: CTDouble,
}


// CTCatAx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCatAx {
	#[serde(rename = "EG_AxShared")]
	pub eg_ax_shared: Vec<EGAxShared>,
	#[serde(rename = "auto")]
	pub auto: Option<CTBoolean>,
	#[serde(rename = "lblAlgn")]
	pub lbl_algn: Option<CTLblAlgn>,
	#[serde(rename = "lblOffset")]
	pub lbl_offset: Option<CTLblOffset>,
	#[serde(rename = "tickLblSkip")]
	pub tick_lbl_skip: Option<CTSkip>,
	#[serde(rename = "tickMarkSkip")]
	pub tick_mark_skip: Option<CTSkip>,
	#[serde(rename = "noMultiLvlLbl")]
	pub no_multi_lvl_lbl: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTDateAx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDateAx {
	#[serde(rename = "EG_AxShared")]
	pub eg_ax_shared: Vec<EGAxShared>,
	#[serde(rename = "auto")]
	pub auto: Option<CTBoolean>,
	#[serde(rename = "lblOffset")]
	pub lbl_offset: Option<CTLblOffset>,
	#[serde(rename = "baseTimeUnit")]
	pub base_time_unit: Option<CTTimeUnit>,
	#[serde(rename = "majorUnit")]
	pub major_unit: Option<CTAxisUnit>,
	#[serde(rename = "majorTimeUnit")]
	pub major_time_unit: Option<CTTimeUnit>,
	#[serde(rename = "minorUnit")]
	pub minor_unit: Option<CTAxisUnit>,
	#[serde(rename = "minorTimeUnit")]
	pub minor_time_unit: Option<CTTimeUnit>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTSerAx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSerAx {
	#[serde(rename = "EG_AxShared")]
	pub eg_ax_shared: Vec<EGAxShared>,
	#[serde(rename = "tickLblSkip")]
	pub tick_lbl_skip: Option<CTSkip>,
	#[serde(rename = "tickMarkSkip")]
	pub tick_mark_skip: Option<CTSkip>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTValAx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTValAx {
	#[serde(rename = "EG_AxShared")]
	pub eg_ax_shared: Vec<EGAxShared>,
	#[serde(rename = "crossBetween")]
	pub cross_between: Option<CTCrossBetween>,
	#[serde(rename = "majorUnit")]
	pub major_unit: Option<CTAxisUnit>,
	#[serde(rename = "minorUnit")]
	pub minor_unit: Option<CTAxisUnit>,
	#[serde(rename = "dispUnits")]
	pub disp_units: Option<CTDispUnits>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTPlotArea ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPlotArea {
	#[serde(rename = "layout")]
	pub layout: Option<CTLayout>,
	#[serde(rename = "areaChart")]
	pub area_chart: Vec<CTAreaChart>,
	#[serde(rename = "area3DChart")]
	pub area3_d_chart: Vec<CTArea3DChart>,
	#[serde(rename = "lineChart")]
	pub line_chart: Vec<CTLineChart>,
	#[serde(rename = "line3DChart")]
	pub line3_d_chart: Vec<CTLine3DChart>,
	#[serde(rename = "stockChart")]
	pub stock_chart: Vec<CTStockChart>,
	#[serde(rename = "radarChart")]
	pub radar_chart: Vec<CTRadarChart>,
	#[serde(rename = "scatterChart")]
	pub scatter_chart: Vec<CTScatterChart>,
	#[serde(rename = "pieChart")]
	pub pie_chart: Vec<CTPieChart>,
	#[serde(rename = "pie3DChart")]
	pub pie3_d_chart: Vec<CTPie3DChart>,
	#[serde(rename = "doughnutChart")]
	pub doughnut_chart: Vec<CTDoughnutChart>,
	#[serde(rename = "barChart")]
	pub bar_chart: Vec<CTBarChart>,
	#[serde(rename = "bar3DChart")]
	pub bar3_d_chart: Vec<CTBar3DChart>,
	#[serde(rename = "ofPieChart")]
	pub of_pie_chart: Vec<CTOfPieChart>,
	#[serde(rename = "surfaceChart")]
	pub surface_chart: Vec<CTSurfaceChart>,
	#[serde(rename = "surface3DChart")]
	pub surface3_d_chart: Vec<CTSurface3DChart>,
	#[serde(rename = "bubbleChart")]
	pub bubble_chart: Vec<CTBubbleChart>,
	#[serde(rename = "valAx")]
	pub val_ax: Vec<CTValAx>,
	#[serde(rename = "catAx")]
	pub cat_ax: Vec<CTCatAx>,
	#[serde(rename = "dateAx")]
	pub date_ax: Vec<CTDateAx>,
	#[serde(rename = "serAx")]
	pub ser_ax: Vec<CTSerAx>,
	#[serde(rename = "dTable")]
	pub d_table: Option<CTDTable>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTPivotFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotFmt {
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "marker")]
	pub marker: Option<CTMarker>,
	#[serde(rename = "dLbl")]
	pub d_lbl: Option<CTDLbl>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTPivotFmts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotFmts {
	#[serde(rename = "pivotFmt")]
	pub pivot_fmt: Vec<CTPivotFmt>,
}


// STLegendPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLegendPos {
	#[serde(rename = "ST_LegendPos")]
	pub st_legend_pos: String,
}


// CTLegendPos ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLegendPos {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// EGLegendEntryData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGLegendEntryData {
	#[serde(rename = "txPr")]
	pub tx_pr: CTTextBody,
}


// CTLegendEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLegendEntry {
	#[serde(rename = "EG_LegendEntryData")]
	pub eg_legend_entry_data: Vec<EGLegendEntryData>,
	#[serde(rename = "idx")]
	pub idx: CTUnsignedInt,
	#[serde(rename = "delete")]
	pub delete: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// CTLegend ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLegend {
	#[serde(rename = "legendPos")]
	pub legend_pos: Option<CTLegendPos>,
	#[serde(rename = "legendEntry")]
	pub legend_entry: Vec<CTLegendEntry>,
	#[serde(rename = "layout")]
	pub layout: Option<CTLayout>,
	#[serde(rename = "overlay")]
	pub overlay: Option<CTBoolean>,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STDispBlanksAs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDispBlanksAs {
	#[serde(rename = "ST_DispBlanksAs")]
	pub st_disp_blanks_as: String,
}


// CTDispBlanksAs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDispBlanksAs {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChart {
	#[serde(rename = "title")]
	pub title: Option<CTTitle>,
	#[serde(rename = "autoTitleDeleted")]
	pub auto_title_deleted: Option<CTBoolean>,
	#[serde(rename = "pivotFmts")]
	pub pivot_fmts: Option<CTPivotFmts>,
	#[serde(rename = "view3D")]
	pub view3_d: Option<CTView3D>,
	#[serde(rename = "floor")]
	pub floor: Option<CTSurface>,
	#[serde(rename = "sideWall")]
	pub side_wall: Option<CTSurface>,
	#[serde(rename = "backWall")]
	pub back_wall: Option<CTSurface>,
	#[serde(rename = "plotArea")]
	pub plot_area: CTPlotArea,
	#[serde(rename = "legend")]
	pub legend: Option<CTLegend>,
	#[serde(rename = "plotVisOnly")]
	pub plot_vis_only: Option<CTBoolean>,
	#[serde(rename = "dispBlanksAs")]
	pub disp_blanks_as: Option<CTDispBlanksAs>,
	#[serde(rename = "showDLblsOverMax")]
	pub show_d_lbls_over_max: Option<CTBoolean>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// STStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STStyle {
	#[serde(rename = "ST_Style")]
	pub st_style: u8,
}


// CTStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStyle {
	#[serde(rename = "val")]
	pub val: u8,
}


// CTPivotSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotSource {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "fmtId")]
	pub fmt_id: CTUnsignedInt,
	#[serde(rename = "extLst")]
	pub ext_lst: Vec<CTExtensionList>,
}


// CTProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTProtection {
	#[serde(rename = "chartObject")]
	pub chart_object: Option<CTBoolean>,
	#[serde(rename = "data")]
	pub data: Option<CTBoolean>,
	#[serde(rename = "formatting")]
	pub formatting: Option<CTBoolean>,
	#[serde(rename = "selection")]
	pub selection: Option<CTBoolean>,
	#[serde(rename = "userInterface")]
	pub user_interface: Option<CTBoolean>,
}


// CTHeaderFooter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeaderFooter {
	#[serde(rename = "alignWithMargins")]
	pub align_with_margins: Option<bool>,
	#[serde(rename = "differentOddEven")]
	pub different_odd_even: Option<bool>,
	#[serde(rename = "differentFirst")]
	pub different_first: Option<bool>,
	#[serde(rename = "oddHeader")]
	pub odd_header: Option<String>,
	#[serde(rename = "oddFooter")]
	pub odd_footer: Option<String>,
	#[serde(rename = "evenHeader")]
	pub even_header: Option<String>,
	#[serde(rename = "evenFooter")]
	pub even_footer: Option<String>,
	#[serde(rename = "firstHeader")]
	pub first_header: Option<String>,
	#[serde(rename = "firstFooter")]
	pub first_footer: Option<String>,
}


// CTPageMargins ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageMargins {
	#[serde(rename = "l")]
	pub l: f64,
	#[serde(rename = "r")]
	pub r: f64,
	#[serde(rename = "t")]
	pub t: f64,
	#[serde(rename = "b")]
	pub b: f64,
	#[serde(rename = "header")]
	pub header: f64,
	#[serde(rename = "footer")]
	pub footer: f64,
}


// STPageSetupOrientation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageSetupOrientation {
	#[serde(rename = "ST_PageSetupOrientation")]
	pub st_page_setup_orientation: String,
}


// CTExternalData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalData {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "autoUpdate")]
	pub auto_update: Option<CTBoolean>,
}


// CTPageSetup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageSetup {
	#[serde(rename = "paperSize")]
	pub paper_size: Option<u32>,
	#[serde(rename = "paperHeight")]
	pub paper_height: Option<String>,
	#[serde(rename = "paperWidth")]
	pub paper_width: Option<String>,
	#[serde(rename = "firstPageNumber")]
	pub first_page_number: Option<u32>,
	#[serde(rename = "orientation")]
	pub orientation: Option<String>,
	#[serde(rename = "blackAndWhite")]
	pub black_and_white: Option<bool>,
	#[serde(rename = "draft")]
	pub draft: Option<bool>,
	#[serde(rename = "useFirstPageNumber")]
	pub use_first_page_number: Option<bool>,
	#[serde(rename = "horizontalDpi")]
	pub horizontal_dpi: Option<i32>,
	#[serde(rename = "verticalDpi")]
	pub vertical_dpi: Option<i32>,
	#[serde(rename = "copies")]
	pub copies: Option<u32>,
}


// CTPrintSettings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPrintSettings {
	#[serde(rename = "headerFooter")]
	pub header_footer: Option<CTHeaderFooter>,
	#[serde(rename = "pageMargins")]
	pub page_margins: Option<CTPageMargins>,
	#[serde(rename = "pageSetup")]
	pub page_setup: Option<CTPageSetup>,
}


// CTChartSpace ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartSpace {
	#[serde(rename = "date1904")]
	pub date1904: Option<CTBoolean>,
	#[serde(rename = "lang")]
	pub lang: Option<CTTextLanguageID>,
	#[serde(rename = "roundedCorners")]
	pub rounded_corners: Option<CTBoolean>,
	#[serde(rename = "style")]
	pub style: Option<CTStyle>,
	#[serde(rename = "clrMapOvr")]
	pub clr_map_ovr: Option<CTColorMapping>,
	#[serde(rename = "pivotSource")]
	pub pivot_source: Option<CTPivotSource>,
	#[serde(rename = "protection")]
	pub protection: Option<CTProtection>,
	#[serde(rename = "chart")]
	pub chart: CTChart,
	#[serde(rename = "spPr")]
	pub sp_pr: Option<CTShapeProperties>,
	#[serde(rename = "txPr")]
	pub tx_pr: Option<CTTextBody>,
	#[serde(rename = "externalData")]
	pub external_data: Option<CTExternalData>,
	#[serde(rename = "printSettings")]
	pub print_settings: Option<CTPrintSettings>,
	#[serde(rename = "userShapes")]
	pub user_shapes: Option<CTRelId>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTExtensionList>,
}


// chart_space ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct chart_space {
	#[serde(rename = "chartSpace")]
	pub chart_space: CTChartSpace,
}


// user_shapes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct user_shapes {
	#[serde(rename = "userShapes")]
	pub user_shapes: CTDrawing,
}


// chart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct chart {
	#[serde(rename = "chart")]
	pub chart: CTRelId,
}
