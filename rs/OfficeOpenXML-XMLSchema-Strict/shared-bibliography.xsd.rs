// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// STSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSourceType {
	#[serde(rename = "ST_SourceType")]
	pub st_source_type: String,
}


// CTNameListType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNameListType {
	#[serde(rename = "Person")]
	pub person: Vec<CTPersonType>,
}


// CTPersonType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPersonType {
	#[serde(rename = "Last")]
	pub last: Vec<String>,
	#[serde(rename = "First")]
	pub first: Vec<String>,
	#[serde(rename = "Middle")]
	pub middle: Vec<String>,
}


// CTNameType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNameType {
	#[serde(rename = "NameList")]
	pub name_list: CTNameListType,
}


// CTNameOrCorporateType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNameOrCorporateType {
	#[serde(rename = "NameList")]
	pub name_list: CTNameListType,
	#[serde(rename = "Corporate")]
	pub corporate: String,
}


// CTAuthorType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAuthorType {
	#[serde(rename = "Artist")]
	pub artist: Vec<CTNameType>,
	#[serde(rename = "Author")]
	pub author: Vec<CTNameOrCorporateType>,
	#[serde(rename = "BookAuthor")]
	pub book_author: Vec<CTNameType>,
	#[serde(rename = "Compiler")]
	pub compiler: Vec<CTNameType>,
	#[serde(rename = "Composer")]
	pub composer: Vec<CTNameType>,
	#[serde(rename = "Conductor")]
	pub conductor: Vec<CTNameType>,
	#[serde(rename = "Counsel")]
	pub counsel: Vec<CTNameType>,
	#[serde(rename = "Director")]
	pub director: Vec<CTNameType>,
	#[serde(rename = "Editor")]
	pub editor: Vec<CTNameType>,
	#[serde(rename = "Interviewee")]
	pub interviewee: Vec<CTNameType>,
	#[serde(rename = "Interviewer")]
	pub interviewer: Vec<CTNameType>,
	#[serde(rename = "Inventor")]
	pub inventor: Vec<CTNameType>,
	#[serde(rename = "Performer")]
	pub performer: Vec<CTNameOrCorporateType>,
	#[serde(rename = "ProducerName")]
	pub producer_name: Vec<CTNameType>,
	#[serde(rename = "Translator")]
	pub translator: Vec<CTNameType>,
	#[serde(rename = "Writer")]
	pub writer: Vec<CTNameType>,
}


// CTSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSourceType {
	#[serde(rename = "AbbreviatedCaseNumber")]
	pub abbreviated_case_number: Vec<String>,
	#[serde(rename = "AlbumTitle")]
	pub album_title: Vec<String>,
	#[serde(rename = "Author")]
	pub author: Vec<CTAuthorType>,
	#[serde(rename = "BookTitle")]
	pub book_title: Vec<String>,
	#[serde(rename = "Broadcaster")]
	pub broadcaster: Vec<String>,
	#[serde(rename = "BroadcastTitle")]
	pub broadcast_title: Vec<String>,
	#[serde(rename = "CaseNumber")]
	pub case_number: Vec<String>,
	#[serde(rename = "ChapterNumber")]
	pub chapter_number: Vec<String>,
	#[serde(rename = "City")]
	pub city: Vec<String>,
	#[serde(rename = "Comments")]
	pub comments: Vec<String>,
	#[serde(rename = "ConferenceName")]
	pub conference_name: Vec<String>,
	#[serde(rename = "CountryRegion")]
	pub country_region: Vec<String>,
	#[serde(rename = "Court")]
	pub court: Vec<String>,
	#[serde(rename = "Day")]
	pub day: Vec<String>,
	#[serde(rename = "DayAccessed")]
	pub day_accessed: Vec<String>,
	#[serde(rename = "Department")]
	pub department: Vec<String>,
	#[serde(rename = "Distributor")]
	pub distributor: Vec<String>,
	#[serde(rename = "Edition")]
	pub edition: Vec<String>,
	#[serde(rename = "Guid")]
	pub guid: Vec<String>,
	#[serde(rename = "Institution")]
	pub institution: Vec<String>,
	#[serde(rename = "InternetSiteTitle")]
	pub internet_site_title: Vec<String>,
	#[serde(rename = "Issue")]
	pub issue: Vec<String>,
	#[serde(rename = "JournalName")]
	pub journal_name: Vec<String>,
	#[serde(rename = "LCID")]
	pub lcid: Vec<String>,
	#[serde(rename = "Medium")]
	pub medium: Vec<String>,
	#[serde(rename = "Month")]
	pub month: Vec<String>,
	#[serde(rename = "MonthAccessed")]
	pub month_accessed: Vec<String>,
	#[serde(rename = "NumberVolumes")]
	pub number_volumes: Vec<String>,
	#[serde(rename = "Pages")]
	pub pages: Vec<String>,
	#[serde(rename = "PatentNumber")]
	pub patent_number: Vec<String>,
	#[serde(rename = "PeriodicalTitle")]
	pub periodical_title: Vec<String>,
	#[serde(rename = "ProductionCompany")]
	pub production_company: Vec<String>,
	#[serde(rename = "PublicationTitle")]
	pub publication_title: Vec<String>,
	#[serde(rename = "Publisher")]
	pub publisher: Vec<String>,
	#[serde(rename = "RecordingNumber")]
	pub recording_number: Vec<String>,
	#[serde(rename = "RefOrder")]
	pub ref_order: Vec<String>,
	#[serde(rename = "Reporter")]
	pub reporter: Vec<String>,
	#[serde(rename = "SourceType")]
	pub source_type: Vec<String>,
	#[serde(rename = "ShortTitle")]
	pub short_title: Vec<String>,
	#[serde(rename = "StandardNumber")]
	pub standard_number: Vec<String>,
	#[serde(rename = "StateProvince")]
	pub state_province: Vec<String>,
	#[serde(rename = "Station")]
	pub station: Vec<String>,
	#[serde(rename = "Tag")]
	pub tag: Vec<String>,
	#[serde(rename = "Theater")]
	pub theater: Vec<String>,
	#[serde(rename = "ThesisType")]
	pub thesis_type: Vec<String>,
	#[serde(rename = "Title")]
	pub title: Vec<String>,
	#[serde(rename = "Type")]
	pub type_attr: Vec<String>,
	#[serde(rename = "URL")]
	pub url: Vec<String>,
	#[serde(rename = "Version")]
	pub version: Vec<String>,
	#[serde(rename = "Volume")]
	pub volume: Vec<String>,
	#[serde(rename = "Year")]
	pub year: Vec<String>,
	#[serde(rename = "YearAccessed")]
	pub year_accessed: Vec<String>,
}


// sources ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sources {
	#[serde(rename = "Sources")]
	pub sources: CTSources,
}


// CTSources ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSources {
	#[serde(rename = "SelectedStyle")]
	pub selected_style: Option<String>,
	#[serde(rename = "StyleName")]
	pub style_name: Option<String>,
	#[serde(rename = "URI")]
	pub uri: Option<String>,
	#[serde(rename = "Source")]
	pub source: Vec<CTSourceType>,
}
