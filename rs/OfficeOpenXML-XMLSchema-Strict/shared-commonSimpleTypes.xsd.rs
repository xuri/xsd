// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// STLang ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STLang {
	#[serde(rename = "ST_Lang")]
	pub st_lang: String,
}


// STHexColorRGB ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHexColorRGB {
	#[serde(rename = "ST_HexColorRGB")]
	pub st_hex_color_rgb: String,
}


// STPanose ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPanose {
	#[serde(rename = "ST_Panose")]
	pub st_panose: String,
}


// STCalendarType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCalendarType {
	#[serde(rename = "ST_CalendarType")]
	pub st_calendar_type: String,
}


// STGuid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGuid {
	#[serde(rename = "ST_Guid")]
	pub st_guid: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOnOff {
	#[serde(rename = "ST_OnOff")]
	pub boolean: bool,
}


// STString ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STString {
	#[serde(rename = "ST_String")]
	pub st_string: String,
}


// STXmlName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STXmlName {
	#[serde(rename = "ST_XmlName")]
	pub st_xml_name: String,
}


// STUnsignedDecimalNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUnsignedDecimalNumber {
	#[serde(rename = "ST_UnsignedDecimalNumber")]
	pub st_unsigned_decimal_number: u64,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTwipsMeasure {
	#[serde(rename = "ST_TwipsMeasure")]
	pub st_positive_universal_measure: STPositiveUniversalMeasure,
	#[serde(rename = "ST_TwipsMeasure")]
	pub st_unsigned_decimal_number: u64,
}


// STVerticalAlignRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVerticalAlignRun {
	#[serde(rename = "ST_VerticalAlignRun")]
	pub st_vertical_align_run: String,
}


// STXstring ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STXstring {
	#[serde(rename = "ST_Xstring")]
	pub st_xstring: String,
}


// STXAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STXAlign {
	#[serde(rename = "ST_XAlign")]
	pub st_x_align: String,
}


// STYAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STYAlign {
	#[serde(rename = "ST_YAlign")]
	pub st_y_align: String,
}


// STConformanceClass ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConformanceClass {
	#[serde(rename = "ST_ConformanceClass")]
	pub st_conformance_class: String,
}


// STUniversalMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUniversalMeasure {
	#[serde(rename = "ST_UniversalMeasure")]
	pub st_universal_measure: String,
}


// STPositiveUniversalMeasure ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveUniversalMeasure {
	#[serde(rename = "ST_PositiveUniversalMeasure")]
	pub st_positive_universal_measure: String,
}


// STPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPercentage {
	#[serde(rename = "ST_Percentage")]
	pub st_percentage: String,
}


// STFixedPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFixedPercentage {
	#[serde(rename = "ST_FixedPercentage")]
	pub st_fixed_percentage: String,
}


// STPositivePercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositivePercentage {
	#[serde(rename = "ST_PositivePercentage")]
	pub st_positive_percentage: String,
}


// STPositiveFixedPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositiveFixedPercentage {
	#[serde(rename = "ST_PositiveFixedPercentage")]
	pub st_positive_fixed_percentage: String,
}
