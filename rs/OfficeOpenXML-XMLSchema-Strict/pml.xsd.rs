// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// STTransitionSideDirectionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTransitionSideDirectionType {
	#[serde(rename = "ST_TransitionSideDirectionType")]
	pub st_transition_side_direction_type: String,
}


// STTransitionCornerDirectionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTransitionCornerDirectionType {
	#[serde(rename = "ST_TransitionCornerDirectionType")]
	pub st_transition_corner_direction_type: String,
}


// STTransitionInOutDirectionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTransitionInOutDirectionType {
	#[serde(rename = "ST_TransitionInOutDirectionType")]
	pub st_transition_in_out_direction_type: String,
}


// CTSideDirectionTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSideDirectionTransition {
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}


// CTCornerDirectionTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCornerDirectionTransition {
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTransitionEightDirectionType {
	#[serde(rename = "ST_TransitionEightDirectionType")]
	pub st_transition_side_direction_type: String,
	#[serde(rename = "ST_TransitionEightDirectionType")]
	pub st_transition_corner_direction_type: String,
}


// CTEightDirectionTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEightDirectionTransition {
	#[serde(rename = "dir")]
	pub dir: Option<STTransitionEightDirectionType>,
}


// CTOrientationTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOrientationTransition {
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}


// CTInOutTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInOutTransition {
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}


// CTOptionalBlackTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOptionalBlackTransition {
	#[serde(rename = "thruBlk")]
	pub thru_blk: Option<bool>,
}


// CTSplitTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSplitTransition {
	#[serde(rename = "orient")]
	pub orient: Option<String>,
	#[serde(rename = "dir")]
	pub dir: Option<String>,
}


// CTWheelTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWheelTransition {
	#[serde(rename = "spokes")]
	pub spokes: Option<u32>,
}


// CTTransitionStartSoundAction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTransitionStartSoundAction {
	#[serde(rename = "loop")]
	pub loop_attr: Option<bool>,
	#[serde(rename = "snd")]
	pub snd: CTEmbeddedWAVAudioFile,
}


// CTTransitionSoundAction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTransitionSoundAction {
	#[serde(rename = "stSnd")]
	pub st_snd: CTTransitionStartSoundAction,
	#[serde(rename = "endSnd")]
	pub end_snd: CTEmpty,
}


// STTransitionSpeed ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTransitionSpeed {
	#[serde(rename = "ST_TransitionSpeed")]
	pub st_transition_speed: String,
}


// CTSlideTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideTransition {
	#[serde(rename = "spd")]
	pub spd: Option<String>,
	#[serde(rename = "advClick")]
	pub adv_click: Option<bool>,
	#[serde(rename = "advTm")]
	pub adv_tm: Option<u32>,
	#[serde(rename = "blinds")]
	pub blinds: CTOrientationTransition,
	#[serde(rename = "checker")]
	pub checker: CTOrientationTransition,
	#[serde(rename = "circle")]
	pub circle: CTEmpty,
	#[serde(rename = "dissolve")]
	pub dissolve: CTEmpty,
	#[serde(rename = "comb")]
	pub comb: CTOrientationTransition,
	#[serde(rename = "cover")]
	pub cover: CTEightDirectionTransition,
	#[serde(rename = "cut")]
	pub cut: CTOptionalBlackTransition,
	#[serde(rename = "diamond")]
	pub diamond: CTEmpty,
	#[serde(rename = "fade")]
	pub fade: CTOptionalBlackTransition,
	#[serde(rename = "newsflash")]
	pub newsflash: CTEmpty,
	#[serde(rename = "plus")]
	pub plus: CTEmpty,
	#[serde(rename = "pull")]
	pub pull: CTEightDirectionTransition,
	#[serde(rename = "push")]
	pub push: CTSideDirectionTransition,
	#[serde(rename = "random")]
	pub random: CTEmpty,
	#[serde(rename = "randomBar")]
	pub random_bar: CTOrientationTransition,
	#[serde(rename = "split")]
	pub split: CTSplitTransition,
	#[serde(rename = "strips")]
	pub strips: CTCornerDirectionTransition,
	#[serde(rename = "wedge")]
	pub wedge: CTEmpty,
	#[serde(rename = "wheel")]
	pub wheel: CTWheelTransition,
	#[serde(rename = "wipe")]
	pub wipe: CTSideDirectionTransition,
	#[serde(rename = "zoom")]
	pub zoom: CTInOutTransition,
	#[serde(rename = "sndAc")]
	pub snd_ac: CTTransitionSoundAction,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// STTLTimeIndefinite ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeIndefinite {
	#[serde(rename = "ST_TLTimeIndefinite")]
	pub st_tl_time_indefinite: String,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTime {
	#[serde(rename = "ST_TLTime")]
	pub st_tl_time_indefinite: String,
	#[serde(rename = "ST_TLTime")]
	pub unsigned_int: u32,
}


// STTLTimeNodeID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeID {
	#[serde(rename = "ST_TLTimeNodeID")]
	pub st_tl_time_node_id: u32,
}


// CTTLIterateIntervalTime ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLIterateIntervalTime {
	#[serde(rename = "val")]
	pub val: STTLTime,
}


// CTTLIterateIntervalPercentage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLIterateIntervalPercentage {
	#[serde(rename = "val")]
	pub val: STPositivePercentage,
}


// STIterateType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STIterateType {
	#[serde(rename = "ST_IterateType")]
	pub st_iterate_type: String,
}


// CTTLIterateData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLIterateData {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "backwards")]
	pub backwards: Option<bool>,
	#[serde(rename = "tmAbs")]
	pub tm_abs: CTTLIterateIntervalTime,
	#[serde(rename = "tmPct")]
	pub tm_pct: CTTLIterateIntervalPercentage,
}


// CTTLSubShapeId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLSubShapeId {
	#[serde(rename = "spid")]
	pub spid: String,
}


// CTTLTextTargetElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTextTargetElement {
	#[serde(rename = "charRg")]
	pub char_rg: CTIndexRange,
	#[serde(rename = "pRg")]
	pub p_rg: CTIndexRange,
}


// STTLChartSubelementType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLChartSubelementType {
	#[serde(rename = "ST_TLChartSubelementType")]
	pub st_tl_chart_subelement_type: String,
}


// CTTLOleChartTargetElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLOleChartTargetElement {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "lvl")]
	pub lvl: Option<u32>,
}


// CTTLShapeTargetElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLShapeTargetElement {
	#[serde(rename = "spid")]
	pub spid: u32,
	#[serde(rename = "bg")]
	pub bg: CTEmpty,
	#[serde(rename = "subSp")]
	pub sub_sp: CTTLSubShapeId,
	#[serde(rename = "oleChartEl")]
	pub ole_chart_el: CTTLOleChartTargetElement,
	#[serde(rename = "txEl")]
	pub tx_el: CTTLTextTargetElement,
	#[serde(rename = "graphicEl")]
	pub graphic_el: CTAnimationElementChoice,
}


// CTTLTimeTargetElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeTargetElement {
	#[serde(rename = "sldTgt")]
	pub sld_tgt: CTEmpty,
	#[serde(rename = "sndTgt")]
	pub snd_tgt: CTEmbeddedWAVAudioFile,
	#[serde(rename = "spTgt")]
	pub sp_tgt: CTTLShapeTargetElement,
	#[serde(rename = "inkTgt")]
	pub ink_tgt: CTTLSubShapeId,
}


// CTTLTriggerTimeNodeID ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTriggerTimeNodeID {
	#[serde(rename = "val")]
	pub val: u32,
}


// STTLTriggerRuntimeNode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTriggerRuntimeNode {
	#[serde(rename = "ST_TLTriggerRuntimeNode")]
	pub st_tl_trigger_runtime_node: String,
}


// CTTLTriggerRuntimeNode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTriggerRuntimeNode {
	#[serde(rename = "val")]
	pub val: String,
}


// STTLTriggerEvent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTriggerEvent {
	#[serde(rename = "ST_TLTriggerEvent")]
	pub st_tl_trigger_event: String,
}


// CTTLTimeCondition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeCondition {
	#[serde(rename = "evt")]
	pub evt: Option<String>,
	#[serde(rename = "delay")]
	pub delay: Option<STTLTime>,
	#[serde(rename = "tgtEl")]
	pub tgt_el: CTTLTimeTargetElement,
	#[serde(rename = "tn")]
	pub tn: CTTLTriggerTimeNodeID,
	#[serde(rename = "rtn")]
	pub rtn: CTTLTriggerRuntimeNode,
}


// CTTLTimeConditionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeConditionList {
	#[serde(rename = "cond")]
	pub cond: Vec<CTTLTimeCondition>,
}


// CTTimeNodeList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTimeNodeList {
	#[serde(rename = "par")]
	pub par: Vec<CTTLTimeNodeParallel>,
	#[serde(rename = "seq")]
	pub seq: Vec<CTTLTimeNodeSequence>,
	#[serde(rename = "excl")]
	pub excl: Vec<CTTLTimeNodeExclusive>,
	#[serde(rename = "anim")]
	pub anim: Vec<CTTLAnimateBehavior>,
	#[serde(rename = "animClr")]
	pub anim_clr: Vec<CTTLAnimateColorBehavior>,
	#[serde(rename = "animEffect")]
	pub anim_effect: Vec<CTTLAnimateEffectBehavior>,
	#[serde(rename = "animMotion")]
	pub anim_motion: Vec<CTTLAnimateMotionBehavior>,
	#[serde(rename = "animRot")]
	pub anim_rot: Vec<CTTLAnimateRotationBehavior>,
	#[serde(rename = "animScale")]
	pub anim_scale: Vec<CTTLAnimateScaleBehavior>,
	#[serde(rename = "cmd")]
	pub cmd: Vec<CTTLCommandBehavior>,
	#[serde(rename = "set")]
	pub set: Vec<CTTLSetBehavior>,
	#[serde(rename = "audio")]
	pub audio: Vec<CTTLMediaNodeAudio>,
	#[serde(rename = "video")]
	pub video: Vec<CTTLMediaNodeVideo>,
}


// STTLTimeNodePresetClassType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodePresetClassType {
	#[serde(rename = "ST_TLTimeNodePresetClassType")]
	pub st_tl_time_node_preset_class_type: String,
}


// STTLTimeNodeRestartType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeRestartType {
	#[serde(rename = "ST_TLTimeNodeRestartType")]
	pub st_tl_time_node_restart_type: String,
}


// STTLTimeNodeFillType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeFillType {
	#[serde(rename = "ST_TLTimeNodeFillType")]
	pub st_tl_time_node_fill_type: String,
}


// STTLTimeNodeSyncType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeSyncType {
	#[serde(rename = "ST_TLTimeNodeSyncType")]
	pub st_tl_time_node_sync_type: String,
}


// STTLTimeNodeMasterRelation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeMasterRelation {
	#[serde(rename = "ST_TLTimeNodeMasterRelation")]
	pub st_tl_time_node_master_relation: String,
}


// STTLTimeNodeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeNodeType {
	#[serde(rename = "ST_TLTimeNodeType")]
	pub st_tl_time_node_type: String,
}


// CTTLCommonTimeNodeData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLCommonTimeNodeData {
	#[serde(rename = "id")]
	pub id: Option<u32>,
	#[serde(rename = "presetID")]
	pub preset_id: Option<i32>,
	#[serde(rename = "presetClass")]
	pub preset_class: Option<String>,
	#[serde(rename = "presetSubtype")]
	pub preset_subtype: Option<i32>,
	#[serde(rename = "dur")]
	pub dur: Option<STTLTime>,
	#[serde(rename = "repeatCount")]
	pub repeat_count: Option<STTLTime>,
	#[serde(rename = "repeatDur")]
	pub repeat_dur: Option<STTLTime>,
	#[serde(rename = "spd")]
	pub spd: Option<STPercentage>,
	#[serde(rename = "accel")]
	pub accel: Option<STPositiveFixedPercentage>,
	#[serde(rename = "decel")]
	pub decel: Option<STPositiveFixedPercentage>,
	#[serde(rename = "autoRev")]
	pub auto_rev: Option<bool>,
	#[serde(rename = "restart")]
	pub restart: Option<String>,
	#[serde(rename = "fill")]
	pub fill: Option<String>,
	#[serde(rename = "syncBehavior")]
	pub sync_behavior: Option<String>,
	#[serde(rename = "tmFilter")]
	pub tm_filter: Option<String>,
	#[serde(rename = "evtFilter")]
	pub evt_filter: Option<String>,
	#[serde(rename = "display")]
	pub display: Option<bool>,
	#[serde(rename = "masterRel")]
	pub master_rel: Option<String>,
	#[serde(rename = "bldLvl")]
	pub bld_lvl: Option<i32>,
	#[serde(rename = "grpId")]
	pub grp_id: Option<u32>,
	#[serde(rename = "afterEffect")]
	pub after_effect: Option<bool>,
	#[serde(rename = "nodeType")]
	pub node_type: Option<String>,
	#[serde(rename = "nodePh")]
	pub node_ph: Option<bool>,
	#[serde(rename = "stCondLst")]
	pub st_cond_lst: CTTLTimeConditionList,
	#[serde(rename = "endCondLst")]
	pub end_cond_lst: CTTLTimeConditionList,
	#[serde(rename = "endSync")]
	pub end_sync: CTTLTimeCondition,
	#[serde(rename = "iterate")]
	pub iterate: CTTLIterateData,
	#[serde(rename = "childTnLst")]
	pub child_tn_lst: CTTimeNodeList,
	#[serde(rename = "subTnLst")]
	pub sub_tn_lst: CTTimeNodeList,
}


// CTTLTimeNodeParallel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeNodeParallel {
	#[serde(rename = "cTn")]
	pub c_tn: CTTLCommonTimeNodeData,
}


// STTLNextActionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLNextActionType {
	#[serde(rename = "ST_TLNextActionType")]
	pub st_tl_next_action_type: String,
}


// STTLPreviousActionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLPreviousActionType {
	#[serde(rename = "ST_TLPreviousActionType")]
	pub st_tl_previous_action_type: String,
}


// CTTLTimeNodeSequence ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeNodeSequence {
	#[serde(rename = "concurrent")]
	pub concurrent: Option<bool>,
	#[serde(rename = "prevAc")]
	pub prev_ac: Option<String>,
	#[serde(rename = "nextAc")]
	pub next_ac: Option<String>,
	#[serde(rename = "cTn")]
	pub c_tn: CTTLCommonTimeNodeData,
	#[serde(rename = "prevCondLst")]
	pub prev_cond_lst: CTTLTimeConditionList,
	#[serde(rename = "nextCondLst")]
	pub next_cond_lst: CTTLTimeConditionList,
}


// CTTLTimeNodeExclusive ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeNodeExclusive {
	#[serde(rename = "cTn")]
	pub c_tn: CTTLCommonTimeNodeData,
}


// CTTLBehaviorAttributeNameList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLBehaviorAttributeNameList {
	#[serde(rename = "attrName")]
	pub attr_name: Vec<String>,
}


// STTLBehaviorAdditiveType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLBehaviorAdditiveType {
	#[serde(rename = "ST_TLBehaviorAdditiveType")]
	pub st_tl_behavior_additive_type: String,
}


// STTLBehaviorAccumulateType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLBehaviorAccumulateType {
	#[serde(rename = "ST_TLBehaviorAccumulateType")]
	pub st_tl_behavior_accumulate_type: String,
}


// STTLBehaviorTransformType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLBehaviorTransformType {
	#[serde(rename = "ST_TLBehaviorTransformType")]
	pub st_tl_behavior_transform_type: String,
}


// STTLBehaviorOverrideType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLBehaviorOverrideType {
	#[serde(rename = "ST_TLBehaviorOverrideType")]
	pub st_tl_behavior_override_type: String,
}


// CTTLCommonBehaviorData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLCommonBehaviorData {
	#[serde(rename = "additive")]
	pub additive: Option<String>,
	#[serde(rename = "accumulate")]
	pub accumulate: Option<String>,
	#[serde(rename = "xfrmType")]
	pub xfrm_type: Option<String>,
	#[serde(rename = "from")]
	pub from: Option<String>,
	#[serde(rename = "to")]
	pub to: Option<String>,
	#[serde(rename = "by")]
	pub by: Option<String>,
	#[serde(rename = "rctx")]
	pub rctx: Option<String>,
	#[serde(rename = "override")]
	pub override_attr: Option<String>,
	#[serde(rename = "cTn")]
	pub c_tn: CTTLCommonTimeNodeData,
	#[serde(rename = "tgtEl")]
	pub tgt_el: CTTLTimeTargetElement,
	#[serde(rename = "attrNameLst")]
	pub attr_name_lst: CTTLBehaviorAttributeNameList,
}


// CTTLAnimVariantBooleanVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimVariantBooleanVal {
	#[serde(rename = "val")]
	pub val: bool,
}


// CTTLAnimVariantIntegerVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimVariantIntegerVal {
	#[serde(rename = "val")]
	pub val: i32,
}


// CTTLAnimVariantFloatVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimVariantFloatVal {
	#[serde(rename = "val")]
	pub val: f64,
}


// CTTLAnimVariantStringVal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimVariantStringVal {
	#[serde(rename = "val")]
	pub val: String,
}


// CTTLAnimVariant ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimVariant {
	#[serde(rename = "boolVal")]
	pub bool_val: CTTLAnimVariantBooleanVal,
	#[serde(rename = "intVal")]
	pub int_val: CTTLAnimVariantIntegerVal,
	#[serde(rename = "fltVal")]
	pub flt_val: CTTLAnimVariantFloatVal,
	#[serde(rename = "strVal")]
	pub str_val: CTTLAnimVariantStringVal,
	#[serde(rename = "clrVal")]
	pub clr_val: CTColor,
}

#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLTimeAnimateValueTime {
	#[serde(rename = "ST_TLTimeAnimateValueTime")]
	pub st_positive_fixed_percentage: STPositiveFixedPercentage,
	#[serde(rename = "ST_TLTimeAnimateValueTime")]
	pub st_tl_time_indefinite: String,
}


// CTTLTimeAnimateValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeAnimateValue {
	#[serde(rename = "tm")]
	pub tm: Option<STTLTimeAnimateValueTime>,
	#[serde(rename = "fmla")]
	pub fmla: Option<String>,
	#[serde(rename = "val")]
	pub val: CTTLAnimVariant,
}


// CTTLTimeAnimateValueList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTimeAnimateValueList {
	#[serde(rename = "tav")]
	pub tav: Vec<CTTLTimeAnimateValue>,
}


// STTLAnimateBehaviorCalcMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateBehaviorCalcMode {
	#[serde(rename = "ST_TLAnimateBehaviorCalcMode")]
	pub st_tl_animate_behavior_calc_mode: String,
}


// STTLAnimateBehaviorValueType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateBehaviorValueType {
	#[serde(rename = "ST_TLAnimateBehaviorValueType")]
	pub st_tl_animate_behavior_value_type: String,
}


// CTTLAnimateBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateBehavior {
	#[serde(rename = "by")]
	pub by: Option<String>,
	#[serde(rename = "from")]
	pub from: Option<String>,
	#[serde(rename = "to")]
	pub to: Option<String>,
	#[serde(rename = "calcmode")]
	pub calcmode: Option<String>,
	#[serde(rename = "valueType")]
	pub value_type: Option<String>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "tavLst")]
	pub tav_lst: CTTLTimeAnimateValueList,
}


// CTTLByRgbColorTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLByRgbColorTransform {
	#[serde(rename = "r")]
	pub r: STFixedPercentage,
	#[serde(rename = "g")]
	pub g: STFixedPercentage,
	#[serde(rename = "b")]
	pub b: STFixedPercentage,
}


// CTTLByHslColorTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLByHslColorTransform {
	#[serde(rename = "h")]
	pub h: i32,
	#[serde(rename = "s")]
	pub s: STFixedPercentage,
	#[serde(rename = "l")]
	pub l: STFixedPercentage,
}


// CTTLByAnimateColorTransform ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLByAnimateColorTransform {
	#[serde(rename = "rgb")]
	pub rgb: CTTLByRgbColorTransform,
	#[serde(rename = "hsl")]
	pub hsl: CTTLByHslColorTransform,
}


// STTLAnimateColorSpace ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateColorSpace {
	#[serde(rename = "ST_TLAnimateColorSpace")]
	pub st_tl_animate_color_space: String,
}


// STTLAnimateColorDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateColorDirection {
	#[serde(rename = "ST_TLAnimateColorDirection")]
	pub st_tl_animate_color_direction: String,
}


// CTTLAnimateColorBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateColorBehavior {
	#[serde(rename = "clrSpc")]
	pub clr_spc: Option<String>,
	#[serde(rename = "dir")]
	pub dir: Option<String>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "by")]
	pub by: CTTLByAnimateColorTransform,
	#[serde(rename = "from")]
	pub from: CTColor,
	#[serde(rename = "to")]
	pub to: CTColor,
}


// STTLAnimateEffectTransition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateEffectTransition {
	#[serde(rename = "ST_TLAnimateEffectTransition")]
	pub st_tl_animate_effect_transition: String,
}


// CTTLAnimateEffectBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateEffectBehavior {
	#[serde(rename = "transition")]
	pub transition: Option<String>,
	#[serde(rename = "filter")]
	pub filter: Option<String>,
	#[serde(rename = "prLst")]
	pub pr_lst: Option<String>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "progress")]
	pub progress: CTTLAnimVariant,
}


// STTLAnimateMotionBehaviorOrigin ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateMotionBehaviorOrigin {
	#[serde(rename = "ST_TLAnimateMotionBehaviorOrigin")]
	pub st_tl_animate_motion_behavior_origin: String,
}


// STTLAnimateMotionPathEditMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLAnimateMotionPathEditMode {
	#[serde(rename = "ST_TLAnimateMotionPathEditMode")]
	pub st_tl_animate_motion_path_edit_mode: String,
}


// CTTLPoint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLPoint {
	#[serde(rename = "x")]
	pub x: STPercentage,
	#[serde(rename = "y")]
	pub y: STPercentage,
}


// CTTLAnimateMotionBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateMotionBehavior {
	#[serde(rename = "origin")]
	pub origin: Option<String>,
	#[serde(rename = "path")]
	pub path: Option<String>,
	#[serde(rename = "pathEditMode")]
	pub path_edit_mode: Option<String>,
	#[serde(rename = "rAng")]
	pub r_ang: Option<i32>,
	#[serde(rename = "ptsTypes")]
	pub pts_types: Option<String>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "by")]
	pub by: CTTLPoint,
	#[serde(rename = "from")]
	pub from: CTTLPoint,
	#[serde(rename = "to")]
	pub to: CTTLPoint,
	#[serde(rename = "rCtr")]
	pub r_ctr: CTTLPoint,
}


// CTTLAnimateRotationBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateRotationBehavior {
	#[serde(rename = "by")]
	pub by: Option<i32>,
	#[serde(rename = "from")]
	pub from: Option<i32>,
	#[serde(rename = "to")]
	pub to: Option<i32>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
}


// CTTLAnimateScaleBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLAnimateScaleBehavior {
	#[serde(rename = "zoomContents")]
	pub zoom_contents: Option<bool>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "by")]
	pub by: CTTLPoint,
	#[serde(rename = "from")]
	pub from: CTTLPoint,
	#[serde(rename = "to")]
	pub to: CTTLPoint,
}


// STTLCommandType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLCommandType {
	#[serde(rename = "ST_TLCommandType")]
	pub st_tl_command_type: String,
}


// CTTLCommandBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLCommandBehavior {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "cmd")]
	pub cmd: Option<String>,
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
}


// CTTLSetBehavior ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLSetBehavior {
	#[serde(rename = "cBhvr")]
	pub c_bhvr: CTTLCommonBehaviorData,
	#[serde(rename = "to")]
	pub to: CTTLAnimVariant,
}


// CTTLCommonMediaNodeData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLCommonMediaNodeData {
	#[serde(rename = "vol")]
	pub vol: Option<STPositiveFixedPercentage>,
	#[serde(rename = "mute")]
	pub mute: Option<bool>,
	#[serde(rename = "numSld")]
	pub num_sld: Option<u32>,
	#[serde(rename = "showWhenStopped")]
	pub show_when_stopped: Option<bool>,
	#[serde(rename = "cTn")]
	pub c_tn: CTTLCommonTimeNodeData,
	#[serde(rename = "tgtEl")]
	pub tgt_el: CTTLTimeTargetElement,
}


// CTTLMediaNodeAudio ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLMediaNodeAudio {
	#[serde(rename = "isNarration")]
	pub is_narration: Option<bool>,
	#[serde(rename = "cMediaNode")]
	pub c_media_node: CTTLCommonMediaNodeData,
}


// CTTLMediaNodeVideo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLMediaNodeVideo {
	#[serde(rename = "fullScrn")]
	pub full_scrn: Option<bool>,
	#[serde(rename = "cMediaNode")]
	pub c_media_node: CTTLCommonMediaNodeData,
}


// AGTLBuild ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGTLBuild {
	#[serde(rename = "spid")]
	pub spid: Vec<u32>,
	#[serde(rename = "grpId")]
	pub grp_id: Vec<u32>,
	#[serde(rename = "uiExpand")]
	pub ui_expand: Option<bool>,
}


// CTTLTemplate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTemplate {
	#[serde(rename = "lvl")]
	pub lvl: Option<u32>,
	#[serde(rename = "tnLst")]
	pub tn_lst: CTTimeNodeList,
}


// CTTLTemplateList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLTemplateList {
	#[serde(rename = "tmpl")]
	pub tmpl: Vec<CTTLTemplate>,
}


// STTLParaBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLParaBuildType {
	#[serde(rename = "ST_TLParaBuildType")]
	pub st_tl_para_build_type: String,
}


// CTTLBuildParagraph ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLBuildParagraph {
	#[serde(rename = "AG_TLBuild")]
	pub ag_tl_build: Vec<AGTLBuild>,
	#[serde(rename = "build")]
	pub build: Option<String>,
	#[serde(rename = "bldLvl")]
	pub bld_lvl: Option<u32>,
	#[serde(rename = "animBg")]
	pub anim_bg: Option<bool>,
	#[serde(rename = "autoUpdateAnimBg")]
	pub auto_update_anim_bg: Option<bool>,
	#[serde(rename = "rev")]
	pub rev: Option<bool>,
	#[serde(rename = "advAuto")]
	pub adv_auto: Option<STTLTime>,
	#[serde(rename = "tmplLst")]
	pub tmpl_lst: CTTLTemplateList,
}


// STTLDiagramBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLDiagramBuildType {
	#[serde(rename = "ST_TLDiagramBuildType")]
	pub st_tl_diagram_build_type: String,
}


// CTTLBuildDiagram ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLBuildDiagram {
	#[serde(rename = "AG_TLBuild")]
	pub ag_tl_build: Vec<AGTLBuild>,
	#[serde(rename = "bld")]
	pub bld: Option<String>,
}


// STTLOleChartBuildType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTLOleChartBuildType {
	#[serde(rename = "ST_TLOleChartBuildType")]
	pub st_tl_ole_chart_build_type: String,
}


// CTTLOleBuildChart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLOleBuildChart {
	#[serde(rename = "AG_TLBuild")]
	pub ag_tl_build: Vec<AGTLBuild>,
	#[serde(rename = "bld")]
	pub bld: Option<String>,
	#[serde(rename = "animBg")]
	pub anim_bg: Option<bool>,
}


// CTTLGraphicalObjectBuild ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTLGraphicalObjectBuild {
	#[serde(rename = "AG_TLBuild")]
	pub ag_tl_build: Vec<AGTLBuild>,
	#[serde(rename = "bldAsOne")]
	pub bld_as_one: CTEmpty,
	#[serde(rename = "bldSub")]
	pub bld_sub: CTAnimationGraphicalObjectBuildProperties,
}


// CTBuildList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBuildList {
	#[serde(rename = "bldP")]
	pub bld_p: Vec<CTTLBuildParagraph>,
	#[serde(rename = "bldDgm")]
	pub bld_dgm: Vec<CTTLBuildDiagram>,
	#[serde(rename = "bldOleChart")]
	pub bld_ole_chart: Vec<CTTLOleBuildChart>,
	#[serde(rename = "bldGraphic")]
	pub bld_graphic: Vec<CTTLGraphicalObjectBuild>,
}


// CTSlideTiming ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideTiming {
	#[serde(rename = "tnLst")]
	pub tn_lst: CTTimeNodeList,
	#[serde(rename = "bldLst")]
	pub bld_lst: CTBuildList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTEmpty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmpty {
}


// STName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STName {
	#[serde(rename = "ST_Name")]
	pub st_name: String,
}


// STDirection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDirection {
	#[serde(rename = "ST_Direction")]
	pub st_direction: String,
}


// STIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STIndex {
	#[serde(rename = "ST_Index")]
	pub st_index: u32,
}


// CTIndexRange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIndexRange {
	#[serde(rename = "st")]
	pub st: u32,
	#[serde(rename = "end")]
	pub end: u32,
}


// CTSlideRelationshipListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideRelationshipListEntry {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTSlideRelationshipList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideRelationshipList {
	#[serde(rename = "sld")]
	pub sld: Vec<CTSlideRelationshipListEntry>,
}


// CTCustomShowId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomShowId {
	#[serde(rename = "id")]
	pub id: u32,
}


// EGSlideListChoice ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGSlideListChoice {
	#[serde(rename = "sldAll")]
	pub sld_all: CTEmpty,
	#[serde(rename = "sldRg")]
	pub sld_rg: CTIndexRange,
	#[serde(rename = "custShow")]
	pub cust_show: CTCustomShowId,
}


// CTCustomerData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomerData {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTTagsData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTagsData {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTCustomerDataList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomerDataList {
	#[serde(rename = "custData")]
	pub cust_data: Vec<CTCustomerData>,
	#[serde(rename = "tags")]
	pub tags: CTTagsData,
}


// CTExtension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtension {
	#[serde(rename = "uri")]
	pub uri: String,
}


// EGExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGExtensionList {
	#[serde(rename = "ext")]
	pub ext: CTExtension,
}


// CTExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtensionList {
	#[serde(rename = "EG_ExtensionList")]
	pub eg_extension_list: Vec<EGExtensionList>,
}


// CTExtensionListModify ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtensionListModify {
	#[serde(rename = "mod")]
	pub mod_attr: Option<bool>,
	#[serde(rename = "EG_ExtensionList")]
	pub eg_extension_list: Vec<EGExtensionList>,
}


// CTCommentAuthor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommentAuthor {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "initials")]
	pub initials: String,
	#[serde(rename = "lastIdx")]
	pub last_idx: u32,
	#[serde(rename = "clrIdx")]
	pub clr_idx: u32,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCommentAuthorList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommentAuthorList {
	#[serde(rename = "cmAuthor")]
	pub cm_author: Vec<CTCommentAuthor>,
}


// cm_author_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct cm_author_lst {
	#[serde(rename = "cmAuthorLst")]
	pub cm_author_lst: CTCommentAuthorList,
}


// CTComment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComment {
	#[serde(rename = "authorId")]
	pub author_id: u32,
	#[serde(rename = "dt")]
	pub dt: Option<u8>,
	#[serde(rename = "idx")]
	pub idx: u32,
	#[serde(rename = "pos")]
	pub pos: CTPoint2D,
	#[serde(rename = "text")]
	pub text: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTCommentList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommentList {
	#[serde(rename = "cm")]
	pub cm: Vec<CTComment>,
}


// cm_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct cm_lst {
	#[serde(rename = "cmLst")]
	pub cm_lst: CTCommentList,
}


// AGOle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGOle {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "showAsIcon")]
	pub show_as_icon: Option<bool>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "imgW")]
	pub img_w: Option<i32>,
	#[serde(rename = "imgH")]
	pub img_h: Option<i32>,
}


// STOleObjectFollowColorScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOleObjectFollowColorScheme {
	#[serde(rename = "ST_OleObjectFollowColorScheme")]
	pub st_ole_object_follow_color_scheme: String,
}


// CTOleObjectEmbed ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleObjectEmbed {
	#[serde(rename = "followColorScheme")]
	pub follow_color_scheme: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTOleObjectLink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleObjectLink {
	#[serde(rename = "updateAutomatic")]
	pub update_automatic: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTOleObject ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleObject {
	#[serde(rename = "AG_Ole")]
	pub ag_ole: Vec<AGOle>,
	#[serde(rename = "progId")]
	pub prog_id: Option<String>,
	#[serde(rename = "embed")]
	pub embed: CTOleObjectEmbed,
	#[serde(rename = "link")]
	pub link: CTOleObjectLink,
	#[serde(rename = "pic")]
	pub pic: CTPicture,
}


// ole_obj ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ole_obj {
	#[serde(rename = "oleObj")]
	pub ole_obj: CTOleObject,
}


// CTControl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControl {
	#[serde(rename = "AG_Ole")]
	pub ag_ole: Vec<AGOle>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
	#[serde(rename = "pic")]
	pub pic: CTPicture,
}


// CTControlList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControlList {
	#[serde(rename = "control")]
	pub control: Vec<CTControl>,
}


// STSlideId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideId {
	#[serde(rename = "ST_SlideId")]
	pub st_slide_id: u32,
}


// CTSlideIdListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideIdListEntry {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSlideIdList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideIdList {
	#[serde(rename = "sldId")]
	pub sld_id: Vec<CTSlideIdListEntry>,
}


// STSlideMasterId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideMasterId {
	#[serde(rename = "ST_SlideMasterId")]
	pub st_slide_master_id: u32,
}


// CTSlideMasterIdListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideMasterIdListEntry {
	#[serde(rename = "id")]
	pub id: Option<u32>,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSlideMasterIdList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideMasterIdList {
	#[serde(rename = "sldMasterId")]
	pub sld_master_id: Vec<CTSlideMasterIdListEntry>,
}


// CTNotesMasterIdListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesMasterIdListEntry {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTNotesMasterIdList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesMasterIdList {
	#[serde(rename = "notesMasterId")]
	pub notes_master_id: CTNotesMasterIdListEntry,
}


// CTHandoutMasterIdListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHandoutMasterIdListEntry {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTHandoutMasterIdList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHandoutMasterIdList {
	#[serde(rename = "handoutMasterId")]
	pub handout_master_id: CTHandoutMasterIdListEntry,
}


// CTEmbeddedFontDataId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmbeddedFontDataId {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTEmbeddedFontListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmbeddedFontListEntry {
	#[serde(rename = "font")]
	pub font: CTTextFont,
	#[serde(rename = "regular")]
	pub regular: CTEmbeddedFontDataId,
	#[serde(rename = "bold")]
	pub bold: CTEmbeddedFontDataId,
	#[serde(rename = "italic")]
	pub italic: CTEmbeddedFontDataId,
	#[serde(rename = "boldItalic")]
	pub bold_italic: CTEmbeddedFontDataId,
}


// CTEmbeddedFontList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmbeddedFontList {
	#[serde(rename = "embeddedFont")]
	pub embedded_font: Vec<CTEmbeddedFontListEntry>,
}


// CTSmartTags ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTags {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTCustomShow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomShow {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "sldLst")]
	pub sld_lst: CTSlideRelationshipList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCustomShowList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomShowList {
	#[serde(rename = "custShow")]
	pub cust_show: Vec<CTCustomShow>,
}


// STPhotoAlbumLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPhotoAlbumLayout {
	#[serde(rename = "ST_PhotoAlbumLayout")]
	pub st_photo_album_layout: String,
}


// STPhotoAlbumFrameShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPhotoAlbumFrameShape {
	#[serde(rename = "ST_PhotoAlbumFrameShape")]
	pub st_photo_album_frame_shape: String,
}


// CTPhotoAlbum ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPhotoAlbum {
	#[serde(rename = "bw")]
	pub bw: Option<bool>,
	#[serde(rename = "showCaptions")]
	pub show_captions: Option<bool>,
	#[serde(rename = "layout")]
	pub layout: Option<String>,
	#[serde(rename = "frame")]
	pub frame: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STSlideSizeCoordinate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideSizeCoordinate {
	#[serde(rename = "ST_SlideSizeCoordinate")]
	pub st_slide_size_coordinate: i32,
}


// STSlideSizeType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideSizeType {
	#[serde(rename = "ST_SlideSizeType")]
	pub st_slide_size_type: String,
}


// CTSlideSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideSize {
	#[serde(rename = "cx")]
	pub cx: i32,
	#[serde(rename = "cy")]
	pub cy: i32,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
}


// CTKinsoku ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTKinsoku {
	#[serde(rename = "lang")]
	pub lang: Option<String>,
	#[serde(rename = "invalStChars")]
	pub inval_st_chars: String,
	#[serde(rename = "invalEndChars")]
	pub inval_end_chars: String,
}


// STBookmarkIdSeed ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBookmarkIdSeed {
	#[serde(rename = "ST_BookmarkIdSeed")]
	pub st_bookmark_id_seed: u32,
}


// CTModifyVerifier ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTModifyVerifier {
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinValue")]
	pub spin_value: Option<u32>,
}


// CTPresentation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresentation {
	#[serde(rename = "serverZoom")]
	pub server_zoom: Option<STPercentage>,
	#[serde(rename = "firstSlideNum")]
	pub first_slide_num: Option<i32>,
	#[serde(rename = "showSpecialPlsOnTitleSld")]
	pub show_special_pls_on_title_sld: Option<bool>,
	#[serde(rename = "rtl")]
	pub rtl: Option<bool>,
	#[serde(rename = "removePersonalInfoOnSave")]
	pub remove_personal_info_on_save: Option<bool>,
	#[serde(rename = "compatMode")]
	pub compat_mode: Option<bool>,
	#[serde(rename = "strictFirstAndLastChars")]
	pub strict_first_and_last_chars: Option<bool>,
	#[serde(rename = "embedTrueTypeFonts")]
	pub embed_true_type_fonts: Option<bool>,
	#[serde(rename = "saveSubsetFonts")]
	pub save_subset_fonts: Option<bool>,
	#[serde(rename = "autoCompressPictures")]
	pub auto_compress_pictures: Option<bool>,
	#[serde(rename = "bookmarkIdSeed")]
	pub bookmark_id_seed: Option<u32>,
	#[serde(rename = "conformance")]
	pub conformance: Option<String>,
	#[serde(rename = "sldMasterIdLst")]
	pub sld_master_id_lst: CTSlideMasterIdList,
	#[serde(rename = "notesMasterIdLst")]
	pub notes_master_id_lst: CTNotesMasterIdList,
	#[serde(rename = "handoutMasterIdLst")]
	pub handout_master_id_lst: CTHandoutMasterIdList,
	#[serde(rename = "sldIdLst")]
	pub sld_id_lst: CTSlideIdList,
	#[serde(rename = "sldSz")]
	pub sld_sz: CTSlideSize,
	#[serde(rename = "notesSz")]
	pub notes_sz: CTPositiveSize2D,
	#[serde(rename = "smartTags")]
	pub smart_tags: CTSmartTags,
	#[serde(rename = "embeddedFontLst")]
	pub embedded_font_lst: CTEmbeddedFontList,
	#[serde(rename = "custShowLst")]
	pub cust_show_lst: CTCustomShowList,
	#[serde(rename = "photoAlbum")]
	pub photo_album: CTPhotoAlbum,
	#[serde(rename = "custDataLst")]
	pub cust_data_lst: CTCustomerDataList,
	#[serde(rename = "kinsoku")]
	pub kinsoku: CTKinsoku,
	#[serde(rename = "defaultTextStyle")]
	pub default_text_style: CTTextListStyle,
	#[serde(rename = "modifyVerifier")]
	pub modify_verifier: CTModifyVerifier,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// presentation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct presentation {
	#[serde(rename = "presentation")]
	pub presentation: CTPresentation,
}


// CTHtmlPublishProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHtmlPublishProperties {
	#[serde(rename = "showSpeakerNotes")]
	pub show_speaker_notes: Option<bool>,
	#[serde(rename = "target")]
	pub target: Option<String>,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "EG_SlideListChoice")]
	pub eg_slide_list_choice: Vec<EGSlideListChoice>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STPrintWhat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPrintWhat {
	#[serde(rename = "ST_PrintWhat")]
	pub st_print_what: String,
}


// STPrintColorMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPrintColorMode {
	#[serde(rename = "ST_PrintColorMode")]
	pub st_print_color_mode: String,
}


// CTPrintProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPrintProperties {
	#[serde(rename = "prnWhat")]
	pub prn_what: Option<String>,
	#[serde(rename = "clrMode")]
	pub clr_mode: Option<String>,
	#[serde(rename = "hiddenSlides")]
	pub hidden_slides: Option<bool>,
	#[serde(rename = "scaleToFitPaper")]
	pub scale_to_fit_paper: Option<bool>,
	#[serde(rename = "frameSlides")]
	pub frame_slides: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTShowInfoBrowse ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShowInfoBrowse {
	#[serde(rename = "showScrollbar")]
	pub show_scrollbar: Option<bool>,
}


// CTShowInfoKiosk ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShowInfoKiosk {
	#[serde(rename = "restart")]
	pub restart: Option<u32>,
}


// EGShowType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGShowType {
	#[serde(rename = "present")]
	pub present: CTEmpty,
	#[serde(rename = "browse")]
	pub browse: CTShowInfoBrowse,
	#[serde(rename = "kiosk")]
	pub kiosk: CTShowInfoKiosk,
}


// CTShowProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShowProperties {
	#[serde(rename = "loop")]
	pub loop_attr: Option<bool>,
	#[serde(rename = "showNarration")]
	pub show_narration: Option<bool>,
	#[serde(rename = "showAnimation")]
	pub show_animation: Option<bool>,
	#[serde(rename = "useTimings")]
	pub use_timings: Option<bool>,
	#[serde(rename = "EG_ShowType")]
	pub eg_show_type: Vec<EGShowType>,
	#[serde(rename = "EG_SlideListChoice")]
	pub eg_slide_list_choice: Vec<EGSlideListChoice>,
	#[serde(rename = "penClr")]
	pub pen_clr: CTColor,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTPresentationProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPresentationProperties {
	#[serde(rename = "prnPr")]
	pub prn_pr: CTPrintProperties,
	#[serde(rename = "showPr")]
	pub show_pr: CTShowProperties,
	#[serde(rename = "clrMru")]
	pub clr_mru: CTColorMRU,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// presentation_pr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct presentation_pr {
	#[serde(rename = "presentationPr")]
	pub presentation_pr: CTPresentationProperties,
}


// CTHeaderFooter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeaderFooter {
	#[serde(rename = "sldNum")]
	pub sld_num: Option<bool>,
	#[serde(rename = "hdr")]
	pub hdr: Option<bool>,
	#[serde(rename = "ftr")]
	pub ftr: Option<bool>,
	#[serde(rename = "dt")]
	pub dt: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// STPlaceholderType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPlaceholderType {
	#[serde(rename = "ST_PlaceholderType")]
	pub st_placeholder_type: String,
}


// STPlaceholderSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPlaceholderSize {
	#[serde(rename = "ST_PlaceholderSize")]
	pub st_placeholder_size: String,
}


// CTPlaceholder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPlaceholder {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "orient")]
	pub orient: Option<String>,
	#[serde(rename = "sz")]
	pub sz: Option<String>,
	#[serde(rename = "idx")]
	pub idx: Option<u32>,
	#[serde(rename = "hasCustomPrompt")]
	pub has_custom_prompt: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTApplicationNonVisualDrawingProps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTApplicationNonVisualDrawingProps {
	#[serde(rename = "isPhoto")]
	pub is_photo: Option<bool>,
	#[serde(rename = "userDrawn")]
	pub user_drawn: Option<bool>,
	#[serde(rename = "a:EG_Media")]
	pub aeg_media: Vec<EGMedia>,
	#[serde(rename = "ph")]
	pub ph: CTPlaceholder,
	#[serde(rename = "custDataLst")]
	pub cust_data_lst: CTCustomerDataList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTShapeNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShapeNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvSpPr")]
	pub c_nv_sp_pr: CTNonVisualDrawingShapeProps,
	#[serde(rename = "nvPr")]
	pub nv_pr: CTApplicationNonVisualDrawingProps,
}


// CTShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTShape {
	#[serde(rename = "useBgFill")]
	pub use_bg_fill: Option<bool>,
	#[serde(rename = "nvSpPr")]
	pub nv_sp_pr: CTShapeNonVisual,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: CTShapeStyle,
	#[serde(rename = "txBody")]
	pub tx_body: CTTextBody,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTConnectorNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnectorNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvCxnSpPr")]
	pub c_nv_cxn_sp_pr: CTNonVisualConnectorProperties,
	#[serde(rename = "nvPr")]
	pub nv_pr: CTApplicationNonVisualDrawingProps,
}


// CTConnector ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnector {
	#[serde(rename = "nvCxnSpPr")]
	pub nv_cxn_sp_pr: CTConnectorNonVisual,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: CTShapeStyle,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTPictureNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPictureNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvPicPr")]
	pub c_nv_pic_pr: CTNonVisualPictureProperties,
	#[serde(rename = "nvPr")]
	pub nv_pr: CTApplicationNonVisualDrawingProps,
}


// CTPicture ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPicture {
	#[serde(rename = "nvPicPr")]
	pub nv_pic_pr: CTPictureNonVisual,
	#[serde(rename = "blipFill")]
	pub blip_fill: CTBlipFillProperties,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: CTShapeStyle,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTGraphicalObjectFrameNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicalObjectFrameNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGraphicFramePr")]
	pub c_nv_graphic_frame_pr: CTNonVisualGraphicFrameProperties,
	#[serde(rename = "nvPr")]
	pub nv_pr: CTApplicationNonVisualDrawingProps,
}


// CTGraphicalObjectFrame ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicalObjectFrame {
	#[serde(rename = "bwMode")]
	pub bw_mode: Option<String>,
	#[serde(rename = "nvGraphicFramePr")]
	pub nv_graphic_frame_pr: CTGraphicalObjectFrameNonVisual,
	#[serde(rename = "xfrm")]
	pub xfrm: CTTransform2D,
	#[serde(rename = "a:graphic")]
	pub a_graphic: CTGraphicalObject,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTGroupShapeNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupShapeNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGrpSpPr")]
	pub c_nv_grp_sp_pr: CTNonVisualGroupDrawingShapeProps,
	#[serde(rename = "nvPr")]
	pub nv_pr: CTApplicationNonVisualDrawingProps,
}


// CTGroupShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupShape {
	#[serde(rename = "nvGrpSpPr")]
	pub nv_grp_sp_pr: CTGroupShapeNonVisual,
	#[serde(rename = "grpSpPr")]
	pub grp_sp_pr: CTGroupShapeProperties,
	#[serde(rename = "sp")]
	pub sp: Vec<CTShape>,
	#[serde(rename = "grpSp")]
	pub grp_sp: Vec<CTGroupShape>,
	#[serde(rename = "graphicFrame")]
	pub graphic_frame: Vec<CTGraphicalObjectFrame>,
	#[serde(rename = "cxnSp")]
	pub cxn_sp: Vec<CTConnector>,
	#[serde(rename = "pic")]
	pub pic: Vec<CTPicture>,
	#[serde(rename = "contentPart")]
	pub content_part: Vec<CTRel>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// CTRel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRel {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// EGTopLevelSlide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGTopLevelSlide {
	#[serde(rename = "clrMap")]
	pub clr_map: CTColorMapping,
}


// EGChildSlide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGChildSlide {
	#[serde(rename = "clrMapOvr")]
	pub clr_map_ovr: CTColorMappingOverride,
}


// AGChildSlide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGChildSlide {
	#[serde(rename = "showMasterSp")]
	pub show_master_sp: Option<bool>,
	#[serde(rename = "showMasterPhAnim")]
	pub show_master_ph_anim: Option<bool>,
}


// CTBackgroundProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackgroundProperties {
	#[serde(rename = "shadeToTitle")]
	pub shade_to_title: Option<bool>,
	#[serde(rename = "a:EG_FillProperties")]
	pub aeg_fill_properties: Vec<EGFillProperties>,
	#[serde(rename = "a:EG_EffectProperties")]
	pub aeg_effect_properties: Vec<EGEffectProperties>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// EGBackground ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGBackground {
	#[serde(rename = "bgPr")]
	pub bg_pr: CTBackgroundProperties,
	#[serde(rename = "bgRef")]
	pub bg_ref: CTStyleMatrixReference,
}


// CTBackground ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBackground {
	#[serde(rename = "bwMode")]
	pub bw_mode: Option<String>,
	#[serde(rename = "EG_Background")]
	pub eg_background: EGBackground,
}


// CTCommonSlideData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommonSlideData {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "bg")]
	pub bg: CTBackground,
	#[serde(rename = "spTree")]
	pub sp_tree: CTGroupShape,
	#[serde(rename = "custDataLst")]
	pub cust_data_lst: CTCustomerDataList,
	#[serde(rename = "controls")]
	pub controls: CTControlList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSlide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlide {
	#[serde(rename = "AG_ChildSlide")]
	pub ag_child_slide: Vec<AGChildSlide>,
	#[serde(rename = "show")]
	pub show: Option<bool>,
	#[serde(rename = "EG_ChildSlide")]
	pub eg_child_slide: Vec<EGChildSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "transition")]
	pub transition: CTSlideTransition,
	#[serde(rename = "timing")]
	pub timing: CTSlideTiming,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// sld ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sld {
	#[serde(rename = "sld")]
	pub sld: CTSlide,
}


// STSlideLayoutType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideLayoutType {
	#[serde(rename = "ST_SlideLayoutType")]
	pub st_slide_layout_type: String,
}


// CTSlideLayout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideLayout {
	#[serde(rename = "AG_ChildSlide")]
	pub ag_child_slide: Vec<AGChildSlide>,
	#[serde(rename = "matchingName")]
	pub matching_name: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "preserve")]
	pub preserve: Option<bool>,
	#[serde(rename = "userDrawn")]
	pub user_drawn: Option<bool>,
	#[serde(rename = "EG_ChildSlide")]
	pub eg_child_slide: Vec<EGChildSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "transition")]
	pub transition: CTSlideTransition,
	#[serde(rename = "timing")]
	pub timing: CTSlideTiming,
	#[serde(rename = "hf")]
	pub hf: CTHeaderFooter,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// sld_layout ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sld_layout {
	#[serde(rename = "sldLayout")]
	pub sld_layout: CTSlideLayout,
}


// CTSlideMasterTextStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideMasterTextStyles {
	#[serde(rename = "titleStyle")]
	pub title_style: CTTextListStyle,
	#[serde(rename = "bodyStyle")]
	pub body_style: CTTextListStyle,
	#[serde(rename = "otherStyle")]
	pub other_style: CTTextListStyle,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STSlideLayoutId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSlideLayoutId {
	#[serde(rename = "ST_SlideLayoutId")]
	pub st_slide_layout_id: u32,
}


// CTSlideLayoutIdListEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideLayoutIdListEntry {
	#[serde(rename = "id")]
	pub id: Option<u32>,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSlideLayoutIdList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideLayoutIdList {
	#[serde(rename = "sldLayoutId")]
	pub sld_layout_id: Vec<CTSlideLayoutIdListEntry>,
}


// CTSlideMaster ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideMaster {
	#[serde(rename = "preserve")]
	pub preserve: Option<bool>,
	#[serde(rename = "EG_TopLevelSlide")]
	pub eg_top_level_slide: Vec<EGTopLevelSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "sldLayoutIdLst")]
	pub sld_layout_id_lst: CTSlideLayoutIdList,
	#[serde(rename = "transition")]
	pub transition: CTSlideTransition,
	#[serde(rename = "timing")]
	pub timing: CTSlideTiming,
	#[serde(rename = "hf")]
	pub hf: CTHeaderFooter,
	#[serde(rename = "txStyles")]
	pub tx_styles: CTSlideMasterTextStyles,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// sld_master ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sld_master {
	#[serde(rename = "sldMaster")]
	pub sld_master: CTSlideMaster,
}


// CTHandoutMaster ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHandoutMaster {
	#[serde(rename = "EG_TopLevelSlide")]
	pub eg_top_level_slide: Vec<EGTopLevelSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "hf")]
	pub hf: CTHeaderFooter,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// handout_master ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct handout_master {
	#[serde(rename = "handoutMaster")]
	pub handout_master: CTHandoutMaster,
}


// CTNotesMaster ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesMaster {
	#[serde(rename = "EG_TopLevelSlide")]
	pub eg_top_level_slide: Vec<EGTopLevelSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "hf")]
	pub hf: CTHeaderFooter,
	#[serde(rename = "notesStyle")]
	pub notes_style: CTTextListStyle,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// notes_master ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct notes_master {
	#[serde(rename = "notesMaster")]
	pub notes_master: CTNotesMaster,
}


// CTNotesSlide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesSlide {
	#[serde(rename = "AG_ChildSlide")]
	pub ag_child_slide: Vec<AGChildSlide>,
	#[serde(rename = "EG_ChildSlide")]
	pub eg_child_slide: Vec<EGChildSlide>,
	#[serde(rename = "cSld")]
	pub c_sld: CTCommonSlideData,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionListModify,
}


// notes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct notes {
	#[serde(rename = "notes")]
	pub notes: CTNotesSlide,
}


// CTSlideSyncProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideSyncProperties {
	#[serde(rename = "serverSldId")]
	pub server_sld_id: String,
	#[serde(rename = "serverSldModifiedTime")]
	pub server_sld_modified_time: u8,
	#[serde(rename = "clientInsertedTime")]
	pub client_inserted_time: u8,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// sld_sync_pr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sld_sync_pr {
	#[serde(rename = "sldSyncPr")]
	pub sld_sync_pr: CTSlideSyncProperties,
}


// CTStringTag ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStringTag {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "val")]
	pub val: String,
}


// CTTagList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTagList {
	#[serde(rename = "tag")]
	pub tag: Vec<CTStringTag>,
}


// tag_lst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct tag_lst {
	#[serde(rename = "tagLst")]
	pub tag_lst: CTTagList,
}


// STSplitterBarState ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSplitterBarState {
	#[serde(rename = "ST_SplitterBarState")]
	pub st_splitter_bar_state: String,
}


// STViewType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STViewType {
	#[serde(rename = "ST_ViewType")]
	pub st_view_type: String,
}


// CTNormalViewPortion ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNormalViewPortion {
	#[serde(rename = "sz")]
	pub sz: STPositiveFixedPercentage,
	#[serde(rename = "autoAdjust")]
	pub auto_adjust: Option<bool>,
}


// CTNormalViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNormalViewProperties {
	#[serde(rename = "showOutlineIcons")]
	pub show_outline_icons: Option<bool>,
	#[serde(rename = "snapVertSplitter")]
	pub snap_vert_splitter: Option<bool>,
	#[serde(rename = "vertBarState")]
	pub vert_bar_state: Option<String>,
	#[serde(rename = "horzBarState")]
	pub horz_bar_state: Option<String>,
	#[serde(rename = "preferSingleView")]
	pub prefer_single_view: Option<bool>,
	#[serde(rename = "restoredLeft")]
	pub restored_left: CTNormalViewPortion,
	#[serde(rename = "restoredTop")]
	pub restored_top: CTNormalViewPortion,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCommonViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommonViewProperties {
	#[serde(rename = "varScale")]
	pub var_scale: Option<bool>,
	#[serde(rename = "scale")]
	pub scale: CTScale2D,
	#[serde(rename = "origin")]
	pub origin: CTPoint2D,
}


// CTNotesTextViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesTextViewProperties {
	#[serde(rename = "cViewPr")]
	pub c_view_pr: CTCommonViewProperties,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTOutlineViewSlideEntry ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOutlineViewSlideEntry {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "collapse")]
	pub collapse: Option<bool>,
}


// CTOutlineViewSlideList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOutlineViewSlideList {
	#[serde(rename = "sld")]
	pub sld: Vec<CTOutlineViewSlideEntry>,
}


// CTOutlineViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOutlineViewProperties {
	#[serde(rename = "cViewPr")]
	pub c_view_pr: CTCommonViewProperties,
	#[serde(rename = "sldLst")]
	pub sld_lst: CTOutlineViewSlideList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSlideSorterViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideSorterViewProperties {
	#[serde(rename = "showFormatting")]
	pub show_formatting: Option<bool>,
	#[serde(rename = "cViewPr")]
	pub c_view_pr: CTCommonViewProperties,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTGuide ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGuide {
	#[serde(rename = "orient")]
	pub orient: Option<String>,
	#[serde(rename = "pos")]
	pub pos: Option<STCoordinate32>,
}


// CTGuideList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGuideList {
	#[serde(rename = "guide")]
	pub guide: Vec<CTGuide>,
}


// CTCommonSlideViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommonSlideViewProperties {
	#[serde(rename = "snapToGrid")]
	pub snap_to_grid: Option<bool>,
	#[serde(rename = "snapToObjects")]
	pub snap_to_objects: Option<bool>,
	#[serde(rename = "showGuides")]
	pub show_guides: Option<bool>,
	#[serde(rename = "cViewPr")]
	pub c_view_pr: CTCommonViewProperties,
	#[serde(rename = "guideLst")]
	pub guide_lst: CTGuideList,
}


// CTSlideViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSlideViewProperties {
	#[serde(rename = "cSldViewPr")]
	pub c_sld_view_pr: CTCommonSlideViewProperties,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTNotesViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNotesViewProperties {
	#[serde(rename = "cSldViewPr")]
	pub c_sld_view_pr: CTCommonSlideViewProperties,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTViewProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTViewProperties {
	#[serde(rename = "lastView")]
	pub last_view: Option<String>,
	#[serde(rename = "showComments")]
	pub show_comments: Option<bool>,
	#[serde(rename = "normalViewPr")]
	pub normal_view_pr: CTNormalViewProperties,
	#[serde(rename = "slideViewPr")]
	pub slide_view_pr: CTSlideViewProperties,
	#[serde(rename = "outlineViewPr")]
	pub outline_view_pr: CTOutlineViewProperties,
	#[serde(rename = "notesTextViewPr")]
	pub notes_text_view_pr: CTNotesTextViewProperties,
	#[serde(rename = "sorterViewPr")]
	pub sorter_view_pr: CTSlideSorterViewProperties,
	#[serde(rename = "notesViewPr")]
	pub notes_view_pr: CTNotesViewProperties,
	#[serde(rename = "gridSpacing")]
	pub grid_spacing: CTPositiveSize2D,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// view_pr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct view_pr {
	#[serde(rename = "viewPr")]
	pub view_pr: CTViewProperties,
}
