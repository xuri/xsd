// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// STVectorBaseType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVectorBaseType {
	#[serde(rename = "ST_VectorBaseType")]
	pub st_vector_base_type: String,
}


// STArrayBaseType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STArrayBaseType {
	#[serde(rename = "ST_ArrayBaseType")]
	pub st_array_base_type: String,
}


// STCy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCy {
	#[serde(rename = "ST_Cy")]
	pub st_cy: String,
}


// STError ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STError {
	#[serde(rename = "ST_Error")]
	pub st_error: String,
}


// CTEmpty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEmpty {
}


// CTNull ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNull {
}


// CTVector ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVector {
	#[serde(rename = "baseType")]
	pub base_type: String,
	#[serde(rename = "size")]
	pub size: u32,
	#[serde(rename = "variant")]
	pub variant: Vec<CTVariant>,
	#[serde(rename = "i1")]
	pub i1: Vec<u8>,
	#[serde(rename = "i2")]
	pub i2: Vec<i16>,
	#[serde(rename = "i4")]
	pub i4: Vec<i32>,
	#[serde(rename = "i8")]
	pub i8: Vec<i64>,
	#[serde(rename = "ui1")]
	pub ui1: Vec<u8>,
	#[serde(rename = "ui2")]
	pub ui2: Vec<u16>,
	#[serde(rename = "ui4")]
	pub ui4: Vec<u32>,
	#[serde(rename = "ui8")]
	pub ui8: Vec<u64>,
	#[serde(rename = "r4")]
	pub r4: Vec<f64>,
	#[serde(rename = "r8")]
	pub r8: Vec<f64>,
	#[serde(rename = "lpstr")]
	pub lpstr: Vec<String>,
	#[serde(rename = "lpwstr")]
	pub lpwstr: Vec<String>,
	#[serde(rename = "bstr")]
	pub bstr: Vec<String>,
	#[serde(rename = "date")]
	pub date: Vec<u8>,
	#[serde(rename = "filetime")]
	pub filetime: Vec<u8>,
	#[serde(rename = "bool")]
	pub bool: Vec<bool>,
	#[serde(rename = "cy")]
	pub cy: Vec<String>,
	#[serde(rename = "error")]
	pub error: Vec<String>,
	#[serde(rename = "clsid")]
	pub clsid: Vec<String>,
}


// CTArray ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTArray {
	#[serde(rename = "lBounds")]
	pub l_bounds: i32,
	#[serde(rename = "uBounds")]
	pub u_bounds: i32,
	#[serde(rename = "baseType")]
	pub base_type: String,
	#[serde(rename = "variant")]
	pub variant: Vec<CTVariant>,
	#[serde(rename = "i1")]
	pub i1: Vec<u8>,
	#[serde(rename = "i2")]
	pub i2: Vec<i16>,
	#[serde(rename = "i4")]
	pub i4: Vec<i32>,
	#[serde(rename = "int")]
	pub int: Vec<i32>,
	#[serde(rename = "ui1")]
	pub ui1: Vec<u8>,
	#[serde(rename = "ui2")]
	pub ui2: Vec<u16>,
	#[serde(rename = "ui4")]
	pub ui4: Vec<u32>,
	#[serde(rename = "uint")]
	pub uint: Vec<u32>,
	#[serde(rename = "r4")]
	pub r4: Vec<f64>,
	#[serde(rename = "r8")]
	pub r8: Vec<f64>,
	#[serde(rename = "decimal")]
	pub decimal: Vec<f64>,
	#[serde(rename = "bstr")]
	pub bstr: Vec<String>,
	#[serde(rename = "date")]
	pub date: Vec<u8>,
	#[serde(rename = "bool")]
	pub bool: Vec<bool>,
	#[serde(rename = "error")]
	pub error: Vec<String>,
	#[serde(rename = "cy")]
	pub cy: Vec<String>,
}


// CTVariant ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVariant {
	#[serde(rename = "variant")]
	pub variant: Option<CTVariant>,
	#[serde(rename = "vector")]
	pub vector: Option<CTVector>,
	#[serde(rename = "array")]
	pub array: Option<CTArray>,
	#[serde(rename = "blob")]
	pub blob: Option<String>,
	#[serde(rename = "oblob")]
	pub oblob: Option<String>,
	#[serde(rename = "empty")]
	pub empty: Option<CTEmpty>,
	#[serde(rename = "null")]
	pub null: Option<CTNull>,
	#[serde(rename = "i1")]
	pub i1: Option<u8>,
	#[serde(rename = "i2")]
	pub i2: Option<i16>,
	#[serde(rename = "i4")]
	pub i4: Option<i32>,
	#[serde(rename = "i8")]
	pub i8: Option<i64>,
	#[serde(rename = "int")]
	pub int: Option<i32>,
	#[serde(rename = "ui1")]
	pub ui1: Option<u8>,
	#[serde(rename = "ui2")]
	pub ui2: Option<u16>,
	#[serde(rename = "ui4")]
	pub ui4: Option<u32>,
	#[serde(rename = "ui8")]
	pub ui8: Option<u64>,
	#[serde(rename = "uint")]
	pub uint: Option<u32>,
	#[serde(rename = "r4")]
	pub r4: Option<f64>,
	#[serde(rename = "r8")]
	pub r8: Option<f64>,
	#[serde(rename = "decimal")]
	pub decimal: Option<f64>,
	#[serde(rename = "lpstr")]
	pub lpstr: Option<String>,
	#[serde(rename = "lpwstr")]
	pub lpwstr: Option<String>,
	#[serde(rename = "bstr")]
	pub bstr: Option<String>,
	#[serde(rename = "date")]
	pub date: Option<u8>,
	#[serde(rename = "filetime")]
	pub filetime: Option<u8>,
	#[serde(rename = "bool")]
	pub bool: Option<bool>,
	#[serde(rename = "cy")]
	pub cy: Option<String>,
	#[serde(rename = "error")]
	pub error: Option<String>,
	#[serde(rename = "stream")]
	pub stream: Option<String>,
	#[serde(rename = "ostream")]
	pub ostream: Option<String>,
	#[serde(rename = "storage")]
	pub storage: Option<String>,
	#[serde(rename = "ostorage")]
	pub ostorage: Option<String>,
	#[serde(rename = "vstream")]
	pub vstream: Option<CTVstream>,
	#[serde(rename = "clsid")]
	pub clsid: Option<String>,
}


// CTVstream ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVstream {
	#[serde(rename = "version")]
	pub version: Option<String>,
	#[serde(rename = "$value")]
	pub value: String,
}


// variant ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct variant {
	#[serde(rename = "variant")]
	pub variant: CTVariant,
}


// vector ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct vector {
	#[serde(rename = "vector")]
	pub vector: CTVector,
}


// array ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct array {
	#[serde(rename = "array")]
	pub array: CTArray,
}


// blob ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct blob {
	#[serde(rename = "blob")]
	pub blob: String,
}


// oblob ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct oblob {
	#[serde(rename = "oblob")]
	pub oblob: String,
}


// empty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct empty {
	#[serde(rename = "empty")]
	pub empty: CTEmpty,
}


// null ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct null {
	#[serde(rename = "null")]
	pub null: CTNull,
}


// i1 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct i1 {
	#[serde(rename = "i1")]
	pub i1: u8,
}


// i2 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct i2 {
	#[serde(rename = "i2")]
	pub i2: i16,
}


// i4 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct i4 {
	#[serde(rename = "i4")]
	pub i4: i32,
}


// i8 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct i8 {
	#[serde(rename = "i8")]
	pub i8: i64,
}


// int ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct int {
	#[serde(rename = "int")]
	pub int: i32,
}


// ui1 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ui1 {
	#[serde(rename = "ui1")]
	pub ui1: u8,
}


// ui2 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ui2 {
	#[serde(rename = "ui2")]
	pub ui2: u16,
}


// ui4 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ui4 {
	#[serde(rename = "ui4")]
	pub ui4: u32,
}


// ui8 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ui8 {
	#[serde(rename = "ui8")]
	pub ui8: u64,
}


// uint ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct uint {
	#[serde(rename = "uint")]
	pub uint: u32,
}


// r4 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct r4 {
	#[serde(rename = "r4")]
	pub r4: f64,
}


// r8 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct r8 {
	#[serde(rename = "r8")]
	pub r8: f64,
}


// decimal ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct decimal {
	#[serde(rename = "decimal")]
	pub decimal: f64,
}


// lpstr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct lpstr {
	#[serde(rename = "lpstr")]
	pub lpstr: String,
}


// lpwstr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct lpwstr {
	#[serde(rename = "lpwstr")]
	pub lpwstr: String,
}


// bstr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct bstr {
	#[serde(rename = "bstr")]
	pub bstr: String,
}


// date ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct date {
	#[serde(rename = "date")]
	pub date: u8,
}


// filetime ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct filetime {
	#[serde(rename = "filetime")]
	pub filetime: u8,
}


// bool ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct bool {
	#[serde(rename = "bool")]
	pub bool: bool,
}


// cy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct cy {
	#[serde(rename = "cy")]
	pub cy: String,
}


// error ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct error {
	#[serde(rename = "error")]
	pub error: String,
}


// stream ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct stream {
	#[serde(rename = "stream")]
	pub stream: String,
}


// ostream ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ostream {
	#[serde(rename = "ostream")]
	pub ostream: String,
}


// storage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct storage {
	#[serde(rename = "storage")]
	pub storage: String,
}


// ostorage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ostorage {
	#[serde(rename = "ostorage")]
	pub ostorage: String,
}


// vstream ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct vstream {
	#[serde(rename = "vstream")]
	pub vstream: CTVstream,
}


// clsid ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct clsid {
	#[serde(rename = "clsid")]
	pub clsid: String,
}
