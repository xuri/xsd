// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTEffectExtent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTEffectExtent {
	#[serde(rename = "l")]
	pub l: STCoordinate,
	#[serde(rename = "t")]
	pub t: STCoordinate,
	#[serde(rename = "r")]
	pub r: STCoordinate,
	#[serde(rename = "b")]
	pub b: STCoordinate,
}


// STWrapDistance ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STWrapDistance {
	#[serde(rename = "ST_WrapDistance")]
	pub st_wrap_distance: u32,
}


// CTInline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInline {
	#[serde(rename = "distT")]
	pub dist_t: Option<u32>,
	#[serde(rename = "distB")]
	pub dist_b: Option<u32>,
	#[serde(rename = "distL")]
	pub dist_l: Option<u32>,
	#[serde(rename = "distR")]
	pub dist_r: Option<u32>,
	#[serde(rename = "extent")]
	pub extent: CTPositiveSize2D,
	#[serde(rename = "effectExtent")]
	pub effect_extent: Option<CTEffectExtent>,
	#[serde(rename = "docPr")]
	pub doc_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGraphicFramePr")]
	pub c_nv_graphic_frame_pr: Option<CTNonVisualGraphicFrameProperties>,
	#[serde(rename = "a:graphic")]
	pub a_graphic: CTGraphicalObject,
}


// STWrapText ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STWrapText {
	#[serde(rename = "ST_WrapText")]
	pub st_wrap_text: String,
}


// CTWrapPath ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapPath {
	#[serde(rename = "edited")]
	pub edited: Option<bool>,
	#[serde(rename = "start")]
	pub start: CTPoint2D,
	#[serde(rename = "lineTo")]
	pub line_to: Vec<CTPoint2D>,
}


// CTWrapNone ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapNone {
}


// CTWrapSquare ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapSquare {
	#[serde(rename = "wrapText")]
	pub wrap_text: String,
	#[serde(rename = "distT")]
	pub dist_t: Option<u32>,
	#[serde(rename = "distB")]
	pub dist_b: Option<u32>,
	#[serde(rename = "distL")]
	pub dist_l: Option<u32>,
	#[serde(rename = "distR")]
	pub dist_r: Option<u32>,
	#[serde(rename = "effectExtent")]
	pub effect_extent: Option<CTEffectExtent>,
}


// CTWrapTight ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapTight {
	#[serde(rename = "wrapText")]
	pub wrap_text: String,
	#[serde(rename = "distL")]
	pub dist_l: Option<u32>,
	#[serde(rename = "distR")]
	pub dist_r: Option<u32>,
	#[serde(rename = "wrapPolygon")]
	pub wrap_polygon: CTWrapPath,
}


// CTWrapThrough ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapThrough {
	#[serde(rename = "wrapText")]
	pub wrap_text: String,
	#[serde(rename = "distL")]
	pub dist_l: Option<u32>,
	#[serde(rename = "distR")]
	pub dist_r: Option<u32>,
	#[serde(rename = "wrapPolygon")]
	pub wrap_polygon: CTWrapPath,
}


// CTWrapTopBottom ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWrapTopBottom {
	#[serde(rename = "distT")]
	pub dist_t: Option<u32>,
	#[serde(rename = "distB")]
	pub dist_b: Option<u32>,
	#[serde(rename = "effectExtent")]
	pub effect_extent: Option<CTEffectExtent>,
}


// EGWrapType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGWrapType {
	#[serde(rename = "wrapNone")]
	pub wrap_none: CTWrapNone,
	#[serde(rename = "wrapSquare")]
	pub wrap_square: CTWrapSquare,
	#[serde(rename = "wrapTight")]
	pub wrap_tight: CTWrapTight,
	#[serde(rename = "wrapThrough")]
	pub wrap_through: CTWrapThrough,
	#[serde(rename = "wrapTopAndBottom")]
	pub wrap_top_and_bottom: CTWrapTopBottom,
}


// STPositionOffset ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPositionOffset {
	#[serde(rename = "ST_PositionOffset")]
	pub st_position_offset: i32,
}


// STAlignH ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAlignH {
	#[serde(rename = "ST_AlignH")]
	pub st_align_h: String,
}


// STRelFromH ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRelFromH {
	#[serde(rename = "ST_RelFromH")]
	pub st_rel_from_h: String,
}


// CTPosH ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPosH {
	#[serde(rename = "relativeFrom")]
	pub relative_from: String,
	#[serde(rename = "align")]
	pub align: String,
	#[serde(rename = "posOffset")]
	pub pos_offset: i32,
}


// STAlignV ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAlignV {
	#[serde(rename = "ST_AlignV")]
	pub st_align_v: String,
}


// STRelFromV ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRelFromV {
	#[serde(rename = "ST_RelFromV")]
	pub st_rel_from_v: String,
}


// CTPosV ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPosV {
	#[serde(rename = "relativeFrom")]
	pub relative_from: String,
	#[serde(rename = "align")]
	pub align: String,
	#[serde(rename = "posOffset")]
	pub pos_offset: i32,
}


// CTAnchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAnchor {
	#[serde(rename = "distT")]
	pub dist_t: Option<u32>,
	#[serde(rename = "distB")]
	pub dist_b: Option<u32>,
	#[serde(rename = "distL")]
	pub dist_l: Option<u32>,
	#[serde(rename = "distR")]
	pub dist_r: Option<u32>,
	#[serde(rename = "simplePos")]
	pub simple_pos: Option<bool>,
	#[serde(rename = "relativeHeight")]
	pub relative_height: u32,
	#[serde(rename = "behindDoc")]
	pub behind_doc: bool,
	#[serde(rename = "locked")]
	pub locked: bool,
	#[serde(rename = "layoutInCell")]
	pub layout_in_cell: bool,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "allowOverlap")]
	pub allow_overlap: bool,
	#[serde(rename = "EG_WrapType")]
	pub eg_wrap_type: EGWrapType,
	#[serde(rename = "simplePos")]
	pub simple_pos: CTPoint2D,
	#[serde(rename = "positionH")]
	pub position_h: CTPosH,
	#[serde(rename = "positionV")]
	pub position_v: CTPosV,
	#[serde(rename = "extent")]
	pub extent: CTPositiveSize2D,
	#[serde(rename = "effectExtent")]
	pub effect_extent: Option<CTEffectExtent>,
	#[serde(rename = "docPr")]
	pub doc_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvGraphicFramePr")]
	pub c_nv_graphic_frame_pr: Option<CTNonVisualGraphicFrameProperties>,
	#[serde(rename = "a:graphic")]
	pub a_graphic: CTGraphicalObject,
}


// CTTxbxContent ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTxbxContent {
	#[serde(rename = "w:EG_BlockLevelElts")]
	pub weg_block_level_elts: Vec<EGBlockLevelElts>,
}


// CTTextboxInfo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextboxInfo {
	#[serde(rename = "id")]
	pub id: Option<u16>,
	#[serde(rename = "txbxContent")]
	pub txbx_content: CTTxbxContent,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTLinkedTextboxInformation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLinkedTextboxInformation {
	#[serde(rename = "id")]
	pub id: u16,
	#[serde(rename = "seq")]
	pub seq: u16,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTWordprocessingShape ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWordprocessingShape {
	#[serde(rename = "normalEastAsianFlow")]
	pub normal_east_asian_flow: Option<bool>,
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: Option<CTNonVisualDrawingProps>,
	#[serde(rename = "cNvSpPr")]
	pub c_nv_sp_pr: CTNonVisualDrawingShapeProps,
	#[serde(rename = "cNvCnPr")]
	pub c_nv_cn_pr: CTNonVisualConnectorProperties,
	#[serde(rename = "spPr")]
	pub sp_pr: CTShapeProperties,
	#[serde(rename = "style")]
	pub style: Option<CTShapeStyle>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
	#[serde(rename = "txbx")]
	pub txbx: CTTextboxInfo,
	#[serde(rename = "linkedTxbx")]
	pub linked_txbx: CTLinkedTextboxInformation,
	#[serde(rename = "bodyPr")]
	pub body_pr: CTTextBodyProperties,
}


// CTGraphicFrame ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGraphicFrame {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: CTNonVisualDrawingProps,
	#[serde(rename = "cNvFrPr")]
	pub c_nv_fr_pr: CTNonVisualGraphicFrameProperties,
	#[serde(rename = "xfrm")]
	pub xfrm: CTTransform2D,
	#[serde(rename = "a:graphic")]
	pub a_graphic: CTGraphicalObject,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTWordprocessingContentPartNonVisual ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWordprocessingContentPartNonVisual {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: Option<CTNonVisualDrawingProps>,
	#[serde(rename = "cNvContentPartPr")]
	pub c_nv_content_part_pr: Option<CTNonVisualContentPartProperties>,
}


// CTWordprocessingContentPart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWordprocessingContentPart {
	#[serde(rename = "bwMode")]
	pub bw_mode: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "nvContentPartPr")]
	pub nv_content_part_pr: Option<CTWordprocessingContentPartNonVisual>,
	#[serde(rename = "xfrm")]
	pub xfrm: Option<CTTransform2D>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTWordprocessingGroup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWordprocessingGroup {
	#[serde(rename = "cNvPr")]
	pub c_nv_pr: Option<CTNonVisualDrawingProps>,
	#[serde(rename = "cNvGrpSpPr")]
	pub c_nv_grp_sp_pr: CTNonVisualGroupDrawingShapeProps,
	#[serde(rename = "grpSpPr")]
	pub grp_sp_pr: CTGroupShapeProperties,
	#[serde(rename = "wsp")]
	pub wsp: Vec<CTWordprocessingShape>,
	#[serde(rename = "grpSp")]
	pub grp_sp: Vec<CTWordprocessingGroup>,
	#[serde(rename = "graphicFrame")]
	pub graphic_frame: Vec<CTGraphicFrame>,
	#[serde(rename = "dpct:pic")]
	pub dpct_pic: Vec<CTPicture>,
	#[serde(rename = "contentPart")]
	pub content_part: Vec<CTWordprocessingContentPart>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// CTWordprocessingCanvas ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWordprocessingCanvas {
	#[serde(rename = "bg")]
	pub bg: Option<CTBackgroundFormatting>,
	#[serde(rename = "whole")]
	pub whole: Option<CTWholeE2oFormatting>,
	#[serde(rename = "wsp")]
	pub wsp: Vec<CTWordprocessingShape>,
	#[serde(rename = "dpct:pic")]
	pub dpct_pic: Vec<CTPicture>,
	#[serde(rename = "contentPart")]
	pub content_part: Vec<CTWordprocessingContentPart>,
	#[serde(rename = "wgp")]
	pub wgp: Vec<CTWordprocessingGroup>,
	#[serde(rename = "graphicFrame")]
	pub graphic_frame: Vec<CTGraphicFrame>,
	#[serde(rename = "extLst")]
	pub ext_lst: Option<CTOfficeArtExtensionList>,
}


// wpc ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct wpc {
	#[serde(rename = "wpc")]
	pub wpc: CTWordprocessingCanvas,
}


// wgp ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct wgp {
	#[serde(rename = "wgp")]
	pub wgp: CTWordprocessingGroup,
}


// wsp ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct wsp {
	#[serde(rename = "wsp")]
	pub wsp: CTWordprocessingShape,
}


// inline ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct inline {
	#[serde(rename = "inline")]
	pub inline: CTInline,
}


// anchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct anchor {
	#[serde(rename = "anchor")]
	pub anchor: CTAnchor,
}
