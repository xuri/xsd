// Code generated by xgen. DO NOT EDIT.

use serde::Serialize;
use serde::Deserialize;

use serde_xml_rs::from_reader;


// CTAutoFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAutoFilter {
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "filterColumn")]
	pub filter_column: Vec<CTFilterColumn>,
	#[serde(rename = "sortState")]
	pub sort_state: CTSortState,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTFilterColumn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFilterColumn {
	#[serde(rename = "colId")]
	pub col_id: u32,
	#[serde(rename = "hiddenButton")]
	pub hidden_button: Option<bool>,
	#[serde(rename = "showButton")]
	pub show_button: Option<bool>,
	#[serde(rename = "filters")]
	pub filters: CTFilters,
	#[serde(rename = "top10")]
	pub top10: CTTop10,
	#[serde(rename = "customFilters")]
	pub custom_filters: CTCustomFilters,
	#[serde(rename = "dynamicFilter")]
	pub dynamic_filter: CTDynamicFilter,
	#[serde(rename = "colorFilter")]
	pub color_filter: CTColorFilter,
	#[serde(rename = "iconFilter")]
	pub icon_filter: CTIconFilter,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTFilters ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFilters {
	#[serde(rename = "blank")]
	pub blank: Option<bool>,
	#[serde(rename = "calendarType")]
	pub calendar_type: Option<String>,
	#[serde(rename = "filter")]
	pub filter: Vec<CTFilter>,
	#[serde(rename = "dateGroupItem")]
	pub date_group_item: Vec<CTDateGroupItem>,
}


// CTFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFilter {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTCustomFilters ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomFilters {
	#[serde(rename = "and")]
	pub and: Option<bool>,
	#[serde(rename = "customFilter")]
	pub custom_filter: Vec<CTCustomFilter>,
}


// CTCustomFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomFilter {
	#[serde(rename = "operator")]
	pub operator: Option<String>,
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTTop10 ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTop10 {
	#[serde(rename = "top")]
	pub top: Option<bool>,
	#[serde(rename = "percent")]
	pub percent: Option<bool>,
	#[serde(rename = "val")]
	pub val: f64,
	#[serde(rename = "filterVal")]
	pub filter_val: Option<f64>,
}


// CTColorFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorFilter {
	#[serde(rename = "dxfId")]
	pub dxf_id: Option<u32>,
	#[serde(rename = "cellColor")]
	pub cell_color: Option<bool>,
}


// CTIconFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIconFilter {
	#[serde(rename = "iconSet")]
	pub icon_set: String,
	#[serde(rename = "iconId")]
	pub icon_id: Option<u32>,
}


// STFilterOperator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFilterOperator {
	#[serde(rename = "ST_FilterOperator")]
	pub st_filter_operator: String,
}


// CTDynamicFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDynamicFilter {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "val")]
	pub val: Option<f64>,
	#[serde(rename = "valIso")]
	pub val_iso: Option<u8>,
	#[serde(rename = "maxValIso")]
	pub max_val_iso: Option<u8>,
}


// STDynamicFilterType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDynamicFilterType {
	#[serde(rename = "ST_DynamicFilterType")]
	pub st_dynamic_filter_type: String,
}


// STIconSetType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STIconSetType {
	#[serde(rename = "ST_IconSetType")]
	pub st_icon_set_type: String,
}


// CTSortState ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSortState {
	#[serde(rename = "columnSort")]
	pub column_sort: Option<bool>,
	#[serde(rename = "caseSensitive")]
	pub case_sensitive: Option<bool>,
	#[serde(rename = "sortMethod")]
	pub sort_method: Option<String>,
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "sortCondition")]
	pub sort_condition: Vec<CTSortCondition>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSortCondition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSortCondition {
	#[serde(rename = "descending")]
	pub descending: Option<bool>,
	#[serde(rename = "sortBy")]
	pub sort_by: Option<String>,
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "customList")]
	pub custom_list: Option<String>,
	#[serde(rename = "dxfId")]
	pub dxf_id: Option<u32>,
	#[serde(rename = "iconSet")]
	pub icon_set: Option<String>,
	#[serde(rename = "iconId")]
	pub icon_id: Option<u32>,
}


// STSortBy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSortBy {
	#[serde(rename = "ST_SortBy")]
	pub st_sort_by: String,
}


// STSortMethod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSortMethod {
	#[serde(rename = "ST_SortMethod")]
	pub st_sort_method: String,
}


// CTDateGroupItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDateGroupItem {
	#[serde(rename = "year")]
	pub year: u16,
	#[serde(rename = "month")]
	pub month: Option<u16>,
	#[serde(rename = "day")]
	pub day: Option<u16>,
	#[serde(rename = "hour")]
	pub hour: Option<u16>,
	#[serde(rename = "minute")]
	pub minute: Option<u16>,
	#[serde(rename = "second")]
	pub second: Option<u16>,
	#[serde(rename = "dateTimeGrouping")]
	pub date_time_grouping: String,
}


// STDateTimeGrouping ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDateTimeGrouping {
	#[serde(rename = "ST_DateTimeGrouping")]
	pub st_date_time_grouping: String,
}


// STCellRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellRef {
	#[serde(rename = "ST_CellRef")]
	pub st_cell_ref: String,
}


// STRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRef {
	#[serde(rename = "ST_Ref")]
	pub st_ref: String,
}


// STRefA ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRefA {
	#[serde(rename = "ST_RefA")]
	pub st_ref_a: String,
}


// STSqref ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSqref {
	#[serde(rename = "ST_Sqref")]
	pub st_sqref: Vec<String>,
}


// STFormula ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFormula {
	#[serde(rename = "ST_Formula")]
	pub st_formula: String,
}


// STUnsignedIntHex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUnsignedIntHex {
	#[serde(rename = "ST_UnsignedIntHex")]
	pub st_unsigned_int_hex: String,
}


// CTXStringElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXStringElement {
	#[serde(rename = "v")]
	pub v: String,
}


// CTExtension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtension {
	#[serde(rename = "uri")]
	pub uri: Option<String>,
}


// CTObjectAnchor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObjectAnchor {
	#[serde(rename = "moveWithCells")]
	pub move_with_cells: Option<bool>,
	#[serde(rename = "sizeWithCells")]
	pub size_with_cells: Option<bool>,
	#[serde(rename = "xdr:from")]
	pub xdr_from: CTMarker,
	#[serde(rename = "xdr:to")]
	pub xdr_to: CTMarker,
}


// EGExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EGExtensionList {
	#[serde(rename = "ext")]
	pub ext: CTExtension,
}


// CTExtensionList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExtensionList {
	#[serde(rename = "EG_ExtensionList")]
	pub eg_extension_list: EGExtensionList,
}


// calc_chain ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct calc_chain {
	#[serde(rename = "calcChain")]
	pub calc_chain: CTCalcChain,
}


// CTCalcChain ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalcChain {
	#[serde(rename = "c")]
	pub c: Vec<CTCalcCell>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCalcCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalcCell {
	#[serde(rename = "r")]
	pub r: String,
	#[serde(rename = "i")]
	pub i: Option<i32>,
	#[serde(rename = "s")]
	pub s: Option<bool>,
	#[serde(rename = "l")]
	pub l: Option<bool>,
	#[serde(rename = "t")]
	pub t: Option<bool>,
	#[serde(rename = "a")]
	pub a: Option<bool>,
}


// comments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct comments {
	#[serde(rename = "comments")]
	pub comments: CTComments,
}


// CTComments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComments {
	#[serde(rename = "authors")]
	pub authors: CTAuthors,
	#[serde(rename = "commentList")]
	pub comment_list: CTCommentList,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTAuthors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAuthors {
	#[serde(rename = "author")]
	pub author: Vec<String>,
}


// CTCommentList ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommentList {
	#[serde(rename = "comment")]
	pub comment: Vec<CTComment>,
}


// CTComment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTComment {
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "authorId")]
	pub author_id: u32,
	#[serde(rename = "guid")]
	pub guid: Option<String>,
	#[serde(rename = "shapeId")]
	pub shape_id: Option<u32>,
	#[serde(rename = "text")]
	pub text: CTRst,
	#[serde(rename = "commentPr")]
	pub comment_pr: CTCommentPr,
}


// CTCommentPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCommentPr {
	#[serde(rename = "locked")]
	pub locked: Option<bool>,
	#[serde(rename = "defaultSize")]
	pub default_size: Option<bool>,
	#[serde(rename = "print")]
	pub print: Option<bool>,
	#[serde(rename = "disabled")]
	pub disabled: Option<bool>,
	#[serde(rename = "autoFill")]
	pub auto_fill: Option<bool>,
	#[serde(rename = "autoLine")]
	pub auto_line: Option<bool>,
	#[serde(rename = "altText")]
	pub alt_text: Option<String>,
	#[serde(rename = "textHAlign")]
	pub text_h_align: Option<String>,
	#[serde(rename = "textVAlign")]
	pub text_v_align: Option<String>,
	#[serde(rename = "lockText")]
	pub lock_text: Option<bool>,
	#[serde(rename = "justLastX")]
	pub just_last_x: Option<bool>,
	#[serde(rename = "autoScale")]
	pub auto_scale: Option<bool>,
	#[serde(rename = "anchor")]
	pub anchor: CTObjectAnchor,
}


// STTextHAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextHAlign {
	#[serde(rename = "ST_TextHAlign")]
	pub st_text_h_align: String,
}


// STTextVAlign ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextVAlign {
	#[serde(rename = "ST_TextVAlign")]
	pub st_text_v_align: String,
}


// map_info ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct map_info {
	#[serde(rename = "MapInfo")]
	pub map_info: CTMapInfo,
}


// CTMapInfo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMapInfo {
	#[serde(rename = "SelectionNamespaces")]
	pub selection_namespaces: String,
	#[serde(rename = "Schema")]
	pub schema: Vec<CTSchema>,
	#[serde(rename = "Map")]
	pub map: Vec<CTMap>,
}


// CTSchema ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSchema {
	#[serde(rename = "ID")]
	pub id: String,
	#[serde(rename = "SchemaRef")]
	pub schema_ref: Option<String>,
	#[serde(rename = "Namespace")]
	pub namespace: Option<String>,
	#[serde(rename = "SchemaLanguage")]
	pub schema_language: Option<String>,
}


// CTMap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMap {
	#[serde(rename = "ID")]
	pub id: u32,
	#[serde(rename = "Name")]
	pub name: String,
	#[serde(rename = "RootElement")]
	pub root_element: String,
	#[serde(rename = "SchemaID")]
	pub schema_id: String,
	#[serde(rename = "ShowImportExportValidationErrors")]
	pub show_import_export_validation_errors: bool,
	#[serde(rename = "AutoFit")]
	pub auto_fit: bool,
	#[serde(rename = "Append")]
	pub append: bool,
	#[serde(rename = "PreserveSortAFLayout")]
	pub preserve_sort_af_layout: bool,
	#[serde(rename = "PreserveFormat")]
	pub preserve_format: bool,
	#[serde(rename = "DataBinding")]
	pub data_binding: CTDataBinding,
}


// CTDataBinding ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataBinding {
	#[serde(rename = "DataBindingName")]
	pub data_binding_name: Option<String>,
	#[serde(rename = "FileBinding")]
	pub file_binding: Option<bool>,
	#[serde(rename = "ConnectionID")]
	pub connection_id: Option<u32>,
	#[serde(rename = "FileBindingName")]
	pub file_binding_name: Option<String>,
	#[serde(rename = "DataBindingLoadMode")]
	pub data_binding_load_mode: u32,
}


// connections ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct connections {
	#[serde(rename = "connections")]
	pub connections: CTConnections,
}


// CTConnections ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnections {
	#[serde(rename = "connection")]
	pub connection: Vec<CTConnection>,
}


// CTConnection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConnection {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "sourceFile")]
	pub source_file: Option<String>,
	#[serde(rename = "odcFile")]
	pub odc_file: Option<String>,
	#[serde(rename = "keepAlive")]
	pub keep_alive: Option<bool>,
	#[serde(rename = "interval")]
	pub interval: Option<u32>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<u32>,
	#[serde(rename = "reconnectionMethod")]
	pub reconnection_method: Option<u32>,
	#[serde(rename = "refreshedVersion")]
	pub refreshed_version: u8,
	#[serde(rename = "minRefreshableVersion")]
	pub min_refreshable_version: Option<u8>,
	#[serde(rename = "savePassword")]
	pub save_password: Option<bool>,
	#[serde(rename = "new")]
	pub new: Option<bool>,
	#[serde(rename = "deleted")]
	pub deleted: Option<bool>,
	#[serde(rename = "onlyUseConnectionFile")]
	pub only_use_connection_file: Option<bool>,
	#[serde(rename = "background")]
	pub background: Option<bool>,
	#[serde(rename = "refreshOnLoad")]
	pub refresh_on_load: Option<bool>,
	#[serde(rename = "saveData")]
	pub save_data: Option<bool>,
	#[serde(rename = "credentials")]
	pub credentials: Option<String>,
	#[serde(rename = "singleSignOnId")]
	pub single_sign_on_id: Option<String>,
	#[serde(rename = "dbPr")]
	pub db_pr: CTDbPr,
	#[serde(rename = "olapPr")]
	pub olap_pr: CTOlapPr,
	#[serde(rename = "webPr")]
	pub web_pr: CTWebPr,
	#[serde(rename = "textPr")]
	pub text_pr: CTTextPr,
	#[serde(rename = "parameters")]
	pub parameters: CTParameters,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STCredMethod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCredMethod {
	#[serde(rename = "ST_CredMethod")]
	pub st_cred_method: String,
}


// CTDbPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDbPr {
	#[serde(rename = "connection")]
	pub connection: String,
	#[serde(rename = "command")]
	pub command: Option<String>,
	#[serde(rename = "serverCommand")]
	pub server_command: Option<String>,
	#[serde(rename = "commandType")]
	pub command_type: Option<u32>,
}


// CTOlapPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOlapPr {
	#[serde(rename = "local")]
	pub local: Option<bool>,
	#[serde(rename = "localConnection")]
	pub local_connection: Option<String>,
	#[serde(rename = "localRefresh")]
	pub local_refresh: Option<bool>,
	#[serde(rename = "sendLocale")]
	pub send_locale: Option<bool>,
	#[serde(rename = "rowDrillCount")]
	pub row_drill_count: Option<u32>,
	#[serde(rename = "serverFill")]
	pub server_fill: Option<bool>,
	#[serde(rename = "serverNumberFormat")]
	pub server_number_format: Option<bool>,
	#[serde(rename = "serverFont")]
	pub server_font: Option<bool>,
	#[serde(rename = "serverFontColor")]
	pub server_font_color: Option<bool>,
}


// CTWebPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPr {
	#[serde(rename = "xml")]
	pub xml: Option<bool>,
	#[serde(rename = "sourceData")]
	pub source_data: Option<bool>,
	#[serde(rename = "parsePre")]
	pub parse_pre: Option<bool>,
	#[serde(rename = "consecutive")]
	pub consecutive: Option<bool>,
	#[serde(rename = "firstRow")]
	pub first_row: Option<bool>,
	#[serde(rename = "xl97")]
	pub xl97: Option<bool>,
	#[serde(rename = "textDates")]
	pub text_dates: Option<bool>,
	#[serde(rename = "xl2000")]
	pub xl2000: Option<bool>,
	#[serde(rename = "url")]
	pub url: Option<String>,
	#[serde(rename = "post")]
	pub post: Option<String>,
	#[serde(rename = "htmlTables")]
	pub html_tables: Option<bool>,
	#[serde(rename = "htmlFormat")]
	pub html_format: Option<String>,
	#[serde(rename = "editPage")]
	pub edit_page: Option<String>,
	#[serde(rename = "tables")]
	pub tables: CTTables,
}


// STHtmlFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHtmlFmt {
	#[serde(rename = "ST_HtmlFmt")]
	pub st_html_fmt: String,
}


// CTParameters ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParameters {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "parameter")]
	pub parameter: Vec<CTParameter>,
}


// CTParameter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTParameter {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "sqlType")]
	pub sql_type: Option<i32>,
	#[serde(rename = "parameterType")]
	pub parameter_type: Option<String>,
	#[serde(rename = "refreshOnChange")]
	pub refresh_on_change: Option<bool>,
	#[serde(rename = "prompt")]
	pub prompt: Option<String>,
	#[serde(rename = "boolean")]
	pub boolean: Option<bool>,
	#[serde(rename = "double")]
	pub double: Option<f64>,
	#[serde(rename = "integer")]
	pub integer: Option<i32>,
	#[serde(rename = "string")]
	pub string: Option<String>,
	#[serde(rename = "cell")]
	pub cell: Option<String>,
}


// STParameterType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STParameterType {
	#[serde(rename = "ST_ParameterType")]
	pub st_parameter_type: String,
}


// CTTables ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTables {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "m")]
	pub m: Vec<CTTableMissing>,
	#[serde(rename = "s")]
	pub s: Vec<CTXStringElement>,
	#[serde(rename = "x")]
	pub x: Vec<CTIndex>,
}


// CTTableMissing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableMissing {
}


// CTTextPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextPr {
	#[serde(rename = "prompt")]
	pub prompt: Option<bool>,
	#[serde(rename = "fileType")]
	pub file_type: Option<String>,
	#[serde(rename = "characterSet")]
	pub character_set: Option<String>,
	#[serde(rename = "firstRow")]
	pub first_row: Option<u32>,
	#[serde(rename = "sourceFile")]
	pub source_file: Option<String>,
	#[serde(rename = "delimited")]
	pub delimited: Option<bool>,
	#[serde(rename = "decimal")]
	pub decimal: Option<String>,
	#[serde(rename = "thousands")]
	pub thousands: Option<String>,
	#[serde(rename = "tab")]
	pub tab: Option<bool>,
	#[serde(rename = "space")]
	pub space: Option<bool>,
	#[serde(rename = "comma")]
	pub comma: Option<bool>,
	#[serde(rename = "semicolon")]
	pub semicolon: Option<bool>,
	#[serde(rename = "consecutive")]
	pub consecutive: Option<bool>,
	#[serde(rename = "qualifier")]
	pub qualifier: Option<String>,
	#[serde(rename = "delimiter")]
	pub delimiter: Option<String>,
	#[serde(rename = "textFields")]
	pub text_fields: CTTextFields,
}


// STFileType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFileType {
	#[serde(rename = "ST_FileType")]
	pub st_file_type: String,
}


// STQualifier ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STQualifier {
	#[serde(rename = "ST_Qualifier")]
	pub st_qualifier: String,
}


// CTTextFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "textField")]
	pub text_field: Vec<CTTextField>,
}


// CTTextField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTextField {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "position")]
	pub position: Option<u32>,
}


// STExternalConnectionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STExternalConnectionType {
	#[serde(rename = "ST_ExternalConnectionType")]
	pub st_external_connection_type: String,
}


// pivot_cache_definition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct pivot_cache_definition {
	#[serde(rename = "pivotCacheDefinition")]
	pub pivot_cache_definition: CTPivotCacheDefinition,
}


// pivot_cache_records ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct pivot_cache_records {
	#[serde(rename = "pivotCacheRecords")]
	pub pivot_cache_records: CTPivotCacheRecords,
}


// pivot_table_definition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct pivot_table_definition {
	#[serde(rename = "pivotTableDefinition")]
	pub pivot_table_definition: CTpivotTableDefinition,
}


// CTPivotCacheDefinition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotCacheDefinition {
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "invalid")]
	pub invalid: Option<bool>,
	#[serde(rename = "saveData")]
	pub save_data: Option<bool>,
	#[serde(rename = "refreshOnLoad")]
	pub refresh_on_load: Option<bool>,
	#[serde(rename = "optimizeMemory")]
	pub optimize_memory: Option<bool>,
	#[serde(rename = "enableRefresh")]
	pub enable_refresh: Option<bool>,
	#[serde(rename = "refreshedBy")]
	pub refreshed_by: Option<String>,
	#[serde(rename = "refreshedDateIso")]
	pub refreshed_date_iso: Option<u8>,
	#[serde(rename = "backgroundQuery")]
	pub background_query: Option<bool>,
	#[serde(rename = "missingItemsLimit")]
	pub missing_items_limit: Option<u32>,
	#[serde(rename = "createdVersion")]
	pub created_version: Option<u8>,
	#[serde(rename = "refreshedVersion")]
	pub refreshed_version: Option<u8>,
	#[serde(rename = "minRefreshableVersion")]
	pub min_refreshable_version: Option<u8>,
	#[serde(rename = "recordCount")]
	pub record_count: Option<u32>,
	#[serde(rename = "upgradeOnRefresh")]
	pub upgrade_on_refresh: Option<bool>,
	#[serde(rename = "tupleCache")]
	pub tuple_cache: Option<bool>,
	#[serde(rename = "supportSubquery")]
	pub support_subquery: Option<bool>,
	#[serde(rename = "supportAdvancedDrill")]
	pub support_advanced_drill: Option<bool>,
	#[serde(rename = "cacheSource")]
	pub cache_source: CTCacheSource,
	#[serde(rename = "cacheFields")]
	pub cache_fields: CTCacheFields,
	#[serde(rename = "cacheHierarchies")]
	pub cache_hierarchies: CTCacheHierarchies,
	#[serde(rename = "kpis")]
	pub kpis: CTPCDKPIs,
	#[serde(rename = "tupleCache")]
	pub tuple_cache: CTTupleCache,
	#[serde(rename = "calculatedItems")]
	pub calculated_items: CTCalculatedItems,
	#[serde(rename = "calculatedMembers")]
	pub calculated_members: CTCalculatedMembers,
	#[serde(rename = "dimensions")]
	pub dimensions: CTDimensions,
	#[serde(rename = "measureGroups")]
	pub measure_groups: CTMeasureGroups,
	#[serde(rename = "maps")]
	pub maps: CTMeasureDimensionMaps,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCacheFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCacheFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "cacheField")]
	pub cache_field: Vec<CTCacheField>,
}


// CTCacheField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCacheField {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "caption")]
	pub caption: Option<String>,
	#[serde(rename = "propertyName")]
	pub property_name: Option<String>,
	#[serde(rename = "serverField")]
	pub server_field: Option<bool>,
	#[serde(rename = "uniqueList")]
	pub unique_list: Option<bool>,
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
	#[serde(rename = "formula")]
	pub formula: Option<String>,
	#[serde(rename = "sqlType")]
	pub sql_type: Option<i32>,
	#[serde(rename = "hierarchy")]
	pub hierarchy: Option<i32>,
	#[serde(rename = "level")]
	pub level: Option<u32>,
	#[serde(rename = "databaseField")]
	pub database_field: Option<bool>,
	#[serde(rename = "mappingCount")]
	pub mapping_count: Option<u32>,
	#[serde(rename = "memberPropertyField")]
	pub member_property_field: Option<bool>,
	#[serde(rename = "sharedItems")]
	pub shared_items: CTSharedItems,
	#[serde(rename = "fieldGroup")]
	pub field_group: CTFieldGroup,
	#[serde(rename = "mpMap")]
	pub mp_map: Vec<CTX>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCacheSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCacheSource {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "connectionId")]
	pub connection_id: Option<u32>,
	#[serde(rename = "worksheetSource")]
	pub worksheet_source: CTWorksheetSource,
	#[serde(rename = "consolidation")]
	pub consolidation: CTConsolidation,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSourceType {
	#[serde(rename = "ST_SourceType")]
	pub st_source_type: String,
}


// CTWorksheetSource ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWorksheetSource {
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "sheet")]
	pub sheet: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// CTConsolidation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConsolidation {
	#[serde(rename = "autoPage")]
	pub auto_page: Option<bool>,
	#[serde(rename = "pages")]
	pub pages: CTPages,
	#[serde(rename = "rangeSets")]
	pub range_sets: CTRangeSets,
}


// CTPages ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPages {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "page")]
	pub page: Vec<CTPCDSCPage>,
}


// CTPCDSCPage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPCDSCPage {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "pageItem")]
	pub page_item: Vec<CTPageItem>,
}


// CTPageItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageItem {
	#[serde(rename = "name")]
	pub name: String,
}


// CTRangeSets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRangeSets {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "rangeSet")]
	pub range_set: Vec<CTRangeSet>,
}


// CTRangeSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRangeSet {
	#[serde(rename = "i1")]
	pub i1: Option<u32>,
	#[serde(rename = "i2")]
	pub i2: Option<u32>,
	#[serde(rename = "i3")]
	pub i3: Option<u32>,
	#[serde(rename = "i4")]
	pub i4: Option<u32>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "sheet")]
	pub sheet: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// CTSharedItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSharedItems {
	#[serde(rename = "containsSemiMixedTypes")]
	pub contains_semi_mixed_types: Option<bool>,
	#[serde(rename = "containsNonDate")]
	pub contains_non_date: Option<bool>,
	#[serde(rename = "containsDate")]
	pub contains_date: Option<bool>,
	#[serde(rename = "containsString")]
	pub contains_string: Option<bool>,
	#[serde(rename = "containsBlank")]
	pub contains_blank: Option<bool>,
	#[serde(rename = "containsMixedTypes")]
	pub contains_mixed_types: Option<bool>,
	#[serde(rename = "containsNumber")]
	pub contains_number: Option<bool>,
	#[serde(rename = "containsInteger")]
	pub contains_integer: Option<bool>,
	#[serde(rename = "minValue")]
	pub min_value: Option<f64>,
	#[serde(rename = "maxValue")]
	pub max_value: Option<f64>,
	#[serde(rename = "minDate")]
	pub min_date: Option<u8>,
	#[serde(rename = "maxDate")]
	pub max_date: Option<u8>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "longText")]
	pub long_text: Option<bool>,
	#[serde(rename = "m")]
	pub m: Vec<CTMissing>,
	#[serde(rename = "n")]
	pub n: Vec<CTNumber>,
	#[serde(rename = "b")]
	pub b: Vec<CTBoolean>,
	#[serde(rename = "e")]
	pub e: Vec<CTError>,
	#[serde(rename = "s")]
	pub s: Vec<CTString>,
	#[serde(rename = "d")]
	pub d: Vec<CTDateTime>,
}


// CTMissing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMissing {
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "in")]
	pub in_attr: Option<u32>,
	#[serde(rename = "bc")]
	pub bc: Option<String>,
	#[serde(rename = "fc")]
	pub fc: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "un")]
	pub un: Option<bool>,
	#[serde(rename = "st")]
	pub st: Option<bool>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "tpls")]
	pub tpls: Vec<CTTuples>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTNumber ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumber {
	#[serde(rename = "v")]
	pub v: f64,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "in")]
	pub in_attr: Option<u32>,
	#[serde(rename = "bc")]
	pub bc: Option<String>,
	#[serde(rename = "fc")]
	pub fc: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "un")]
	pub un: Option<bool>,
	#[serde(rename = "st")]
	pub st: Option<bool>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "tpls")]
	pub tpls: Vec<CTTuples>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTBoolean ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBoolean {
	#[serde(rename = "v")]
	pub v: bool,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTError ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTError {
	#[serde(rename = "v")]
	pub v: String,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "in")]
	pub in_attr: Option<u32>,
	#[serde(rename = "bc")]
	pub bc: Option<String>,
	#[serde(rename = "fc")]
	pub fc: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "un")]
	pub un: Option<bool>,
	#[serde(rename = "st")]
	pub st: Option<bool>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "tpls")]
	pub tpls: CTTuples,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTString ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTString {
	#[serde(rename = "v")]
	pub v: String,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "in")]
	pub in_attr: Option<u32>,
	#[serde(rename = "bc")]
	pub bc: Option<String>,
	#[serde(rename = "fc")]
	pub fc: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "un")]
	pub un: Option<bool>,
	#[serde(rename = "st")]
	pub st: Option<bool>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "tpls")]
	pub tpls: Vec<CTTuples>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTDateTime ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDateTime {
	#[serde(rename = "v")]
	pub v: u8,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<String>,
	#[serde(rename = "cp")]
	pub cp: Option<u32>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTFieldGroup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFieldGroup {
	#[serde(rename = "par")]
	pub par: Option<u32>,
	#[serde(rename = "base")]
	pub base: Option<u32>,
	#[serde(rename = "rangePr")]
	pub range_pr: CTRangePr,
	#[serde(rename = "discretePr")]
	pub discrete_pr: CTDiscretePr,
	#[serde(rename = "groupItems")]
	pub group_items: CTGroupItems,
}


// CTRangePr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRangePr {
	#[serde(rename = "autoStart")]
	pub auto_start: Option<bool>,
	#[serde(rename = "autoEnd")]
	pub auto_end: Option<bool>,
	#[serde(rename = "groupBy")]
	pub group_by: Option<String>,
	#[serde(rename = "startNum")]
	pub start_num: Option<f64>,
	#[serde(rename = "endNum")]
	pub end_num: Option<f64>,
	#[serde(rename = "startDate")]
	pub start_date: Option<u8>,
	#[serde(rename = "endDate")]
	pub end_date: Option<u8>,
	#[serde(rename = "groupInterval")]
	pub group_interval: Option<f64>,
}


// STGroupBy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGroupBy {
	#[serde(rename = "ST_GroupBy")]
	pub st_group_by: String,
}


// CTDiscretePr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDiscretePr {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "x")]
	pub x: Vec<CTIndex>,
}


// CTGroupItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "m")]
	pub m: Vec<CTMissing>,
	#[serde(rename = "n")]
	pub n: Vec<CTNumber>,
	#[serde(rename = "b")]
	pub b: Vec<CTBoolean>,
	#[serde(rename = "e")]
	pub e: Vec<CTError>,
	#[serde(rename = "s")]
	pub s: Vec<CTString>,
	#[serde(rename = "d")]
	pub d: Vec<CTDateTime>,
}


// CTPivotCacheRecords ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotCacheRecords {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "r")]
	pub r: Vec<CTRecord>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRecord ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRecord {
	#[serde(rename = "m")]
	pub m: Vec<CTMissing>,
	#[serde(rename = "n")]
	pub n: Vec<CTNumber>,
	#[serde(rename = "b")]
	pub b: Vec<CTBoolean>,
	#[serde(rename = "e")]
	pub e: Vec<CTError>,
	#[serde(rename = "s")]
	pub s: Vec<CTString>,
	#[serde(rename = "d")]
	pub d: Vec<CTDateTime>,
	#[serde(rename = "x")]
	pub x: Vec<CTIndex>,
}


// CTPCDKPIs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPCDKPIs {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "kpi")]
	pub kpi: Vec<CTPCDKPI>,
}


// CTPCDKPI ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPCDKPI {
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "caption")]
	pub caption: Option<String>,
	#[serde(rename = "displayFolder")]
	pub display_folder: Option<String>,
	#[serde(rename = "measureGroup")]
	pub measure_group: Option<String>,
	#[serde(rename = "parent")]
	pub parent: Option<String>,
	#[serde(rename = "value")]
	pub value: String,
	#[serde(rename = "goal")]
	pub goal: Option<String>,
	#[serde(rename = "status")]
	pub status: Option<String>,
	#[serde(rename = "trend")]
	pub trend: Option<String>,
	#[serde(rename = "weight")]
	pub weight: Option<String>,
	#[serde(rename = "time")]
	pub time: Option<String>,
}


// CTCacheHierarchies ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCacheHierarchies {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "cacheHierarchy")]
	pub cache_hierarchy: Vec<CTCacheHierarchy>,
}


// CTCacheHierarchy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCacheHierarchy {
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "caption")]
	pub caption: Option<String>,
	#[serde(rename = "measure")]
	pub measure: Option<bool>,
	#[serde(rename = "set")]
	pub set: Option<bool>,
	#[serde(rename = "parentSet")]
	pub parent_set: Option<u32>,
	#[serde(rename = "iconSet")]
	pub icon_set: Option<i32>,
	#[serde(rename = "attribute")]
	pub attribute: Option<bool>,
	#[serde(rename = "time")]
	pub time: Option<bool>,
	#[serde(rename = "keyAttribute")]
	pub key_attribute: Option<bool>,
	#[serde(rename = "defaultMemberUniqueName")]
	pub default_member_unique_name: Option<String>,
	#[serde(rename = "allUniqueName")]
	pub all_unique_name: Option<String>,
	#[serde(rename = "allCaption")]
	pub all_caption: Option<String>,
	#[serde(rename = "dimensionUniqueName")]
	pub dimension_unique_name: Option<String>,
	#[serde(rename = "displayFolder")]
	pub display_folder: Option<String>,
	#[serde(rename = "measureGroup")]
	pub measure_group: Option<String>,
	#[serde(rename = "measures")]
	pub measures: Option<bool>,
	#[serde(rename = "count")]
	pub count: u32,
	#[serde(rename = "oneField")]
	pub one_field: Option<bool>,
	#[serde(rename = "memberValueDatatype")]
	pub member_value_datatype: Option<u16>,
	#[serde(rename = "unbalanced")]
	pub unbalanced: Option<bool>,
	#[serde(rename = "unbalancedGroup")]
	pub unbalanced_group: Option<bool>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "fieldsUsage")]
	pub fields_usage: CTFieldsUsage,
	#[serde(rename = "groupLevels")]
	pub group_levels: CTGroupLevels,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTFieldsUsage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFieldsUsage {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "fieldUsage")]
	pub field_usage: Vec<CTFieldUsage>,
}


// CTFieldUsage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFieldUsage {
	#[serde(rename = "x")]
	pub x: i32,
}


// CTGroupLevels ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupLevels {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "groupLevel")]
	pub group_level: Vec<CTGroupLevel>,
}


// CTGroupLevel ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupLevel {
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "caption")]
	pub caption: String,
	#[serde(rename = "user")]
	pub user: Option<bool>,
	#[serde(rename = "customRollUp")]
	pub custom_roll_up: Option<bool>,
	#[serde(rename = "groups")]
	pub groups: CTGroups,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTGroups ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroups {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "group")]
	pub group: Vec<CTLevelGroup>,
}


// CTLevelGroup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLevelGroup {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "caption")]
	pub caption: String,
	#[serde(rename = "uniqueParent")]
	pub unique_parent: Option<String>,
	#[serde(rename = "id")]
	pub id: Option<i32>,
	#[serde(rename = "groupMembers")]
	pub group_members: CTGroupMembers,
}


// CTGroupMembers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupMembers {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "groupMember")]
	pub group_member: Vec<CTGroupMember>,
}


// CTGroupMember ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGroupMember {
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "group")]
	pub group: Option<bool>,
}


// CTTupleCache ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTupleCache {
	#[serde(rename = "entries")]
	pub entries: CTPCDSDTCEntries,
	#[serde(rename = "sets")]
	pub sets: CTSets,
	#[serde(rename = "queryCache")]
	pub query_cache: CTQueryCache,
	#[serde(rename = "serverFormats")]
	pub server_formats: CTServerFormats,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTServerFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTServerFormat {
	#[serde(rename = "culture")]
	pub culture: Option<String>,
	#[serde(rename = "format")]
	pub format: Option<String>,
}


// CTServerFormats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTServerFormats {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "serverFormat")]
	pub server_format: Vec<CTServerFormat>,
}


// CTPCDSDTCEntries ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPCDSDTCEntries {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "m")]
	pub m: Vec<CTMissing>,
	#[serde(rename = "n")]
	pub n: Vec<CTNumber>,
	#[serde(rename = "e")]
	pub e: Vec<CTError>,
	#[serde(rename = "s")]
	pub s: Vec<CTString>,
}


// CTTuples ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTuples {
	#[serde(rename = "c")]
	pub c: Option<u32>,
	#[serde(rename = "tpl")]
	pub tpl: Vec<CTTuple>,
}


// CTTuple ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTuple {
	#[serde(rename = "fld")]
	pub fld: Option<u32>,
	#[serde(rename = "hier")]
	pub hier: Option<u32>,
	#[serde(rename = "item")]
	pub item: u32,
}


// CTSets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSets {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "set")]
	pub set: Vec<CTSet>,
}


// CTSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSet {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "maxRank")]
	pub max_rank: i32,
	#[serde(rename = "setDefinition")]
	pub set_definition: String,
	#[serde(rename = "sortType")]
	pub sort_type: Option<String>,
	#[serde(rename = "queryFailed")]
	pub query_failed: Option<bool>,
	#[serde(rename = "tpls")]
	pub tpls: Vec<CTTuples>,
	#[serde(rename = "sortByTuple")]
	pub sort_by_tuple: CTTuples,
}


// STSortType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSortType {
	#[serde(rename = "ST_SortType")]
	pub st_sort_type: String,
}


// CTQueryCache ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryCache {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "query")]
	pub query: Vec<CTQuery>,
}


// CTQuery ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQuery {
	#[serde(rename = "mdx")]
	pub mdx: String,
	#[serde(rename = "tpls")]
	pub tpls: CTTuples,
}


// CTCalculatedItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalculatedItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "calculatedItem")]
	pub calculated_item: Vec<CTCalculatedItem>,
}


// CTCalculatedItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalculatedItem {
	#[serde(rename = "field")]
	pub field: Option<u32>,
	#[serde(rename = "formula")]
	pub formula: Option<String>,
	#[serde(rename = "pivotArea")]
	pub pivot_area: CTPivotArea,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCalculatedMembers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalculatedMembers {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "calculatedMember")]
	pub calculated_member: Vec<CTCalculatedMember>,
}


// CTCalculatedMember ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalculatedMember {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "mdx")]
	pub mdx: String,
	#[serde(rename = "memberName")]
	pub member_name: Option<String>,
	#[serde(rename = "hierarchy")]
	pub hierarchy: Option<String>,
	#[serde(rename = "parent")]
	pub parent: Option<String>,
	#[serde(rename = "solveOrder")]
	pub solve_order: Option<i32>,
	#[serde(rename = "set")]
	pub set: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTpivotTableDefinition ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTpivotTableDefinition {
	#[serde(rename = "AG_AutoFormat")]
	pub ag_auto_format: Vec<AGAutoFormat>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "cacheId")]
	pub cache_id: u32,
	#[serde(rename = "dataOnRows")]
	pub data_on_rows: Option<bool>,
	#[serde(rename = "dataPosition")]
	pub data_position: Option<u32>,
	#[serde(rename = "dataCaption")]
	pub data_caption: String,
	#[serde(rename = "grandTotalCaption")]
	pub grand_total_caption: Option<String>,
	#[serde(rename = "errorCaption")]
	pub error_caption: Option<String>,
	#[serde(rename = "showError")]
	pub show_error: Option<bool>,
	#[serde(rename = "missingCaption")]
	pub missing_caption: Option<String>,
	#[serde(rename = "showMissing")]
	pub show_missing: Option<bool>,
	#[serde(rename = "pageStyle")]
	pub page_style: Option<String>,
	#[serde(rename = "pivotTableStyle")]
	pub pivot_table_style: Option<String>,
	#[serde(rename = "vacatedStyle")]
	pub vacated_style: Option<String>,
	#[serde(rename = "tag")]
	pub tag: Option<String>,
	#[serde(rename = "updatedVersion")]
	pub updated_version: Option<u8>,
	#[serde(rename = "minRefreshableVersion")]
	pub min_refreshable_version: Option<u8>,
	#[serde(rename = "asteriskTotals")]
	pub asterisk_totals: Option<bool>,
	#[serde(rename = "showItems")]
	pub show_items: Option<bool>,
	#[serde(rename = "editData")]
	pub edit_data: Option<bool>,
	#[serde(rename = "disableFieldList")]
	pub disable_field_list: Option<bool>,
	#[serde(rename = "showCalcMbrs")]
	pub show_calc_mbrs: Option<bool>,
	#[serde(rename = "visualTotals")]
	pub visual_totals: Option<bool>,
	#[serde(rename = "showMultipleLabel")]
	pub show_multiple_label: Option<bool>,
	#[serde(rename = "showDataDropDown")]
	pub show_data_drop_down: Option<bool>,
	#[serde(rename = "showDrill")]
	pub show_drill: Option<bool>,
	#[serde(rename = "printDrill")]
	pub print_drill: Option<bool>,
	#[serde(rename = "showMemberPropertyTips")]
	pub show_member_property_tips: Option<bool>,
	#[serde(rename = "showDataTips")]
	pub show_data_tips: Option<bool>,
	#[serde(rename = "enableWizard")]
	pub enable_wizard: Option<bool>,
	#[serde(rename = "enableDrill")]
	pub enable_drill: Option<bool>,
	#[serde(rename = "enableFieldProperties")]
	pub enable_field_properties: Option<bool>,
	#[serde(rename = "preserveFormatting")]
	pub preserve_formatting: Option<bool>,
	#[serde(rename = "useAutoFormatting")]
	pub use_auto_formatting: Option<bool>,
	#[serde(rename = "pageWrap")]
	pub page_wrap: Option<u32>,
	#[serde(rename = "pageOverThenDown")]
	pub page_over_then_down: Option<bool>,
	#[serde(rename = "subtotalHiddenItems")]
	pub subtotal_hidden_items: Option<bool>,
	#[serde(rename = "rowGrandTotals")]
	pub row_grand_totals: Option<bool>,
	#[serde(rename = "colGrandTotals")]
	pub col_grand_totals: Option<bool>,
	#[serde(rename = "fieldPrintTitles")]
	pub field_print_titles: Option<bool>,
	#[serde(rename = "itemPrintTitles")]
	pub item_print_titles: Option<bool>,
	#[serde(rename = "mergeItem")]
	pub merge_item: Option<bool>,
	#[serde(rename = "showDropZones")]
	pub show_drop_zones: Option<bool>,
	#[serde(rename = "createdVersion")]
	pub created_version: Option<u8>,
	#[serde(rename = "indent")]
	pub indent: Option<u32>,
	#[serde(rename = "showEmptyRow")]
	pub show_empty_row: Option<bool>,
	#[serde(rename = "showEmptyCol")]
	pub show_empty_col: Option<bool>,
	#[serde(rename = "showHeaders")]
	pub show_headers: Option<bool>,
	#[serde(rename = "compact")]
	pub compact: Option<bool>,
	#[serde(rename = "outline")]
	pub outline: Option<bool>,
	#[serde(rename = "outlineData")]
	pub outline_data: Option<bool>,
	#[serde(rename = "compactData")]
	pub compact_data: Option<bool>,
	#[serde(rename = "published")]
	pub published: Option<bool>,
	#[serde(rename = "gridDropZones")]
	pub grid_drop_zones: Option<bool>,
	#[serde(rename = "immersive")]
	pub immersive: Option<bool>,
	#[serde(rename = "multipleFieldFilters")]
	pub multiple_field_filters: Option<bool>,
	#[serde(rename = "chartFormat")]
	pub chart_format: Option<u32>,
	#[serde(rename = "rowHeaderCaption")]
	pub row_header_caption: Option<String>,
	#[serde(rename = "colHeaderCaption")]
	pub col_header_caption: Option<String>,
	#[serde(rename = "fieldListSortAscending")]
	pub field_list_sort_ascending: Option<bool>,
	#[serde(rename = "mdxSubqueries")]
	pub mdx_subqueries: Option<bool>,
	#[serde(rename = "customListSort")]
	pub custom_list_sort: Option<bool>,
	#[serde(rename = "location")]
	pub location: CTLocation,
	#[serde(rename = "pivotFields")]
	pub pivot_fields: CTPivotFields,
	#[serde(rename = "rowFields")]
	pub row_fields: CTRowFields,
	#[serde(rename = "rowItems")]
	pub row_items: CTrowItems,
	#[serde(rename = "colFields")]
	pub col_fields: CTColFields,
	#[serde(rename = "colItems")]
	pub col_items: CTcolItems,
	#[serde(rename = "pageFields")]
	pub page_fields: CTPageFields,
	#[serde(rename = "dataFields")]
	pub data_fields: CTDataFields,
	#[serde(rename = "formats")]
	pub formats: CTFormats,
	#[serde(rename = "conditionalFormats")]
	pub conditional_formats: CTConditionalFormats,
	#[serde(rename = "chartFormats")]
	pub chart_formats: CTChartFormats,
	#[serde(rename = "pivotHierarchies")]
	pub pivot_hierarchies: CTPivotHierarchies,
	#[serde(rename = "pivotTableStyleInfo")]
	pub pivot_table_style_info: CTPivotTableStyle,
	#[serde(rename = "filters")]
	pub filters: CTPivotFilters,
	#[serde(rename = "rowHierarchiesUsage")]
	pub row_hierarchies_usage: CTRowHierarchiesUsage,
	#[serde(rename = "colHierarchiesUsage")]
	pub col_hierarchies_usage: CTColHierarchiesUsage,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTLocation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTLocation {
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "firstHeaderRow")]
	pub first_header_row: u32,
	#[serde(rename = "firstDataRow")]
	pub first_data_row: u32,
	#[serde(rename = "firstDataCol")]
	pub first_data_col: u32,
	#[serde(rename = "rowPageCount")]
	pub row_page_count: Option<u32>,
	#[serde(rename = "colPageCount")]
	pub col_page_count: Option<u32>,
}


// CTPivotFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "pivotField")]
	pub pivot_field: Vec<CTPivotField>,
}


// CTPivotField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "axis")]
	pub axis: Option<String>,
	#[serde(rename = "dataField")]
	pub data_field: Option<bool>,
	#[serde(rename = "subtotalCaption")]
	pub subtotal_caption: Option<String>,
	#[serde(rename = "showDropDowns")]
	pub show_drop_downs: Option<bool>,
	#[serde(rename = "hiddenLevel")]
	pub hidden_level: Option<bool>,
	#[serde(rename = "uniqueMemberProperty")]
	pub unique_member_property: Option<String>,
	#[serde(rename = "compact")]
	pub compact: Option<bool>,
	#[serde(rename = "allDrilled")]
	pub all_drilled: Option<bool>,
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
	#[serde(rename = "outline")]
	pub outline: Option<bool>,
	#[serde(rename = "subtotalTop")]
	pub subtotal_top: Option<bool>,
	#[serde(rename = "dragToRow")]
	pub drag_to_row: Option<bool>,
	#[serde(rename = "dragToCol")]
	pub drag_to_col: Option<bool>,
	#[serde(rename = "multipleItemSelectionAllowed")]
	pub multiple_item_selection_allowed: Option<bool>,
	#[serde(rename = "dragToPage")]
	pub drag_to_page: Option<bool>,
	#[serde(rename = "dragToData")]
	pub drag_to_data: Option<bool>,
	#[serde(rename = "dragOff")]
	pub drag_off: Option<bool>,
	#[serde(rename = "showAll")]
	pub show_all: Option<bool>,
	#[serde(rename = "insertBlankRow")]
	pub insert_blank_row: Option<bool>,
	#[serde(rename = "serverField")]
	pub server_field: Option<bool>,
	#[serde(rename = "insertPageBreak")]
	pub insert_page_break: Option<bool>,
	#[serde(rename = "autoShow")]
	pub auto_show: Option<bool>,
	#[serde(rename = "topAutoShow")]
	pub top_auto_show: Option<bool>,
	#[serde(rename = "hideNewItems")]
	pub hide_new_items: Option<bool>,
	#[serde(rename = "measureFilter")]
	pub measure_filter: Option<bool>,
	#[serde(rename = "includeNewItemsInFilter")]
	pub include_new_items_in_filter: Option<bool>,
	#[serde(rename = "itemPageCount")]
	pub item_page_count: Option<u32>,
	#[serde(rename = "sortType")]
	pub sort_type: Option<String>,
	#[serde(rename = "dataSourceSort")]
	pub data_source_sort: Option<bool>,
	#[serde(rename = "nonAutoSortDefault")]
	pub non_auto_sort_default: Option<bool>,
	#[serde(rename = "rankBy")]
	pub rank_by: Option<u32>,
	#[serde(rename = "defaultSubtotal")]
	pub default_subtotal: Option<bool>,
	#[serde(rename = "sumSubtotal")]
	pub sum_subtotal: Option<bool>,
	#[serde(rename = "countASubtotal")]
	pub count_a_subtotal: Option<bool>,
	#[serde(rename = "avgSubtotal")]
	pub avg_subtotal: Option<bool>,
	#[serde(rename = "maxSubtotal")]
	pub max_subtotal: Option<bool>,
	#[serde(rename = "minSubtotal")]
	pub min_subtotal: Option<bool>,
	#[serde(rename = "productSubtotal")]
	pub product_subtotal: Option<bool>,
	#[serde(rename = "countSubtotal")]
	pub count_subtotal: Option<bool>,
	#[serde(rename = "stdDevSubtotal")]
	pub std_dev_subtotal: Option<bool>,
	#[serde(rename = "stdDevPSubtotal")]
	pub std_dev_p_subtotal: Option<bool>,
	#[serde(rename = "varSubtotal")]
	pub var_subtotal: Option<bool>,
	#[serde(rename = "varPSubtotal")]
	pub var_p_subtotal: Option<bool>,
	#[serde(rename = "showPropCell")]
	pub show_prop_cell: Option<bool>,
	#[serde(rename = "showPropTip")]
	pub show_prop_tip: Option<bool>,
	#[serde(rename = "showPropAsCaption")]
	pub show_prop_as_caption: Option<bool>,
	#[serde(rename = "defaultAttributeDrillState")]
	pub default_attribute_drill_state: Option<bool>,
	#[serde(rename = "items")]
	pub items: CTItems,
	#[serde(rename = "autoSortScope")]
	pub auto_sort_scope: CTAutoSortScope,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTAutoSortScope ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTAutoSortScope {
	#[serde(rename = "pivotArea")]
	pub pivot_area: CTPivotArea,
}


// CTItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "item")]
	pub item: Vec<CTItem>,
}


// CTItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTItem {
	#[serde(rename = "n")]
	pub n: Option<String>,
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "h")]
	pub h: Option<bool>,
	#[serde(rename = "s")]
	pub s: Option<bool>,
	#[serde(rename = "sd")]
	pub sd: Option<bool>,
	#[serde(rename = "f")]
	pub f: Option<bool>,
	#[serde(rename = "m")]
	pub m: Option<bool>,
	#[serde(rename = "c")]
	pub c: Option<bool>,
	#[serde(rename = "x")]
	pub x: Option<u32>,
	#[serde(rename = "d")]
	pub d: Option<bool>,
	#[serde(rename = "e")]
	pub e: Option<bool>,
}


// CTPageFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "pageField")]
	pub page_field: Vec<CTPageField>,
}


// CTPageField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageField {
	#[serde(rename = "fld")]
	pub fld: i32,
	#[serde(rename = "item")]
	pub item: Option<u32>,
	#[serde(rename = "hier")]
	pub hier: Option<i32>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "cap")]
	pub cap: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTDataFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "dataField")]
	pub data_field: Vec<CTDataField>,
}


// CTDataField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataField {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "fld")]
	pub fld: u32,
	#[serde(rename = "subtotal")]
	pub subtotal: Option<String>,
	#[serde(rename = "showDataAs")]
	pub show_data_as: Option<String>,
	#[serde(rename = "baseField")]
	pub base_field: Option<i32>,
	#[serde(rename = "baseItem")]
	pub base_item: Option<u32>,
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTrowItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTrowItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "i")]
	pub i: Vec<CTI>,
}


// CTcolItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTcolItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "i")]
	pub i: Vec<CTI>,
}


// CTI ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTI {
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "r")]
	pub r: Option<u32>,
	#[serde(rename = "i")]
	pub i: Option<u32>,
	#[serde(rename = "x")]
	pub x: Vec<CTX>,
}


// CTX ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTX {
	#[serde(rename = "v")]
	pub v: Option<i32>,
}


// CTRowFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRowFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "field")]
	pub field: Vec<CTField>,
}


// CTColFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "field")]
	pub field: Vec<CTField>,
}


// CTField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTField {
	#[serde(rename = "x")]
	pub x: i32,
}


// CTFormats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFormats {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "format")]
	pub format: Vec<CTFormat>,
}


// CTFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFormat {
	#[serde(rename = "action")]
	pub action: Option<String>,
	#[serde(rename = "dxfId")]
	pub dxf_id: Option<u32>,
	#[serde(rename = "pivotArea")]
	pub pivot_area: CTPivotArea,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTConditionalFormats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConditionalFormats {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "conditionalFormat")]
	pub conditional_format: Vec<CTConditionalFormat>,
}


// CTConditionalFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConditionalFormat {
	#[serde(rename = "scope")]
	pub scope: Option<String>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "priority")]
	pub priority: u32,
	#[serde(rename = "pivotAreas")]
	pub pivot_areas: CTPivotAreas,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTPivotAreas ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotAreas {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "pivotArea")]
	pub pivot_area: Vec<CTPivotArea>,
}


// STScope ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STScope {
	#[serde(rename = "ST_Scope")]
	pub st_scope: String,
}


// STType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STType {
	#[serde(rename = "ST_Type")]
	pub st_type: String,
}


// CTChartFormats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartFormats {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "chartFormat")]
	pub chart_format: Vec<CTChartFormat>,
}


// CTChartFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartFormat {
	#[serde(rename = "chart")]
	pub chart: u32,
	#[serde(rename = "format")]
	pub format: u32,
	#[serde(rename = "series")]
	pub series: Option<bool>,
	#[serde(rename = "pivotArea")]
	pub pivot_area: CTPivotArea,
}


// CTPivotHierarchies ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotHierarchies {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "pivotHierarchy")]
	pub pivot_hierarchy: Vec<CTPivotHierarchy>,
}


// CTPivotHierarchy ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotHierarchy {
	#[serde(rename = "outline")]
	pub outline: Option<bool>,
	#[serde(rename = "multipleItemSelectionAllowed")]
	pub multiple_item_selection_allowed: Option<bool>,
	#[serde(rename = "subtotalTop")]
	pub subtotal_top: Option<bool>,
	#[serde(rename = "showInFieldList")]
	pub show_in_field_list: Option<bool>,
	#[serde(rename = "dragToRow")]
	pub drag_to_row: Option<bool>,
	#[serde(rename = "dragToCol")]
	pub drag_to_col: Option<bool>,
	#[serde(rename = "dragToPage")]
	pub drag_to_page: Option<bool>,
	#[serde(rename = "dragToData")]
	pub drag_to_data: Option<bool>,
	#[serde(rename = "dragOff")]
	pub drag_off: Option<bool>,
	#[serde(rename = "includeNewItemsInFilter")]
	pub include_new_items_in_filter: Option<bool>,
	#[serde(rename = "caption")]
	pub caption: Option<String>,
	#[serde(rename = "mps")]
	pub mps: CTMemberProperties,
	#[serde(rename = "members")]
	pub members: Vec<CTMembers>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRowHierarchiesUsage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRowHierarchiesUsage {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "rowHierarchyUsage")]
	pub row_hierarchy_usage: Vec<CTHierarchyUsage>,
}


// CTColHierarchiesUsage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColHierarchiesUsage {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "colHierarchyUsage")]
	pub col_hierarchy_usage: Vec<CTHierarchyUsage>,
}


// CTHierarchyUsage ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHierarchyUsage {
	#[serde(rename = "hierarchyUsage")]
	pub hierarchy_usage: i32,
}


// CTMemberProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMemberProperties {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "mp")]
	pub mp: Vec<CTMemberProperty>,
}


// CTMemberProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMemberProperty {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "showCell")]
	pub show_cell: Option<bool>,
	#[serde(rename = "showTip")]
	pub show_tip: Option<bool>,
	#[serde(rename = "showAsCaption")]
	pub show_as_caption: Option<bool>,
	#[serde(rename = "nameLen")]
	pub name_len: Option<u32>,
	#[serde(rename = "pPos")]
	pub p_pos: Option<u32>,
	#[serde(rename = "pLen")]
	pub p_len: Option<u32>,
	#[serde(rename = "level")]
	pub level: Option<u32>,
	#[serde(rename = "field")]
	pub field: u32,
}


// CTMembers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMembers {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "level")]
	pub level: Option<u32>,
	#[serde(rename = "member")]
	pub member: Vec<CTMember>,
}


// CTMember ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMember {
	#[serde(rename = "name")]
	pub name: String,
}


// CTDimensions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDimensions {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "dimension")]
	pub dimension: Vec<CTPivotDimension>,
}


// CTPivotDimension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotDimension {
	#[serde(rename = "measure")]
	pub measure: Option<bool>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "uniqueName")]
	pub unique_name: String,
	#[serde(rename = "caption")]
	pub caption: String,
}


// CTMeasureGroups ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMeasureGroups {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "measureGroup")]
	pub measure_group: Vec<CTMeasureGroup>,
}


// CTMeasureDimensionMaps ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMeasureDimensionMaps {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "map")]
	pub map: Vec<CTMeasureDimensionMap>,
}


// CTMeasureGroup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMeasureGroup {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "caption")]
	pub caption: String,
}


// CTMeasureDimensionMap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMeasureDimensionMap {
	#[serde(rename = "measureGroup")]
	pub measure_group: Option<u32>,
	#[serde(rename = "dimension")]
	pub dimension: Option<u32>,
}


// CTPivotTableStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotTableStyle {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "showRowHeaders")]
	pub show_row_headers: Option<bool>,
	#[serde(rename = "showColHeaders")]
	pub show_col_headers: Option<bool>,
	#[serde(rename = "showRowStripes")]
	pub show_row_stripes: Option<bool>,
	#[serde(rename = "showColStripes")]
	pub show_col_stripes: Option<bool>,
	#[serde(rename = "showLastColumn")]
	pub show_last_column: Option<bool>,
}


// CTPivotFilters ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotFilters {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "filter")]
	pub filter: Vec<CTPivotFilter>,
}


// CTPivotFilter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotFilter {
	#[serde(rename = "fld")]
	pub fld: u32,
	#[serde(rename = "mpFld")]
	pub mp_fld: Option<u32>,
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "evalOrder")]
	pub eval_order: Option<i32>,
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "iMeasureHier")]
	pub i_measure_hier: Option<u32>,
	#[serde(rename = "iMeasureFld")]
	pub i_measure_fld: Option<u32>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "stringValue1")]
	pub string_value1: Option<String>,
	#[serde(rename = "stringValue2")]
	pub string_value2: Option<String>,
	#[serde(rename = "autoFilter")]
	pub auto_filter: CTAutoFilter,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STShowDataAs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STShowDataAs {
	#[serde(rename = "ST_ShowDataAs")]
	pub st_show_data_as: String,
}


// STItemType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STItemType {
	#[serde(rename = "ST_ItemType")]
	pub st_item_type: String,
}


// STFormatAction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFormatAction {
	#[serde(rename = "ST_FormatAction")]
	pub st_format_action: String,
}


// STFieldSortType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFieldSortType {
	#[serde(rename = "ST_FieldSortType")]
	pub st_field_sort_type: String,
}


// STPivotFilterType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPivotFilterType {
	#[serde(rename = "ST_PivotFilterType")]
	pub st_pivot_filter_type: String,
}


// CTPivotArea ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotArea {
	#[serde(rename = "field")]
	pub field: Option<i32>,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "dataOnly")]
	pub data_only: Option<bool>,
	#[serde(rename = "labelOnly")]
	pub label_only: Option<bool>,
	#[serde(rename = "grandRow")]
	pub grand_row: Option<bool>,
	#[serde(rename = "grandCol")]
	pub grand_col: Option<bool>,
	#[serde(rename = "cacheIndex")]
	pub cache_index: Option<bool>,
	#[serde(rename = "outline")]
	pub outline: Option<bool>,
	#[serde(rename = "offset")]
	pub offset: Option<String>,
	#[serde(rename = "collapsedLevelsAreSubtotals")]
	pub collapsed_levels_are_subtotals: Option<bool>,
	#[serde(rename = "axis")]
	pub axis: Option<String>,
	#[serde(rename = "fieldPosition")]
	pub field_position: Option<u32>,
	#[serde(rename = "references")]
	pub references: CTPivotAreaReferences,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STPivotAreaType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPivotAreaType {
	#[serde(rename = "ST_PivotAreaType")]
	pub st_pivot_area_type: String,
}


// CTPivotAreaReferences ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotAreaReferences {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "reference")]
	pub reference: Vec<CTPivotAreaReference>,
}


// CTPivotAreaReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotAreaReference {
	#[serde(rename = "field")]
	pub field: Option<u32>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "selected")]
	pub selected: Option<bool>,
	#[serde(rename = "byPosition")]
	pub by_position: Option<bool>,
	#[serde(rename = "relative")]
	pub relative: Option<bool>,
	#[serde(rename = "defaultSubtotal")]
	pub default_subtotal: Option<bool>,
	#[serde(rename = "sumSubtotal")]
	pub sum_subtotal: Option<bool>,
	#[serde(rename = "countASubtotal")]
	pub count_a_subtotal: Option<bool>,
	#[serde(rename = "avgSubtotal")]
	pub avg_subtotal: Option<bool>,
	#[serde(rename = "maxSubtotal")]
	pub max_subtotal: Option<bool>,
	#[serde(rename = "minSubtotal")]
	pub min_subtotal: Option<bool>,
	#[serde(rename = "productSubtotal")]
	pub product_subtotal: Option<bool>,
	#[serde(rename = "countSubtotal")]
	pub count_subtotal: Option<bool>,
	#[serde(rename = "stdDevSubtotal")]
	pub std_dev_subtotal: Option<bool>,
	#[serde(rename = "stdDevPSubtotal")]
	pub std_dev_p_subtotal: Option<bool>,
	#[serde(rename = "varSubtotal")]
	pub var_subtotal: Option<bool>,
	#[serde(rename = "varPSubtotal")]
	pub var_p_subtotal: Option<bool>,
	#[serde(rename = "x")]
	pub x: Vec<CTIndex>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIndex {
	#[serde(rename = "v")]
	pub v: u32,
}


// STAxis ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STAxis {
	#[serde(rename = "ST_Axis")]
	pub st_axis: String,
}


// query_table ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct query_table {
	#[serde(rename = "queryTable")]
	pub query_table: CTQueryTable,
}


// CTQueryTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryTable {
	#[serde(rename = "AG_AutoFormat")]
	pub ag_auto_format: Vec<AGAutoFormat>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "headers")]
	pub headers: Option<bool>,
	#[serde(rename = "rowNumbers")]
	pub row_numbers: Option<bool>,
	#[serde(rename = "disableRefresh")]
	pub disable_refresh: Option<bool>,
	#[serde(rename = "backgroundRefresh")]
	pub background_refresh: Option<bool>,
	#[serde(rename = "firstBackgroundRefresh")]
	pub first_background_refresh: Option<bool>,
	#[serde(rename = "refreshOnLoad")]
	pub refresh_on_load: Option<bool>,
	#[serde(rename = "growShrinkType")]
	pub grow_shrink_type: Option<String>,
	#[serde(rename = "fillFormulas")]
	pub fill_formulas: Option<bool>,
	#[serde(rename = "removeDataOnSave")]
	pub remove_data_on_save: Option<bool>,
	#[serde(rename = "disableEdit")]
	pub disable_edit: Option<bool>,
	#[serde(rename = "preserveFormatting")]
	pub preserve_formatting: Option<bool>,
	#[serde(rename = "adjustColumnWidth")]
	pub adjust_column_width: Option<bool>,
	#[serde(rename = "intermediate")]
	pub intermediate: Option<bool>,
	#[serde(rename = "connectionId")]
	pub connection_id: u32,
	#[serde(rename = "queryTableRefresh")]
	pub query_table_refresh: CTQueryTableRefresh,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTQueryTableRefresh ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryTableRefresh {
	#[serde(rename = "preserveSortFilterLayout")]
	pub preserve_sort_filter_layout: Option<bool>,
	#[serde(rename = "fieldIdWrapped")]
	pub field_id_wrapped: Option<bool>,
	#[serde(rename = "headersInLastRefresh")]
	pub headers_in_last_refresh: Option<bool>,
	#[serde(rename = "minimumVersion")]
	pub minimum_version: Option<u8>,
	#[serde(rename = "nextId")]
	pub next_id: Option<u32>,
	#[serde(rename = "unboundColumnsLeft")]
	pub unbound_columns_left: Option<u32>,
	#[serde(rename = "unboundColumnsRight")]
	pub unbound_columns_right: Option<u32>,
	#[serde(rename = "queryTableFields")]
	pub query_table_fields: CTQueryTableFields,
	#[serde(rename = "queryTableDeletedFields")]
	pub query_table_deleted_fields: CTQueryTableDeletedFields,
	#[serde(rename = "sortState")]
	pub sort_state: CTSortState,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTQueryTableDeletedFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryTableDeletedFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "deletedField")]
	pub deleted_field: Vec<CTDeletedField>,
}


// CTDeletedField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDeletedField {
	#[serde(rename = "name")]
	pub name: String,
}


// CTQueryTableFields ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryTableFields {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "queryTableField")]
	pub query_table_field: Vec<CTQueryTableField>,
}


// CTQueryTableField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTQueryTableField {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "dataBound")]
	pub data_bound: Option<bool>,
	#[serde(rename = "rowNumbers")]
	pub row_numbers: Option<bool>,
	#[serde(rename = "fillFormulas")]
	pub fill_formulas: Option<bool>,
	#[serde(rename = "clipped")]
	pub clipped: Option<bool>,
	#[serde(rename = "tableColumnId")]
	pub table_column_id: Option<u32>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STGrowShrinkType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGrowShrinkType {
	#[serde(rename = "ST_GrowShrinkType")]
	pub st_grow_shrink_type: String,
}


// sst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct sst {
	#[serde(rename = "sst")]
	pub sst: CTSst,
}


// CTSst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSst {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "uniqueCount")]
	pub unique_count: Option<u32>,
	#[serde(rename = "si")]
	pub si: Vec<CTRst>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STPhoneticType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPhoneticType {
	#[serde(rename = "ST_PhoneticType")]
	pub st_phonetic_type: String,
}


// STPhoneticAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPhoneticAlignment {
	#[serde(rename = "ST_PhoneticAlignment")]
	pub st_phonetic_alignment: String,
}


// CTPhoneticRun ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPhoneticRun {
	#[serde(rename = "sb")]
	pub sb: u32,
	#[serde(rename = "eb")]
	pub eb: u32,
	#[serde(rename = "t")]
	pub t: String,
}


// CTRElt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRElt {
	#[serde(rename = "rPr")]
	pub r_pr: CTRPrElt,
	#[serde(rename = "t")]
	pub t: String,
}


// CTRPrElt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRPrElt {
	#[serde(rename = "rFont")]
	pub r_font: Vec<CTFontName>,
	#[serde(rename = "charset")]
	pub charset: Vec<CTIntProperty>,
	#[serde(rename = "family")]
	pub family: Vec<CTIntProperty>,
	#[serde(rename = "b")]
	pub b: Vec<CTBooleanProperty>,
	#[serde(rename = "i")]
	pub i: Vec<CTBooleanProperty>,
	#[serde(rename = "strike")]
	pub strike: Vec<CTBooleanProperty>,
	#[serde(rename = "outline")]
	pub outline: Vec<CTBooleanProperty>,
	#[serde(rename = "shadow")]
	pub shadow: Vec<CTBooleanProperty>,
	#[serde(rename = "condense")]
	pub condense: Vec<CTBooleanProperty>,
	#[serde(rename = "extend")]
	pub extend: Vec<CTBooleanProperty>,
	#[serde(rename = "color")]
	pub color: Vec<CTColor>,
	#[serde(rename = "sz")]
	pub sz: Vec<CTFontSize>,
	#[serde(rename = "u")]
	pub u: Vec<CTUnderlineProperty>,
	#[serde(rename = "vertAlign")]
	pub vert_align: Vec<CTVerticalAlignFontProperty>,
	#[serde(rename = "scheme")]
	pub scheme: Vec<CTFontScheme>,
}


// CTRst ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRst {
	#[serde(rename = "t")]
	pub t: String,
	#[serde(rename = "r")]
	pub r: Vec<CTRElt>,
	#[serde(rename = "rPh")]
	pub r_ph: Vec<CTPhoneticRun>,
	#[serde(rename = "phoneticPr")]
	pub phonetic_pr: CTPhoneticPr,
}


// CTPhoneticPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPhoneticPr {
	#[serde(rename = "fontId")]
	pub font_id: u32,
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "alignment")]
	pub alignment: Option<String>,
}


// headers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct headers {
	#[serde(rename = "headers")]
	pub headers: CTRevisionHeaders,
}


// revisions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct revisions {
	#[serde(rename = "revisions")]
	pub revisions: CTRevisions,
}


// CTRevisionHeaders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionHeaders {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "lastGuid")]
	pub last_guid: Option<String>,
	#[serde(rename = "shared")]
	pub shared: Option<bool>,
	#[serde(rename = "diskRevisions")]
	pub disk_revisions: Option<bool>,
	#[serde(rename = "history")]
	pub history: Option<bool>,
	#[serde(rename = "trackRevisions")]
	pub track_revisions: Option<bool>,
	#[serde(rename = "exclusive")]
	pub exclusive: Option<bool>,
	#[serde(rename = "revisionId")]
	pub revision_id: Option<u32>,
	#[serde(rename = "version")]
	pub version: Option<i32>,
	#[serde(rename = "keepChangeHistory")]
	pub keep_change_history: Option<bool>,
	#[serde(rename = "protected")]
	pub protected: Option<bool>,
	#[serde(rename = "preserveHistory")]
	pub preserve_history: Option<u32>,
	#[serde(rename = "header")]
	pub header: Vec<CTRevisionHeader>,
}


// CTRevisions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisions {
	#[serde(rename = "rrc")]
	pub rrc: Vec<CTRevisionRowColumn>,
	#[serde(rename = "rm")]
	pub rm: Vec<CTRevisionMove>,
	#[serde(rename = "rcv")]
	pub rcv: Vec<CTRevisionCustomView>,
	#[serde(rename = "rsnm")]
	pub rsnm: Vec<CTRevisionSheetRename>,
	#[serde(rename = "ris")]
	pub ris: Vec<CTRevisionInsertSheet>,
	#[serde(rename = "rcc")]
	pub rcc: Vec<CTRevisionCellChange>,
	#[serde(rename = "rfmt")]
	pub rfmt: Vec<CTRevisionFormatting>,
	#[serde(rename = "raf")]
	pub raf: Vec<CTRevisionAutoFormatting>,
	#[serde(rename = "rdn")]
	pub rdn: Vec<CTRevisionDefinedName>,
	#[serde(rename = "rcmt")]
	pub rcmt: Vec<CTRevisionComment>,
	#[serde(rename = "rqt")]
	pub rqt: Vec<CTRevisionQueryTableField>,
	#[serde(rename = "rcft")]
	pub rcft: Vec<CTRevisionConflict>,
}


// AGRevData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGRevData {
	#[serde(rename = "rId")]
	pub r_id: Vec<u32>,
	#[serde(rename = "ua")]
	pub ua: Option<bool>,
	#[serde(rename = "ra")]
	pub ra: Option<bool>,
}


// CTRevisionHeader ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionHeader {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "dateTime")]
	pub date_time: u8,
	#[serde(rename = "maxSheetId")]
	pub max_sheet_id: u32,
	#[serde(rename = "userName")]
	pub user_name: String,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "minRId")]
	pub min_r_id: Option<u32>,
	#[serde(rename = "maxRId")]
	pub max_r_id: Option<u32>,
	#[serde(rename = "sheetIdMap")]
	pub sheet_id_map: CTSheetIdMap,
	#[serde(rename = "reviewedList")]
	pub reviewed_list: CTReviewedRevisions,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSheetIdMap ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetIdMap {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "sheetId")]
	pub sheet_id: Vec<CTSheetId>,
}


// CTSheetId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetId {
	#[serde(rename = "val")]
	pub val: u32,
}


// CTReviewedRevisions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTReviewedRevisions {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "reviewed")]
	pub reviewed: Vec<CTReviewed>,
}


// CTReviewed ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTReviewed {
	#[serde(rename = "rId")]
	pub r_id: u32,
}


// CTUndoInfo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUndoInfo {
	#[serde(rename = "index")]
	pub index: u32,
	#[serde(rename = "exp")]
	pub exp: String,
	#[serde(rename = "ref3D")]
	pub ref3_d: Option<bool>,
	#[serde(rename = "array")]
	pub array: Option<bool>,
	#[serde(rename = "v")]
	pub v: Option<bool>,
	#[serde(rename = "nf")]
	pub nf: Option<bool>,
	#[serde(rename = "cs")]
	pub cs: Option<bool>,
	#[serde(rename = "dr")]
	pub dr: String,
	#[serde(rename = "dn")]
	pub dn: Option<String>,
	#[serde(rename = "r")]
	pub r: Option<String>,
	#[serde(rename = "sId")]
	pub s_id: Option<u32>,
}


// CTRevisionRowColumn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionRowColumn {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sId")]
	pub s_id: u32,
	#[serde(rename = "eol")]
	pub eol: Option<bool>,
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "action")]
	pub action: String,
	#[serde(rename = "edge")]
	pub edge: Option<bool>,
	#[serde(rename = "undo")]
	pub undo: Vec<CTUndoInfo>,
	#[serde(rename = "rcc")]
	pub rcc: Vec<CTRevisionCellChange>,
	#[serde(rename = "rfmt")]
	pub rfmt: Vec<CTRevisionFormatting>,
}


// CTRevisionMove ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionMove {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "source")]
	pub source: String,
	#[serde(rename = "destination")]
	pub destination: String,
	#[serde(rename = "sourceSheetId")]
	pub source_sheet_id: Option<u32>,
	#[serde(rename = "undo")]
	pub undo: Vec<CTUndoInfo>,
	#[serde(rename = "rcc")]
	pub rcc: Vec<CTRevisionCellChange>,
	#[serde(rename = "rfmt")]
	pub rfmt: Vec<CTRevisionFormatting>,
}


// CTRevisionCustomView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionCustomView {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "action")]
	pub action: String,
}


// CTRevisionSheetRename ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionSheetRename {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "oldName")]
	pub old_name: String,
	#[serde(rename = "newName")]
	pub new_name: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRevisionInsertSheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionInsertSheet {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "sheetPosition")]
	pub sheet_position: u32,
}


// CTRevisionCellChange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionCellChange {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sId")]
	pub s_id: u32,
	#[serde(rename = "odxf")]
	pub odxf: Option<bool>,
	#[serde(rename = "xfDxf")]
	pub xf_dxf: Option<bool>,
	#[serde(rename = "s")]
	pub s: Option<bool>,
	#[serde(rename = "dxf")]
	pub dxf: Option<bool>,
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
	#[serde(rename = "quotePrefix")]
	pub quote_prefix: Option<bool>,
	#[serde(rename = "oldQuotePrefix")]
	pub old_quote_prefix: Option<bool>,
	#[serde(rename = "ph")]
	pub ph: Option<bool>,
	#[serde(rename = "oldPh")]
	pub old_ph: Option<bool>,
	#[serde(rename = "endOfListFormulaUpdate")]
	pub end_of_list_formula_update: Option<bool>,
	#[serde(rename = "oc")]
	pub oc: CTCell,
	#[serde(rename = "nc")]
	pub nc: CTCell,
	#[serde(rename = "odxf")]
	pub odxf: CTDxf,
	#[serde(rename = "ndxf")]
	pub ndxf: CTDxf,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRevisionFormatting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionFormatting {
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "xfDxf")]
	pub xf_dxf: Option<bool>,
	#[serde(rename = "s")]
	pub s: Option<bool>,
	#[serde(rename = "sqref")]
	pub sqref: STSqref,
	#[serde(rename = "start")]
	pub start: Option<u32>,
	#[serde(rename = "length")]
	pub length: Option<u32>,
	#[serde(rename = "dxf")]
	pub dxf: CTDxf,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRevisionAutoFormatting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionAutoFormatting {
	#[serde(rename = "AG_AutoFormat")]
	pub ag_auto_format: Vec<AGAutoFormat>,
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "ref")]
	pub ref_attr: String,
}


// CTRevisionComment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionComment {
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "cell")]
	pub cell: String,
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "action")]
	pub action: Option<String>,
	#[serde(rename = "alwaysShow")]
	pub always_show: Option<bool>,
	#[serde(rename = "old")]
	pub old: Option<bool>,
	#[serde(rename = "hiddenRow")]
	pub hidden_row: Option<bool>,
	#[serde(rename = "hiddenColumn")]
	pub hidden_column: Option<bool>,
	#[serde(rename = "author")]
	pub author: String,
	#[serde(rename = "oldLength")]
	pub old_length: Option<u32>,
	#[serde(rename = "newLength")]
	pub new_length: Option<u32>,
}


// CTRevisionDefinedName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionDefinedName {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "localSheetId")]
	pub local_sheet_id: Option<u32>,
	#[serde(rename = "customView")]
	pub custom_view: Option<bool>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "function")]
	pub function: Option<bool>,
	#[serde(rename = "oldFunction")]
	pub old_function: Option<bool>,
	#[serde(rename = "functionGroupId")]
	pub function_group_id: Option<u8>,
	#[serde(rename = "oldFunctionGroupId")]
	pub old_function_group_id: Option<u8>,
	#[serde(rename = "shortcutKey")]
	pub shortcut_key: Option<u8>,
	#[serde(rename = "oldShortcutKey")]
	pub old_shortcut_key: Option<u8>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "oldHidden")]
	pub old_hidden: Option<bool>,
	#[serde(rename = "customMenu")]
	pub custom_menu: Option<String>,
	#[serde(rename = "oldCustomMenu")]
	pub old_custom_menu: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "oldDescription")]
	pub old_description: Option<String>,
	#[serde(rename = "help")]
	pub help: Option<String>,
	#[serde(rename = "oldHelp")]
	pub old_help: Option<String>,
	#[serde(rename = "statusBar")]
	pub status_bar: Option<String>,
	#[serde(rename = "oldStatusBar")]
	pub old_status_bar: Option<String>,
	#[serde(rename = "comment")]
	pub comment: Option<String>,
	#[serde(rename = "oldComment")]
	pub old_comment: Option<String>,
	#[serde(rename = "formula")]
	pub formula: String,
	#[serde(rename = "oldFormula")]
	pub old_formula: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTRevisionConflict ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionConflict {
	#[serde(rename = "AG_RevData")]
	pub ag_rev_data: Vec<AGRevData>,
	#[serde(rename = "sheetId")]
	pub sheet_id: Option<u32>,
}


// CTRevisionQueryTableField ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRevisionQueryTableField {
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "fieldId")]
	pub field_id: u32,
}


// STrwColActionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STrwColActionType {
	#[serde(rename = "ST_rwColActionType")]
	pub st_rw_col_action_type: String,
}


// STRevisionAction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRevisionAction {
	#[serde(rename = "ST_RevisionAction")]
	pub st_revision_action: String,
}


// STFormulaExpression ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFormulaExpression {
	#[serde(rename = "ST_FormulaExpression")]
	pub st_formula_expression: String,
}


// users ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct users {
	#[serde(rename = "users")]
	pub users: CTUsers,
}


// CTUsers ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUsers {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "userInfo")]
	pub user_info: Vec<CTSharedUser>,
}


// CTSharedUser ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSharedUser {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "id")]
	pub id: i32,
	#[serde(rename = "dateTime")]
	pub date_time: u8,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// worksheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct worksheet {
	#[serde(rename = "worksheet")]
	pub worksheet: CTWorksheet,
}


// chartsheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct chartsheet {
	#[serde(rename = "chartsheet")]
	pub chartsheet: CTChartsheet,
}


// dialogsheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct dialogsheet {
	#[serde(rename = "dialogsheet")]
	pub dialogsheet: CTDialogsheet,
}


// CTMacrosheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMacrosheet {
	#[serde(rename = "sheetPr")]
	pub sheet_pr: CTSheetPr,
	#[serde(rename = "dimension")]
	pub dimension: CTSheetDimension,
	#[serde(rename = "sheetViews")]
	pub sheet_views: CTSheetViews,
	#[serde(rename = "sheetFormatPr")]
	pub sheet_format_pr: CTSheetFormatPr,
	#[serde(rename = "cols")]
	pub cols: Vec<CTCols>,
	#[serde(rename = "sheetData")]
	pub sheet_data: CTSheetData,
	#[serde(rename = "sheetProtection")]
	pub sheet_protection: CTSheetProtection,
	#[serde(rename = "autoFilter")]
	pub auto_filter: CTAutoFilter,
	#[serde(rename = "sortState")]
	pub sort_state: CTSortState,
	#[serde(rename = "dataConsolidate")]
	pub data_consolidate: CTDataConsolidate,
	#[serde(rename = "customSheetViews")]
	pub custom_sheet_views: CTCustomSheetViews,
	#[serde(rename = "phoneticPr")]
	pub phonetic_pr: CTPhoneticPr,
	#[serde(rename = "conditionalFormatting")]
	pub conditional_formatting: Vec<CTConditionalFormatting>,
	#[serde(rename = "printOptions")]
	pub print_options: CTPrintOptions,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
	#[serde(rename = "rowBreaks")]
	pub row_breaks: CTPageBreak,
	#[serde(rename = "colBreaks")]
	pub col_breaks: CTPageBreak,
	#[serde(rename = "customProperties")]
	pub custom_properties: CTCustomProperties,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
	#[serde(rename = "drawingHF")]
	pub drawing_hf: CTDrawingHF,
	#[serde(rename = "picture")]
	pub picture: CTSheetBackgroundPicture,
	#[serde(rename = "oleObjects")]
	pub ole_objects: CTOleObjects,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTDialogsheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDialogsheet {
	#[serde(rename = "sheetPr")]
	pub sheet_pr: CTSheetPr,
	#[serde(rename = "sheetViews")]
	pub sheet_views: CTSheetViews,
	#[serde(rename = "sheetFormatPr")]
	pub sheet_format_pr: CTSheetFormatPr,
	#[serde(rename = "sheetProtection")]
	pub sheet_protection: CTSheetProtection,
	#[serde(rename = "customSheetViews")]
	pub custom_sheet_views: CTCustomSheetViews,
	#[serde(rename = "printOptions")]
	pub print_options: CTPrintOptions,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
	#[serde(rename = "drawingHF")]
	pub drawing_hf: CTDrawingHF,
	#[serde(rename = "oleObjects")]
	pub ole_objects: CTOleObjects,
	#[serde(rename = "controls")]
	pub controls: CTControls,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTWorksheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWorksheet {
	#[serde(rename = "sheetPr")]
	pub sheet_pr: CTSheetPr,
	#[serde(rename = "dimension")]
	pub dimension: CTSheetDimension,
	#[serde(rename = "sheetViews")]
	pub sheet_views: CTSheetViews,
	#[serde(rename = "sheetFormatPr")]
	pub sheet_format_pr: CTSheetFormatPr,
	#[serde(rename = "cols")]
	pub cols: Vec<CTCols>,
	#[serde(rename = "sheetData")]
	pub sheet_data: CTSheetData,
	#[serde(rename = "sheetCalcPr")]
	pub sheet_calc_pr: CTSheetCalcPr,
	#[serde(rename = "sheetProtection")]
	pub sheet_protection: CTSheetProtection,
	#[serde(rename = "protectedRanges")]
	pub protected_ranges: CTProtectedRanges,
	#[serde(rename = "scenarios")]
	pub scenarios: CTScenarios,
	#[serde(rename = "autoFilter")]
	pub auto_filter: CTAutoFilter,
	#[serde(rename = "sortState")]
	pub sort_state: CTSortState,
	#[serde(rename = "dataConsolidate")]
	pub data_consolidate: CTDataConsolidate,
	#[serde(rename = "customSheetViews")]
	pub custom_sheet_views: CTCustomSheetViews,
	#[serde(rename = "mergeCells")]
	pub merge_cells: CTMergeCells,
	#[serde(rename = "phoneticPr")]
	pub phonetic_pr: CTPhoneticPr,
	#[serde(rename = "conditionalFormatting")]
	pub conditional_formatting: Vec<CTConditionalFormatting>,
	#[serde(rename = "dataValidations")]
	pub data_validations: CTDataValidations,
	#[serde(rename = "hyperlinks")]
	pub hyperlinks: CTHyperlinks,
	#[serde(rename = "printOptions")]
	pub print_options: CTPrintOptions,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
	#[serde(rename = "rowBreaks")]
	pub row_breaks: CTPageBreak,
	#[serde(rename = "colBreaks")]
	pub col_breaks: CTPageBreak,
	#[serde(rename = "customProperties")]
	pub custom_properties: CTCustomProperties,
	#[serde(rename = "cellWatches")]
	pub cell_watches: CTCellWatches,
	#[serde(rename = "ignoredErrors")]
	pub ignored_errors: CTIgnoredErrors,
	#[serde(rename = "smartTags")]
	pub smart_tags: CTSmartTags,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
	#[serde(rename = "drawingHF")]
	pub drawing_hf: CTDrawingHF,
	#[serde(rename = "picture")]
	pub picture: CTSheetBackgroundPicture,
	#[serde(rename = "oleObjects")]
	pub ole_objects: CTOleObjects,
	#[serde(rename = "controls")]
	pub controls: CTControls,
	#[serde(rename = "webPublishItems")]
	pub web_publish_items: CTWebPublishItems,
	#[serde(rename = "tableParts")]
	pub table_parts: CTTableParts,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSheetData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetData {
	#[serde(rename = "row")]
	pub row: Vec<CTRow>,
}


// CTSheetCalcPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetCalcPr {
	#[serde(rename = "fullCalcOnLoad")]
	pub full_calc_on_load: Option<bool>,
}


// CTSheetFormatPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetFormatPr {
	#[serde(rename = "baseColWidth")]
	pub base_col_width: Option<u32>,
	#[serde(rename = "defaultColWidth")]
	pub default_col_width: Option<f64>,
	#[serde(rename = "defaultRowHeight")]
	pub default_row_height: f64,
	#[serde(rename = "customHeight")]
	pub custom_height: Option<bool>,
	#[serde(rename = "zeroHeight")]
	pub zero_height: Option<bool>,
	#[serde(rename = "thickTop")]
	pub thick_top: Option<bool>,
	#[serde(rename = "thickBottom")]
	pub thick_bottom: Option<bool>,
	#[serde(rename = "outlineLevelRow")]
	pub outline_level_row: Option<u8>,
	#[serde(rename = "outlineLevelCol")]
	pub outline_level_col: Option<u8>,
}


// CTCols ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCols {
	#[serde(rename = "col")]
	pub col: Vec<CTCol>,
}


// CTCol ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCol {
	#[serde(rename = "min")]
	pub min: u32,
	#[serde(rename = "max")]
	pub max: u32,
	#[serde(rename = "width")]
	pub width: Option<f64>,
	#[serde(rename = "style")]
	pub style: Option<u32>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "bestFit")]
	pub best_fit: Option<bool>,
	#[serde(rename = "customWidth")]
	pub custom_width: Option<bool>,
	#[serde(rename = "phonetic")]
	pub phonetic: Option<bool>,
	#[serde(rename = "outlineLevel")]
	pub outline_level: Option<u8>,
	#[serde(rename = "collapsed")]
	pub collapsed: Option<bool>,
}


// STCellSpan ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellSpan {
	#[serde(rename = "ST_CellSpan")]
	pub st_cell_span: String,
}


// STCellSpans ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellSpans {
	#[serde(rename = "ST_CellSpans")]
	pub st_cell_spans: Vec<String>,
}


// CTRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRow {
	#[serde(rename = "r")]
	pub r: Option<u32>,
	#[serde(rename = "spans")]
	pub spans: Option<STCellSpans>,
	#[serde(rename = "s")]
	pub s: Option<u32>,
	#[serde(rename = "customFormat")]
	pub custom_format: Option<bool>,
	#[serde(rename = "ht")]
	pub ht: Option<f64>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "customHeight")]
	pub custom_height: Option<bool>,
	#[serde(rename = "outlineLevel")]
	pub outline_level: Option<u8>,
	#[serde(rename = "collapsed")]
	pub collapsed: Option<bool>,
	#[serde(rename = "thickTop")]
	pub thick_top: Option<bool>,
	#[serde(rename = "thickBot")]
	pub thick_bot: Option<bool>,
	#[serde(rename = "ph")]
	pub ph: Option<bool>,
	#[serde(rename = "c")]
	pub c: Vec<CTCell>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCell {
	#[serde(rename = "r")]
	pub r: Option<String>,
	#[serde(rename = "s")]
	pub s: Option<u32>,
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "cm")]
	pub cm: Option<u32>,
	#[serde(rename = "vm")]
	pub vm: Option<u32>,
	#[serde(rename = "ph")]
	pub ph: Option<bool>,
	#[serde(rename = "f")]
	pub f: CTCellFormula,
	#[serde(rename = "v")]
	pub v: String,
	#[serde(rename = "is")]
	pub is: CTRst,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STCellType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellType {
	#[serde(rename = "ST_CellType")]
	pub st_cell_type: String,
}


// STCellFormulaType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellFormulaType {
	#[serde(rename = "ST_CellFormulaType")]
	pub st_cell_formula_type: String,
}


// CTSheetPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetPr {
	#[serde(rename = "syncHorizontal")]
	pub sync_horizontal: Option<bool>,
	#[serde(rename = "syncVertical")]
	pub sync_vertical: Option<bool>,
	#[serde(rename = "syncRef")]
	pub sync_ref: Option<String>,
	#[serde(rename = "transitionEvaluation")]
	pub transition_evaluation: Option<bool>,
	#[serde(rename = "transitionEntry")]
	pub transition_entry: Option<bool>,
	#[serde(rename = "published")]
	pub published: Option<bool>,
	#[serde(rename = "codeName")]
	pub code_name: Option<String>,
	#[serde(rename = "filterMode")]
	pub filter_mode: Option<bool>,
	#[serde(rename = "enableFormatConditionsCalculation")]
	pub enable_format_conditions_calculation: Option<bool>,
	#[serde(rename = "tabColor")]
	pub tab_color: CTColor,
	#[serde(rename = "outlinePr")]
	pub outline_pr: CTOutlinePr,
	#[serde(rename = "pageSetUpPr")]
	pub page_set_up_pr: CTPageSetUpPr,
}


// CTSheetDimension ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetDimension {
	#[serde(rename = "ref")]
	pub ref_attr: String,
}


// CTSheetViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetViews {
	#[serde(rename = "sheetView")]
	pub sheet_view: Vec<CTSheetView>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTSheetView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetView {
	#[serde(rename = "windowProtection")]
	pub window_protection: Option<bool>,
	#[serde(rename = "showFormulas")]
	pub show_formulas: Option<bool>,
	#[serde(rename = "showGridLines")]
	pub show_grid_lines: Option<bool>,
	#[serde(rename = "showRowColHeaders")]
	pub show_row_col_headers: Option<bool>,
	#[serde(rename = "showZeros")]
	pub show_zeros: Option<bool>,
	#[serde(rename = "rightToLeft")]
	pub right_to_left: Option<bool>,
	#[serde(rename = "tabSelected")]
	pub tab_selected: Option<bool>,
	#[serde(rename = "showRuler")]
	pub show_ruler: Option<bool>,
	#[serde(rename = "showOutlineSymbols")]
	pub show_outline_symbols: Option<bool>,
	#[serde(rename = "defaultGridColor")]
	pub default_grid_color: Option<bool>,
	#[serde(rename = "showWhiteSpace")]
	pub show_white_space: Option<bool>,
	#[serde(rename = "view")]
	pub view: Option<String>,
	#[serde(rename = "topLeftCell")]
	pub top_left_cell: Option<String>,
	#[serde(rename = "colorId")]
	pub color_id: Option<u32>,
	#[serde(rename = "zoomScale")]
	pub zoom_scale: Option<u32>,
	#[serde(rename = "zoomScaleNormal")]
	pub zoom_scale_normal: Option<u32>,
	#[serde(rename = "zoomScaleSheetLayoutView")]
	pub zoom_scale_sheet_layout_view: Option<u32>,
	#[serde(rename = "zoomScalePageLayoutView")]
	pub zoom_scale_page_layout_view: Option<u32>,
	#[serde(rename = "workbookViewId")]
	pub workbook_view_id: u32,
	#[serde(rename = "pane")]
	pub pane: CTPane,
	#[serde(rename = "selection")]
	pub selection: Vec<CTSelection>,
	#[serde(rename = "pivotSelection")]
	pub pivot_selection: Vec<CTPivotSelection>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTPane ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPane {
	#[serde(rename = "xSplit")]
	pub x_split: Option<f64>,
	#[serde(rename = "ySplit")]
	pub y_split: Option<f64>,
	#[serde(rename = "topLeftCell")]
	pub top_left_cell: Option<String>,
	#[serde(rename = "activePane")]
	pub active_pane: Option<String>,
	#[serde(rename = "state")]
	pub state: Option<String>,
}


// CTPivotSelection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotSelection {
	#[serde(rename = "pane")]
	pub pane: Option<String>,
	#[serde(rename = "showHeader")]
	pub show_header: Option<bool>,
	#[serde(rename = "label")]
	pub label: Option<bool>,
	#[serde(rename = "data")]
	pub data: Option<bool>,
	#[serde(rename = "extendable")]
	pub extendable: Option<bool>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "axis")]
	pub axis: Option<String>,
	#[serde(rename = "dimension")]
	pub dimension: Option<u32>,
	#[serde(rename = "start")]
	pub start: Option<u32>,
	#[serde(rename = "min")]
	pub min: Option<u32>,
	#[serde(rename = "max")]
	pub max: Option<u32>,
	#[serde(rename = "activeRow")]
	pub active_row: Option<u32>,
	#[serde(rename = "activeCol")]
	pub active_col: Option<u32>,
	#[serde(rename = "previousRow")]
	pub previous_row: Option<u32>,
	#[serde(rename = "previousCol")]
	pub previous_col: Option<u32>,
	#[serde(rename = "click")]
	pub click: Option<u32>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "pivotArea")]
	pub pivot_area: CTPivotArea,
}


// CTSelection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSelection {
	#[serde(rename = "pane")]
	pub pane: Option<String>,
	#[serde(rename = "activeCell")]
	pub active_cell: Option<String>,
	#[serde(rename = "activeCellId")]
	pub active_cell_id: Option<u32>,
	#[serde(rename = "sqref")]
	pub sqref: Option<STSqref>,
}


// STPane ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPane {
	#[serde(rename = "ST_Pane")]
	pub st_pane: String,
}


// CTPageBreak ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageBreak {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "manualBreakCount")]
	pub manual_break_count: Option<u32>,
	#[serde(rename = "brk")]
	pub brk: Vec<CTBreak>,
}


// CTBreak ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBreak {
	#[serde(rename = "id")]
	pub id: Option<u32>,
	#[serde(rename = "min")]
	pub min: Option<u32>,
	#[serde(rename = "max")]
	pub max: Option<u32>,
	#[serde(rename = "man")]
	pub man: Option<bool>,
	#[serde(rename = "pt")]
	pub pt: Option<bool>,
}


// STSheetViewType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSheetViewType {
	#[serde(rename = "ST_SheetViewType")]
	pub st_sheet_view_type: String,
}


// CTOutlinePr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOutlinePr {
	#[serde(rename = "applyStyles")]
	pub apply_styles: Option<bool>,
	#[serde(rename = "summaryBelow")]
	pub summary_below: Option<bool>,
	#[serde(rename = "summaryRight")]
	pub summary_right: Option<bool>,
	#[serde(rename = "showOutlineSymbols")]
	pub show_outline_symbols: Option<bool>,
}


// CTPageSetUpPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageSetUpPr {
	#[serde(rename = "autoPageBreaks")]
	pub auto_page_breaks: Option<bool>,
	#[serde(rename = "fitToPage")]
	pub fit_to_page: Option<bool>,
}


// CTDataConsolidate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataConsolidate {
	#[serde(rename = "function")]
	pub function: Option<String>,
	#[serde(rename = "startLabels")]
	pub start_labels: Option<bool>,
	#[serde(rename = "topLabels")]
	pub top_labels: Option<bool>,
	#[serde(rename = "link")]
	pub link: Option<bool>,
	#[serde(rename = "dataRefs")]
	pub data_refs: CTDataRefs,
}


// STDataConsolidateFunction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDataConsolidateFunction {
	#[serde(rename = "ST_DataConsolidateFunction")]
	pub st_data_consolidate_function: String,
}


// CTDataRefs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataRefs {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "dataRef")]
	pub data_ref: Vec<CTDataRef>,
}


// CTDataRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataRef {
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "sheet")]
	pub sheet: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// CTMergeCells ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMergeCells {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "mergeCell")]
	pub merge_cell: Vec<CTMergeCell>,
}


// CTMergeCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMergeCell {
	#[serde(rename = "ref")]
	pub ref_attr: String,
}


// CTSmartTags ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTags {
	#[serde(rename = "cellSmartTags")]
	pub cell_smart_tags: Vec<CTCellSmartTags>,
}


// CTCellSmartTags ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellSmartTags {
	#[serde(rename = "r")]
	pub r: String,
	#[serde(rename = "cellSmartTag")]
	pub cell_smart_tag: Vec<CTCellSmartTag>,
}


// CTCellSmartTag ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellSmartTag {
	#[serde(rename = "type")]
	pub type_attr: u32,
	#[serde(rename = "deleted")]
	pub deleted: Option<bool>,
	#[serde(rename = "xmlBased")]
	pub xml_based: Option<bool>,
	#[serde(rename = "cellSmartTagPr")]
	pub cell_smart_tag_pr: Vec<CTCellSmartTagPr>,
}


// CTCellSmartTagPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellSmartTagPr {
	#[serde(rename = "key")]
	pub key: String,
	#[serde(rename = "val")]
	pub val: String,
}


// CTDrawing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDrawing {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTDrawingHF ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDrawingHF {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "lho")]
	pub lho: Option<u32>,
	#[serde(rename = "lhe")]
	pub lhe: Option<u32>,
	#[serde(rename = "lhf")]
	pub lhf: Option<u32>,
	#[serde(rename = "cho")]
	pub cho: Option<u32>,
	#[serde(rename = "che")]
	pub che: Option<u32>,
	#[serde(rename = "chf")]
	pub chf: Option<u32>,
	#[serde(rename = "rho")]
	pub rho: Option<u32>,
	#[serde(rename = "rhe")]
	pub rhe: Option<u32>,
	#[serde(rename = "rhf")]
	pub rhf: Option<u32>,
	#[serde(rename = "lfo")]
	pub lfo: Option<u32>,
	#[serde(rename = "lfe")]
	pub lfe: Option<u32>,
	#[serde(rename = "lff")]
	pub lff: Option<u32>,
	#[serde(rename = "cfo")]
	pub cfo: Option<u32>,
	#[serde(rename = "cfe")]
	pub cfe: Option<u32>,
	#[serde(rename = "cff")]
	pub cff: Option<u32>,
	#[serde(rename = "rfo")]
	pub rfo: Option<u32>,
	#[serde(rename = "rfe")]
	pub rfe: Option<u32>,
	#[serde(rename = "rff")]
	pub rff: Option<u32>,
}


// CTCustomSheetViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomSheetViews {
	#[serde(rename = "customSheetView")]
	pub custom_sheet_view: Vec<CTCustomSheetView>,
}


// CTCustomSheetView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomSheetView {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "scale")]
	pub scale: Option<u32>,
	#[serde(rename = "colorId")]
	pub color_id: Option<u32>,
	#[serde(rename = "showPageBreaks")]
	pub show_page_breaks: Option<bool>,
	#[serde(rename = "showFormulas")]
	pub show_formulas: Option<bool>,
	#[serde(rename = "showGridLines")]
	pub show_grid_lines: Option<bool>,
	#[serde(rename = "showRowCol")]
	pub show_row_col: Option<bool>,
	#[serde(rename = "outlineSymbols")]
	pub outline_symbols: Option<bool>,
	#[serde(rename = "zeroValues")]
	pub zero_values: Option<bool>,
	#[serde(rename = "fitToPage")]
	pub fit_to_page: Option<bool>,
	#[serde(rename = "printArea")]
	pub print_area: Option<bool>,
	#[serde(rename = "filter")]
	pub filter: Option<bool>,
	#[serde(rename = "showAutoFilter")]
	pub show_auto_filter: Option<bool>,
	#[serde(rename = "hiddenRows")]
	pub hidden_rows: Option<bool>,
	#[serde(rename = "hiddenColumns")]
	pub hidden_columns: Option<bool>,
	#[serde(rename = "state")]
	pub state: Option<String>,
	#[serde(rename = "filterUnique")]
	pub filter_unique: Option<bool>,
	#[serde(rename = "view")]
	pub view: Option<String>,
	#[serde(rename = "showRuler")]
	pub show_ruler: Option<bool>,
	#[serde(rename = "topLeftCell")]
	pub top_left_cell: Option<String>,
	#[serde(rename = "pane")]
	pub pane: CTPane,
	#[serde(rename = "selection")]
	pub selection: CTSelection,
	#[serde(rename = "rowBreaks")]
	pub row_breaks: CTPageBreak,
	#[serde(rename = "colBreaks")]
	pub col_breaks: CTPageBreak,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "printOptions")]
	pub print_options: CTPrintOptions,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
	#[serde(rename = "autoFilter")]
	pub auto_filter: CTAutoFilter,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTDataValidations ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataValidations {
	#[serde(rename = "disablePrompts")]
	pub disable_prompts: Option<bool>,
	#[serde(rename = "xWindow")]
	pub x_window: Option<u32>,
	#[serde(rename = "yWindow")]
	pub y_window: Option<u32>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "dataValidation")]
	pub data_validation: Vec<CTDataValidation>,
}


// CTDataValidation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataValidation {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "errorStyle")]
	pub error_style: Option<String>,
	#[serde(rename = "imeMode")]
	pub ime_mode: Option<String>,
	#[serde(rename = "operator")]
	pub operator: Option<String>,
	#[serde(rename = "allowBlank")]
	pub allow_blank: Option<bool>,
	#[serde(rename = "showDropDown")]
	pub show_drop_down: Option<bool>,
	#[serde(rename = "showInputMessage")]
	pub show_input_message: Option<bool>,
	#[serde(rename = "showErrorMessage")]
	pub show_error_message: Option<bool>,
	#[serde(rename = "errorTitle")]
	pub error_title: Option<String>,
	#[serde(rename = "error")]
	pub error: Option<String>,
	#[serde(rename = "promptTitle")]
	pub prompt_title: Option<String>,
	#[serde(rename = "prompt")]
	pub prompt: Option<String>,
	#[serde(rename = "sqref")]
	pub sqref: STSqref,
	#[serde(rename = "formula1")]
	pub formula1: String,
	#[serde(rename = "formula2")]
	pub formula2: String,
}


// STDataValidationType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDataValidationType {
	#[serde(rename = "ST_DataValidationType")]
	pub st_data_validation_type: String,
}


// STDataValidationOperator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDataValidationOperator {
	#[serde(rename = "ST_DataValidationOperator")]
	pub st_data_validation_operator: String,
}


// STDataValidationErrorStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDataValidationErrorStyle {
	#[serde(rename = "ST_DataValidationErrorStyle")]
	pub st_data_validation_error_style: String,
}


// STDataValidationImeMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDataValidationImeMode {
	#[serde(rename = "ST_DataValidationImeMode")]
	pub st_data_validation_ime_mode: String,
}


// STCfType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCfType {
	#[serde(rename = "ST_CfType")]
	pub st_cf_type: String,
}


// STTimePeriod ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTimePeriod {
	#[serde(rename = "ST_TimePeriod")]
	pub st_time_period: String,
}


// STConditionalFormattingOperator ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STConditionalFormattingOperator {
	#[serde(rename = "ST_ConditionalFormattingOperator")]
	pub st_conditional_formatting_operator: String,
}


// STCfvoType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCfvoType {
	#[serde(rename = "ST_CfvoType")]
	pub st_cfvo_type: String,
}


// CTConditionalFormatting ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTConditionalFormatting {
	#[serde(rename = "pivot")]
	pub pivot: Option<bool>,
	#[serde(rename = "sqref")]
	pub sqref: Option<STSqref>,
	#[serde(rename = "cfRule")]
	pub cf_rule: Vec<CTCfRule>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCfRule ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCfRule {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "dxfId")]
	pub dxf_id: Option<u32>,
	#[serde(rename = "priority")]
	pub priority: i32,
	#[serde(rename = "stopIfTrue")]
	pub stop_if_true: Option<bool>,
	#[serde(rename = "aboveAverage")]
	pub above_average: Option<bool>,
	#[serde(rename = "percent")]
	pub percent: Option<bool>,
	#[serde(rename = "bottom")]
	pub bottom: Option<bool>,
	#[serde(rename = "operator")]
	pub operator: Option<String>,
	#[serde(rename = "text")]
	pub text: Option<String>,
	#[serde(rename = "timePeriod")]
	pub time_period: Option<String>,
	#[serde(rename = "rank")]
	pub rank: Option<u32>,
	#[serde(rename = "stdDev")]
	pub std_dev: Option<i32>,
	#[serde(rename = "equalAverage")]
	pub equal_average: Option<bool>,
	#[serde(rename = "formula")]
	pub formula: Vec<String>,
	#[serde(rename = "colorScale")]
	pub color_scale: CTColorScale,
	#[serde(rename = "dataBar")]
	pub data_bar: CTDataBar,
	#[serde(rename = "iconSet")]
	pub icon_set: CTIconSet,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTHyperlinks ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHyperlinks {
	#[serde(rename = "hyperlink")]
	pub hyperlink: Vec<CTHyperlink>,
}


// CTHyperlink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHyperlink {
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "location")]
	pub location: Option<String>,
	#[serde(rename = "tooltip")]
	pub tooltip: Option<String>,
	#[serde(rename = "display")]
	pub display: Option<String>,
}


// CTCellFormula ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellFormula {
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "aca")]
	pub aca: Option<bool>,
	#[serde(rename = "ref")]
	pub ref_attr: Option<String>,
	#[serde(rename = "dt2D")]
	pub dt2_d: Option<bool>,
	#[serde(rename = "dtr")]
	pub dtr: Option<bool>,
	#[serde(rename = "del1")]
	pub del1: Option<bool>,
	#[serde(rename = "del2")]
	pub del2: Option<bool>,
	#[serde(rename = "r1")]
	pub r1: Option<String>,
	#[serde(rename = "r2")]
	pub r2: Option<String>,
	#[serde(rename = "ca")]
	pub ca: Option<bool>,
	#[serde(rename = "si")]
	pub si: Option<u32>,
	#[serde(rename = "bx")]
	pub bx: Option<bool>,
	#[serde(rename = "$value")]
	pub value: String,
}


// CTColorScale ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColorScale {
	#[serde(rename = "cfvo")]
	pub cfvo: Vec<CTCfvo>,
	#[serde(rename = "color")]
	pub color: Vec<CTColor>,
}


// CTDataBar ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDataBar {
	#[serde(rename = "minLength")]
	pub min_length: Option<u32>,
	#[serde(rename = "maxLength")]
	pub max_length: Option<u32>,
	#[serde(rename = "showValue")]
	pub show_value: Option<bool>,
	#[serde(rename = "cfvo")]
	pub cfvo: Vec<CTCfvo>,
	#[serde(rename = "color")]
	pub color: CTColor,
}


// CTIconSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIconSet {
	#[serde(rename = "iconSet")]
	pub icon_set: Option<String>,
	#[serde(rename = "showValue")]
	pub show_value: Option<bool>,
	#[serde(rename = "percent")]
	pub percent: Option<bool>,
	#[serde(rename = "reverse")]
	pub reverse: Option<bool>,
	#[serde(rename = "cfvo")]
	pub cfvo: Vec<CTCfvo>,
}


// CTCfvo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCfvo {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "val")]
	pub val: Option<String>,
	#[serde(rename = "gte")]
	pub gte: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTPageMargins ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageMargins {
	#[serde(rename = "left")]
	pub left: f64,
	#[serde(rename = "right")]
	pub right: f64,
	#[serde(rename = "top")]
	pub top: f64,
	#[serde(rename = "bottom")]
	pub bottom: f64,
	#[serde(rename = "header")]
	pub header: f64,
	#[serde(rename = "footer")]
	pub footer: f64,
}


// CTPrintOptions ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPrintOptions {
	#[serde(rename = "horizontalCentered")]
	pub horizontal_centered: Option<bool>,
	#[serde(rename = "verticalCentered")]
	pub vertical_centered: Option<bool>,
	#[serde(rename = "headings")]
	pub headings: Option<bool>,
	#[serde(rename = "gridLines")]
	pub grid_lines: Option<bool>,
	#[serde(rename = "gridLinesSet")]
	pub grid_lines_set: Option<bool>,
}


// CTPageSetup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPageSetup {
	#[serde(rename = "paperSize")]
	pub paper_size: Option<u32>,
	#[serde(rename = "paperHeight")]
	pub paper_height: Option<String>,
	#[serde(rename = "paperWidth")]
	pub paper_width: Option<String>,
	#[serde(rename = "scale")]
	pub scale: Option<u32>,
	#[serde(rename = "firstPageNumber")]
	pub first_page_number: Option<u32>,
	#[serde(rename = "fitToWidth")]
	pub fit_to_width: Option<u32>,
	#[serde(rename = "fitToHeight")]
	pub fit_to_height: Option<u32>,
	#[serde(rename = "pageOrder")]
	pub page_order: Option<String>,
	#[serde(rename = "orientation")]
	pub orientation: Option<String>,
	#[serde(rename = "usePrinterDefaults")]
	pub use_printer_defaults: Option<bool>,
	#[serde(rename = "blackAndWhite")]
	pub black_and_white: Option<bool>,
	#[serde(rename = "draft")]
	pub draft: Option<bool>,
	#[serde(rename = "cellComments")]
	pub cell_comments: Option<String>,
	#[serde(rename = "useFirstPageNumber")]
	pub use_first_page_number: Option<bool>,
	#[serde(rename = "errors")]
	pub errors: Option<String>,
	#[serde(rename = "horizontalDpi")]
	pub horizontal_dpi: Option<u32>,
	#[serde(rename = "verticalDpi")]
	pub vertical_dpi: Option<u32>,
	#[serde(rename = "copies")]
	pub copies: Option<u32>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// STPageOrder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPageOrder {
	#[serde(rename = "ST_PageOrder")]
	pub st_page_order: String,
}


// STOrientation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOrientation {
	#[serde(rename = "ST_Orientation")]
	pub st_orientation: String,
}


// STCellComments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellComments {
	#[serde(rename = "ST_CellComments")]
	pub st_cell_comments: String,
}


// CTHeaderFooter ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTHeaderFooter {
	#[serde(rename = "differentOddEven")]
	pub different_odd_even: Option<bool>,
	#[serde(rename = "differentFirst")]
	pub different_first: Option<bool>,
	#[serde(rename = "scaleWithDoc")]
	pub scale_with_doc: Option<bool>,
	#[serde(rename = "alignWithMargins")]
	pub align_with_margins: Option<bool>,
	#[serde(rename = "oddHeader")]
	pub odd_header: String,
	#[serde(rename = "oddFooter")]
	pub odd_footer: String,
	#[serde(rename = "evenHeader")]
	pub even_header: String,
	#[serde(rename = "evenFooter")]
	pub even_footer: String,
	#[serde(rename = "firstHeader")]
	pub first_header: String,
	#[serde(rename = "firstFooter")]
	pub first_footer: String,
}


// STPrintError ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPrintError {
	#[serde(rename = "ST_PrintError")]
	pub st_print_error: String,
}


// CTScenarios ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScenarios {
	#[serde(rename = "current")]
	pub current: Option<u32>,
	#[serde(rename = "show")]
	pub show: Option<u32>,
	#[serde(rename = "sqref")]
	pub sqref: Option<STSqref>,
	#[serde(rename = "scenario")]
	pub scenario: Vec<CTScenario>,
}


// CTSheetProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetProtection {
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinCount")]
	pub spin_count: Option<u32>,
	#[serde(rename = "sheet")]
	pub sheet: Option<bool>,
	#[serde(rename = "objects")]
	pub objects: Option<bool>,
	#[serde(rename = "scenarios")]
	pub scenarios: Option<bool>,
	#[serde(rename = "formatCells")]
	pub format_cells: Option<bool>,
	#[serde(rename = "formatColumns")]
	pub format_columns: Option<bool>,
	#[serde(rename = "formatRows")]
	pub format_rows: Option<bool>,
	#[serde(rename = "insertColumns")]
	pub insert_columns: Option<bool>,
	#[serde(rename = "insertRows")]
	pub insert_rows: Option<bool>,
	#[serde(rename = "insertHyperlinks")]
	pub insert_hyperlinks: Option<bool>,
	#[serde(rename = "deleteColumns")]
	pub delete_columns: Option<bool>,
	#[serde(rename = "deleteRows")]
	pub delete_rows: Option<bool>,
	#[serde(rename = "selectLockedCells")]
	pub select_locked_cells: Option<bool>,
	#[serde(rename = "sort")]
	pub sort: Option<bool>,
	#[serde(rename = "autoFilter")]
	pub auto_filter: Option<bool>,
	#[serde(rename = "pivotTables")]
	pub pivot_tables: Option<bool>,
	#[serde(rename = "selectUnlockedCells")]
	pub select_unlocked_cells: Option<bool>,
}


// CTProtectedRanges ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTProtectedRanges {
	#[serde(rename = "protectedRange")]
	pub protected_range: Vec<CTProtectedRange>,
}


// CTProtectedRange ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTProtectedRange {
	#[serde(rename = "sqref")]
	pub sqref: STSqref,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinCount")]
	pub spin_count: Option<u32>,
	#[serde(rename = "securityDescriptor")]
	pub security_descriptor: Vec<String>,
}


// CTScenario ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTScenario {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "locked")]
	pub locked: Option<bool>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "user")]
	pub user: Option<String>,
	#[serde(rename = "comment")]
	pub comment: Option<String>,
	#[serde(rename = "inputCells")]
	pub input_cells: Vec<CTInputCells>,
}


// CTInputCells ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTInputCells {
	#[serde(rename = "r")]
	pub r: String,
	#[serde(rename = "deleted")]
	pub deleted: Option<bool>,
	#[serde(rename = "undone")]
	pub undone: Option<bool>,
	#[serde(rename = "val")]
	pub val: String,
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
}


// CTCellWatches ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellWatches {
	#[serde(rename = "cellWatch")]
	pub cell_watch: Vec<CTCellWatch>,
}


// CTCellWatch ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellWatch {
	#[serde(rename = "r")]
	pub r: String,
}


// CTChartsheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartsheet {
	#[serde(rename = "sheetPr")]
	pub sheet_pr: CTChartsheetPr,
	#[serde(rename = "sheetViews")]
	pub sheet_views: CTChartsheetViews,
	#[serde(rename = "sheetProtection")]
	pub sheet_protection: CTChartsheetProtection,
	#[serde(rename = "customSheetViews")]
	pub custom_sheet_views: CTCustomChartsheetViews,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTCsPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
	#[serde(rename = "drawing")]
	pub drawing: CTDrawing,
	#[serde(rename = "drawingHF")]
	pub drawing_hf: CTDrawingHF,
	#[serde(rename = "picture")]
	pub picture: CTSheetBackgroundPicture,
	#[serde(rename = "webPublishItems")]
	pub web_publish_items: CTWebPublishItems,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTChartsheetPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartsheetPr {
	#[serde(rename = "published")]
	pub published: Option<bool>,
	#[serde(rename = "codeName")]
	pub code_name: Option<String>,
	#[serde(rename = "tabColor")]
	pub tab_color: CTColor,
}


// CTChartsheetViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartsheetViews {
	#[serde(rename = "sheetView")]
	pub sheet_view: Vec<CTChartsheetView>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTChartsheetView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartsheetView {
	#[serde(rename = "tabSelected")]
	pub tab_selected: Option<bool>,
	#[serde(rename = "zoomScale")]
	pub zoom_scale: Option<u32>,
	#[serde(rename = "workbookViewId")]
	pub workbook_view_id: u32,
	#[serde(rename = "zoomToFit")]
	pub zoom_to_fit: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTChartsheetProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTChartsheetProtection {
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinCount")]
	pub spin_count: Option<u32>,
	#[serde(rename = "content")]
	pub content: Option<bool>,
	#[serde(rename = "objects")]
	pub objects: Option<bool>,
}


// CTCsPageSetup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCsPageSetup {
	#[serde(rename = "paperSize")]
	pub paper_size: Option<u32>,
	#[serde(rename = "paperHeight")]
	pub paper_height: Option<String>,
	#[serde(rename = "paperWidth")]
	pub paper_width: Option<String>,
	#[serde(rename = "firstPageNumber")]
	pub first_page_number: Option<u32>,
	#[serde(rename = "orientation")]
	pub orientation: Option<String>,
	#[serde(rename = "usePrinterDefaults")]
	pub use_printer_defaults: Option<bool>,
	#[serde(rename = "blackAndWhite")]
	pub black_and_white: Option<bool>,
	#[serde(rename = "draft")]
	pub draft: Option<bool>,
	#[serde(rename = "useFirstPageNumber")]
	pub use_first_page_number: Option<bool>,
	#[serde(rename = "horizontalDpi")]
	pub horizontal_dpi: Option<u32>,
	#[serde(rename = "verticalDpi")]
	pub vertical_dpi: Option<u32>,
	#[serde(rename = "copies")]
	pub copies: Option<u32>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
}


// CTCustomChartsheetViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomChartsheetViews {
	#[serde(rename = "customSheetView")]
	pub custom_sheet_view: Vec<CTCustomChartsheetView>,
}


// CTCustomChartsheetView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomChartsheetView {
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "scale")]
	pub scale: Option<u32>,
	#[serde(rename = "state")]
	pub state: Option<String>,
	#[serde(rename = "zoomToFit")]
	pub zoom_to_fit: Option<bool>,
	#[serde(rename = "pageMargins")]
	pub page_margins: CTPageMargins,
	#[serde(rename = "pageSetup")]
	pub page_setup: CTCsPageSetup,
	#[serde(rename = "headerFooter")]
	pub header_footer: CTHeaderFooter,
}


// CTCustomProperties ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomProperties {
	#[serde(rename = "customPr")]
	pub custom_pr: Vec<CTCustomProperty>,
}


// CTCustomProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomProperty {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTOleObjects ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleObjects {
	#[serde(rename = "oleObject")]
	pub ole_object: Vec<CTOleObject>,
}


// CTOleObject ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleObject {
	#[serde(rename = "progId")]
	pub prog_id: Option<String>,
	#[serde(rename = "dvAspect")]
	pub dv_aspect: Option<String>,
	#[serde(rename = "link")]
	pub link: Option<String>,
	#[serde(rename = "oleUpdate")]
	pub ole_update: Option<String>,
	#[serde(rename = "autoLoad")]
	pub auto_load: Option<bool>,
	#[serde(rename = "shapeId")]
	pub shape_id: u32,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "objectPr")]
	pub object_pr: CTObjectPr,
}


// CTObjectPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTObjectPr {
	#[serde(rename = "locked")]
	pub locked: Option<bool>,
	#[serde(rename = "defaultSize")]
	pub default_size: Option<bool>,
	#[serde(rename = "print")]
	pub print: Option<bool>,
	#[serde(rename = "disabled")]
	pub disabled: Option<bool>,
	#[serde(rename = "uiObject")]
	pub ui_object: Option<bool>,
	#[serde(rename = "autoFill")]
	pub auto_fill: Option<bool>,
	#[serde(rename = "autoLine")]
	pub auto_line: Option<bool>,
	#[serde(rename = "autoPict")]
	pub auto_pict: Option<bool>,
	#[serde(rename = "macro")]
	pub macro_attr: Option<String>,
	#[serde(rename = "altText")]
	pub alt_text: Option<String>,
	#[serde(rename = "dde")]
	pub dde: Option<bool>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "anchor")]
	pub anchor: CTObjectAnchor,
}


// STDvAspect ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDvAspect {
	#[serde(rename = "ST_DvAspect")]
	pub st_dv_aspect: String,
}


// STOleUpdate ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STOleUpdate {
	#[serde(rename = "ST_OleUpdate")]
	pub st_ole_update: String,
}


// CTWebPublishItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPublishItems {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "webPublishItem")]
	pub web_publish_item: Vec<CTWebPublishItem>,
}


// CTWebPublishItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPublishItem {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "divId")]
	pub div_id: String,
	#[serde(rename = "sourceType")]
	pub source_type: String,
	#[serde(rename = "sourceRef")]
	pub source_ref: Option<String>,
	#[serde(rename = "sourceObject")]
	pub source_object: Option<String>,
	#[serde(rename = "destinationFile")]
	pub destination_file: String,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "autoRepublish")]
	pub auto_republish: Option<bool>,
}


// CTControls ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControls {
	#[serde(rename = "control")]
	pub control: Vec<CTControl>,
}


// CTControl ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControl {
	#[serde(rename = "shapeId")]
	pub shape_id: u32,
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "controlPr")]
	pub control_pr: CTControlPr,
}


// CTControlPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTControlPr {
	#[serde(rename = "locked")]
	pub locked: Option<bool>,
	#[serde(rename = "defaultSize")]
	pub default_size: Option<bool>,
	#[serde(rename = "print")]
	pub print: Option<bool>,
	#[serde(rename = "disabled")]
	pub disabled: Option<bool>,
	#[serde(rename = "recalcAlways")]
	pub recalc_always: Option<bool>,
	#[serde(rename = "uiObject")]
	pub ui_object: Option<bool>,
	#[serde(rename = "autoFill")]
	pub auto_fill: Option<bool>,
	#[serde(rename = "autoLine")]
	pub auto_line: Option<bool>,
	#[serde(rename = "autoPict")]
	pub auto_pict: Option<bool>,
	#[serde(rename = "macro")]
	pub macro_attr: Option<String>,
	#[serde(rename = "altText")]
	pub alt_text: Option<String>,
	#[serde(rename = "linkedCell")]
	pub linked_cell: Option<String>,
	#[serde(rename = "listFillRange")]
	pub list_fill_range: Option<String>,
	#[serde(rename = "cf")]
	pub cf: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: Option<String>,
	#[serde(rename = "anchor")]
	pub anchor: CTObjectAnchor,
}


// STWebSourceType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STWebSourceType {
	#[serde(rename = "ST_WebSourceType")]
	pub st_web_source_type: String,
}


// CTIgnoredErrors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIgnoredErrors {
	#[serde(rename = "ignoredError")]
	pub ignored_error: Vec<CTIgnoredError>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTIgnoredError ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIgnoredError {
	#[serde(rename = "sqref")]
	pub sqref: STSqref,
	#[serde(rename = "evalError")]
	pub eval_error: Option<bool>,
	#[serde(rename = "twoDigitTextYear")]
	pub two_digit_text_year: Option<bool>,
	#[serde(rename = "numberStoredAsText")]
	pub number_stored_as_text: Option<bool>,
	#[serde(rename = "formula")]
	pub formula: Option<bool>,
	#[serde(rename = "formulaRange")]
	pub formula_range: Option<bool>,
	#[serde(rename = "unlockedFormula")]
	pub unlocked_formula: Option<bool>,
	#[serde(rename = "emptyCellReference")]
	pub empty_cell_reference: Option<bool>,
	#[serde(rename = "listDataValidation")]
	pub list_data_validation: Option<bool>,
	#[serde(rename = "calculatedColumn")]
	pub calculated_column: Option<bool>,
}


// STPaneState ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPaneState {
	#[serde(rename = "ST_PaneState")]
	pub st_pane_state: String,
}


// CTTableParts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableParts {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "tablePart")]
	pub table_part: Vec<CTTablePart>,
}


// CTTablePart ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTablePart {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// metadata ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct metadata {
	#[serde(rename = "metadata")]
	pub metadata: CTMetadata,
}


// CTMetadata ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadata {
	#[serde(rename = "metadataTypes")]
	pub metadata_types: CTMetadataTypes,
	#[serde(rename = "metadataStrings")]
	pub metadata_strings: CTMetadataStrings,
	#[serde(rename = "mdxMetadata")]
	pub mdx_metadata: CTMdxMetadata,
	#[serde(rename = "futureMetadata")]
	pub future_metadata: Vec<CTFutureMetadata>,
	#[serde(rename = "cellMetadata")]
	pub cell_metadata: CTMetadataBlocks,
	#[serde(rename = "valueMetadata")]
	pub value_metadata: CTMetadataBlocks,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTMetadataTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataTypes {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "metadataType")]
	pub metadata_type: Vec<CTMetadataType>,
}


// CTMetadataType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataType {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "minSupportedVersion")]
	pub min_supported_version: u32,
	#[serde(rename = "ghostRow")]
	pub ghost_row: Option<bool>,
	#[serde(rename = "ghostCol")]
	pub ghost_col: Option<bool>,
	#[serde(rename = "edit")]
	pub edit: Option<bool>,
	#[serde(rename = "delete")]
	pub delete: Option<bool>,
	#[serde(rename = "copy")]
	pub copy: Option<bool>,
	#[serde(rename = "pasteAll")]
	pub paste_all: Option<bool>,
	#[serde(rename = "pasteFormulas")]
	pub paste_formulas: Option<bool>,
	#[serde(rename = "pasteValues")]
	pub paste_values: Option<bool>,
	#[serde(rename = "pasteFormats")]
	pub paste_formats: Option<bool>,
	#[serde(rename = "pasteComments")]
	pub paste_comments: Option<bool>,
	#[serde(rename = "pasteDataValidation")]
	pub paste_data_validation: Option<bool>,
	#[serde(rename = "pasteBorders")]
	pub paste_borders: Option<bool>,
	#[serde(rename = "pasteColWidths")]
	pub paste_col_widths: Option<bool>,
	#[serde(rename = "pasteNumberFormats")]
	pub paste_number_formats: Option<bool>,
	#[serde(rename = "merge")]
	pub merge: Option<bool>,
	#[serde(rename = "splitFirst")]
	pub split_first: Option<bool>,
	#[serde(rename = "splitAll")]
	pub split_all: Option<bool>,
	#[serde(rename = "rowColShift")]
	pub row_col_shift: Option<bool>,
	#[serde(rename = "clearAll")]
	pub clear_all: Option<bool>,
	#[serde(rename = "clearFormats")]
	pub clear_formats: Option<bool>,
	#[serde(rename = "clearContents")]
	pub clear_contents: Option<bool>,
	#[serde(rename = "clearComments")]
	pub clear_comments: Option<bool>,
	#[serde(rename = "assign")]
	pub assign: Option<bool>,
	#[serde(rename = "coerce")]
	pub coerce: Option<bool>,
	#[serde(rename = "adjust")]
	pub adjust: Option<bool>,
	#[serde(rename = "cellMeta")]
	pub cell_meta: Option<bool>,
}


// CTMetadataBlocks ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataBlocks {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "bk")]
	pub bk: Vec<CTMetadataBlock>,
}


// CTMetadataBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataBlock {
	#[serde(rename = "rc")]
	pub rc: Vec<CTMetadataRecord>,
}


// CTMetadataRecord ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataRecord {
	#[serde(rename = "t")]
	pub t: u32,
	#[serde(rename = "v")]
	pub v: u32,
}


// CTFutureMetadata ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFutureMetadata {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "bk")]
	pub bk: Vec<CTFutureMetadataBlock>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTFutureMetadataBlock ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFutureMetadataBlock {
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTMdxMetadata ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdxMetadata {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "mdx")]
	pub mdx: Vec<CTMdx>,
}


// CTMdx ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdx {
	#[serde(rename = "n")]
	pub n: u32,
	#[serde(rename = "f")]
	pub f: String,
	#[serde(rename = "t")]
	pub t: CTMdxTuple,
	#[serde(rename = "ms")]
	pub ms: CTMdxSet,
	#[serde(rename = "p")]
	pub p: CTMdxMemeberProp,
	#[serde(rename = "k")]
	pub k: CTMdxKPI,
}


// STMdxFunctionType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMdxFunctionType {
	#[serde(rename = "ST_MdxFunctionType")]
	pub st_mdx_function_type: String,
}


// CTMdxTuple ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdxTuple {
	#[serde(rename = "c")]
	pub c: Option<u32>,
	#[serde(rename = "ct")]
	pub ct: Option<String>,
	#[serde(rename = "si")]
	pub si: Option<u32>,
	#[serde(rename = "fi")]
	pub fi: Option<u32>,
	#[serde(rename = "bc")]
	pub bc: Option<String>,
	#[serde(rename = "fc")]
	pub fc: Option<String>,
	#[serde(rename = "i")]
	pub i: Option<bool>,
	#[serde(rename = "u")]
	pub u: Option<bool>,
	#[serde(rename = "st")]
	pub st: Option<bool>,
	#[serde(rename = "b")]
	pub b: Option<bool>,
	#[serde(rename = "n")]
	pub n: Vec<CTMetadataStringIndex>,
}


// CTMdxSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdxSet {
	#[serde(rename = "ns")]
	pub ns: u32,
	#[serde(rename = "c")]
	pub c: Option<u32>,
	#[serde(rename = "o")]
	pub o: Option<String>,
	#[serde(rename = "n")]
	pub n: Vec<CTMetadataStringIndex>,
}


// STMdxSetOrder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMdxSetOrder {
	#[serde(rename = "ST_MdxSetOrder")]
	pub st_mdx_set_order: String,
}


// CTMdxMemeberProp ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdxMemeberProp {
	#[serde(rename = "n")]
	pub n: u32,
	#[serde(rename = "np")]
	pub np: u32,
}


// CTMdxKPI ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMdxKPI {
	#[serde(rename = "n")]
	pub n: u32,
	#[serde(rename = "np")]
	pub np: u32,
	#[serde(rename = "p")]
	pub p: String,
}


// STMdxKPIProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STMdxKPIProperty {
	#[serde(rename = "ST_MdxKPIProperty")]
	pub st_mdx_kpi_property: String,
}


// CTMetadataStringIndex ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataStringIndex {
	#[serde(rename = "x")]
	pub x: u32,
	#[serde(rename = "s")]
	pub s: Option<bool>,
}


// CTMetadataStrings ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMetadataStrings {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "s")]
	pub s: Vec<CTXStringElement>,
}


// single_xml_cells ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct single_xml_cells {
	#[serde(rename = "singleXmlCells")]
	pub single_xml_cells: CTSingleXmlCells,
}


// CTSingleXmlCells ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSingleXmlCells {
	#[serde(rename = "singleXmlCell")]
	pub single_xml_cell: Vec<CTSingleXmlCell>,
}


// CTSingleXmlCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSingleXmlCell {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "r")]
	pub r: String,
	#[serde(rename = "connectionId")]
	pub connection_id: u32,
	#[serde(rename = "xmlCellPr")]
	pub xml_cell_pr: CTXmlCellPr,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTXmlCellPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXmlCellPr {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "uniqueName")]
	pub unique_name: Option<String>,
	#[serde(rename = "xmlPr")]
	pub xml_pr: CTXmlPr,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTXmlPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXmlPr {
	#[serde(rename = "mapId")]
	pub map_id: u32,
	#[serde(rename = "xpath")]
	pub xpath: String,
	#[serde(rename = "xmlDataType")]
	pub xml_data_type: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// style_sheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct style_sheet {
	#[serde(rename = "styleSheet")]
	pub style_sheet: CTStylesheet,
}


// CTStylesheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTStylesheet {
	#[serde(rename = "numFmts")]
	pub num_fmts: CTNumFmts,
	#[serde(rename = "fonts")]
	pub fonts: CTFonts,
	#[serde(rename = "fills")]
	pub fills: CTFills,
	#[serde(rename = "borders")]
	pub borders: CTBorders,
	#[serde(rename = "cellStyleXfs")]
	pub cell_style_xfs: CTCellStyleXfs,
	#[serde(rename = "cellXfs")]
	pub cell_xfs: CTCellXfs,
	#[serde(rename = "cellStyles")]
	pub cell_styles: CTCellStyles,
	#[serde(rename = "dxfs")]
	pub dxfs: CTDxfs,
	#[serde(rename = "tableStyles")]
	pub table_styles: CTTableStyles,
	#[serde(rename = "colors")]
	pub colors: CTColors,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCellAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellAlignment {
	#[serde(rename = "horizontal")]
	pub horizontal: Option<String>,
	#[serde(rename = "vertical")]
	pub vertical: Option<String>,
	#[serde(rename = "textRotation")]
	pub text_rotation: Option<STTextRotation>,
	#[serde(rename = "wrapText")]
	pub wrap_text: Option<bool>,
	#[serde(rename = "indent")]
	pub indent: Option<u32>,
	#[serde(rename = "relativeIndent")]
	pub relative_indent: Option<i32>,
	#[serde(rename = "justifyLastLine")]
	pub justify_last_line: Option<bool>,
	#[serde(rename = "shrinkToFit")]
	pub shrink_to_fit: Option<bool>,
	#[serde(rename = "readingOrder")]
	pub reading_order: Option<u32>,
}


// STTextRotation ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTextRotation {
	#[serde(rename = "ST_TextRotation")]
	pub st_text_rotation: u32,
}


// STBorderStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBorderStyle {
	#[serde(rename = "ST_BorderStyle")]
	pub st_border_style: String,
}


// CTBorders ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBorders {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "border")]
	pub border: Vec<CTBorder>,
}


// CTBorder ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBorder {
	#[serde(rename = "diagonalUp")]
	pub diagonal_up: Option<bool>,
	#[serde(rename = "diagonalDown")]
	pub diagonal_down: Option<bool>,
	#[serde(rename = "outline")]
	pub outline: Option<bool>,
	#[serde(rename = "start")]
	pub start: CTBorderPr,
	#[serde(rename = "end")]
	pub end: CTBorderPr,
	#[serde(rename = "top")]
	pub top: CTBorderPr,
	#[serde(rename = "bottom")]
	pub bottom: CTBorderPr,
	#[serde(rename = "diagonal")]
	pub diagonal: CTBorderPr,
	#[serde(rename = "vertical")]
	pub vertical: CTBorderPr,
	#[serde(rename = "horizontal")]
	pub horizontal: CTBorderPr,
}


// CTBorderPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBorderPr {
	#[serde(rename = "style")]
	pub style: Option<String>,
	#[serde(rename = "color")]
	pub color: CTColor,
}


// CTCellProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellProtection {
	#[serde(rename = "locked")]
	pub locked: Option<bool>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
}


// CTFonts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFonts {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "font")]
	pub font: Vec<CTFont>,
}


// CTFills ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFills {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "fill")]
	pub fill: Vec<CTFill>,
}


// CTFill ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFill {
	#[serde(rename = "patternFill")]
	pub pattern_fill: CTPatternFill,
	#[serde(rename = "gradientFill")]
	pub gradient_fill: CTGradientFill,
}


// CTPatternFill ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPatternFill {
	#[serde(rename = "patternType")]
	pub pattern_type: Option<String>,
	#[serde(rename = "fgColor")]
	pub fg_color: CTColor,
	#[serde(rename = "bgColor")]
	pub bg_color: CTColor,
}


// CTColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColor {
	#[serde(rename = "auto")]
	pub auto: Option<bool>,
	#[serde(rename = "indexed")]
	pub indexed: Option<u32>,
	#[serde(rename = "rgb")]
	pub rgb: Option<String>,
	#[serde(rename = "theme")]
	pub theme: Option<u32>,
	#[serde(rename = "tint")]
	pub tint: Option<f64>,
}


// STPatternType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STPatternType {
	#[serde(rename = "ST_PatternType")]
	pub st_pattern_type: String,
}


// CTGradientFill ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGradientFill {
	#[serde(rename = "type")]
	pub type_attr: Option<String>,
	#[serde(rename = "degree")]
	pub degree: Option<f64>,
	#[serde(rename = "left")]
	pub left: Option<f64>,
	#[serde(rename = "right")]
	pub right: Option<f64>,
	#[serde(rename = "top")]
	pub top: Option<f64>,
	#[serde(rename = "bottom")]
	pub bottom: Option<f64>,
	#[serde(rename = "stop")]
	pub stop: Vec<CTGradientStop>,
}


// CTGradientStop ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTGradientStop {
	#[serde(rename = "position")]
	pub position: f64,
	#[serde(rename = "color")]
	pub color: CTColor,
}


// STGradientType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STGradientType {
	#[serde(rename = "ST_GradientType")]
	pub st_gradient_type: String,
}


// STHorizontalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STHorizontalAlignment {
	#[serde(rename = "ST_HorizontalAlignment")]
	pub st_horizontal_alignment: String,
}


// STVerticalAlignment ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVerticalAlignment {
	#[serde(rename = "ST_VerticalAlignment")]
	pub st_vertical_alignment: String,
}


// CTNumFmts ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumFmts {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "numFmt")]
	pub num_fmt: Vec<CTNumFmt>,
}


// CTNumFmt ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTNumFmt {
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: u32,
	#[serde(rename = "formatCode")]
	pub format_code: String,
}


// CTCellStyleXfs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellStyleXfs {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "xf")]
	pub xf: Vec<CTXf>,
}


// CTCellXfs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellXfs {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "xf")]
	pub xf: Vec<CTXf>,
}


// CTXf ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXf {
	#[serde(rename = "numFmtId")]
	pub num_fmt_id: Option<u32>,
	#[serde(rename = "fontId")]
	pub font_id: Option<u32>,
	#[serde(rename = "fillId")]
	pub fill_id: Option<u32>,
	#[serde(rename = "borderId")]
	pub border_id: Option<u32>,
	#[serde(rename = "xfId")]
	pub xf_id: Option<u32>,
	#[serde(rename = "quotePrefix")]
	pub quote_prefix: Option<bool>,
	#[serde(rename = "pivotButton")]
	pub pivot_button: Option<bool>,
	#[serde(rename = "applyNumberFormat")]
	pub apply_number_format: Option<bool>,
	#[serde(rename = "applyFont")]
	pub apply_font: Option<bool>,
	#[serde(rename = "applyFill")]
	pub apply_fill: Option<bool>,
	#[serde(rename = "applyBorder")]
	pub apply_border: Option<bool>,
	#[serde(rename = "applyAlignment")]
	pub apply_alignment: Option<bool>,
	#[serde(rename = "applyProtection")]
	pub apply_protection: Option<bool>,
	#[serde(rename = "alignment")]
	pub alignment: CTCellAlignment,
	#[serde(rename = "protection")]
	pub protection: CTCellProtection,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTCellStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellStyles {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "cellStyle")]
	pub cell_style: Vec<CTCellStyle>,
}


// CTCellStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCellStyle {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "xfId")]
	pub xf_id: u32,
	#[serde(rename = "builtinId")]
	pub builtin_id: Option<u32>,
	#[serde(rename = "iLevel")]
	pub i_level: Option<u32>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "customBuiltin")]
	pub custom_builtin: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTDxfs ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDxfs {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "dxf")]
	pub dxf: Vec<CTDxf>,
}


// CTDxf ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDxf {
	#[serde(rename = "font")]
	pub font: CTFont,
	#[serde(rename = "numFmt")]
	pub num_fmt: CTNumFmt,
	#[serde(rename = "fill")]
	pub fill: CTFill,
	#[serde(rename = "alignment")]
	pub alignment: CTCellAlignment,
	#[serde(rename = "border")]
	pub border: CTBorder,
	#[serde(rename = "protection")]
	pub protection: CTCellProtection,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STNumFmtId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STNumFmtId {
	#[serde(rename = "ST_NumFmtId")]
	pub st_num_fmt_id: u32,
}


// STFontId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFontId {
	#[serde(rename = "ST_FontId")]
	pub st_font_id: u32,
}


// STFillId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFillId {
	#[serde(rename = "ST_FillId")]
	pub st_fill_id: u32,
}


// STBorderId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STBorderId {
	#[serde(rename = "ST_BorderId")]
	pub st_border_id: u32,
}


// STCellStyleXfId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCellStyleXfId {
	#[serde(rename = "ST_CellStyleXfId")]
	pub st_cell_style_xf_id: u32,
}


// STDxfId ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDxfId {
	#[serde(rename = "ST_DxfId")]
	pub st_dxf_id: u32,
}


// CTColors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTColors {
	#[serde(rename = "indexedColors")]
	pub indexed_colors: CTIndexedColors,
	#[serde(rename = "mruColors")]
	pub mru_colors: CTMRUColors,
}


// CTIndexedColors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIndexedColors {
	#[serde(rename = "rgbColor")]
	pub rgb_color: Vec<CTRgbColor>,
}


// CTMRUColors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTMRUColors {
	#[serde(rename = "color")]
	pub color: Vec<CTColor>,
}


// CTRgbColor ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTRgbColor {
	#[serde(rename = "rgb")]
	pub rgb: Option<String>,
}


// CTTableStyles ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyles {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "defaultTableStyle")]
	pub default_table_style: Option<String>,
	#[serde(rename = "defaultPivotStyle")]
	pub default_pivot_style: Option<String>,
	#[serde(rename = "tableStyle")]
	pub table_style: Vec<CTTableStyle>,
}


// CTTableStyle ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyle {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "pivot")]
	pub pivot: Option<bool>,
	#[serde(rename = "table")]
	pub table: Option<bool>,
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "tableStyleElement")]
	pub table_style_element: Vec<CTTableStyleElement>,
}


// CTTableStyleElement ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyleElement {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "size")]
	pub size: Option<u32>,
	#[serde(rename = "dxfId")]
	pub dxf_id: Option<u32>,
}


// STTableStyleType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTableStyleType {
	#[serde(rename = "ST_TableStyleType")]
	pub st_table_style_type: String,
}


// CTBooleanProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBooleanProperty {
	#[serde(rename = "val")]
	pub val: Option<bool>,
}


// CTFontSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontSize {
	#[serde(rename = "val")]
	pub val: f64,
}


// CTIntProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTIntProperty {
	#[serde(rename = "val")]
	pub val: i32,
}


// CTFontName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontName {
	#[serde(rename = "val")]
	pub val: String,
}


// CTVerticalAlignFontProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVerticalAlignFontProperty {
	#[serde(rename = "val")]
	pub val: String,
}


// CTFontScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontScheme {
	#[serde(rename = "val")]
	pub val: String,
}


// STFontScheme ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFontScheme {
	#[serde(rename = "ST_FontScheme")]
	pub st_font_scheme: String,
}


// CTUnderlineProperty ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTUnderlineProperty {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// STUnderlineValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUnderlineValues {
	#[serde(rename = "ST_UnderlineValues")]
	pub st_underline_values: String,
}


// CTFontFamily ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFontFamily {
	#[serde(rename = "val")]
	pub val: i32,
}


// STFontFamily ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STFontFamily {
	#[serde(rename = "ST_FontFamily")]
	pub st_font_family: i32,
}


// CTFont ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFont {
	#[serde(rename = "name")]
	pub name: Vec<CTFontName>,
	#[serde(rename = "charset")]
	pub charset: Vec<CTIntProperty>,
	#[serde(rename = "family")]
	pub family: Vec<CTFontFamily>,
	#[serde(rename = "b")]
	pub b: Vec<CTBooleanProperty>,
	#[serde(rename = "i")]
	pub i: Vec<CTBooleanProperty>,
	#[serde(rename = "strike")]
	pub strike: Vec<CTBooleanProperty>,
	#[serde(rename = "outline")]
	pub outline: Vec<CTBooleanProperty>,
	#[serde(rename = "shadow")]
	pub shadow: Vec<CTBooleanProperty>,
	#[serde(rename = "condense")]
	pub condense: Vec<CTBooleanProperty>,
	#[serde(rename = "extend")]
	pub extend: Vec<CTBooleanProperty>,
	#[serde(rename = "color")]
	pub color: Vec<CTColor>,
	#[serde(rename = "sz")]
	pub sz: Vec<CTFontSize>,
	#[serde(rename = "u")]
	pub u: Vec<CTUnderlineProperty>,
	#[serde(rename = "vertAlign")]
	pub vert_align: Vec<CTVerticalAlignFontProperty>,
	#[serde(rename = "scheme")]
	pub scheme: Vec<CTFontScheme>,
}


// AGAutoFormat ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct AGAutoFormat {
	#[serde(rename = "autoFormatId")]
	pub auto_format_id: Option<u32>,
	#[serde(rename = "applyNumberFormats")]
	pub apply_number_formats: Option<bool>,
	#[serde(rename = "applyBorderFormats")]
	pub apply_border_formats: Option<bool>,
	#[serde(rename = "applyFontFormats")]
	pub apply_font_formats: Option<bool>,
	#[serde(rename = "applyPatternFormats")]
	pub apply_pattern_formats: Option<bool>,
	#[serde(rename = "applyAlignmentFormats")]
	pub apply_alignment_formats: Option<bool>,
	#[serde(rename = "applyWidthHeightFormats")]
	pub apply_width_height_formats: Option<bool>,
}


// external_link ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct external_link {
	#[serde(rename = "externalLink")]
	pub external_link: CTExternalLink,
}


// CTExternalLink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalLink {
	#[serde(rename = "externalBook")]
	pub external_book: CTExternalBook,
	#[serde(rename = "ddeLink")]
	pub dde_link: CTDdeLink,
	#[serde(rename = "oleLink")]
	pub ole_link: CTOleLink,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTExternalBook ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalBook {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "sheetNames")]
	pub sheet_names: CTExternalSheetNames,
	#[serde(rename = "definedNames")]
	pub defined_names: CTExternalDefinedNames,
	#[serde(rename = "sheetDataSet")]
	pub sheet_data_set: CTExternalSheetDataSet,
}


// CTExternalSheetNames ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalSheetNames {
	#[serde(rename = "sheetName")]
	pub sheet_name: Vec<CTExternalSheetName>,
}


// CTExternalSheetName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalSheetName {
	#[serde(rename = "val")]
	pub val: Option<String>,
}


// CTExternalDefinedNames ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalDefinedNames {
	#[serde(rename = "definedName")]
	pub defined_name: Vec<CTExternalDefinedName>,
}


// CTExternalDefinedName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalDefinedName {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "refersTo")]
	pub refers_to: Option<String>,
	#[serde(rename = "sheetId")]
	pub sheet_id: Option<u32>,
}


// CTExternalSheetDataSet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalSheetDataSet {
	#[serde(rename = "sheetData")]
	pub sheet_data: Vec<CTExternalSheetData>,
}


// CTExternalSheetData ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalSheetData {
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "refreshError")]
	pub refresh_error: Option<bool>,
	#[serde(rename = "row")]
	pub row: Vec<CTExternalRow>,
}


// CTExternalRow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalRow {
	#[serde(rename = "r")]
	pub r: u32,
	#[serde(rename = "cell")]
	pub cell: Vec<CTExternalCell>,
}


// CTExternalCell ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalCell {
	#[serde(rename = "r")]
	pub r: Option<String>,
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "vm")]
	pub vm: Option<u32>,
	#[serde(rename = "v")]
	pub v: String,
}


// CTDdeLink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDdeLink {
	#[serde(rename = "ddeService")]
	pub dde_service: String,
	#[serde(rename = "ddeTopic")]
	pub dde_topic: String,
	#[serde(rename = "ddeItems")]
	pub dde_items: CTDdeItems,
}


// CTDdeItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDdeItems {
	#[serde(rename = "ddeItem")]
	pub dde_item: Vec<CTDdeItem>,
}


// CTDdeItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDdeItem {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "ole")]
	pub ole: Option<bool>,
	#[serde(rename = "advise")]
	pub advise: Option<bool>,
	#[serde(rename = "preferPic")]
	pub prefer_pic: Option<bool>,
	#[serde(rename = "values")]
	pub values: CTDdeValues,
}


// CTDdeValues ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDdeValues {
	#[serde(rename = "rows")]
	pub rows: Option<u32>,
	#[serde(rename = "cols")]
	pub cols: Option<u32>,
	#[serde(rename = "value")]
	pub value: Vec<CTDdeValue>,
}


// CTDdeValue ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDdeValue {
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "val")]
	pub val: String,
}


// STDdeValueType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STDdeValueType {
	#[serde(rename = "ST_DdeValueType")]
	pub st_dde_value_type: String,
}


// CTOleLink ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleLink {
	#[serde(rename = "r:id")]
	pub r_id: String,
	#[serde(rename = "progId")]
	pub prog_id: String,
	#[serde(rename = "oleItems")]
	pub ole_items: CTOleItems,
}


// CTOleItems ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleItems {
	#[serde(rename = "oleItem")]
	pub ole_item: Vec<CTOleItem>,
}


// CTOleItem ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleItem {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "icon")]
	pub icon: Option<bool>,
	#[serde(rename = "advise")]
	pub advise: Option<bool>,
	#[serde(rename = "preferPic")]
	pub prefer_pic: Option<bool>,
}


// table ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct table {
	#[serde(rename = "table")]
	pub table: CTTable,
}


// CTTable ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTable {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "displayName")]
	pub display_name: String,
	#[serde(rename = "comment")]
	pub comment: Option<String>,
	#[serde(rename = "ref")]
	pub ref_attr: String,
	#[serde(rename = "tableType")]
	pub table_type: Option<String>,
	#[serde(rename = "headerRowCount")]
	pub header_row_count: Option<u32>,
	#[serde(rename = "insertRow")]
	pub insert_row: Option<bool>,
	#[serde(rename = "insertRowShift")]
	pub insert_row_shift: Option<bool>,
	#[serde(rename = "totalsRowCount")]
	pub totals_row_count: Option<u32>,
	#[serde(rename = "totalsRowShown")]
	pub totals_row_shown: Option<bool>,
	#[serde(rename = "published")]
	pub published: Option<bool>,
	#[serde(rename = "headerRowDxfId")]
	pub header_row_dxf_id: Option<u32>,
	#[serde(rename = "dataDxfId")]
	pub data_dxf_id: Option<u32>,
	#[serde(rename = "totalsRowDxfId")]
	pub totals_row_dxf_id: Option<u32>,
	#[serde(rename = "headerRowBorderDxfId")]
	pub header_row_border_dxf_id: Option<u32>,
	#[serde(rename = "tableBorderDxfId")]
	pub table_border_dxf_id: Option<u32>,
	#[serde(rename = "totalsRowBorderDxfId")]
	pub totals_row_border_dxf_id: Option<u32>,
	#[serde(rename = "headerRowCellStyle")]
	pub header_row_cell_style: Option<String>,
	#[serde(rename = "dataCellStyle")]
	pub data_cell_style: Option<String>,
	#[serde(rename = "totalsRowCellStyle")]
	pub totals_row_cell_style: Option<String>,
	#[serde(rename = "connectionId")]
	pub connection_id: Option<u32>,
	#[serde(rename = "autoFilter")]
	pub auto_filter: CTAutoFilter,
	#[serde(rename = "sortState")]
	pub sort_state: CTSortState,
	#[serde(rename = "tableColumns")]
	pub table_columns: CTTableColumns,
	#[serde(rename = "tableStyleInfo")]
	pub table_style_info: CTTableStyleInfo,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STTableType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTableType {
	#[serde(rename = "ST_TableType")]
	pub st_table_type: String,
}


// CTTableStyleInfo ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableStyleInfo {
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "showFirstColumn")]
	pub show_first_column: Option<bool>,
	#[serde(rename = "showLastColumn")]
	pub show_last_column: Option<bool>,
	#[serde(rename = "showRowStripes")]
	pub show_row_stripes: Option<bool>,
	#[serde(rename = "showColumnStripes")]
	pub show_column_stripes: Option<bool>,
}


// CTTableColumns ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableColumns {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "tableColumn")]
	pub table_column: Vec<CTTableColumn>,
}


// CTTableColumn ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableColumn {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "uniqueName")]
	pub unique_name: Option<String>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "totalsRowFunction")]
	pub totals_row_function: Option<String>,
	#[serde(rename = "totalsRowLabel")]
	pub totals_row_label: Option<String>,
	#[serde(rename = "queryTableFieldId")]
	pub query_table_field_id: Option<u32>,
	#[serde(rename = "headerRowDxfId")]
	pub header_row_dxf_id: Option<u32>,
	#[serde(rename = "dataDxfId")]
	pub data_dxf_id: Option<u32>,
	#[serde(rename = "totalsRowDxfId")]
	pub totals_row_dxf_id: Option<u32>,
	#[serde(rename = "headerRowCellStyle")]
	pub header_row_cell_style: Option<String>,
	#[serde(rename = "dataCellStyle")]
	pub data_cell_style: Option<String>,
	#[serde(rename = "totalsRowCellStyle")]
	pub totals_row_cell_style: Option<String>,
	#[serde(rename = "calculatedColumnFormula")]
	pub calculated_column_formula: CTTableFormula,
	#[serde(rename = "totalsRowFormula")]
	pub totals_row_formula: CTTableFormula,
	#[serde(rename = "xmlColumnPr")]
	pub xml_column_pr: CTXmlColumnPr,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTTableFormula ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTTableFormula {
	#[serde(rename = "array")]
	pub array: Option<bool>,
	#[serde(rename = "$value")]
	pub value: String,
}


// STTotalsRowFunction ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTotalsRowFunction {
	#[serde(rename = "ST_TotalsRowFunction")]
	pub st_totals_row_function: String,
}


// CTXmlColumnPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTXmlColumnPr {
	#[serde(rename = "mapId")]
	pub map_id: u32,
	#[serde(rename = "xpath")]
	pub xpath: String,
	#[serde(rename = "denormalized")]
	pub denormalized: Option<bool>,
	#[serde(rename = "xmlDataType")]
	pub xml_data_type: String,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STXmlDataType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STXmlDataType {
	#[serde(rename = "ST_XmlDataType")]
	pub st_xml_data_type: String,
}


// vol_types ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct vol_types {
	#[serde(rename = "volTypes")]
	pub vol_types: CTVolTypes,
}


// CTVolTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVolTypes {
	#[serde(rename = "volType")]
	pub vol_type: Vec<CTVolType>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTVolType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVolType {
	#[serde(rename = "type")]
	pub type_attr: String,
	#[serde(rename = "main")]
	pub main: Vec<CTVolMain>,
}


// CTVolMain ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVolMain {
	#[serde(rename = "first")]
	pub first: String,
	#[serde(rename = "tp")]
	pub tp: Vec<CTVolTopic>,
}


// CTVolTopic ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVolTopic {
	#[serde(rename = "t")]
	pub t: Option<String>,
	#[serde(rename = "v")]
	pub v: String,
	#[serde(rename = "stp")]
	pub stp: Vec<String>,
	#[serde(rename = "tr")]
	pub tr: Vec<CTVolTopicRef>,
}


// CTVolTopicRef ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTVolTopicRef {
	#[serde(rename = "r")]
	pub r: String,
	#[serde(rename = "s")]
	pub s: u32,
}


// STVolDepType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVolDepType {
	#[serde(rename = "ST_VolDepType")]
	pub st_vol_dep_type: String,
}


// STVolValueType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVolValueType {
	#[serde(rename = "ST_VolValueType")]
	pub st_vol_value_type: String,
}


// workbook ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct workbook {
	#[serde(rename = "workbook")]
	pub workbook: CTWorkbook,
}


// CTWorkbook ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWorkbook {
	#[serde(rename = "conformance")]
	pub conformance: Option<String>,
	#[serde(rename = "fileVersion")]
	pub file_version: CTFileVersion,
	#[serde(rename = "fileSharing")]
	pub file_sharing: CTFileSharing,
	#[serde(rename = "workbookPr")]
	pub workbook_pr: CTWorkbookPr,
	#[serde(rename = "workbookProtection")]
	pub workbook_protection: CTWorkbookProtection,
	#[serde(rename = "bookViews")]
	pub book_views: CTBookViews,
	#[serde(rename = "sheets")]
	pub sheets: CTSheets,
	#[serde(rename = "functionGroups")]
	pub function_groups: CTFunctionGroups,
	#[serde(rename = "externalReferences")]
	pub external_references: CTExternalReferences,
	#[serde(rename = "definedNames")]
	pub defined_names: CTDefinedNames,
	#[serde(rename = "calcPr")]
	pub calc_pr: CTCalcPr,
	#[serde(rename = "oleSize")]
	pub ole_size: CTOleSize,
	#[serde(rename = "customWorkbookViews")]
	pub custom_workbook_views: CTCustomWorkbookViews,
	#[serde(rename = "pivotCaches")]
	pub pivot_caches: CTPivotCaches,
	#[serde(rename = "smartTagPr")]
	pub smart_tag_pr: CTSmartTagPr,
	#[serde(rename = "smartTagTypes")]
	pub smart_tag_types: CTSmartTagTypes,
	#[serde(rename = "webPublishing")]
	pub web_publishing: CTWebPublishing,
	#[serde(rename = "fileRecoveryPr")]
	pub file_recovery_pr: Vec<CTFileRecoveryPr>,
	#[serde(rename = "webPublishObjects")]
	pub web_publish_objects: CTWebPublishObjects,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// CTFileVersion ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFileVersion {
	#[serde(rename = "appName")]
	pub app_name: Option<String>,
	#[serde(rename = "lastEdited")]
	pub last_edited: Option<String>,
	#[serde(rename = "lowestEdited")]
	pub lowest_edited: Option<String>,
	#[serde(rename = "rupBuild")]
	pub rup_build: Option<String>,
	#[serde(rename = "codeName")]
	pub code_name: Option<String>,
}


// CTBookViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBookViews {
	#[serde(rename = "workbookView")]
	pub workbook_view: Vec<CTBookView>,
}


// CTBookView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTBookView {
	#[serde(rename = "visibility")]
	pub visibility: Option<String>,
	#[serde(rename = "minimized")]
	pub minimized: Option<bool>,
	#[serde(rename = "showHorizontalScroll")]
	pub show_horizontal_scroll: Option<bool>,
	#[serde(rename = "showVerticalScroll")]
	pub show_vertical_scroll: Option<bool>,
	#[serde(rename = "showSheetTabs")]
	pub show_sheet_tabs: Option<bool>,
	#[serde(rename = "xWindow")]
	pub x_window: Option<i32>,
	#[serde(rename = "yWindow")]
	pub y_window: Option<i32>,
	#[serde(rename = "windowWidth")]
	pub window_width: Option<u32>,
	#[serde(rename = "windowHeight")]
	pub window_height: Option<u32>,
	#[serde(rename = "tabRatio")]
	pub tab_ratio: Option<u32>,
	#[serde(rename = "firstSheet")]
	pub first_sheet: Option<u32>,
	#[serde(rename = "activeTab")]
	pub active_tab: Option<u32>,
	#[serde(rename = "autoFilterDateGrouping")]
	pub auto_filter_date_grouping: Option<bool>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STVisibility ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STVisibility {
	#[serde(rename = "ST_Visibility")]
	pub st_visibility: String,
}


// CTCustomWorkbookViews ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomWorkbookViews {
	#[serde(rename = "customWorkbookView")]
	pub custom_workbook_view: Vec<CTCustomWorkbookView>,
}


// CTCustomWorkbookView ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCustomWorkbookView {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "guid")]
	pub guid: String,
	#[serde(rename = "autoUpdate")]
	pub auto_update: Option<bool>,
	#[serde(rename = "mergeInterval")]
	pub merge_interval: Option<u32>,
	#[serde(rename = "changesSavedWin")]
	pub changes_saved_win: Option<bool>,
	#[serde(rename = "onlySync")]
	pub only_sync: Option<bool>,
	#[serde(rename = "personalView")]
	pub personal_view: Option<bool>,
	#[serde(rename = "includePrintSettings")]
	pub include_print_settings: Option<bool>,
	#[serde(rename = "includeHiddenRowCol")]
	pub include_hidden_row_col: Option<bool>,
	#[serde(rename = "maximized")]
	pub maximized: Option<bool>,
	#[serde(rename = "minimized")]
	pub minimized: Option<bool>,
	#[serde(rename = "showHorizontalScroll")]
	pub show_horizontal_scroll: Option<bool>,
	#[serde(rename = "showVerticalScroll")]
	pub show_vertical_scroll: Option<bool>,
	#[serde(rename = "showSheetTabs")]
	pub show_sheet_tabs: Option<bool>,
	#[serde(rename = "xWindow")]
	pub x_window: Option<i32>,
	#[serde(rename = "yWindow")]
	pub y_window: Option<i32>,
	#[serde(rename = "windowWidth")]
	pub window_width: u32,
	#[serde(rename = "windowHeight")]
	pub window_height: u32,
	#[serde(rename = "tabRatio")]
	pub tab_ratio: Option<u32>,
	#[serde(rename = "activeSheetId")]
	pub active_sheet_id: u32,
	#[serde(rename = "showFormulaBar")]
	pub show_formula_bar: Option<bool>,
	#[serde(rename = "showStatusbar")]
	pub show_statusbar: Option<bool>,
	#[serde(rename = "showComments")]
	pub show_comments: Option<String>,
	#[serde(rename = "showObjects")]
	pub show_objects: Option<String>,
	#[serde(rename = "extLst")]
	pub ext_lst: CTExtensionList,
}


// STComments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STComments {
	#[serde(rename = "ST_Comments")]
	pub st_comments: String,
}


// STObjects ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STObjects {
	#[serde(rename = "ST_Objects")]
	pub st_objects: String,
}


// CTSheets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheets {
	#[serde(rename = "sheet")]
	pub sheet: Vec<CTSheet>,
}


// CTSheet ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheet {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "sheetId")]
	pub sheet_id: u32,
	#[serde(rename = "state")]
	pub state: Option<String>,
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// STSheetState ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSheetState {
	#[serde(rename = "ST_SheetState")]
	pub st_sheet_state: String,
}


// CTWorkbookPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWorkbookPr {
	#[serde(rename = "date1904")]
	pub date1904: Option<bool>,
	#[serde(rename = "showObjects")]
	pub show_objects: Option<String>,
	#[serde(rename = "showBorderUnselectedTables")]
	pub show_border_unselected_tables: Option<bool>,
	#[serde(rename = "filterPrivacy")]
	pub filter_privacy: Option<bool>,
	#[serde(rename = "promptedSolutions")]
	pub prompted_solutions: Option<bool>,
	#[serde(rename = "showInkAnnotation")]
	pub show_ink_annotation: Option<bool>,
	#[serde(rename = "backupFile")]
	pub backup_file: Option<bool>,
	#[serde(rename = "saveExternalLinkValues")]
	pub save_external_link_values: Option<bool>,
	#[serde(rename = "updateLinks")]
	pub update_links: Option<String>,
	#[serde(rename = "codeName")]
	pub code_name: Option<String>,
	#[serde(rename = "hidePivotFieldList")]
	pub hide_pivot_field_list: Option<bool>,
	#[serde(rename = "showPivotChartFilter")]
	pub show_pivot_chart_filter: Option<bool>,
	#[serde(rename = "allowRefreshQuery")]
	pub allow_refresh_query: Option<bool>,
	#[serde(rename = "publishItems")]
	pub publish_items: Option<bool>,
	#[serde(rename = "checkCompatibility")]
	pub check_compatibility: Option<bool>,
	#[serde(rename = "autoCompressPictures")]
	pub auto_compress_pictures: Option<bool>,
	#[serde(rename = "refreshAllConnections")]
	pub refresh_all_connections: Option<bool>,
	#[serde(rename = "defaultThemeVersion")]
	pub default_theme_version: Option<u32>,
}


// STUpdateLinks ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STUpdateLinks {
	#[serde(rename = "ST_UpdateLinks")]
	pub st_update_links: String,
}


// CTSmartTagPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagPr {
	#[serde(rename = "embed")]
	pub embed: Option<bool>,
	#[serde(rename = "show")]
	pub show: Option<String>,
}


// STSmartTagShow ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STSmartTagShow {
	#[serde(rename = "ST_SmartTagShow")]
	pub st_smart_tag_show: String,
}


// CTSmartTagTypes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagTypes {
	#[serde(rename = "smartTagType")]
	pub smart_tag_type: Vec<CTSmartTagType>,
}


// CTSmartTagType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSmartTagType {
	#[serde(rename = "namespaceUri")]
	pub namespace_uri: Option<String>,
	#[serde(rename = "name")]
	pub name: Option<String>,
	#[serde(rename = "url")]
	pub url: Option<String>,
}


// CTFileRecoveryPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFileRecoveryPr {
	#[serde(rename = "autoRecover")]
	pub auto_recover: Option<bool>,
	#[serde(rename = "crashSave")]
	pub crash_save: Option<bool>,
	#[serde(rename = "dataExtractLoad")]
	pub data_extract_load: Option<bool>,
	#[serde(rename = "repairLoad")]
	pub repair_load: Option<bool>,
}


// CTCalcPr ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTCalcPr {
	#[serde(rename = "calcId")]
	pub calc_id: Option<u32>,
	#[serde(rename = "calcMode")]
	pub calc_mode: Option<String>,
	#[serde(rename = "fullCalcOnLoad")]
	pub full_calc_on_load: Option<bool>,
	#[serde(rename = "refMode")]
	pub ref_mode: Option<String>,
	#[serde(rename = "iterate")]
	pub iterate: Option<bool>,
	#[serde(rename = "iterateCount")]
	pub iterate_count: Option<u32>,
	#[serde(rename = "iterateDelta")]
	pub iterate_delta: Option<f64>,
	#[serde(rename = "fullPrecision")]
	pub full_precision: Option<bool>,
	#[serde(rename = "calcCompleted")]
	pub calc_completed: Option<bool>,
	#[serde(rename = "calcOnSave")]
	pub calc_on_save: Option<bool>,
	#[serde(rename = "concurrentCalc")]
	pub concurrent_calc: Option<bool>,
	#[serde(rename = "concurrentManualCount")]
	pub concurrent_manual_count: Option<u32>,
	#[serde(rename = "forceFullCalc")]
	pub force_full_calc: Option<bool>,
}


// STCalcMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STCalcMode {
	#[serde(rename = "ST_CalcMode")]
	pub st_calc_mode: String,
}


// STRefMode ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STRefMode {
	#[serde(rename = "ST_RefMode")]
	pub st_ref_mode: String,
}


// CTDefinedNames ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDefinedNames {
	#[serde(rename = "definedName")]
	pub defined_name: Vec<CTDefinedName>,
}


// CTDefinedName ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTDefinedName {
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "comment")]
	pub comment: Option<String>,
	#[serde(rename = "customMenu")]
	pub custom_menu: Option<String>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "help")]
	pub help: Option<String>,
	#[serde(rename = "statusBar")]
	pub status_bar: Option<String>,
	#[serde(rename = "localSheetId")]
	pub local_sheet_id: Option<u32>,
	#[serde(rename = "hidden")]
	pub hidden: Option<bool>,
	#[serde(rename = "function")]
	pub function: Option<bool>,
	#[serde(rename = "vbProcedure")]
	pub vb_procedure: Option<bool>,
	#[serde(rename = "xlm")]
	pub xlm: Option<bool>,
	#[serde(rename = "functionGroupId")]
	pub function_group_id: Option<u32>,
	#[serde(rename = "shortcutKey")]
	pub shortcut_key: Option<String>,
	#[serde(rename = "publishToServer")]
	pub publish_to_server: Option<bool>,
	#[serde(rename = "workbookParameter")]
	pub workbook_parameter: Option<bool>,
	#[serde(rename = "$value")]
	pub value: String,
}


// CTExternalReferences ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalReferences {
	#[serde(rename = "externalReference")]
	pub external_reference: Vec<CTExternalReference>,
}


// CTExternalReference ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTExternalReference {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTSheetBackgroundPicture ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTSheetBackgroundPicture {
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTPivotCaches ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotCaches {
	#[serde(rename = "pivotCache")]
	pub pivot_cache: Vec<CTPivotCache>,
}


// CTPivotCache ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTPivotCache {
	#[serde(rename = "cacheId")]
	pub cache_id: u32,
	#[serde(rename = "r:id")]
	pub r_id: String,
}


// CTFileSharing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFileSharing {
	#[serde(rename = "readOnlyRecommended")]
	pub read_only_recommended: Option<bool>,
	#[serde(rename = "userName")]
	pub user_name: Option<String>,
	#[serde(rename = "algorithmName")]
	pub algorithm_name: Option<String>,
	#[serde(rename = "hashValue")]
	pub hash_value: Option<String>,
	#[serde(rename = "saltValue")]
	pub salt_value: Option<String>,
	#[serde(rename = "spinCount")]
	pub spin_count: Option<u32>,
}


// CTOleSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTOleSize {
	#[serde(rename = "ref")]
	pub ref_attr: String,
}


// CTWorkbookProtection ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWorkbookProtection {
	#[serde(rename = "lockStructure")]
	pub lock_structure: Option<bool>,
	#[serde(rename = "lockWindows")]
	pub lock_windows: Option<bool>,
	#[serde(rename = "lockRevision")]
	pub lock_revision: Option<bool>,
	#[serde(rename = "revisionsAlgorithmName")]
	pub revisions_algorithm_name: Option<String>,
	#[serde(rename = "revisionsHashValue")]
	pub revisions_hash_value: Option<String>,
	#[serde(rename = "revisionsSaltValue")]
	pub revisions_salt_value: Option<String>,
	#[serde(rename = "revisionsSpinCount")]
	pub revisions_spin_count: Option<u32>,
	#[serde(rename = "workbookAlgorithmName")]
	pub workbook_algorithm_name: Option<String>,
	#[serde(rename = "workbookHashValue")]
	pub workbook_hash_value: Option<String>,
	#[serde(rename = "workbookSaltValue")]
	pub workbook_salt_value: Option<String>,
	#[serde(rename = "workbookSpinCount")]
	pub workbook_spin_count: Option<u32>,
}


// CTWebPublishing ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPublishing {
	#[serde(rename = "css")]
	pub css: Option<bool>,
	#[serde(rename = "thicket")]
	pub thicket: Option<bool>,
	#[serde(rename = "longFileNames")]
	pub long_file_names: Option<bool>,
	#[serde(rename = "vml")]
	pub vml: Option<bool>,
	#[serde(rename = "allowPng")]
	pub allow_png: Option<bool>,
	#[serde(rename = "targetScreenSize")]
	pub target_screen_size: Option<String>,
	#[serde(rename = "dpi")]
	pub dpi: Option<u32>,
	#[serde(rename = "characterSet")]
	pub character_set: Option<String>,
}


// STTargetScreenSize ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct STTargetScreenSize {
	#[serde(rename = "ST_TargetScreenSize")]
	pub st_target_screen_size: String,
}


// CTFunctionGroups ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFunctionGroups {
	#[serde(rename = "builtInGroupCount")]
	pub built_in_group_count: Option<u32>,
	#[serde(rename = "functionGroup")]
	pub function_group: CTFunctionGroup,
}


// CTFunctionGroup ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTFunctionGroup {
	#[serde(rename = "name")]
	pub name: Option<String>,
}


// CTWebPublishObjects ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPublishObjects {
	#[serde(rename = "count")]
	pub count: Option<u32>,
	#[serde(rename = "webPublishObject")]
	pub web_publish_object: Vec<CTWebPublishObject>,
}


// CTWebPublishObject ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct CTWebPublishObject {
	#[serde(rename = "id")]
	pub id: u32,
	#[serde(rename = "divId")]
	pub div_id: String,
	#[serde(rename = "sourceObject")]
	pub source_object: Option<String>,
	#[serde(rename = "destinationFile")]
	pub destination_file: String,
	#[serde(rename = "title")]
	pub title: Option<String>,
	#[serde(rename = "autoRepublish")]
	pub auto_republish: Option<bool>,
}
