// Code generated by xgen. DO NOT EDIT.

#[macro_use]
extern crate serde_derive;
extern crate serde;
extern crate serde_xml_rs;

use serde_xml_rs::from_reader;


// DepthValueRecorded is An optional collection of elements relating to recorded sample depth.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DepthValueRecorded {
	#[serde(rename = "DepthValue")]
	pub depth_value: f64,
	#[serde(rename = "DepthValueUnits")]
	pub depth_value_units: char,
	#[serde(rename = "DepthRelativeTo")]
	pub depth_relative_to: char,
}


// PurgedVolumeRecorded is An optional collection of elements relating to recorded sample volume.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct PurgedVolumeRecorded {
	#[serde(rename = "PurgedVolume")]
	pub purged_volume: f64,
	#[serde(rename = "PurgedVolumeUnits")]
	pub purged_volume_units: char,
}


// Measurement is This repeating element contains the structure of a Water Quality measurement.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Measurement {
	#[serde(rename = "DeterminandName")]
	pub determinand_name: char,
	#[serde(rename = "ResultType")]
	pub result_type: char,
	#[serde(rename = "ResultValue")]
	pub result_value: f64,
	#[serde(rename = "ResultUnits")]
	pub result_units: char,
	#[serde(rename = "Qualifier")]
	pub qualifier: char,
	#[serde(rename = "Comment")]
	pub comment: char,
}


// Sample is This element contains the structure of a collection of samples.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Sample {
	#[serde(rename = "Sampler")]
	pub sampler: char,
	#[serde(rename = "SampleType")]
	pub sample_type: char,
	#[serde(rename = "CustomerSamplePointName")]
	pub customer_sample_point_name: char,
	#[serde(rename = "SampleDateTime")]
	pub sample_date_time: u8,
	#[serde(rename = "PurposeTypeName")]
	pub purpose_type_name: char,
	#[serde(rename = "MaterialName")]
	pub material_name: char,
	#[serde(rename = "Mechanism")]
	pub mechanism: char,
	#[serde(rename = "CustomersLabSampleRef")]
	pub customers_lab_sample_ref: char,
	#[serde(rename = "CustomersLabSampleRefSecondary")]
	pub customers_lab_sample_ref_secondary: Vec<char>,
	#[serde(rename = "Comment")]
	pub comment: char,
	#[serde(rename = "LabName")]
	pub lab_name: char,
	#[serde(rename = "AnalysisCompleteDateTime")]
	pub analysis_complete_date_time: u8,
	#[serde(rename = "DepthValueRecorded")]
	pub depth_value_recorded: DepthValueRecorded,
	#[serde(rename = "PurgedVolumeRecorded")]
	pub purged_volume_recorded: PurgedVolumeRecorded,
	#[serde(rename = "Measurement")]
	pub measurement: Vec<Measurement>,
}


// FileUpload ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileUpload {
	#[serde(rename = "Source")]
	pub source: char,
	#[serde(rename = "Sample")]
	pub sample: Vec<Sample>,
	#[serde(rename = "RegulatedCustomerIdentifier")]
	pub regulated_customer_identifier: char,
	#[serde(rename = "CustomerReference")]
	pub customer_reference: char,
}


// MandatoryStringType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct MandatoryStringType {
	#[serde(rename = "MandatoryStringType")]
	pub mandatory_string_type: String,
}


// EmailFieldType ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct EmailFieldType {
	#[serde(rename = "EmailFieldType")]
	pub email_field_type: String,
}
