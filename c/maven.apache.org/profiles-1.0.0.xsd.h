// Code generated by xgen. DO NOT EDIT.

typedef ProfilesRoot ProfilesXml;

// Profiles is Configuration of build profiles for adjusting the build
//             according to environmental parameters
typedef struct {
	Profile Profile[];
} Profiles;

// ActiveProfiles is List of manually-activated build profiles, specified in the order in which
//             they should be applied.
typedef struct {
	char ActiveProfile[];
} ActiveProfiles;

// ProfilesRoot is Root element of the profiles.xml file.
typedef struct {
	Profiles Profiles;
	ActiveProfiles ActiveProfiles;
} ProfilesRoot;

// Properties is Extended configuration specific to this profile goes
//             here.
typedef struct {
} Properties;

// Repositories is The lists of the remote repositories
typedef struct {
	Repository Repository[];
} Repositories;

// PluginRepositories is The lists of the remote repositories for discovering plugins
typedef struct {
	Repository PluginRepository[];
} PluginRepositories;

// Profile is The conditional logic which will automatically
//             trigger the inclusion of this profile.
typedef struct {
	char Id;
	Activation Activation;
	Properties Properties;
	Repositories Repositories;
	PluginRepositories PluginRepositories;
} Profile;

// Activation is Specifies that this profile will be activated based on existence of a file.
typedef struct {
	bool ActiveByDefault;
	char Jdk;
	ActivationOS Os;
	ActivationProperty Property;
	ActivationFile File;
} Activation;

// ActivationOS is The version of the OS to be used to activate a profile
typedef struct {
	char Name;
	char Family;
	char Arch;
	char Version;
} ActivationOS;

// ActivationProperty is The value of the property to be used to activate a profile
typedef struct {
	char Name;
	char Value;
} ActivationProperty;

// ActivationFile is The name of the file that should exist to activate a profile
typedef struct {
	char Missing;
	char Exists;
} ActivationFile;

// Repository is The type of layout this repository uses for locating and storing artifacts - can be "legacy" or
//             "default".
typedef struct {
	RepositoryPolicy Releases;
	RepositoryPolicy Snapshots;
	char Id;
	char Name;
	char Url;
	char Layout;
} Repository;

// RepositoryPolicy is What to do when verification of an artifact checksum fails - warn, fail, etc. Valid values are
//             "fail" or "warn"
typedef struct {
	bool Enabled;
	char UpdatePolicy;
	char ChecksumPolicy;
} RepositoryPolicy;
