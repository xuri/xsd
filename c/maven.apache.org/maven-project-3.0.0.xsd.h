// Code generated by xgen. DO NOT EDIT.

// Project ...
typedef struct {
	char Extend;
	char PomVersion;
	char Id;
	char Name;
	char GroupId;
	char CurrentVersion;
	Organization Organization;
	char InceptionYear;
	char Package;
	char Logo;
	char GumpRepositoryId;
	char Description;
	char ShortDescription;
	char Url;
	char IssueTrackingUrl;
	char SiteAddress;
	char SiteDirectory;
	char DistributionSite;
	char DistributionDirectory;
	Repository Repository;
	Versions Versions;
	Branches Branches;
	MailingLists MailingLists;
	Developers Developers;
	Contributors Contributors;
	Licenses Licenses;
	Dependencies Dependencies;
	Build Build;
	Reports Reports;
	Properties Properties;
} Project;

typedef char Extend;

typedef char Connection;

typedef char DeveloperConnection;

typedef char CurrentVersion;

typedef char Description;

typedef char DistributionSite;

typedef char DistributionDirectory;

typedef char Name;

typedef char GroupId;

typedef char ArtifactId;

typedef char GumpRepositoryId;

typedef char Id;

typedef char InceptionYear;

typedef char IssueTrackingUrl;

typedef char Logo;

typedef char Package;

typedef char PomVersion;

typedef char ShortDescription;

typedef char SiteAddress;

typedef char SiteDirectory;

typedef char Url;

// Repository ...
typedef struct {
	char Connection;
	char DeveloperConnection;
	char Url;
} Repository;

// Organization ...
typedef struct {
	char Name;
	char Url;
	char Logo;
} Organization;

// Versions ...
typedef struct {
	Version Version[];
} Versions;

// Version ...
typedef struct {
	char Id;
	char Name;
	char Tag;
} Version;

typedef char Tag;

// Branches ...
typedef struct {
	Branch Branch[];
} Branches;

// Branch ...
typedef struct {
	char Tag;
} Branch;

// MailingLists ...
typedef struct {
	MailingList MailingList[];
} MailingLists;

// MailingList ...
typedef struct {
	char Name;
	char Subscribe;
	char Unsubscribe;
	char Archive;
} MailingList;

typedef char Subscribe;

typedef char Unsubscribe;

typedef char Archive;

// Developers ...
typedef struct {
	Developer Developer[];
} Developers;

// Developer ...
typedef struct {
	ContactDetails ContactDetails;
	char Name;
	char Id;
} Developer;

// ContactDetails ...
typedef struct {
	char Email;
	char Organization;
	Roles Roles;
	char Url;
	float Timezone;
} ContactDetails;

typedef char Email;

// Roles ...
typedef struct {
	char Role[];
} Roles;

typedef char Role;

// TimezoneType ...
typedef float TimezoneType;

typedef float Timezone;

// Contributors ...
typedef struct {
	Contributor Contributor[];
} Contributors;

// Contributor ...
typedef struct {
	ContactDetails ContactDetails;
	char Name;
} Contributor;

// Licenses ...
typedef struct {
	License License[];
} Licenses;

// License ...
typedef struct {
	char Name;
	char Url;
	void Distribution;
} License;

typedef void Distribution;

// Dependencies ...
typedef struct {
	Dependency Dependency[];
} Dependencies;

// Dependency ...
typedef struct {
	char Id;
	char GroupId;
	char ArtifactId;
	char Version;
	char Jar;
	char Type;
	char Url;
	Properties Properties;
} Dependency;

typedef char Type;

typedef char Jar;

// Build ...
typedef struct {
	char NagEmailAddress;
	char SourceDirectory;
	SourceModifications SourceModifications;
	char UnitTestSourceDirectory;
	char IntegrationUnitTestSourceDirectory;
	char AspectSourceDirectory;
	UnitTest UnitTest;
	Resources Resources;
} Build;

typedef char NagEmailAddress;

typedef char SourceDirectory;

// SourceModifications ...
typedef struct {
	SourceModification SourceModification[];
} SourceModifications;

// SourceModification ...
typedef struct {
	char ClassName;
	Includes Includes[];
	Excludes Excludes[];
} SourceModification;

typedef char UnitTestSourceDirectory;

typedef char IntegrationUnitTestSourceDirectory;

typedef char AspectSourceDirectory;

// UnitTest ...
typedef struct {
	Includes Includes[];
	Excludes Excludes[];
	Resources Resources;
} UnitTest;

// Includes ...
typedef struct {
	char Include[];
} Includes;

// Excludes ...
typedef struct {
	char Exclude[];
} Excludes;

typedef char Include;

typedef char Exclude;

// Resources ...
typedef struct {
	Resource Resource[];
} Resources;

typedef char Directory;

typedef char TargetPath;

typedef bool Filtering;

// Resource ...
typedef struct {
	char Directory;
	char TargetPath;
	Includes Includes[];
	Excludes Excludes[];
	bool Filtering;
} Resource;

// Reports ...
typedef struct {
	char Report[];
} Reports;

// Properties ...
typedef struct {
} Properties;

typedef void Classloader;
