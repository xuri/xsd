// Code generated by xgen. DO NOT EDIT.

// ContentType is media type, as per [RFC2045]
typedef char ContentType;

// ContentTypes is comma-separated list of media types, as per [RFC2045]
typedef char ContentTypes;

// Charset is a character encoding, as per [RFC2045]
typedef char Charset;

// Charsets is a space separated list of character encodings, as per [RFC2045]
typedef char Charsets;

// LanguageCode is a language code, as per [RFC3066]
typedef char LanguageCode;

// Character is a single character, as per section 2.2 of [XML]
typedef char Character;

// Number is one or more digits
typedef int Number;

// TabindexNumber is tabindex attribute specifies the position of the current element
//       in the tabbing order for the current document. This value must be
//       a number between 0 and 32767. User agents should ignore leading zeros.
typedef int TabindexNumber;

// LinkTypes is space-separated list of link types
typedef char LinkTypes[];

// MediaDesc is single or comma-separated list of media descriptors
typedef char MediaDesc;

// URI is a Uniform Resource Identifier, see [RFC2396]
typedef char URI;

// UriList is a space separated list of Uniform Resource Identifiers
typedef char UriList;

// Datetime is date and time information. ISO date format
typedef char Datetime;

// Script is script expression
typedef char Script;

// StyleSheet is style sheet data
typedef char StyleSheet;

// Text is used for titles etc.
typedef char Text;

// FrameTarget is render in this frame
typedef char FrameTarget;

// Length is nn for pixels or nn% for percentage length
typedef char Length;

// MultiLength is pixel, percentage, or relative
typedef char MultiLength;

// Pixels is integer representing length in pixels
typedef int Pixels;

// Shape ...
typedef char Shape;

// Coords is comma separated list of lengths
typedef char Coords;

// ImgAlign is used for object, applet, img, input and iframe
typedef char ImgAlign;

// Color is a color using sRGB: #RRGGBB as Hex values
// 
//       There are also 16 widely known color names with their sRGB values:
// 
//       Black  = #000000    Green  = #008000
//       Silver = #C0C0C0    Lime   = #00FF00
//       Gray   = #808080    Olive  = #808000
//       White  = #FFFFFF    Yellow = #FFFF00
//       Maroon = #800000    Navy   = #000080
//       Red    = #FF0000    Blue   = #0000FF
//       Purple = #800080    Teal   = #008080
//       Fuchsia= #FF00FF    Aqua   = #00FFFF
typedef char Color;

// Coreattrs is core attributes common to most elements
//       id       document-wide unique id
//       class    space separated list of classes
//       style    associated style info
//       title    advisory title/amplification
typedef struct {
	char IdAttr; // attr, optional
	char ClassAttr[]; // attr, optional
	char StyleAttr; // attr, optional
	char TitleAttr; // attr, optional
} Coreattrs;

// I18n is internationalization attributes
//       lang        language code (backwards compatible)
//       xml:lang    language code (as per XML 1.0 spec)
//       dir         direction for weak/neutral text
typedef struct {
	char LangAttr; // attr, optional
	Lang XmlLangAttr; // attr, optional
	char DirAttr; // attr, optional
} I18n;

// Events is attributes for common UI events
//       onclick     a pointer button was clicked
//       ondblclick  a pointer button was double clicked
//       onmousedown a pointer button was pressed down
//       onmouseup   a pointer button was released
//       onmousemove a pointer was moved onto the element
//       onmouseout  a pointer was moved away from the element
//       onkeypress  a key was pressed and released
//       onkeydown   a key was pressed down
//       onkeyup     a key was released
typedef struct {
	char OnclickAttr; // attr, optional
	char OndblclickAttr; // attr, optional
	char OnmousedownAttr; // attr, optional
	char OnmouseupAttr; // attr, optional
	char OnmouseoverAttr; // attr, optional
	char OnmousemoveAttr; // attr, optional
	char OnmouseoutAttr; // attr, optional
	char OnkeypressAttr; // attr, optional
	char OnkeydownAttr; // attr, optional
	char OnkeyupAttr; // attr, optional
} Events;

// Focus is attributes for elements that can get the focus
//       accesskey   accessibility key character
//       tabindex    position in tabbing order
//       onfocus     the element got the focus
//       onblur      the element lost the focus
typedef struct {
	char AccesskeyAttr; // attr, optional
	int TabindexAttr; // attr, optional
	char OnfocusAttr; // attr, optional
	char OnblurAttr; // attr, optional
} Focus;

// Attrs ...
typedef struct {
} Attrs;

// TextAlign is text alignment for p, div, h1-h6. The default is
//       align="left" for ltr headings, "right" for rtl
typedef struct {
	char AlignAttr; // attr, optional
} TextAlign;

// SpecialExtra ...
typedef struct {
	Object Object;
	Applet Applet;
	void Img;
	Map Map;
	void Iframe;
	Source Source;
	Macro Macro;
} SpecialExtra;

// SpecialBasic ...
typedef struct {
	void Br;
	Span Span;
	void Bdo;
} SpecialBasic;

// Special ...
typedef struct {
	SpecialBasic SpecialBasic;
	SpecialExtra SpecialExtra;
} Special;

// FontstyleExtra ...
typedef struct {
	Big Big;
	Small Small;
	Font Font;
	Basefont Basefont;
} FontstyleExtra;

// FontstyleBasic ...
typedef struct {
	Tt Tt;
	I I;
	B B;
	U U;
	S S;
	Strike Strike;
} FontstyleBasic;

// Fontstyle ...
typedef struct {
	FontstyleBasic FontstyleBasic;
	FontstyleExtra FontstyleExtra;
} Fontstyle;

// PhraseExtra ...
typedef struct {
	Sub Sub;
	Sup Sup;
} PhraseExtra;

// PhraseBasic ...
typedef struct {
	Em Em;
	Strong Strong;
	Dfn Dfn;
	Code Code;
	Q Q;
	Samp Samp;
	Kbd Kbd;
	Var Var;
	Cite Cite;
	Abbr Abbr;
	Acronym Acronym;
} PhraseBasic;

// Phrase ...
typedef struct {
	PhraseBasic PhraseBasic;
	PhraseExtra PhraseExtra;
} Phrase;

// InlineForms ...
typedef struct {
	void Input;
	Select Select;
	void Textarea;
	Label Label;
	void Button;
} InlineForms;

// MiscInline ...
typedef struct {
	Ins Ins;
	Del Del;
	void Script;
} MiscInline;

// Misc ...
typedef struct {
	Noscript Noscript;
	MiscInline MiscInline;
} Misc;

// Inline ...
typedef struct {
	A A;
	Special Special;
	Fontstyle Fontstyle;
	Phrase Phrase;
	InlineForms InlineForms;
} Inline;

// Inline2 is "Inline" covers inline or "text-level" element
typedef struct {
	Inline Inline[];
	MiscInline MiscInline[];
} Inline2;

// Heading ...
typedef struct {
	H1 H1;
	H2 H2;
	H3 H3;
	H4 H4;
	H5 H5;
	H6 H6;
} Heading;

// Lists ...
typedef struct {
	Ul Ul;
	Ol Ol;
	Dl Dl;
	Menu Menu;
	Dir Dir;
} Lists;

// Blocktext ...
typedef struct {
	Pre Pre;
	void Hr;
	Blockquote Blockquote;
	Address Address;
	Center Center;
	Noframes Noframes;
} Blocktext;

// Block ...
typedef struct {
	P P;
	Div Div;
	Isindex Isindex;
	Fieldset Fieldset;
	Table Table;
	Heading Heading;
	Lists Lists;
	Blocktext Blocktext;
} Block;

// Flow is "Flow" mixes block and inline and is used for list items etc.
typedef struct {
	Block Block[];
	Inline Inline[];
	Misc Misc[];
	void Form[];
} Flow;

// AContent is a elements use "Inline" excluding a
typedef struct {
	Special Special[];
	Fontstyle Fontstyle[];
	Phrase Phrase[];
	InlineForms InlineForms[];
	MiscInline MiscInline[];
} AContent;

// PreContent is pre uses "Inline" excluding img, object, applet, big, small,
//       font, or basefont
typedef struct {
	SpecialBasic SpecialBasic[];
	FontstyleBasic FontstyleBasic[];
	PhraseBasic PhraseBasic[];
	InlineForms InlineForms[];
	MiscInline MiscInline[];
	A A[];
} PreContent;

// FormContent is form uses "Flow" excluding form
typedef struct {
	Block Block[];
	Inline Inline[];
	Misc Misc[];
} FormContent;

// ButtonContent is button uses "Flow" but excludes a, form, form controls, iframe
typedef struct {
	Heading Heading[];
	Lists Lists[];
	Blocktext Blocktext[];
	Fontstyle Fontstyle[];
	Phrase Phrase[];
	Misc Misc[];
	P P[];
	Div Div[];
	Table Table[];
	void Br[];
	Span Span[];
	void Bdo[];
	Object Object[];
	Applet Applet[];
	void Img[];
	Map Map[];
} ButtonContent;

// HeadMisc ...
typedef struct {
	void Script[];
	Style Style[];
	Meta Meta[];
	Link Link[];
	Object Object[];
	Isindex Isindex[];
} HeadMisc;

// Head is content model is "head.misc" combined with a single
//       title and an optional base element in any order
typedef struct {
	I18n I18n;
	char IdAttr; // attr, optional
	char ProfileAttr; // attr, optional
	HeadMisc HeadMisc;
	Title Title;
	Base Base;
} Head;

// Title is The title element is not considered part of the flow of text.
//       It should be displayed, for example as the page header or
//       window title. Exactly one title is required per document.
typedef struct {
	I18n I18n;
	char IdAttr; // attr, optional
} Title;

// Base is document base URI
typedef struct {
	char IdAttr; // attr, optional
	char HrefAttr; // attr, optional
	char TargetAttr; // attr, optional
} Base;

// Meta is generic metainformation
typedef struct {
	I18n I18n;
	char IdAttr; // attr, optional
	void HttpequivAttr; // attr, optional
	void NameAttr; // attr, optional
	void ContentAttr; // attr
	void SchemeAttr; // attr, optional
} Meta;

// Link is Relationship values can be used in principle:
// 
//       a) for document specific toolbars/menus when used
//          with the link element in document head e.g.
//            start, contents, previous, next, index, end, help
//       b) to link to a separate style sheet (rel="stylesheet")
//       c) to make a link to a script (rel="script")
//       d) by stylesheets to control how collections of
//          html nodes are rendered into printed documents
//       e) to make a link to a printable version of this document
//          e.g. a PostScript or PDF version (rel="alternate" media="print")
typedef struct {
	Attrs Attrs;
	char CharsetAttr; // attr, optional
	char HrefAttr; // attr, optional
	char HreflangAttr; // attr, optional
	char TypeAttr; // attr, optional
	char RelAttr[]; // attr, optional
	char RevAttr[]; // attr, optional
	char MediaAttr; // attr, optional
	char TargetAttr; // attr, optional
} Link;

// Style is style info, which may include CDATA sections
typedef struct {
	I18n I18n;
	char IdAttr; // attr, optional
	char TypeAttr; // attr
	char MediaAttr; // attr, optional
	char TitleAttr; // attr, optional
	Space XmlSpaceAttr; // attr, optional
} Style;

// Script2 is script statements, which may include CDATA sections
typedef struct {
	char IdAttr; // attr, optional
	char CharsetAttr; // attr, optional
	char TypeAttr; // attr
	void LanguageAttr; // attr, optional
	char SrcAttr; // attr, optional
	void DeferAttr; // attr, optional
	Space XmlSpaceAttr; // attr, optional
} Script2;

// Noscript is alternate content container for non script-based rendering
typedef struct {
	Attrs Attrs;
} Noscript;

// Iframe is inline subwindow
typedef struct {
	Coreattrs Coreattrs;
	char LongdescAttr; // attr, optional
	char NameAttr; // attr, optional
	char SrcAttr; // attr, optional
	void FrameborderAttr; // attr, optional
	int MarginwidthAttr; // attr, optional
	int MarginheightAttr; // attr, optional
	void ScrollingAttr; // attr, optional
	char AlignAttr; // attr, optional
	char HeightAttr; // attr, optional
	char WidthAttr; // attr, optional
} Iframe;

// Noframes is alternate content container for non frame-based rendering
typedef struct {
	Attrs Attrs;
} Noframes;

// Div is generic language/style container
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} Div;

// P ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} P;

// H1 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H1;

// H2 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H2;

// H3 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H3;

// H4 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H4;

// H5 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H5;

// H6 ...
typedef struct {
	Attrs Attrs;
	TextAlign TextAlign;
} H6;

// ULStyle is Unordered list bullet styles
typedef char ULStyle;

// Ul is Unordered list
typedef struct {
	Attrs Attrs;
	char TypeAttr; // attr, optional
	char CompactAttr; // attr, optional
	Li Li[];
} Ul;

// OLStyle is Ordered list numbering style
// 
//       1   arabic numbers      1, 2, 3, ...
//       a   lower alpha         a, b, c, ...
//       A   upper alpha         A, B, C, ...
//       i   lower roman         i, ii, iii, ...
//       I   upper roman         I, II, III, ...
// 
//       The style is applied to the sequence number which by default
//       is reset to 1 for the first list item in an ordered list.
typedef char OLStyle;

// Ol is Ordered (numbered) list
typedef struct {
	Attrs Attrs;
	char TypeAttr; // attr, optional
	char CompactAttr; // attr, optional
	int StartAttr; // attr, optional
	Li Li[];
} Ol;

// Menu is single column list (DEPRECATED)
typedef struct {
	Attrs Attrs;
	char CompactAttr; // attr, optional
	Li Li[];
} Menu;

// Dir is multiple column list (DEPRECATED)
typedef struct {
	Attrs Attrs;
	char CompactAttr; // attr, optional
	Li Li[];
} Dir;

// LIStyle is LIStyle is constrained to: "(ULStyle|OLStyle)"
typedef char LIStyle;

// Li is list item
typedef struct {
	Attrs Attrs;
	char TypeAttr; // attr, optional
	int ValueAttr; // attr, optional
} Li;

// Dl ...
typedef struct {
	Attrs Attrs;
	char CompactAttr; // attr, optional
	Dt Dt[];
	Dd Dd[];
} Dl;

// Dt ...
typedef struct {
	Attrs Attrs;
} Dt;

// Dd ...
typedef struct {
	Attrs Attrs;
} Dd;

// Address is information on author
typedef struct {
	Attrs Attrs;
	Inline Inline[];
	MiscInline MiscInline[];
	P P[];
} Address;

// Hr ...
typedef struct {
	Attrs Attrs;
	void AlignAttr; // attr, optional
	void NoshadeAttr; // attr, optional
	int SizeAttr; // attr, optional
	char WidthAttr; // attr, optional
} Hr;

// Pre is content is "Inline" excluding
//          "img|object|applet|big|small|sub|sup|font|basefont"
typedef struct {
	Attrs Attrs;
	int WidthAttr; // attr, optional
	Space XmlSpaceAttr; // attr, optional
} Pre;

// Blockquote ...
typedef struct {
	Attrs Attrs;
	char CiteAttr; // attr, optional
} Blockquote;

// Center is center content
typedef struct {
	Attrs Attrs;
} Center;

// Ins ...
typedef struct {
	Attrs Attrs;
	char CiteAttr; // attr, optional
	char DatetimeAttr; // attr, optional
} Ins;

// Del ...
typedef struct {
	Attrs Attrs;
	char CiteAttr; // attr, optional
	char DatetimeAttr; // attr, optional
} Del;

// A is content is "Inline" except that anchors shouldn't be nested
typedef struct {
	Attrs Attrs;
	Focus Focus;
	char CharsetAttr; // attr, optional
	char TypeAttr; // attr, optional
	char NameAttr; // attr, optional
	char HrefAttr; // attr, optional
	char HreflangAttr; // attr, optional
	char RelAttr[]; // attr, optional
	char RevAttr[]; // attr, optional
	char ShapeAttr; // attr, optional
	char CoordsAttr; // attr, optional
	char TargetAttr; // attr, optional
} A;

// Span is generic language/style container
typedef struct {
	Attrs Attrs;
} Span;

// Bdo is I18N BiDi over-ride
typedef struct {
	Coreattrs Coreattrs;
	Events Events;
	char LangAttr; // attr, optional
	Lang XmlLangAttr; // attr, optional
	void DirAttr; // attr
} Bdo;

// Br is forced line break
typedef struct {
	Coreattrs Coreattrs;
	void ClearAttr; // attr, optional
} Br;

// Em is emphasis
typedef struct {
	Attrs Attrs;
} Em;

// Strong is strong emphasis
typedef struct {
	Attrs Attrs;
} Strong;

// Dfn is definitional
typedef struct {
	Attrs Attrs;
} Dfn;

// Code is program code
typedef struct {
	Attrs Attrs;
} Code;

// Samp is sample
typedef struct {
	Attrs Attrs;
} Samp;

// Kbd is something user would type
typedef struct {
	Attrs Attrs;
} Kbd;

// Var is variable
typedef struct {
	Attrs Attrs;
} Var;

// Cite is citation
typedef struct {
	Attrs Attrs;
} Cite;

// Abbr is abbreviation
typedef struct {
	Attrs Attrs;
} Abbr;

// Acronym is acronym
typedef struct {
	Attrs Attrs;
} Acronym;

// Q is inlined quote
typedef struct {
	Attrs Attrs;
	char CiteAttr; // attr, optional
} Q;

// Sub is subscript
typedef struct {
	Attrs Attrs;
} Sub;

// Sup is superscript
typedef struct {
	Attrs Attrs;
} Sup;

// Tt is fixed pitch font
typedef struct {
	Attrs Attrs;
} Tt;

// I is italic font
typedef struct {
	Attrs Attrs;
} I;

// B is bold font
typedef struct {
	Attrs Attrs;
} B;

// Big is bigger font
typedef struct {
	Attrs Attrs;
} Big;

// Small is smaller font
typedef struct {
	Attrs Attrs;
} Small;

// U is underline
typedef struct {
	Attrs Attrs;
} U;

// S is strike-through
typedef struct {
	Attrs Attrs;
} S;

// Strike is strike-through
typedef struct {
	Attrs Attrs;
} Strike;

// Basefont is base font size
typedef struct {
	char IdAttr; // attr, optional
	void SizeAttr; // attr
	char ColorAttr; // attr, optional
	void FaceAttr; // attr, optional
} Basefont;

// Font is local change to font
typedef struct {
	Coreattrs Coreattrs;
	I18n I18n;
	void SizeAttr; // attr, optional
	char ColorAttr; // attr, optional
	void FaceAttr; // attr, optional
} Font;

// Object ...
typedef struct {
	Attrs Attrs;
	char DeclareAttr; // attr, optional
	char ClassidAttr; // attr, optional
	char CodebaseAttr; // attr, optional
	char DataAttr; // attr, optional
	char TypeAttr; // attr, optional
	char CodetypeAttr; // attr, optional
	char ArchiveAttr; // attr, optional
	char StandbyAttr; // attr, optional
	char HeightAttr; // attr, optional
	char WidthAttr; // attr, optional
	char UsemapAttr; // attr, optional
	char NameAttr; // attr, optional
	int TabindexAttr; // attr, optional
	char AlignAttr; // attr, optional
	int BorderAttr; // attr, optional
	int HspaceAttr; // attr, optional
	int VspaceAttr; // attr, optional
	Block Block[];
	Inline Inline[];
	Misc Misc[];
	void Param[];
	void Form[];
} Object;

// Param is param is used to supply a named property value.
//       In XML it would seem natural to follow RDF and support an
//       abbreviated syntax where the param elements are replaced
//       by attribute value pairs on the object start tag.
typedef struct {
	char IdAttr; // attr, optional
	void NameAttr; // attr
	void ValueAttr; // attr, optional
	void ValuetypeAttr; // attr, optional
	char TypeAttr; // attr, optional
} Param;

// Applet ...
typedef struct {
	Coreattrs Coreattrs;
	char CodebaseAttr; // attr, optional
	void ArchiveAttr; // attr, optional
	void CodeAttr; // attr, optional
	void ObjectAttr; // attr, optional
	char AltAttr; // attr, optional
	char NameAttr; // attr, optional
	char WidthAttr; // attr
	char HeightAttr; // attr
	char AlignAttr; // attr, optional
	int HspaceAttr; // attr, optional
	int VspaceAttr; // attr, optional
	Block Block[];
	Inline Inline[];
	Misc Misc[];
	void Param[];
	void Form[];
} Applet;

// Img ...
typedef struct {
	Attrs Attrs;
	char SrcAttr; // attr
	char AltAttr; // attr
	char NameAttr; // attr, optional
	char LongdescAttr; // attr, optional
	char HeightAttr; // attr, optional
	char WidthAttr; // attr, optional
	char UsemapAttr; // attr, optional
	void IsmapAttr; // attr, optional
	char AlignAttr; // attr, optional
	char BorderAttr; // attr, optional
	int HspaceAttr; // attr, optional
	int VspaceAttr; // attr, optional
} Img;

// Map ...
typedef struct {
	I18n I18n;
	Events Events;
	char IdAttr; // attr
	void ClassAttr; // attr, optional
	char StyleAttr; // attr, optional
	char TitleAttr; // attr, optional
	void NameAttr; // attr, optional
	Block Block[];
	Misc Misc[];
	void Form[];
	void Area[];
} Map;

// Area ...
typedef struct {
	Attrs Attrs;
	Focus Focus;
	char ShapeAttr; // attr, optional
	char CoordsAttr; // attr, optional
	char HrefAttr; // attr, optional
	void NohrefAttr; // attr, optional
	char AltAttr; // attr
	char TargetAttr; // attr, optional
} Area;

// Form ...
typedef struct {
	Attrs Attrs;
	char ActionAttr; // attr
	void MethodAttr; // attr, optional
	char EnctypeAttr; // attr, optional
	char OnsubmitAttr; // attr, optional
	char OnresetAttr; // attr, optional
	char AcceptAttr; // attr, optional
	char AcceptcharsetAttr; // attr, optional
	char TargetAttr; // attr, optional
} Form;

// Label is Each label must not contain more than ONE field
//       Label elements shouldn't be nested.
typedef struct {
	Attrs Attrs;
	char ForAttr; // attr, optional
	char AccesskeyAttr; // attr, optional
	char OnfocusAttr; // attr, optional
	char OnblurAttr; // attr, optional
} Label;

// InputType ...
typedef char InputType;

// Input is form control
typedef struct {
	Attrs Attrs;
	Focus Focus;
	char TypeAttr; // attr, optional
	void NameAttr; // attr, optional
	void ValueAttr; // attr, optional
	void CheckedAttr; // attr, optional
	void DisabledAttr; // attr, optional
	void ReadonlyAttr; // attr, optional
	void SizeAttr; // attr, optional
	int MaxlengthAttr; // attr, optional
	char SrcAttr; // attr, optional
	void AltAttr; // attr, optional
	char UsemapAttr; // attr, optional
	char OnselectAttr; // attr, optional
	char OnchangeAttr; // attr, optional
	char AcceptAttr; // attr, optional
	char AlignAttr; // attr, optional
} Input;

// Select is option selector
typedef struct {
	Attrs Attrs;
	void NameAttr; // attr, optional
	int SizeAttr; // attr, optional
	char MultipleAttr; // attr, optional
	char DisabledAttr; // attr, optional
	int TabindexAttr; // attr, optional
	char OnfocusAttr; // attr, optional
	char OnblurAttr; // attr, optional
	char OnchangeAttr; // attr, optional
	Optgroup Optgroup[];
	void Option[];
} Select;

// Optgroup is option group
typedef struct {
	Attrs Attrs;
	char DisabledAttr; // attr, optional
	char LabelAttr; // attr
	void Option[];
} Optgroup;

// Option is selectable choice
typedef struct {
	Attrs Attrs;
	void SelectedAttr; // attr, optional
	void DisabledAttr; // attr, optional
	char LabelAttr; // attr, optional
	void ValueAttr; // attr, optional
} Option;

// Textarea is multi-line text field
typedef struct {
	Attrs Attrs;
	Focus Focus;
	void NameAttr; // attr, optional
	int RowsAttr; // attr
	int ColsAttr; // attr
	void DisabledAttr; // attr, optional
	void ReadonlyAttr; // attr, optional
	char OnselectAttr; // attr, optional
	char OnchangeAttr; // attr, optional
} Textarea;

// Fieldset is The fieldset element is used to group form fields.
//       Only one legend element should occur in the content
//       and if present should only be preceded by whitespace.
// 
//       NOTE: this content model is different from the XHTML 1.0 DTD,
//       closer to the intended content model in HTML4 DTD
typedef struct {
	Attrs Attrs;
	Block Block[];
	Inline Inline[];
	Misc Misc[];
	Legend Legend;
	void Form[];
} Fieldset;

// LAlign ...
typedef char LAlign;

// Legend is fieldset label
typedef struct {
	Attrs Attrs;
	char AccesskeyAttr; // attr, optional
	char AlignAttr; // attr, optional
} Legend;

// Button is Content is "Flow" excluding a, form and form controls
typedef struct {
	Attrs Attrs;
	Focus Focus;
	void NameAttr; // attr, optional
	void ValueAttr; // attr, optional
	void TypeAttr; // attr, optional
	void DisabledAttr; // attr, optional
} Button;

// Isindex is single-line text input control (DEPRECATED)
typedef struct {
	Coreattrs Coreattrs;
	I18n I18n;
	char PromptAttr; // attr, optional
} Isindex;

// TFrame is The border attribute sets the thickness of the frame around the
//       table. The default units are screen pixels.
// 
//       The frame attribute specifies which parts of the frame around
//       the table should be rendered. The values are not the same as
//       CALS to avoid a name clash with the valign attribute.
typedef char TFrame;

// TRules is The rules attribute defines which rules to draw between cells:
// 
//       If rules is absent then assume:
//           "none" if border is absent or border="0" otherwise "all"
typedef char TRules;

// TAlign is horizontal placement of table relative to document
typedef char TAlign;

// Cellhalign is horizontal alignment attributes for cell contents
// 
//       char        alignment char, e.g. char=':'
//       charoff     offset for alignment char
typedef struct {
	char AlignAttr; // attr, optional
	char CharAttr; // attr, optional
	char CharoffAttr; // attr, optional
} Cellhalign;

// Cellvalign is vertical alignment attributes for cell contents
typedef struct {
	char ValignAttr; // attr, optional
} Cellvalign;

// Table ...
typedef struct {
	Attrs Attrs;
	char SummaryAttr; // attr, optional
	char WidthAttr; // attr, optional
	int BorderAttr; // attr, optional
	char FrameAttr; // attr, optional
	char RulesAttr; // attr, optional
	char CellspacingAttr; // attr, optional
	char CellpaddingAttr; // attr, optional
	char AlignAttr; // attr, optional
	char BgcolorAttr; // attr, optional
	Caption Caption;
	Col Col[];
	Colgroup Colgroup[];
	Thead Thead;
	Tfoot Tfoot;
	Tbody Tbody[];
	Tr Tr[];
} Table;

// CAlign ...
typedef char CAlign;

// Caption ...
typedef struct {
	Attrs Attrs;
	char AlignAttr; // attr, optional
} Caption;

// Thead ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	Tr Tr[];
} Thead;

// Tfoot ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	Tr Tr[];
} Tfoot;

// Tbody ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	Tr Tr[];
} Tbody;

// Colgroup is colgroup groups a set of col elements. It allows you to group
//       several semantically related columns together.
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	int SpanAttr; // attr, optional
	char WidthAttr; // attr, optional
	Col Col[];
} Colgroup;

// Col is col elements define the alignment properties for cells in
//       one or more columns.
// 
//       The width attribute specifies the width of the columns, e.g.
// 
//           width=64        width in screen pixels
//           width=0.5*      relative width of 0.5
// 
//       The span attribute causes the attributes of one
//       col element to apply to more than one column.
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	int SpanAttr; // attr, optional
	char WidthAttr; // attr, optional
} Col;

// Tr ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	char BgcolorAttr; // attr, optional
	void Th[];
	void Td[];
} Tr;

// Scope is Scope is simpler than headers attribute for common tables
typedef char Scope;

// Th ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	char AbbrAttr; // attr, optional
	void AxisAttr; // attr, optional
	char HeadersAttr[]; // attr, optional
	char ScopeAttr; // attr, optional
	int RowspanAttr; // attr, optional
	int ColspanAttr; // attr, optional
	void NowrapAttr; // attr, optional
	char BgcolorAttr; // attr, optional
	char WidthAttr; // attr, optional
	char HeightAttr; // attr, optional
} Th;

// Td ...
typedef struct {
	Attrs Attrs;
	Cellhalign Cellhalign;
	Cellvalign Cellvalign;
	char AbbrAttr; // attr, optional
	void AxisAttr; // attr, optional
	char HeadersAttr[]; // attr, optional
	char ScopeAttr; // attr, optional
	int RowspanAttr; // attr, optional
	int ColspanAttr; // attr, optional
	void NowrapAttr; // attr, optional
	char BgcolorAttr; // attr, optional
	char WidthAttr; // attr, optional
	char HeightAttr; // attr, optional
} Td;

// Faqs is The <faqs/> element is the root of the FML descriptor.
typedef struct {
	I18n I18n;
	char IdAttr; // attr, optional
	char TitleAttr; // attr, optional
	bool ToplinkAttr; // attr, optional
	Part Part[];
} Faqs;

// Part is Required faq element for this part element.
typedef struct {
	char IdAttr; // attr, optional
	Title Title;
	Faq Faq[];
} Part;

// Faq is The answer of this faq element.
typedef struct {
	char IdAttr; // attr, optional
	Question Question;
	Answer Answer;
} Faq;

// Question is A faq question element.
typedef struct {
	Fontstyle Fontstyle[];
	Phrase Phrase[];
} Question;

// Answer is A faq answer element.
typedef struct {
	Block Block[];
	Inline Inline[];
	Misc Misc[];
	void Form[];
} Answer;

// Source is A source element.
typedef struct {
} Source;

// Macro is A macro element.
typedef struct {
	char NameAttr; // attr
	void Param[];
} Macro;
