// Code generated by xgen. DO NOT EDIT.

typedef Assembly Assembly;

// Formats is Specifies the formats of the assembly. 
//             
//             It is often better to specify the formats via the goal parameter rather
//             than here. For example, that allows different profiles to generate
//             different types of archives.
//             
//             Multiple formats can be
//             supplied and the Assembly Plugin will generate an archive for each
//             of the desired formats. When deploying your project, all file formats
//             specified will also be deployed. A format is specified by supplying
//             one of the following values in a &lt;format&gt; subelement:
//             <ul>
//               <li><b>"zip"</b> - Creates a ZIP file format</li>
//               <li><b>"tar"</b> - Creates a TAR format</li>
//               <li><b>"tar.gz"</b> - Creates a gzip'd TAR format</li>
//               <li><b>"tar.bz2"</b> - Creates a bzip'd TAR format</li>
//               <li><b>"jar"</b> - Creates a JAR format</li>
//               <li><b>"dir"</b> - Creates an exploded directory format</li>
//               <li><b>"war"</b> - Creates a WAR format</li>
//             </ul>
typedef struct {
	char Format[];
} Formats;

// ContainerDescriptorHandlers is Set of components which filter various container descriptors out of
//             the normal archive stream, so they can be aggregated then added.
typedef struct {
	ContainerDescriptorHandlerConfig ContainerDescriptorHandler[];
} ContainerDescriptorHandlers;

// ModuleSets is Specifies which module files to include in the assembly. A moduleSet
//             is specified by providing one or more of &lt;moduleSet&gt;
//             subelements.
typedef struct {
	ModuleSet ModuleSet[];
} ModuleSets;

// FileSets is Specifies which groups of files to include in the assembly. A
//             fileSet is specified by providing one or more of &lt;fileSet&gt;
//             subelements.
typedef struct {
	FileSet FileSet[];
} FileSets;

// Files is Specifies which single files to include in the assembly. A file
//             is specified by providing one or more of &lt;file&gt;
//             subelements.
typedef struct {
	FileItem File[];
} Files;

// DependencySets is Specifies which dependencies to include in the assembly. A
//             dependencySet is specified by providing one or more of
//             &lt;dependencySet&gt; subelements.
typedef struct {
	DependencySet DependencySet[];
} DependencySets;

// Repositories is Specifies which repository files to include in the assembly. A
//             repository is specified by providing one or more of
//             &lt;repository&gt; subelements.
typedef struct {
	Repository Repository[];
} Repositories;

// ComponentDescriptors is Specifies the shared components xml file locations to include in the
//             assembly. The locations specified must be relative to the base location
//             of the descriptor. If the descriptor was found via a &lt;descriptorRef/&gt; 
//             element in the
//             classpath, any components it specifies will also be found on the classpath.
//             If it is found by pathname via a &lt;descriptor/&gt; element 
//             the value here will be interpreted
//             as a path relative to the project basedir.
//             When multiple componentDescriptors are found, their
//             contents are merged. Check out the <a href="component.html">
//             descriptor components</a> for more information. A
//             componentDescriptor is specified by providing one or more of
//             &lt;componentDescriptor&gt; subelements.
typedef struct {
	char ComponentDescriptor[];
} ComponentDescriptors;

// Assembly is Sets the id of this assembly. This is a symbolic name for a
//             particular assembly of files from this project. Also, aside from
//             being used to distinctly name the assembled package by attaching
//             its value to the generated archive, the id is used as your
//             artifact's classifier when deploying.
typedef struct {
	char Id;
	Formats Formats;
	bool IncludeBaseDirectory;
	char BaseDirectory;
	bool IncludeSiteDirectory;
	ContainerDescriptorHandlers ContainerDescriptorHandlers;
	ModuleSets ModuleSets;
	FileSets FileSets;
	Files Files;
	DependencySets DependencySets;
	Repositories Repositories;
	ComponentDescriptors ComponentDescriptors;
} Assembly;

// Includes is When &lt;include&gt; subelements are present, they define a set of
//             artifact coordinates to include. If none is present, then
//             &lt;includes&gt; represents all valid values.
//             
//             Artifact coordinates may be given in simple groupId:artifactId form,
//             or they may be fully qualified in the form groupId:artifactId:type[:classifier]:version.
//             Additionally, wildcards can be used, as in *:maven-*
typedef struct {
	char Include[];
} Includes;

// Excludes is When &lt;exclude&gt; subelements are present, they define a set of
//             dependency artifact coordinates to exclude. If none is present, then
//             &lt;excludes&gt; represents no exclusions.
//             
//             Artifact coordinates may be given in simple groupId:artifactId form,
//             or they may be fully qualified in the form groupId:artifactId:type[:classifier]:version.
//             Additionally, wildcards can be used, as in *:maven-*
typedef struct {
	char Exclude[];
} Excludes;

// DependencySet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory,
//             directly beneath the root of the archive.
typedef struct {
	char OutputDirectory;
	Includes Includes;
	Excludes Excludes;
	char FileMode;
	char DirectoryMode;
	bool UseStrictFiltering;
	char OutputFileNameMapping;
	bool Unpack;
	UnpackOptions UnpackOptions;
	char Scope;
	bool UseProjectArtifact;
	bool UseProjectAttachments;
	bool UseTransitiveDependencies;
	bool UseTransitiveFiltering;
} DependencySet;

// UnpackOptions is Specifies options for including/excluding/filtering items extracted from an archive. (Since 2.2-beta-1)
typedef struct {
	Includes Includes;
	Excludes Excludes;
	bool Filtered;
	char LineEnding;
	bool UseDefaultExcludes;
} UnpackOptions;

// GroupVersionAlignments is Specifies that you want to align a group of artifacts to a specified
//             version. A groupVersionAlignment is specified by providing one or
//             more of &lt;groupVersionAlignment&gt; subelements.
typedef struct {
	GroupVersionAlignment GroupVersionAlignment[];
} GroupVersionAlignments;

// Repository is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory,
//             directly beneath the root of the archive.
typedef struct {
	char OutputDirectory;
	Includes Includes;
	Excludes Excludes;
	char FileMode;
	char DirectoryMode;
	bool IncludeMetadata;
	GroupVersionAlignments GroupVersionAlignments;
	char Scope;
} Repository;

// GroupVersionAlignment is The version you want to align this group to.
typedef struct {
	char Id;
	char Version;
	Excludes Excludes;
} GroupVersionAlignment;

// Configuration is Configuration options for the handler.
typedef struct {
} Configuration;

// ContainerDescriptorHandlerConfig is The handler's plexus role-hint, for lookup from the container.
typedef struct {
	char HandlerName;
	Configuration Configuration;
} ContainerDescriptorHandlerConfig;

// ModuleSet is If set to false, the plugin will exclude sub-modules from processing in this ModuleSet.
//           Otherwise, it will process all sub-modules, each subject to include/exclude rules. (Since 2.2-beta-1)
typedef struct {
	bool UseAllReactorProjects;
	bool IncludeSubModules;
	Includes Includes;
	Excludes Excludes;
	ModuleSources Sources;
	ModuleBinaries Binaries;
} ModuleSet;

// ModuleBinaries is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory,
//             directly beneath the root of the archive.
typedef struct {
	char OutputDirectory;
	Includes Includes;
	Excludes Excludes;
	char FileMode;
	char DirectoryMode;
	char AttachmentClassifier;
	bool IncludeDependencies;
	DependencySets DependencySets;
	bool Unpack;
	UnpackOptions UnpackOptions;
	char OutputFileNameMapping;
} ModuleBinaries;

// ModuleSources is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
typedef struct {
	bool UseDefaultExcludes;
	char OutputDirectory;
	Includes Includes;
	Excludes Excludes;
	char FileMode;
	char DirectoryMode;
	FileSets FileSets;
	bool IncludeModuleDirectory;
	bool ExcludeSubModuleDirectories;
	char OutputDirectoryMapping;
} ModuleSources;

// FileSet is Sets the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
typedef struct {
	bool UseDefaultExcludes;
	char OutputDirectory;
	Includes Includes;
	Excludes Excludes;
	char FileMode;
	char DirectoryMode;
	char Directory;
	char LineEnding;
	bool Filtered;
} FileSet;

// FileItem is Sets whether to determine if the file is filtered.
typedef struct {
	char Source;
	char OutputDirectory;
	char DestName;
	char FileMode;
	char LineEnding;
	bool Filtered;
} FileItem;
